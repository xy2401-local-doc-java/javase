<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>JNLP API Examples</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2017-09-14T11:30:08Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Deployment Guide" />
<meta name="dcterms.identifier" content="E61695-03" />
<meta name="dcterms.isVersionOf" content="JSDPG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="jnlp-file-syntax.htm" title="Previous" type="text/html" />
<link rel="Next" href="configuring-and-monitoring-deployment.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSDPG.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSDPG.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSDPG.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>

                    <script>var w=window;if(w.performance||w.mozPerformance||w.msPerformance||w.webkitPerformance){var d=document;AKSB=w.AKSB||{},AKSB.q=AKSB.q||[],AKSB.mark=AKSB.mark||function(e,_){AKSB.q.push(["mark",e,_||(new Date).getTime()])},AKSB.measure=AKSB.measure||function(e,_,t){AKSB.q.push(["measure",e,_,t||(new Date).getTime()])},AKSB.done=AKSB.done||function(e){AKSB.q.push(["done",e])},AKSB.mark("firstbyte",(new Date).getTime()),AKSB.prof={custid:"322179",ustr:"",originlat:"0",clientrtt:"1",ghostip:"23.212.3.15",ipv6:false,pct:"10",clientip:"45.78.37.67",requestid:"2aa8e1e3",region:"32996",protocol:"",blver:14,akM:"dsca",akN:"ae",akTT:"O",akTX:"1",akTI:"2aa8e1e3",ai:"206465",ra:"false",pmgn:"",pmgi:"",pmp:"",qc:""},function(e){var _=d.createElement("script");_.async="async",_.src=e;var t=d.getElementsByTagName("script"),t=t[t.length-1];t.parentNode.insertBefore(_,t)}(("https:"===d.location.protocol?"https:":"http:")+"//ds-aksb-a.akamaihd.net/aksb.min.js")}</script>
                    <script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-1D63A4F0-B1F3-4762-8F7F-2E570ACBA75B"></a> <span id="PAGE" style="display:none;">14/17</span> <!-- End Header -->
<h1 id="JSDPG-GUID-1D63A4F0-B1F3-4762-8F7F-2E570ACBA75B" class="sect1"><span class="enumeration_chapter">8</span> JNLP API Examples</h1>
<div>
<p>The JNLP API provides additional information to the application that would otherwise not be available using the standard Java Platform Standard Edition API. For untrusted applications, the JNLP API provides methods for operations such as reading and writing files or accessing the clipboard or printers, which would otherwise be prevented by the security manager.</p>
<p>The public classes and interfaces in the JNLP API are included in the <code class="codeph">javaws.jar</code> file, which is in the <code>lib</code> directory. This JAR file must be included in the class path when compiling source files that use the JNLP API. For example on Windows:</p>
<p><code class="codeph">javac -classpath .;javaws.jar *.java</code></p>
<p>The following code examples show how the JNLP services can be used:</p>
<ul style="list-style-type: disc;">
<li><a href="jnlp-api-examples.htm#GUID-523464E3-A528-4180-B65E-B4D90DFB6B1B">Using the BasicService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-7E32BE6F-34F6-4311-A3F2-6C3D061F6329">Using the ClipboardService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-515A2923-5462-4655-8E04-F33EDC4F678E">Using the DownloadService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-23D56A5E-0105-4257-BE0B-B67D5BF61F21">Using the DownloadService2 Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-7CCFDCB3-AD7B-4EAE-B393-D7D46BED3D64">Implementing the DownloadServiceListener Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-C48D69B8-D111-4D6B-8A02-34FA3AF0A513">Using the FileOpenService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-42B9E3C5-BEF1-4E56-AB20-EEA55910D003">Using the FileSaveService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-782DE89A-ACF6-4C85-852C-6DA64970CFD5">Using the IntegrationService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-DE7D6137-C3CE-4FCA-8786-042E9ED5AFBF">Using the PrintService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-F5197CC7-7D3A-4AE7-8AED-6BB21C16153E">Using the PersistenceService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-18E926F7-177E-4FDF-B898-516953E4B764">Using FileContents</a></li>
<li><a href="jnlp-api-examples.htm#GUID-F42AFDDD-CDBD-47FB-A71E-F0E6EC6F2986">Using a JNLPRandomAccessFile</a></li>
<li><a href="jnlp-api-examples.htm#GUID-98094542-5642-4864-A13C-DE5B0D96234E">Using the SingleInstanceService Service</a></li>
<li><a href="jnlp-api-examples.htm#GUID-8AB378DC-9086-44CA-BA4F-8F7543FC8023">Using an ExtendedService Service</a></li>
</ul>
</div>
<div class="sect2"><a id="GUID-523464E3-A528-4180-B65E-B4D90DFB6B1B"></a>
<h2 id="JSDPG-GUID-523464E3-A528-4180-B65E-B4D90DFB6B1B" class="sect2">Using the BasicService Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.BasicService</span></a> service provides a set of methods for querying and interacting with the environment similar to what the <code class="codeph">AppletContext</code> provides for a Java applet.</p>
<p>The <code class="codeph">showURL</code> method uses the JNLP API to direct the default browser on the platform to show the given URL. The method returns true if the request succeeds; otherwise, it returns false.</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*;
   ...

<span class="bold"><span class="italic">   // Method to show a URL</span></span>
   boolean showURL(URL url) {
       <span class="bold">try</span> {
<span class="bold"><span class="italic">           // Lookup the javax.jnlp.BasicService object</span></span>
           BasicService bs = (BasicService)ServiceManager.lookup("javax.jnlp.BasicService");
<span class="bold"><span class="italic">           // Invoke the showDocument method</span></span>
           <span class="bold">return</span> bs.showDocument(url);
       } <span class="bold">catch</span>(UnavailableServiceException ue) {
<span class="bold"><span class="italic">           // Service is not supported</span></span>
           <span class="bold">return</span> false;
       }
    }
</pre></div>
</div>
<div class="sect2"><a id="GUID-7E32BE6F-34F6-4311-A3F2-6C3D061F6329"></a>
<h2 id="JSDPG-GUID-7E32BE6F-34F6-4311-A3F2-6C3D061F6329" class="sect2">Using the ClipboardService Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.ClipboardService</span></a> service provides methods for accessing the shared system-wide clipboard, even for applications that are running in the restricted execution environment.</p>
<p>Java Web Start will warn the user of the potential security risk of letting an untrusted application access potentially confidential information stored in the clipboard, or overwriting contents stored in the clipboard.</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp;
    ...

    <span class="bold">private</span> ClipboardService cs;

    <span class="bold">try</span> {
        cs = (ClipboardService)ServiceManager.lookup
                 ("javax.jnlp.ClipboardService");
    } <span class="bold">catch</span> (UnavailableServiceException e) {
        cs = null;
    }

    <span class="bold">if</span> (cs != null) {
        <span class="bold"><span class="italic">// set the system clipboard contents to a string selection</span></span>
        StringSelection ss = new StringSelection("Java Web Start!");
        cs.setContents(ss);
        <span class="bold"><span class="italic">// get the contents of the system clipboard and print them</span></span>
        Transferable tr = cs.getContents();
        <span class="bold">if</span> (tr.isDataFlavorSupported(DataFlavor.stringFlavor)) {
           <span class="bold">try</span> {
                String s = (String)tr.getTransferData(DataFlavor.stringFlavor);
                System.out.println("Clipboard contents: " + s);
            } <span class="bold">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }
    }
</pre></div>
</div>
<div class="sect2"><a id="GUID-515A2923-5462-4655-8E04-F33EDC4F678E"></a>
<h2 id="JSDPG-GUID-515A2923-5462-4655-8E04-F33EDC4F678E" class="sect2">Using the DownloadService Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.DownloadService</span></a> service allows an application to control how its resources are cached.</p>
<p>The service allows an application to determine which of its resources are cached, to force resources to be cached, and to remove resources from the cache.</p>
<pre dir="ltr">
import javax.jnlp.*; 
    ... 

    DownloadService ds; 

    <span class="bold">try</span> { 
        ds = (DownloadService)ServiceManager.lookup("javax.jnlp.DownloadService"); 
    } <span class="bold">catch</span> (UnavailableServiceException e) { 
        ds = null; 
    } 

    <span class="bold">if</span> (ds != null) { 

        <span class="bold">try</span> { 
            <span class="italic"><span class="bold">// determine if a particular resource is cached</span></span>
            URL url = 
                    new URL("http://www.example.com/draw.jar"); 
            boolean cached = ds.isResourceCached(url, "1.0"); 
            <span class="italic"><span class="bold">// remove the resource from the cache </span></span>
            <span class="bold">if</span> (cached) { 
                ds.removeResource(url, "1.0"); 
            } 
            <span class="italic"><span class="bold">// reload the resource into the cache </span></span>
            DownloadServiceListener dsl = ds.getDefaultProgressWindow(); 
            ds.loadResource(url, "1.0", dsl); 
        } <span class="bold">catch</span> (Exception e) { 
            e.printStackTrace(); 
        } 
    } 

</pre></div>
</div>
<div class="sect2"><a id="GUID-23D56A5E-0105-4257-BE0B-B67D5BF61F21"></a>
<h2 id="JSDPG-GUID-23D56A5E-0105-4257-BE0B-B67D5BF61F21" class="sect2">Using the DownloadService2 Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.DownloadService2</span></a> service, introduced in the Java SE 6 update 18 release, provides the following methods:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">getCachedResources</code> &ndash; Lists cached resources that match the given version, URL, and resource type.</li>
<li><code class="codeph">getUpdateAvailableResources</code> &ndash; Checks and lists resources for which updates are available. If an application uses the version download protocol, then specify a version in the <code class="codeph">DownloadService2.ResourceSpec</code>. If not, then specify a null value for the version.</li>
</ul>
<p>An instance of the <code class="codeph">DownloadService2.ResourceSpec</code> class specifies details about the resource to be checked.</p>
<pre dir="ltr">
import javax.jnlp.*;
...
DownloadService2 service = (DownloadService2)
                        ServiceManager.lookup("javax.jnlp.DownloadService2");

// create a new instance of ResourceSpec. In this example: 
// - resource is downloaded from a directory on http://foo.bar.com:8080
// - version is 2. [0-9]+
// - resource type is JAR 
ResourceSpec spec = new ResourceSpec("http://foo.bar.com:8080/.*", 2.*, service.JAR)

// returns all cached resources that match the given ResourceSpec  
ResourceSpec results[] = service.getCachedResources(spec);

// returns all resources for which an update is available on the 
// server http://foo.bar.com:8080.
results = service.getUpdateAvailableResources(spec);
</pre></div>
</div>
<div class="sect2"><a id="GUID-7CCFDCB3-AD7B-4EAE-B393-D7D46BED3D64"></a>
<h2 id="JSDPG-GUID-7CCFDCB3-AD7B-4EAE-B393-D7D46BED3D64" class="sect2">Implementing the DownloadServiceListener Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.DownloadServiceListener</span></a> service provides methods to specify a customized loading progress indicator that indicates the progress of an application's download.</p>
</div>
</div>
<div class="sect2"><a id="GUID-C48D69B8-D111-4D6B-8A02-34FA3AF0A513"></a>
<h2 id="JSDPG-GUID-C48D69B8-D111-4D6B-8A02-34FA3AF0A513" class="sect2">Using the FileOpenService Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.FileOpenService</span></a> service provides methods for importing files from the local disk, even for applications that are running in the restricted execution environment.</p>
<p>This interface is designed to provide the same type of disk access to potentially untrusted web-deployed applications that a web developer has when using HTML. HTML forms support the inclusion of files by displaying an <span class="wintitle">Open</span> dialog box.</p>
<pre dir="ltr">

<span class="bold">import</span> javax.jnlp.*; 
    ... 

    FileOpenService fos; 

    <span class="bold">try</span> { 
        fos = (FileOpenService)ServiceManager.lookup("javax.jnlp.FileOpenService"); 
    } <span class="bold">catch</span> (UnavailableServiceException e) { 
        fos = null; 
    } 

    <span class="bold">if</span> (fos != null) { 
        <span class="bold">try</span> { 
            <span class="italic"><span class="bold">// ask user to select a file through this service </span></span>
            FileContents fc = fos.openFileDialog(null, null); 
            <span class="italic"><span class="bold">// ask user to select multiple files through this service </span></span>
            FileContents[] fcs = fos.openMultiFileDialog(null, null); 
        } <span class="bold">catch</span> (Exception e) { 
            e.printStackTrace(); 
        } 
    } 

</pre></div>
</div>
<div class="sect2"><a id="GUID-42B9E3C5-BEF1-4E56-AB20-EEA55910D003"></a>
<h2 id="JSDPG-GUID-42B9E3C5-BEF1-4E56-AB20-EEA55910D003" class="sect2">Using the FileSaveService Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.FileSaveService</span></a> service provides methods for exporting files to the local disk, even for applications that are running in the restricted execution environment.</p>
<p>This interface is designed to provide the same level of disk access to potentially untrusted web-deployed applications that a web browser provides for contents that it is displaying.&nbsp; Most browsers provide a <span class="wintitle">Save As</span> dialog box as part of their user interface.</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*; 
    ... 

    FileSaveService fss; 
    FileOpenService fos; 

    <span class="bold">try</span> { 
        fos = (FileOpenService)ServiceManager.lookup("javax.jnlp.FileOpenService"); 
        fss = (FileSaveService)ServiceManager.lookup 
                                   ("javax.jnlp.FileSaveService"); 
    } <span class="bold">catch</span> (UnavailableServiceException e) { 
        fss = null; 
        fos = null; 
    } 

    <span class="bold">if</span> (fss != null &amp;&amp; fos != null) { 
        <span class="bold">try</span> { 
            <span class="italic"><span class="bold">// get a file with FileOpenService </span></span>
            FileContents fc = fos.openFileDialog(null, null); 
            <span class="italic"><span class="bold">// one way to save a file </span></span>
            FileContents newfc = fss.saveFileDialog(null, null, 
            fc.getInputStream(), "newFileName.txt"); 
            <span class="italic"><span class="bold">// another way to save a file </span></span>
            FileContents newfc2 = fss.saveAsFileDialog(null, null, fc); 

        } <span class="bold">catch</span> (Exception e) { 
            e.printStackTrace(); 
        } 
    } 

</pre>
<p>Also see <a href="jnlp-api-examples.htm#GUID-18E926F7-177E-4FDF-B898-516953E4B764">Using <code class="codeph">FileContents</code></a>.</p>
</div>
</div>
<div class="sect2"><a id="GUID-782DE89A-ACF6-4C85-852C-6DA64970CFD5"></a>
<h2 id="JSDPG-GUID-782DE89A-ACF6-4C85-852C-6DA64970CFD5" class="sect2">Using the IntegrationService Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.IntegrationService</span></a> service provides methods for programmatic management of shortcuts. By using this service, an application can perform the following operations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Create a desktop shortcut</p>
</li>
<li>
<p>Create a menu shortcut</p>
</li>
<li>
<p>Query and delete shortcuts</p>
</li>
<li>
<p>Create, query, and delete associations of an application with a MIME type or file extensions.</p>
</li>
</ul>
<pre dir="ltr">
import javax.jnlp.*;
...

IntegrationService is = null;
try {
    is = (IntegrationService) ServiceManager.lookup("javax.jnlp.IntegrationService");
} catch(UnavailableServiceException use){
    ...
}

// creates a desktop and system menu shortcut; returns true if the shortcuts 
// were created successfully
boolean result = is.requestShortcut(true, true, null);

//removes all shortcuts for application
result = is.removeShortcuts();

// checks to see if there are shortcuts for the application
result = is.hasMenuShortcut() &amp;&amp; is.hasDesktopShortcut());

// associates the application with the specified mime-type and file extensions
String mime = "x-application/aaa";
String [] exts = {"aaa", "abc"};
result = is.requestAssociation(mime, exts);

// checks if the application is associated with the specified mime-type and file extensions
result = is.hasAssociation(mime, exts);

// removes association between the application and the specified mime-type and file extensions
is.removeAssociation(mime, exts);
</pre></div>
</div>
<div class="sect2"><a id="GUID-DE7D6137-C3CE-4FCA-8786-042E9ED5AFBF"></a>
<h2 id="JSDPG-GUID-DE7D6137-C3CE-4FCA-8786-042E9ED5AFBF" class="sect2">Using the PrintService Service</h2>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.PrintService</span></a> service provides methods for access to printing, even for applications that are running in the restricted execution environment.</p>
<p>Using this service, an application can submit a print job. Java Web Start then shows this request to the user and, if accepted, queues the request to the printer.</p>
<p>Starting in Java Web Start 5.0, you can directly use the Java Printing APIs, and Java Web Start pops up a security dialog box that asks the user to grant <code class="codeph">PrintPermission</code> if the application is running in a sandbox. There is no need to use the JNLP Printing APIs anymore. You can have full access to the Java Printing APIs in any JNLP application.</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*; 
    ... 

    PrintService ps; 

    <span class="bold">try</span> { 
        ps = (PrintService)ServiceManager.lookup("javax.jnlp.PrintService"); 
    } <span class="bold">catch</span> (UnavailableServiceException e) { 
        ps = null; 
    } 

    <span class="bold">if</span> (ps != null) { 
        <span class="bold">try</span> { 
             
            <span class="italic"><span class="bold">// get the default PageFormat</span></span>
            PageFormat pf = ps.getDefaultPage(); 

            <span class="italic"><span class="bold">// ask the user to customize the PageFormat</span></span>
            PageFormat newPf = ps.showPageFormatDialog(pf); 

            <span class="italic"><span class="bold">// print the document with the PageFormat above</span></span>
            ps.print(new DocToPrint()); 
           
        } <span class="bold">catch</span> (Exception e) { 
            e.printStackTrace(); 
        } 
    } 

    <span class="italic"><span class="bold">// Code to construct the Printable Document</span></span>
    <span class="bold">class</span> DocToPrint <span class="bold">implements</span> Printable {
        <span class="bold">public</span> int print(Graphics g, PageFormat pageformat, int PageIndex){
            <span class="italic"><span class="bold">// code to generate what you want to print</span></span>   
        }
    }

</pre></div>
</div>
<div class="sect2"><a id="GUID-F5197CC7-7D3A-4AE7-8AED-6BB21C16153E"></a>
<h2 id="JSDPG-GUID-F5197CC7-7D3A-4AE7-8AED-6BB21C16153E" class="sect2">Using the PersistenceService Service</h2>
<div>
<p>The&nbsp; <a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.PersistenceService</span></a> service provides methods for storing data locally on the client system, even for applications that are running in the restricted execution environment.</p>
<p>The service is designed to be similar to that which the cookie mechanism provides to HTML-based applications. Cookies allow a small amount of data to be stored locally on the client system.&nbsp;That data can be securely managed by the browser and can only be retrieved by HTML pages that originate from the same URL as the page that stored the data.</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*; 
    ... 

    PersistenceService ps; 
    BasicService bs; 

    <span class="bold">try</span> { 
        ps = (PersistenceService)ServiceManager.lookup("javax.jnlp.PersistenceService"); 
        bs = (BasicService)ServiceManager.lookup("javax.jnlp.BasicService"); 
    } <span class="bold">catch</span> (UnavailableServiceException e) { 
        ps = null; 
        bs = null; 
    } 

    <span class="bold">if</span> (ps != null &amp;&amp; bs != null) { 

        <span class="bold">try</span> { 
            <span class="italic"><span class="bold">// find all the muffins for our URL</span></span>
            URL codebase = bs.getCodeBase(); 
            String [] muffins = ps.getNames(url); 

            <span class="italic"><span class="bold">// get the attributes (tags) for each of these muffins. 
            // update the server's copy of the data if any muffins 
            // are dirty </span></span>
            int [] tags = new int[muffins.length]; 
            URL [] muffinURLs = new URL[muffins.length]; 
            <span class="bold">for</span> (int i = 0; i &lt; muffins.length; i++) { 
                muffinURLs[i] = new URL(codebase.toString() + muffins[i]); 
                tags[i] = ps.getTag(muffinURLs[i]); 
                <span class="italic"><span class="bold">// update the server if anything is tagged DIRTY </span></span>
                <span class="bold">if</span> (tags[i] == PersistenceService.DIRTY) { 
                    doUpdateServer(muffinURLs[i]); 
                } 
            } 

            <span class="italic"><span class="bold">// read in the contents of a muffin and then delete it </span></span>
            FileContents fc = ps.get(muffinURLs[0]); 
            long maxsize = fc.getMaxLength(); 
            byte [] buf = new byte[fc.getLength()]; 
            InputStream is = fc.getInputStream(); 
            long pos = 0; 
            <span class="bold">while</span>((pos = is.read(buf, pos, buf.length - pos)) &gt; 0) { 
                <span class="italic"><span class="bold">// just loop </span></span>
            } 
            is.close(); 

            ps.delete(muffinURLs[0]); 

            <span class="italic"><span class="bold">// re-create the muffin and repopulate its data </span></span>
            ps.create(muffinURLs[0], maxsize); 
            fc = ps.get(muffinURLs[0]); 
            <span class="italic"><span class="bold">// don't append </span></span>
            OutputStream os = fc.getOutputStream(false); 
            os.write(buf); 
            os.close(); 

        } <span class="bold">catch</span> (Exception e) { 
            e.printStackTrace(); 
        } 
    } 

   <span class="bold">void</span> doUpdateServer(URL url) { 
        <span class="italic"><span class="bold">// update the server's copy of the persistent data 
        // represented by the given URL </span></span>
        ... 
        ps.setTag(url, PersistenceService.CACHED); 
   } 

</pre></div>
</div>
<div class="sect2"><a id="GUID-18E926F7-177E-4FDF-B898-516953E4B764"></a>
<h2 id="JSDPG-GUID-18E926F7-177E-4FDF-B898-516953E4B764" class="sect2">Using FileContents</h2>
<div>
<p><code class="codeph"><a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.FileContents</span></a></code> objects encapsulate the name and contents of a file.&nbsp;An object of this class is used by the <code class="codeph">FileOpenService</code>, <code class="codeph">FileSaveService</code>, and <code class="codeph">PersistenceService</code>. Here is an example of how an instance of <code class="codeph">FileContents</code> can be used to read from and write to a file:</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*; 
    ... 

    FileOpenService fos; 

    <span class="italic"><span class="bold">//Initialize fos (see Using the FileOpenService Service example) </span></span>
    ... 

    <span class="bold">if</span> (fos != null) { 

        <span class="bold">try</span> { 

            <span class="italic"><span class="bold">// get a FileContents object to work with from the 
            // FileOpenService </span></span>
            FileContents fc = fos.openFileDialog(null, null); 

            <span class="italic"><span class="bold">// get the InputStream from the file and read a few bytes </span></span>
            byte [] buf = new byte[fc.getLength()]; 
            InputStream is = fc.getInputStream(); 
            int pos = 0; 
            <span class="bold">while</span> ((pos = is.read(buf, pos, buf.length - pos)) &gt; 0) { 
                <span class="italic"><span class="bold">// just loop </span></span>
            } 
            is.close(); 

            <span class="italic"><span class="bold">// get the OutputStream and write the file back out </span></span>
            <span class="bold">if</span> (fc.canWrite()) { 
               <span class="italic"><span class="bold">// don't append </span></span>
               OutputStream os = fc.getOutputStream(false); 
               os.write(buf); 
            } 

        } <span class="bold">catch</span> (Exception e) { 
            e.printStackTrace(); 
        } 
    } 

</pre></div>
</div>
<div class="sect2"><a id="GUID-F42AFDDD-CDBD-47FB-A71E-F0E6EC6F2986"></a>
<h2 id="JSDPG-GUID-F42AFDDD-CDBD-47FB-A71E-F0E6EC6F2986" class="sect2">Using a JNLPRandomAccessFile</h2>
<div>
<p>Instances of <code class="codeph"><a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.JNLPRandomAccessFile</span></a></code> support both reading and writing to a random access file.&nbsp; A random access file behaves like a large array of bytes stored in the file system.&nbsp; Here is an example of how an instance of a <code class="codeph">JNLPRandomAccessFile</code> can be used to write to a random access file:</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*; 
    ... 

    FileOpenService fos; 

    <span class="italic"><span class="bold">//Initialize fos (see Using the FileOpenService Service example) </span></span>
    ... 

    <span class="bold">if</span> (fos != null) { 
        <span class="bold">try</span> { 
           <span class="italic"><span class="bold">// ask the user to choose a file to open </span></span>
           FileContents fc = fos.openFileDialog(null, null); 

           <span class="italic"><span class="bold">// attempt to increase the maximum file length </span></span>
           long grantedLength = fc.getLength(); 
           <span class="bold">if</span> (grantedLength + 1024 &gt; fc.getMaxLength()) { 
               <span class="italic"><span class="bold">// attempt to increase the maximum file size defined by 
               // the client </span></span>
               grantedLength = fc.setMaxLength(grantedLength + 1024); 
           } 

           <span class="italic"><span class="bold">// if we were able to increase the maximum allowable file size, 
           // get a JNLPRandomAccessFile representation of the file, and 
           // write to it </span></span>
           <span class="bold">if</span> (fc.getMaxSize() &gt; fc.getLength() &amp;&amp; fc.canWrite()) { 
               JNLPRandomAccessFile raf = fc.getRandomAccessFile("rw"); 
               raf.seek(raf.length() - 1); 
               raf.writeUTF("Java Web Start!"); 
               raf.close(); 
           } 
        } <span class="bold">catch</span> (Exception e) { 
            e.printStackTrace(); 
        } 
    } 

</pre></div>
</div>
<div class="sect2"><a id="GUID-98094542-5642-4864-A13C-DE5B0D96234E"></a>
<h2 id="JSDPG-GUID-98094542-5642-4864-A13C-DE5B0D96234E" class="sect2">Using the SingleInstanceService Service</h2>
<div>
<p>The <code class="codeph"><a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.SingleInstanceService</span></a></code> provides a set of methods for applications to register themselves as singletons, and to register listeners for handling arguments passed in from different instances of applications.</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*; 
    ... 

    SingleInstanceService sis; 

    ... 

    <span class="bold">try</span> { 
        sis = 
(SingleInstanceService)ServiceManager.lookup("javax.jnlp.SingleInstanceService");
    } <span class="bold">catch</span> (UnavailableServiceException e) { sis=null; }

    ...

    <span class="italic"><span class="bold">
    // Register the single instance listener at the start of your application
    </span></span>
    SISListener sisL = new SISListener();
    sis.addSingleInstanceListener(sisL);

    ...
    
    <span class="italic"><span class="bold">
    // Remember to remove the listener before your application exits
    </span></span>
    sis.removeSingleInstanceListener(sisL);
    System.exit(0);

    <span class="italic"><span class="bold">
    // Implement the SingleInstanceListener for your application
    </span></span>
    <span class="bold">class</span> SISListener <span class="bold">implements</span> SingleInstanceListener {
        <span class="bold">public void</span> newActivation(String[] params) {
            <span class="italic"><span class="bold">
            // your code to handle the new arguments here
            </span></span>
            ...
        }
    }

</pre></div>
</div>
<div class="sect2"><a id="GUID-8AB378DC-9086-44CA-BA4F-8F7543FC8023"></a>
<h2 id="JSDPG-GUID-8AB378DC-9086-44CA-BA4F-8F7543FC8023" class="sect2">Using an ExtendedService Service</h2>
<div>
<p>The <code class="codeph"><a href="http://docs.oracle.com/javase/9/docs/api/javax/jnlp/package-summary.html" target="_blank"><span class="apiname">javax.jnlp.ExtendedService</span></a></code> provides additional support to the current JNLP API. It allows applications to open specific files in the client's file system.</p>
<pre dir="ltr">
<span class="bold">import</span> javax.jnlp.*; 
    ... 

    ExtendedService es; 

    ... 

    <span class="bold">try</span> { 
        es = 
(ExtendedService)ServiceManager.lookup("javax.jnlp.ExtendedService");
    } <span class="bold">catch</span> (UnavailableServiceException e) { es=null; }

    ...

    <span class="italic"><span class="bold">
    // Open a specific file in the local machine
    </span></span>
    File a = new File("c:\somefile.txt");

    ...
    
    <span class="italic"><span class="bold">
    // Java Web Start will pop up a dialog asking the user to grant permission
    // to read/write the file c:\somefile.txt
    </span></span>
    FileContents fc_a = es.openFile(a);

    <span class="italic"><span class="bold">
    // You can now use the FileContents object to read/write the file
    </span></span>
    ...

    <span class="italic"><span class="bold">
    // Open a specific set of files in the local machine
    </span></span>
    File[2] fArray = new File[2];
    
    fArray[0] = a;
    fArray[1] = new File("c:\anotherFile.txt");

    <span class="italic"><span class="bold">
    // Java Web Start will pop up a dialog asking the user to grant permission
    // to read/write files in fArray
    </span></span>
    FileContents[] fc_Array = es.OpenFiles(fArray);

    <span class="italic"><span class="bold">
    // You can now read/write the set of files in fc_Array using the
    // FileContents objects
    </span></span>
    }

</pre>
<p>For detailed information about using the <code class="codeph">javaws</code> command, see <a class="olink JSWOR728" target="_blank" href="../tools/javaws.htm#JSWOR728"><code class="codeph">javaws</code></a> in the <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment387">
<tr>
<td class="cellalignment394">
<table class="cellalignment392">
<tr>
<td class="cellalignment391"><a href="jnlp-file-syntax.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment391"><a href="configuring-and-monitoring-deployment.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment396">
<table class="cellalignment390">
<tr>
<td class="cellalignment391"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment391"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment391"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
