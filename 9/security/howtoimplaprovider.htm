<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>How to Implement a Provider in the Java Cryptography Architecture</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This document describes what you need to do in order to integrate your provider into Java SE so that algorithms and other services can be found when Java Security API clients request them." />
<meta name="dcterms.created" content="2017-10-12T19:32:24Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E68624-04" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="java-cryptography-architecture-jca-reference-guide.htm" title="Previous" type="text/html" />
<link rel="Next" href="oracleproviders.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSSEC.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSSEC.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C485394F-08C9-4D35-A245-1B82CDDBC031"></a> <span id="PAGE" style="display:none;">11/28</span> <!-- End Header -->
<h1 id="JSSEC-GUID-C485394F-08C9-4D35-A245-1B82CDDBC031" class="sect1"><span class="enumeration_chapter">3</span> How to Implement a Provider in the Java Cryptography Architecture</h1>
<div>
<p>This document describes what you need to do in order to integrate your provider into Java SE so that algorithms and other services can be found when Java Security API clients request them.</p>
</div>
<div class="sect2"><a id="GUID-75AFEAAB-BDEE-4857-9637-9D72D6C42DED"></a>
<h2 id="JSSEC-GUID-75AFEAAB-BDEE-4857-9637-9D72D6C42DED" class="sect2">Who Should Read This Document</h2>
<div>
<p>Programmers that only need to use the Java Security APIs (see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-5C9A28FC-8B6B-45BA-8A71-6BEEA34EC27F" title="The following are the core classes and interfaces provided in the JCA.">Core Classes and Interfaces</a> in <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-2BCFDD85-D533-4E6C-8CE9-29990DEB0190" title='The Java Cryptography Architecture (JCA) is a major piece of the platform, and contains a "provider" architecture and a set of APIs for digital signatures, message digests (hashes), certificates and certificate validation, encryption (symmetric/asymmetric block/stream ciphers), key generation and management, and secure random number generation, to name a few.'>Java Cryptography Architecture (JCA) Reference Guide</a>) to access existing cryptography algorithms and other services do <span class="variable">not</span> need to read this document.</p>
<p>This document is intended for experienced programmers wishing to create their own provider packages supplying cryptographic service implementations. It documents what you need to do in order to integrate your provider into Java so that your algorithms and other services can be found when Java Security API clients request them.</p>
</div>
</div>
<div class="sect2"><a id="GUID-2D03228D-7B79-44F8-9D24-A3DCF71B12E4"></a>
<h2 id="JSSEC-GUID-2D03228D-7B79-44F8-9D24-A3DCF71B12E4" class="sect2">Notes on Terminology</h2>
<div>
<p>Throughout this document, the terms <span class="variable">JCA</span> by itself refers to the JCA framework. Whenever this document notes a specific JCA provider, it will be referred to explicitly by the provider name.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>Prior to JDK 1.4, the JCE was an unbundled product, and as such, the JCA and JCE were regularly referred to as separate, distinct components. As JCE is now bundled in JDK, the distinction is becoming less apparent. Since the JCE uses the same architecture as the JCA, the JCE should be more properly thought of as a subset of the JCA.</li>
<li>The JCA within the JDK includes two software components:
<ul style="list-style-type: disc;">
<li>the framework that defines and supports cryptographic services for which providers supply implementations. This framework includes packages such as <code class="codeph">java.security</code>, <code class="codeph">javax.crypto</code>, <code class="codeph">javax.crypto.spec</code>, and <code class="codeph">javax.crypto.interfaces</code>.</li>
<li>the actual providers such as <span class="variable">Sun</span>, <span class="variable">SunRsaSign</span>, <span class="variable">SunJCE</span>, which contain the actual cryptographic implementations.</li>
</ul>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-42A646A7-E42A-4DA4-A84E-F4862510E3E8"></a>
<h2 id="JSSEC-GUID-42A646A7-E42A-4DA4-A84E-F4862510E3E8" class="sect2">Introduction to Implementing Providers</h2>
<div>
<p>The Java platform defines a set of APIs spanning major security areas, including cryptography, public key infrastructure, authentication, secure communication, and access control. These APIs allow developers to easily integrate security into their application code. They were designed around the following principles:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Implementation independence</span>: Applications do not need to implement security themselves. Rather, they can request security services from the Java platform. Security services are implemented in providers (see below), which are plugged into the Java platform via a standard interface. An application may rely on multiple independent providers for security functionality.</p>
</li>
<li>
<p><span class="bold">Implementation interoperability</span>: Providers are interoperable across applications. Specifically, an application is not bound to a specific provider, and a provider is not bound to a specific application.</p>
</li>
<li>
<p><span class="bold">Algorithm extensibility</span>: The Java platform includes a number of built-in providers that implement a basic set of security services that are widely used today. However, some applications may rely on emerging standards not yet implemented, or on proprietary services. The Java platform supports the installation of custom providers that implement such services.</p>
</li>
</ul>
<p>A Cryptographic Service Provider (provider) refers to a package (or a set of packages) that supply a concrete implementation of a subset of the cryptography aspects of the JDK Security API.</p>
<p>The <span class="apiname">java.security.Provider</span> class encapsulates the notion of a security provider in the Java platform. It specifies the provider's name and lists the security services it implements. Multiple providers may be configured at the same time, and are listed in order of preference. When a security service is requested, the highest priority provider that implements that service is selected. See <a href="java-security-overview1.htm#GUID-74E1EFEA-F1DD-466C-B61A-CB5E89FA50DE" title="The java.security.Provider class encapsulates the notion of a security provider in the Java platform. It specifies the provider's name and lists the security services it implements. Multiple providers may be configured at the same time and are listed in order of preference. When a security service is requested, the highest priority provider that implements that service is selected.">Security Providers</a>, which illustrates how a provider selects a requested security service.</p>
</div>
</div>
<div class="sect2"><a id="GUID-B35E3749-0A12-42C3-BA0B-C444D7E140BB"></a>
<h2 id="JSSEC-GUID-B35E3749-0A12-42C3-BA0B-C444D7E140BB" class="sect2">Engine Classes and Corresponding Service Provider Interface Classes</h2>
<div>
<p>An engine class defines a cryptographic service in an abstract fashion (without a concrete implementation). A cryptographic service is always associated with a particular algorithm or type.</p>
<p>A <span class="variable">cryptographic service</span> either provides cryptographic operations (like those for digital signatures or message digests, ciphers or key agreement protocols); generates or supplies the cryptographic material (keys or parameters) required for cryptographic operations; or generates data objects (keystores or certificates) that encapsulate cryptographic keys (which can be used in a cryptographic operation) in a secure fashion.</p>
<p>For example, here are four engine classes:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Signature</code> class provides access to the functionality of a digital signature algorithm.</li>
<li>A DSA <code class="codeph">KeyFactory</code> class supplies a DSA private or public key (from its encoding or transparent specification) in a format usable by the initSign or initVerify methods, respectively, of a DSA Signature object.</li>
<li><code class="codeph">Cipher</code> class provides access to the functionality of an encryption algorithm (such as AES)</li>
<li><code class="codeph">KeyAgreement</code> class provides access to the functionality of a key agreement protocol (such as Diffie-Hellman)</li>
</ul>
<p>The Java Cryptography Architecture encompasses the classes comprising the Security package that relate to cryptography, including the engine classes. Users of the API request and utilize instances of the engine classes to carry out corresponding operations. The JDK defines the following engine classes:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">MessageDigest</code> - used to calculate the message digest (hash) of specified data.</li>
<li><code class="codeph">Signature</code> - used to sign data and verify digital signatures.</li>
<li><code class="codeph">KeyPairGenerator</code> - used to generate a pair of public and private keys suitable for a specified algorithm.</li>
<li><code class="codeph">KeyFactory</code> - used to convert opaque cryptographic keys of type <code class="codeph">Key</code> into <span class="variable">key specifications</span> (transparent representations of the underlying key material), and vice versa.</li>
<li><code class="codeph">KeyStore</code> - used to create and manage a <span class="variable">keystore</span>. A keystore is a database of keys. Private keys in a keystore have a certificate chain associated with them, which authenticates the corresponding public key. A keystore also contains certificates from trusted entities.</li>
<li><code class="codeph">CertificateFactory</code> - used to create public key certificates and Certificate Revocation Lists (CRLs).</li>
<li><code class="codeph">AlgorithmParameters</code> - used to manage the parameters for a particular algorithm, including parameter encoding and decoding.</li>
<li><code class="codeph">AlgorithmParameterGenerator</code> - used to generate a set of parameters suitable for a specified algorithm.</li>
<li><code class="codeph">SecureRandom</code> - used to generate random or pseudo-random numbers.</li>
<li><code class="codeph">Cipher</code> - used to encrypt or decrypt some specified data.</li>
<li><code class="codeph">KeyAgreement</code> - used to execute a key agreement (key exchange) protocol between 2 or more parties.</li>
<li><code class="codeph">KeyGenerator</code> - used to generate a secret (symmetric) key suitable for a specified algorithm.</li>
<li><code class="codeph">Mac</code>: used to compute the <span class="variable">message authentication code</span> of some specified data.</li>
<li><code class="codeph">SecretKeyFactory</code> - used to convert opaque cryptographic keys of type <code class="codeph">SecretKey</code> into <span class="variable">key specifications</span> (transparent representations of the underlying key material), and vice versa.</li>
<li><code class="codeph">CertPathBuilder</code> - used to create public key certificates and Certificate Revocation Lists (CRLs).</li>
<li><code class="codeph">CertPathValidator</code> - used to validate certificate chains.</li>
<li><code class="codeph">CertStore</code> - used to retrieve Certificates and CRLs from a repository.</li>
<li><code class="codeph">ExemptionMechanism</code> - used to provide the functionality of an exemption mechanism such as <span class="variable">key recovery</span>, <span class="variable">key weakening</span>, <span class="variable">key escrow</span>, or any other (custom) exemption mechanism. Applications or applets that use an exemption mechanism may be granted stronger encryption capabilities than those which don't. However, please note that cryptographic restrictions are no longer required for most countries, and thus exemption mechanisms may only be useful in those few countries whose governments mandate restrictions.</li>
</ul>
<div class="infobox-note" id="GUID-B35E3749-0A12-42C3-BA0B-C444D7E140BB__GUID-4ADAF14D-B1E3-451D-9708-F21608DCC42A">
<p class="notep1">Note:</p>
A <span class="variable">generator</span> creates objects with brand-new contents, whereas a <span class="variable">factory</span> creates objects from existing material (for example, an encoding).</div>
<p>An <span class="variable">engine</span> class provides the interface to the functionality of a specific type of cryptographic service (independent of a particular cryptographic algorithm). It defines <span class="variable">Application Programming Interface</span> (API) methods that allow applications to access the specific type of cryptographic service it provides. The actual implementations (from one or more providers) are those for specific algorithms. For example, the Signature engine class provides access to the functionality of a digital signature algorithm. The actual implementation supplied in a <code class="codeph">SignatureSpi</code> subclass (see next paragraph) would be that for a specific kind of signature algorithm, such as SHA256withDSA or SHA512withRSA.</p>
<p>The application interfaces supplied by an engine class are implemented in terms of a <span class="bold">Service Provider Interface (SPI)</span>. That is, for each engine class, there is a corresponding abstract SPI class, which defines the Service Provider Interface methods that cryptographic service providers must implement.</p>
<div class="figure" id="GUID-B35E3749-0A12-42C3-BA0B-C444D7E140BB__GUID-FD9BD684-1D1B-4621-A7A1-4732D79AB756">
<p class="titleinfigure">Figure 3-1 Engine Classes</p>
<img width="216" height="349" src="img/architecture-service-provider-interface.gif" alt="Description of Figure 3-1 follows" title="Description of Figure 3-1 follows" /><br />
<a href="img_text/architecture-service-provider-interface.htm">Description of "Figure 3-1 Engine Classes"</a></div>
<!-- class="figure" -->
<p>An instance of an engine class, the "API object", encapsulates (as a private field) an instance of the corresponding SPI class, the "SPI object". All API methods of an API object are declared "final", and their implementations invoke the corresponding SPI methods of the encapsulated SPI object. An instance of an engine class (and of its corresponding SPI class) is created by a call to the <span class="apiname">getInstance</span> factory method of the engine class.</p>
<p>The name of each SPI class is the same as that of the corresponding engine class, followed by "Spi". For example, the SPI class corresponding to the Signature engine class is the <code class="codeph">SignatureSpi</code> class.</p>
<p>Each SPI class is abstract. To supply the implementation of a particular type of service and for a specific algorithm, a provider must subclass the corresponding SPI class and provide implementations for all the abstract methods.</p>
<p>Another example of an engine class is the <code class="codeph">MessageDigest</code> class, which provides access to a message digest algorithm. Its implementations, in <code class="codeph">MessageDigestSpi</code> subclasses, may be those of various message digest algorithms such as SHA256 or SHA384.</p>
<p>As a final example, the <code class="codeph">KeyFactory</code> engine class supports the conversion from opaque keys to transparent key specifications, and vice versa. See <a href="howtoimplaprovider.htm#GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6" title="A key factory provides bi-directional conversions between opaque keys (of type Key) and key specifications. If you implement a key factory, you thus need to understand and utilize key specifications. In some cases, you also need to implement your own key specifications.">Key Specification Interfaces and Classes Required by Key Factories</a>. The actual implementation supplied in a <code class="codeph">KeyFactorySpi</code> subclass would be that for a specific type of keys, e.g., DSA public and private keys.</p>
</div>
</div>
<div class="sect2"><a id="GUID-CC161921-EBD2-48C6-B543-A956658B68B6"></a>
<h2 id="JSSEC-GUID-CC161921-EBD2-48C6-B543-A956658B68B6" class="sect2">Steps to Implement and Integrate a Provider</h2>
<div>
<p>Follow these steps to implement a provider and integrate it into the JCA framework:</p>
<ul style="list-style-type: disc;">
<li><a href="howtoimplaprovider.htm#GUID-1D2FDA77-743C-47CB-9CCB-2585FEC0607A" title="When instantiating a provider's implementation (class) of a Cipher, KeyAgreement, KeyGenerator, MAC, or SecretKey factory, the framework will determine the provider's codebase (JAR file) and verify its signature. In this way, JCA authenticates the provider and ensures that only providers signed by a trusted entity can be plugged into the JCA. Thus, one requirement for encryption providers is that they must be signed, as described in later steps.">Step 1: Write your Service Implementation Code</a></li>
<li><a href="howtoimplaprovider.htm#GUID-7241AB0C-71DC-408C-8726-B8E0225DDBCE">Step 2: Give your Provider a Name</a></li>
<li><a href="howtoimplaprovider.htm#GUID-1C82EDB9-96CA-44AB-8590-E299814D6A46" title="Create a subclass of the java.security.Provider class. This is essentially a lookup table that advertises the algorithms that your provider implements.">Step 3: Write Your Master Class, a Subclass of Provider</a></li>
<li><a href="howtoimplaprovider.htm#GUID-7C304A79-6D0B-438B-A02E-51648C909876" title="This step is optional but recommended; it enables you to package your provider in a named module. A modular JDK can then locate your provider in the module path as opposed to the class path. The module system can more thoroughly check for dependencies in modules in the module path. Note that you can use named modules in a non-modular JDK; the module declaration will be ignored. Also, you can still package your providers in unnamed or automatic modules.">Step 4: Create a Module Declaration for Your Provider</a></li>
<li><a href="howtoimplaprovider.htm#GUID-83742677-6E39-4A8D-BF0F-BC743E3AE43C">Step 5: Compile Your Code</a></li>
<li><a href="howtoimplaprovider.htm#GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F">Step 6: Place Your Provider in a JAR File</a></li>
<li><a href="howtoimplaprovider.htm#GUID-2D4432F9-1C3C-4A91-8612-2B2840188B36">Step 7: Sign Your JAR File, If Necessary</a></li>
<li><a href="howtoimplaprovider.htm#GUID-FB9C6DB2-DE9A-4EFE-89B4-C2C168C5982D" title="The next steps describe how to install and configure your new provider so that it is available via the JCA.">Step 8: Prepare for Testing</a></li>
<li><a href="howtoimplaprovider.htm#GUID-C6054169-FE6E-4837-B2BD-382DFEB955C0" title="Write and compile one or more test programs that test your provider's incorporation into the Security API as well as the correctness of its algorithm(s). Create any supporting files needed, such as those for test data to be encrypted.">Step 9: Write and Compile Your Test Programs</a></li>
<li><a href="howtoimplaprovider.htm#GUID-3FD26072-6982-4DCE-932C-DE152C463992" title="When you run your test applications, the required java command options will vary depending on factors such as whether you packaged your provider as a named, automatic, or unnamed module and if you configured it so that the ServiceLoader class can search for it.">Step 10: Run Your Test Programs</a></li>
<li><a href="howtoimplaprovider.htm#GUID-A62916EE-BE09-4229-9D05-3D6AF303CA4E" title="All U.S. vendors whose providers may be exported outside the U.S. should apply to the Bureau of Industry and Security in the U.S. Department of Commerce for export approval.">Step 11: Apply for U.S. Government Export Approval If Required</a></li>
<li><a href="howtoimplaprovider.htm#GUID-912FAB1D-628A-47EA-A1DD-A216F2DD4245">Step 12: Document Your Provider and Its Supported Services</a></li>
<li><a href="howtoimplaprovider.htm#GUID-3521E2A8-93B5-4D0F-AE2D-DC1B5E6857B7" title="After writing, configuring, testing, installing and documenting your provider software, make documentation available to your customers.">Step 13: Make Your Class Files and Documentation Available to Clients</a></li>
</ul>
</div>
<div class="sect3"><a id="GUID-1D2FDA77-743C-47CB-9CCB-2585FEC0607A"></a>
<h3 id="JSSEC-GUID-1D2FDA77-743C-47CB-9CCB-2585FEC0607A" class="sect3">Step 1: Write your Service Implementation Code</h3>
<div>
<div class="section">
<p>The first thing you need to do is to write the code that provides algorithm-specific implementations of the cryptographic services you want to support. Your provider may supply implementations of cryptographic services already available in one or more of the security components of the JDK.</p>
<p>For cryptographic services not defined in JCA (for example, signatures and message digests), see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-A7EEDE25-C4C0-4C28-94EA-262858AE9212" title="An engine class provides the interface to a specific type of cryptographic service, independent of a particular cryptographic algorithm or provider.">Engine Classes and Algorithms</a>.</p>
<p>For each cryptographic service you wish to implement, create a subclass of the appropriate SPI class. JCA defines the following engine classes:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">SignatureSpi</code></li>
<li><code class="codeph">MessageDigestSpi</code></li>
<li><code class="codeph">KeyPairGeneratorSpi</code></li>
<li><code class="codeph">SecureRandomSpi</code></li>
<li><code class="codeph">AlgorithmParameterGeneratorSpi</code></li>
<li><code class="codeph">AlgorithmParametersSpi</code></li>
<li><code class="codeph">KeyFactorySpi</code></li>
<li><code class="codeph">CertificateFactorySpi</code></li>
<li><code class="codeph">KeyStoreSpi</code></li>
<li><code class="codeph">CipherSpi</code></li>
<li><code class="codeph">KeyAgreementSpi</code></li>
<li><code class="codeph">KeyGeneratorSpi</code></li>
<li><code class="codeph">MacSpi</code></li>
<li><code class="codeph">SecretKeyFactorySpi</code></li>
<li><code class="codeph">ExemptionMechanismSpi</code></li>
</ul>
<p>To know more about the JCA and other cryptographic classes, see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-A7EEDE25-C4C0-4C28-94EA-262858AE9212" title="An engine class provides the interface to a specific type of cryptographic service, independent of a particular cryptographic algorithm or provider.">Engine Classes and Corresponding Service Provider Interface Classes</a>.</p>
<p>In the subclass, you need to:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Supply implementations for the abstract methods, whose names usually begin with <code class="codeph">engine</code>. See <a href="howtoimplaprovider.htm#GUID-C8B79D46-6EA9-4E27-8083-7CB967732BB3" title="This section provides additional information about alias names, service interdependencies, algorithm parameter generators and algorithm parameters.">Further Implementation Details and Requirements</a>.</span></li>
<li><span>Depending on how you write your provider and register its algorithms (using either <span class="apiname">String</span> objects or the <span class="apiname">Provider.Service</span> class), the provider either:</span>
<ul>
<li>Ensure that there is a public constructor without any arguments. Here's why: When one of your services is requested, Java Security looks up the subclass implementing that service, as specified by a property in your "master class" (see <a href="howtoimplaprovider.htm#GUID-1C82EDB9-96CA-44AB-8590-E299814D6A46" title="Create a subclass of the java.security.Provider class. This is essentially a lookup table that advertises the algorithms that your provider implements.">Step 3: Write Your Master Class, a Subclass of Provider</a>). Java Security then creates the <code class="codeph">Class</code> object associated with your subclass, and creates an instance of your subclass by calling the <code class="codeph">newInstance</code> method on that <code class="codeph">Class</code> object. <code class="codeph">newInstance</code> requires your subclass to have a public constructor without any parameters. (A default constructor without arguments will automatically be generated if your subclass doesn't have any constructors. But if your subclass defines any constructors, you must explicitly define a public constructor without arguments.)</li>
<li>Override the <span class="apiname">newInstance()</span> method in the registered <span class="apiname">Provider.Service</span>. This is the preferred mechanism in JDK 9 and later.</li>
</ul>
</li>
</ol>
</div>
<div class="sect4"><a id="GUID-AEE5234F-24F1-4899-B490-C79F0C2D8D59"></a>
<h4 id="JSSEC-GUID-AEE5234F-24F1-4899-B490-C79F0C2D8D59" class="sect4">Step 1.1: Consider Additional JCA Provider Requirements and Recommendations for Encryption Implementations</h4>
<div>
<p>When instantiating a provider's implementation (class) of a <code class="codeph">Cipher</code>, <code class="codeph">KeyAgreement</code>, <code class="codeph">KeyGenerator</code>, <code class="codeph">MAC</code>, or <code class="codeph">SecretKey</code> factory, the framework will determine the provider's codebase (JAR file) and verify its signature. In this way, JCA authenticates the provider and ensures that only providers signed by a trusted entity can be plugged into the JCA. Thus, one requirement for encryption providers is that they must be signed, as described in later steps.</p>
<div class="section">
<p>In order for provider classes to become unusable if instantiated by an application directly, bypassing JCA, providers should implement the following:</p>
<ul style="list-style-type: disc;">
<li>All SPI implementation classes in a provider package should be declared <code class="codeph">final</code> (so that they cannot be subclassed), and their (SPI) implementation methods should be declared <code class="codeph">protected</code>.</li>
<li>All crypto-related helper classes in a provider package should have package-private scope, so that they cannot be accessed from outside the provider package.</li>
</ul>
<p>For providers that may be exported outside the U.S., <code class="codeph">CipherSpi</code> implementations must include an implementation of the <code class="codeph">engineGetKeySize</code> method which, given a <code class="codeph">Key</code>, returns the key size. If there are restrictions on available cryptographic strength specified in jurisdiction policy files, each <code class="codeph">Cipher</code> initialization method calls <code class="codeph">engineGetKeySize</code> and then compares the result with the maximum allowable key size for the particular location and circumstances of the applet or application being run. If the key size is too large, the initialization method throws an exception.</p>
<p>Additional <span class="variable">optional</span> features that providers may implement are:</p>
</div>
<!-- class="section" -->
<ul>
<li><strong>Optional:</strong> <span>The <code class="codeph">engineWrap</code> and <code class="codeph">engineUnwrap</code> methods of <code class="codeph">CipherSpi</code>. Wrapping a key enables secure transfer of the key from one place to another. Information about wrapping and unwrapping keys is provided in the <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/Cipher.html#wrap-java.security.Key-" target="_blank"><code class="codeph">wrap</code></a>.</span></li>
<li><strong>Optional:</strong> <span>One or more <span class="variable">exemption mechanisms</span>. An exemption mechanism is something such as key recovery, key escrow, or key weakening which, if implemented and enforced, may enable reduced cryptographic restrictions for an application (or applet) that uses it. To know more about the requirements for apps that utilize exemption mechanisms, see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-B74786B8-A0AD-4DC3-8A2D-2EF41084CE3D">How to Make Applications Exempt from Cryptographic Restrictions</a>.</span></li>
</ul>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-7241AB0C-71DC-408C-8726-B8E0225DDBCE"></a>
<h3 id="JSSEC-GUID-7241AB0C-71DC-408C-8726-B8E0225DDBCE" class="sect3">Step 2: Give your Provider a Name</h3>
<div>
<p>Decide on a unique name for your provider. This is the name to be used by client applications to refer to your provider, and it must not conflict with any other provider names.</p>
</div>
</div>
<div class="sect3"><a id="GUID-1C82EDB9-96CA-44AB-8590-E299814D6A46"></a>
<h3 id="JSSEC-GUID-1C82EDB9-96CA-44AB-8590-E299814D6A46" class="sect3">Step 3: Write Your Master Class, a Subclass of Provider</h3>
<div>
<p>Create a subclass of the <code class="codeph">java.security.Provider</code> class. This is essentially a lookup table that advertises the algorithms that your provider implements.</p>
<div class="section">
<p>You can use the following coding styles to subclass the <span class="apiname">Provider</span> class:</p>
<ul style="list-style-type: disc;">
<li>
<p>Create a provider that registers its services with <span class="apiname">String</span> objects to store algorithm names and their associated implementation class name. These are stored in the <span class="apiname">Hashtable&lt;Object,Object&gt;</span> superclass of <span class="apiname">java.security.Provider</span>.</p>
</li>
<li>
<p>Create a provider that uses the <span class="apiname">Provider.Service</span> class, which uses a different method to store algorithm names and create new objects. The <span class="apiname">Provider.Service</span> class enables you customize how the JCE framework requests services from your provider, such as how the framework creates new instances of your provider's services. This coding style is recommended, especially when using modules.</p>
</li>
</ul>
<p>A provider can use either style, or even use both styles at the same time. Regardless of which style you choose, your subclass should be <code class="codeph">final</code>.</p>
</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-AB9C2460-0CF2-48BA-B9FE-7059071344CE"></a>
<h4 id="JSSEC-GUID-AB9C2460-0CF2-48BA-B9FE-7059071344CE" class="sect4">Step 3.1: Create a Provider That Uses String Objects to Register Its Services</h4>
<div>
<div class="section">
<p>The following is an example of a provider that uses <span class="apiname">String</span> objects to store implemented algorithm names:</p>
<pre dir="ltr">
package p;
public final class MyProvider extends Provider {
    public MyProvider() {
        super("MyProvider", "1.0",
            "Some info about my provider and which algorithms it supports");
        // com.my.crypto.provider.MyCipher extends CipherSPI
        put("Cipher.MyCipher", "com.my.crypto.provider.MyCipher");
    }
}
</pre>
<p>To create a provider with this coding style, do the following:</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span>Call <code class="codeph">super</code>, specifying the provider name (see <a href="howtoimplaprovider.htm#GUID-7241AB0C-71DC-408C-8726-B8E0225DDBCE">Step 2: Give your Provider a Name</a>) version number, and a string of information about the provider and algorithms it supports.</span>
<div>
<pre class="codeblock" dir="ltr">
   super("MyProvider", "1.0",
        "Some info about my provider and which algorithms it supports");
</pre></div>
</li>
<li class="stepexpand"><span>Set the values of various properties that are required for the Java Security API to look up the cryptographic services implemented by the provider.</span>
<div>
<p>For each service implemented by the provider, there must be a property whose name is the type of service followed by a period and the name of the algorithm to which the service applies. The property value must specify the fully qualified name of the class implementing the service.</p>
<p>For example, this following statement sets a property named <code class="codeph">Cipher.MyCypher</code> whose value is <code class="codeph">com.my.crypto.provider.MyCipher</code>, a class that extends <code class="codeph">CipherSPI</code>:</p>
<pre dir="ltr">
        put("Cipher.MyCipher", "com.my.crypto.provider.MyCipher");
</pre>
<p>The following list shows the various types of JCA services, where the actual algorithm name is substituted for <code class="codeph"><span class="variable">algName</span></code>:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Signature.<span class="variable">algName</span></code></li>
<li><code class="codeph">MessageDigest.<span class="variable">algName</span></code></li>
<li><code class="codeph">KeyPairGenerator.<span class="variable">algName</span></code></li>
<li><code class="codeph">SecureRandom.<span class="variable">algName</span></code></li>
<li><code class="codeph">AlgorithmParameterGenerator.<span class="variable">algName</span></code></li>
<li><code class="codeph">AlgorithmParameters.<span class="variable">algName</span></code></li>
<li><code class="codeph">KeyFactory.<span class="variable">algName</span></code></li>
<li><code class="codeph">CertificateFactory.<span class="variable">algName</span></code></li>
<li><code class="codeph">KeyStore.<span class="variable">algName</span></code></li>
<li><code class="codeph">Cipher.<span class="variable">algName</span></code>: <code class="codeph"><span class="variable">algName</span></code> may actually represent a <span class="variable">transformation</span>, and may be composed of an algorithm name, a particular mode, and a padding scheme. See <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a></li>
<li><code class="codeph">KeyAgreement.<span class="variable">algName</span></code></li>
<li><code class="codeph">KeyGenerator.<span class="variable">algName</span></code></li>
<li><code class="codeph">Mac.<span class="variable">algName</span></code></li>
<li><code class="codeph">SecretKeyFactory.<span class="variable">algName</span></code></li>
<li><code class="codeph">ExemptionMechanism.<span class="variable">algName</span></code>: <code class="codeph"><span class="variable">algName</span></code> refers to the name of the exemption mechanism, which can be one of the following: <code class="codeph">KeyRecovery</code>, <code class="codeph">KeyEscrow</code>, or <code class="codeph">KeyWeakening</code>. Case does <span class="variable">not</span> matter.</li>
</ul>
<p>In all of these except <code class="codeph">ExemptionMechanism</code> and <code class="codeph">Cipher</code>, <code class="codeph">algName</code> is the "standard" name of the algorithm, certificate type, or keystore type. See <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a> for the standard names that should be used.</p>
<p>The value of each property must be the fully qualified name of the class implementing the specified algorithm, certificate type, or keystore type. That is, it must be the package name followed by the class name, where the two are separated by a period.</p>
<p>As an example, the default provider named <span class="variable">SUN</span> implements the Digital Signature Algorithm (whose standard name is <code class="codeph">SHA256withDSA</code>) in a class named <code class="codeph">DSA</code> in the <code class="codeph">sun.security.provider</code> package. Its subclass of <code class="codeph">Provider</code> (which is the Sun class in the <code class="codeph">sun.security.provider package</code>) sets the <code class="codeph">Signature.SHA256withDSA</code> property to have the value <code class="codeph">sun.security.provider.DSA</code> via the following:</p>
<pre class="codeblock" dir="ltr">
put("Signature.SHA256withDSA", "sun.security.provider.DSA")
</pre>
<p>The list below shows more properties that can be defined for the various types of services, where the actual algorithm name is substituted for <span class="variable">algName</span>, certificate type for <span class="variable">certType,</span> keystore type for <span class="variable">storeType</span>, and attribute name for <span class="variable">attrName</span>:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Signature.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">MessageDigest.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">KeyPairGenerator.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">SecureRandom.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">KeyFactory.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">CertificateFactory.certType <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">KeyStore.storeType <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">AlgorithmParameterGenerator.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">AlgorithmParameters.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">Cipher.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">KeyAgreement.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">KeyGenerator.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">Mac.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">SecretKeyFactory.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
<li><code class="codeph">ExemptionMechanism.algName <span class="variable">[one or more spaces]</span> attrName</code></li>
</ul>
<p>In each of these, <code class="codeph">attrName</code> is the "standard" name of the algorithm, certificate type, keystore type, or attribute. (See <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a> for the standard names that should be used.)</p>
<p>For a property in the above format, the value of the property must be the value for the corresponding attribute. (See <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a> for the definition of each standard attribute.)</p>
<p>For further master class property setting examples, see the JDK 9 source code for the <a href="http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/65464a307408/src/java.base/share/classes/sun/security/provider/Sun.java" target="_blank"><span class="apiname">sun.security.provider.Sun</span></a> and <a href="http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/65464a307408/src/java.base/share/classes/com/sun/crypto/provider/SunJCE.java" target="_blank"><span class="apiname">com.sun.crypto.provider.SunJCE</span></a> classes. They show how the Sun and SunJCE providers set properties.</p>
<p>As an example, the default provider named SUN implements the <code class="codeph">SHA256withDSA</code> Digital Signature Algorithm in software. The class <span class="apiname">sun.security.provider.Sun</span> calls the method <span class="apiname">SunEntries.putEntries</span>, which sets the properties for the SUN provider, including setting the property <code class="codeph">Signature.SHA256withDSA ImplementedIn</code> to have the value <code class="codeph">Software</code>:</p>
<pre class="codeblock" dir="ltr">
    put("Signature.SHA256withDSA ImplementedIn", "Software");
</pre>
<div class="infobox-note" id="GUID-AB9C2460-0CF2-48BA-B9FE-7059071344CE__GUID-609B98BF-623E-457F-A8A5-EA3B62BCBA5D">
<p class="notep1">Note:</p>
For examples of this coding style, see the source code for <span class="apiname">sun.security.provider.Sun</span> and <span class="apiname">sun.security.provider.SunEntries</span> classes.</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4"><a id="GUID-CB446B7A-CEA2-4F4A-A4AF-4D492CB58733"></a>
<h4 id="JSSEC-GUID-CB446B7A-CEA2-4F4A-A4AF-4D492CB58733" class="sect4">Step 3.2: Create a Provider That Uses Provider.Service</h4>
<div>
<div class="section">
<p>The following is an example of a provider that uses a <span class="apiname">Provider.Service</span> class:</p>
<pre dir="ltr">
package p;
 
public final class MyProvider extends Provider {
     
    public MyProvider() {
        super("MyProvider", "1.0",
            "Some info about my provider and which algorithms it supports");
        putService(new ProviderService(this, "Cipher", "MyCipher", "p.MyCipher"));
    }
     
    private static final class ProviderService extends Provider.Service {
        ProviderService(Provider p, String type, String algo, String cn) {
            super(p, type, algo, cn, null, null);
        }
         
        @Override
        public Object newInstance(Object ctrParamObj)
            throws NoSuchAlgorithmException {
            String type = getType();
            String algo = getAlgorithm();
            try {
                if (type.equals("Cipher")) {
                    if (algo.equals("MyCipher")) {
                        return new MyCipher();
                    }
                }
            } catch (Exception ex) {
                throw new NoSuchAlgorithmException(
                    "Error constructing " + type + " for "
                    + algo + " using SunMSCAPI", ex);
            }
            throw new ProviderException("No impl for " + algo + " " + type);
        }
    }
}
</pre>
<p>To create a provider with this coding style, do the following:</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span>For each algorithm your provider supports, call <span class="apiname">putService</span> with an instance of <span class="apiname">Provider.Service</span>; the arguments of the <span class="apiname">Provider.Service</span> constructor represent a supported algorithm.</span>
<div>
<p>The following statement adds a service named <code class="codeph">MyCipher</code> of type <code class="codeph">Cipher</code>; the name of the class implementing this service is <code class="codeph">p.MyCipher</code>. The argument of <code class="codeph">putService</code> is a subclass of <span class="apiname">Provider.Service</span>:</p>
<pre dir="ltr">
        putService(new ProviderService(this, "Cipher", "MyCipher", "p.MyCipher"));
</pre>
<p>This example uses a subclass of <span class="apiname">Provider.Service</span> named <code class="codeph">ProviderService</code> (rather than <span class="apiname">Provider.Service</span> itself) as it customizes how the JCE framework instantiates services. If you don't need to customize the behavior of <span class="apiname">Provider.Service</span>, then you can call the <span class="apiname">Provider.Service</span> constructor directly:</p>
<pre dir="ltr">
public final class MyProvider extends Provider {   
    public MyProvider() {
        super("MyProvider", "1.0",
            "Some info about my provider and which algorithms it supports");
        putService(new Provider.Service(
            this, "Cipher", "MyCipher", "p.MyCipher", null, null));
    }
}
</pre>
<p>Note that this example is essentially the same as the example described in <a href="howtoimplaprovider.htm#GUID-AB9C2460-0CF2-48BA-B9FE-7059071344CE">Step 3.1: Create a Provider That Uses String Objects to Register Its Services</a>.</p>
</div>
</li>
<li class="stepexpand"><span>Override any method in <span class="apiname">Provider.Service</span>, such as <span class="apiname">newInstance</span>, to customize how the JCE framework handles the services in your provider.</span>
<div>
<p>The example at the beginning of this section overrides the method <span class="apiname">Provider.Service.newInstance</span>. The method returns an instance of <code class="codeph">MyCipher</code> only if the requested service is <code class="codeph">MyCipher</code>. If not, it throws a <code class="codeph">NoSuchAlgorithmException</code> and a <code class="codeph">ProviderException</code>.</p>
<p>For more information about other methods you can override, see <a href="howtoimplaprovider.htm#GUID-B1428B09-5542-4D36-9C0D-D78A8B2B3C00" title="Provider.Service class offers an alternative way for providers to advertise their services and supports additional features.">The Provider.Service Class</a>.</p>
<div class="infobox-note" id="GUID-CB446B7A-CEA2-4F4A-A4AF-4D492CB58733__GUID-62864B28-DA3B-492B-8079-F83B7004D2AC">
<p class="notep1">Note:</p>
For examples of this coding style, see the JDK 9 source code contained in the <a href="http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/65464a307408/src/jdk.crypto.mscapi/windows/classes/sun/security/mscapi" target="_blank"><span class="apiname">sun.security.mscapi</span></a> package.</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4"><a id="GUID-E1800256-2F1C-471D-96B5-A39ABA751461"></a>
<h4 id="JSSEC-GUID-E1800256-2F1C-471D-96B5-A39ABA751461" class="sect4">Step 3.3: Specify Additional Information for Cipher Implementations</h4>
<div>
<p>As mentioned above, in the case of a <code class="codeph">Cipher</code> property, <span class="variable">algName</span> may actually represent a <span class="variable">transformation</span>. A <span class="variable">transformation</span> is a string that describes the operation (or set of operations) to be performed by a <code class="codeph">Cipher</code> object on some given input. A transformation always includes the name of a cryptographic algorithm (e.g., <span class="variable">AES</span>), and may be followed by a mode and a padding scheme.</p>
<div class="section">
<p>A transformation is of the form:</p>
<ul style="list-style-type: disc;">
<li><span class="variable">algorithm/mode/padding</span>, or</li>
<li><span class="variable">algorithm</span></li>
</ul>
<p>(In the latter case, provider-specific default values for the mode and padding scheme are used). For example, the following is a valid transformation:</p>
<pre class="codeblock" dir="ltr">
    Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding"); 
</pre>
When requesting a block cipher in stream cipher mode (for example; <code class="codeph">AES</code> in <code class="codeph">CFB</code> or <code class="codeph">OFB</code> mode), a client may optionally specify the number of bits to be processed at a time, by appending this number to the mode name as shown in the following sample transformations:
<pre class="codeblock" dir="ltr">
    Cipher c1 = Cipher.getInstance("AES/CFB8/NoPadding");
    Cipher c2 = Cipher.getInstance("AES/OFB32/PKCS5Padding");
</pre>
<p>If a number does not follow a stream cipher mode, a provider-specific default is used. (For example, the <span class="variable">SunJCE</span> provider uses a default of 128 bits.)</p>
<p>A provider may supply a separate class for each combination of <span class="variable">algorithm/mode/padding</span>. Alternatively, a provider may decide to provide more generic classes representing sub-transformations corresponding to <span class="variable">algorithm</span> or <span class="variable">algorithm/mode</span> or <span class="variable">algorithm//padding</span> (note the double slashes); in this case the requested mode and/or padding are set automatically by the <code class="codeph">getInstance</code> methods of <code class="codeph">Cipher</code>, which invoke the <code class="codeph">engineSetMode</code> and <code class="codeph">engineSetPadding</code> methods of the provider's subclass of <code class="codeph">CipherSpi</code>.</p>
<p>That is, a <code class="codeph">Cipher</code> property in a provider master class may have one of the formats shown in the table below.</p>
<div class="tblformalwide" id="GUID-E1800256-2F1C-471D-96B5-A39ABA751461__GUID-98373D6F-2FC2-405D-A54E-8D730E6025D5">
<p class="titleintable">Table 3-1 Cipher Property Format</p>
<table class="cellalignment473" title="Cipher Property Format" summary="List of Cipher Properties">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e1301"><code class="codeph">Cipher</code> Property Format</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e1305">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e1309" headers="d34834e1301"><code class="codeph">Cipher.</code><span class="variable">algName</span></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e1309 d34834e1305">A provider's subclass of <code class="codeph">CipherSpi</code> implements <span class="variable">algName</span> with pluggable mode and padding</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e1323" headers="d34834e1301"><code class="codeph">Cipher.</code><span class="variable">algName/mode</span></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e1323 d34834e1305">A provider's subclass of <code class="codeph">CipherSpi</code> implements <span class="variable">algName</span> in the specified <span class="variable">mode</span>, with pluggable padding</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e1340" headers="d34834e1301"><code class="codeph">Cipher.</code><span class="variable">algName//padding</span></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e1340 d34834e1305">A provider's subclass of <code class="codeph">CipherSpi</code> implements <span class="variable">algName</span> with the specified <span class="variable">padding</span>, with pluggable mode</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e1357" headers="d34834e1301"><code class="codeph">Cipher.</code><span class="variable">algName/mode/padding</span></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e1357 d34834e1305">A provider's subclass of <code class="codeph">CipherSpi</code> implements <span class="variable">algName</span> with the specified <span class="variable">mode</span> and <span class="variable">padding</span></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>(See <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a> for the standard algorithm names, modes, and padding schemes that should be used.)</p>
<p>For example, a provider may supply a subclass of <code class="codeph">CipherSpi</code> that implements <span class="variable">AES/ECB/PKCS5Padding</span>, one that implements <span class="variable">AES/CBC/PKCS5Padding</span>, one that implements <span class="variable">AES/CFB/PKCS5Padding</span>, and yet another one that implements <span class="variable">AES/OFB/PKCS5Padding</span>. That provider would have the following <code class="codeph">Cipher</code> properties in its master class:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Cipher.<span class="variable">AES/ECB/PKCS5Padding</span></code></li>
<li><code class="codeph">Cipher.<span class="variable">AES/CBC/PKCS5Padding</span></code></li>
<li><code class="codeph">Cipher.<span class="variable">AES/CFB/PKCS5Padding</span></code></li>
<li><code class="codeph">Cipher.<span class="variable">AES/OFB/PKCS5Padding</span></code></li>
</ul>
<p>Another provider may implement a class for each of the above modes (i.e., one class for <span class="variable">ECB</span>, one for <span class="variable">CBC</span>, one for <span class="variable">CFB</span>, and one for <span class="variable">OFB</span>), one class for <span class="variable">PKCS5Padding</span>, and a generic <span class="variable">AES</span> class that subclasses from <code class="codeph">CipherSpi</code>. That provider would have the following <code class="codeph">Cipher</code> properties in its master class:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Cipher.<span class="variable">AES</span></code></li>
<li><code class="codeph">Cipher.<span class="variable">AES</span> SupportedModes</code>
<ul style="list-style-type: disc;">
<li>
<p>Example: <code class="codeph">"ECB|CBC|CFB|OFB"</code></p>
</li>
</ul>
</li>
<li><code class="codeph">Cipher.<span class="variable">AES</span> SupportedPaddings</code>
<ul style="list-style-type: disc;">
<li>
<p>Example: <code class="codeph">"NOPADDING|PKCS5Padding"</code></p>
</li>
</ul>
</li>
</ul>
The <code class="codeph">getInstance</code> factory method of the <code class="codeph">Cipher</code> engine class follows these rules in order to instantiate a provider's implementation of <code class="codeph">CipherSpi</code> for a transformation of the form "<span class="variable">algorithm</span>":</div>
<!-- class="section" -->
<ol>
<li><span>Check if the provider has registered a subclass of <code class="codeph">CipherSpi</code> for the specified "<span class="variable">algorithm</span>".</span>
<ul>
<li>If the answer is YES, instantiate this class, for whose mode and padding scheme default values (as supplied by the provider) are used.</li>
<li>If the answer is NO, throw a <code class="codeph">NoSuchAlgorithmException</code> exception.</li>
</ul>
</li>
<li><span>The <code class="codeph">getInstance</code> factory method of the <code class="codeph">Cipher</code> engine class follows these rules in order to instantiate a provider's implementation of <code class="codeph">CipherSpi</code> for a transformation of the form "<span class="variable">algorithm/mode/padding</span>":</span>
<ol>
<li class="substepexpand"><span>Check if the provider has registered a subclass of <code class="codeph">CipherSpi</code> for the specified "<span class="variable">algorithm/mode/padding</span>" transformation.</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>If the answer is YES, instantiate it.</p>
</li>
<li>
<p>If the answer is NO, go to the next step.</p>
</li>
</ul>
</div>
</li>
<li class="substepexpand"><span>Check if the provider has registered a subclass of <code class="codeph">CipherSpi</code> for the sub-transformation "<span class="variable">algorithm/mode</span>".</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>If the answer is YES, instantiate it, and call <code class="codeph">engineSetPadding(<span class="variable">padding</span>)</code> on the new instance.</p>
</li>
<li>
<p>If the answer is NO, go to the next step.</p>
</li>
</ul>
</div>
</li>
<li class="substepexpand"><span>Check if the provider has registered a subclass of <code class="codeph">CipherSpi</code> for the sub-transformation "<span class="variable">algorithm//padding</span>" (note the double slashes)</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>If the answer is YES, instantiate it, and call <code class="codeph">engineSetMode(<span class="variable">mode</span>)</code> on the new instance.</p>
</li>
<li>
<p>If the answer is NO, go to the next step.</p>
</li>
</ul>
</div>
</li>
<li class="substepexpand"><span>Check if the provider has registered a subclass of <code class="codeph">CipherSpi</code> for the sub-transformation "<span class="variable">algorithm</span>".</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>If the answer is YES, instantiate it, and call <code class="codeph">engineSetMode(<span class="variable">mode</span>)</code> and <code class="codeph">engineSetPadding(<span class="variable">padding</span>)</code> on the new instance.</p>
</li>
<li>
<p>If the answer is NO, throw a <code class="codeph">NoSuchAlgorithmException</code> exception.</p>
</li>
</ul>
</div>
</li>
</ol>
</li>
</ol>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-7C304A79-6D0B-438B-A02E-51648C909876"></a>
<h3 id="JSSEC-GUID-7C304A79-6D0B-438B-A02E-51648C909876" class="sect3">Step 4: Create a Module Declaration for Your Provider</h3>
<div>
<p>This step is optional but recommended; it enables you to package your provider in a named module. A modular JDK can then locate your provider in the module path as opposed to the class path. The module system can more thoroughly check for dependencies in modules in the module path. Note that you can use named modules in a non-modular JDK; the module declaration will be ignored. Also, you can still package your providers in unnamed or automatic modules.</p>
<div class="section">
<p>Create a module declaration for your provider and save it in a file named <code>module-info.java</code>. This module declaration includes the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>The name of your module.</p>
</li>
<li>
<p>Any module upon which your provider depends.</p>
</li>
<li>
<p>A <code class="codeph">provides</code> directive if your module provides a service implementation.</p>
</li>
</ul>
<p>The following example module declaration defines a module named <code class="codeph">com.foo.MyProvider</code>. <code class="codeph">p.MyProvider</code> is the fully qualified class name of a service implementation. Suppose that, in this example, <code class="codeph">p.MyProvider</code> uses API in the package <span class="apiname">javax.security.auth.kerberos</span>, which is in the module <span class="apiname">java.security.jgss</span>. Thus, the directive <code class="codeph">requires java.security.jgss</code> appears in the module declaration.</p>
<pre dir="ltr">
module com.foo.MyProvider {
    provides java.security.Provider with p.MyProvider;
    requires java.security.jgss;
}
</pre>
<p>You can package a provider in three different kinds of modules:</p>
<ul style="list-style-type: disc;">
<li>
<p>Named or explicit module: A module that appears on the module path and contains module configuration information in the <code>module-info.class</code> file.</p>
<p>The JCE framework can use the <a href="https://docs.oracle.com/javase/9/docs/api/java/util/ServiceLoader.html" target="_blank"><span class="apiname">ServiceLoader</span></a> class (which simplifies provider configuration) to search for providers in explicit modules without any additional changes to the module. See <a href="howtoimplaprovider.htm#GUID-831AA25F-F702-442D-A2E4-8DA6DEA16F33" title="Register your provider so that the JCE framework can find your provider, either with the ServiceLoader class or in the class path or module path.">Step 8.1: Configure the Provider</a> and <a href="howtoimplaprovider.htm#GUID-3FD26072-6982-4DCE-932C-DE152C463992" title="When you run your test applications, the required java command options will vary depending on factors such as whether you packaged your provider as a named, automatic, or unnamed module and if you configured it so that the ServiceLoader class can search for it.">Step 10: Run Your Test Programs</a>.</p>
</li>
<li>
<p>Automatic module: &nbsp;A module that appears on the module path, but does not contain module configuration information in a <code>module-info.class</code> file (essentially a "regular" JAR file).</p>
</li>
<li>
<p>Unnamed module: A module that appears on the class path. It may or may not have a <code>module-info.class</code> file; this file is ignored.</p>
</li>
</ul>
<p>It is recommended that you package your providers in named modules as they provide better performance, stronger encapsulation, simpler configuration and greater flexibility.</p>
<p>You have a lot of flexibility when it comes to packaging and configuring your providers. However, this impacts how you start applications that use them. For example, you might have to specify additional <code class="codeph">--add-exports</code> or <code class="codeph">--add-modules</code> options. Named modules, in general, require fewer of these additional options. In addition named modules offer more flexibility. You can use them with non-modular JDKs or even as unnamed modules by specifying them in a modular JDK's class path. For more information about modules, see <a href="http://openjdk.java.net/projects/jigsaw/spec/sotms/" target="_blank">The State of the Module System</a> and <a href="http://openjdk.java.net/jeps/261" target="_blank">JEP 261: Module System</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-83742677-6E39-4A8D-BF0F-BC743E3AE43C"></a>
<h3 id="JSSEC-GUID-83742677-6E39-4A8D-BF0F-BC743E3AE43C" class="sect3">Step 5: Compile Your Code</h3>
<div>
<p>After you have created your implementation code (<a href="howtoimplaprovider.htm#GUID-1D2FDA77-743C-47CB-9CCB-2585FEC0607A" title="When instantiating a provider's implementation (class) of a Cipher, KeyAgreement, KeyGenerator, MAC, or SecretKey factory, the framework will determine the provider's codebase (JAR file) and verify its signature. In this way, JCA authenticates the provider and ensures that only providers signed by a trusted entity can be plugged into the JCA. Thus, one requirement for encryption providers is that they must be signed, as described in later steps.">Step 1: Write your Service Implementation Code</a>), given your provider a name (<a href="howtoimplaprovider.htm#GUID-7241AB0C-71DC-408C-8726-B8E0225DDBCE">Step 2: Give your Provider a Name</a>), created the master class (<a href="howtoimplaprovider.htm#GUID-1C82EDB9-96CA-44AB-8590-E299814D6A46" title="Create a subclass of the java.security.Provider class. This is essentially a lookup table that advertises the algorithms that your provider implements.">Step 3: Write Your Master Class, a Subclass of Provider</a>), and created a module declaration (<a href="howtoimplaprovider.htm#GUID-7C304A79-6D0B-438B-A02E-51648C909876" title="This step is optional but recommended; it enables you to package your provider in a named module. A modular JDK can then locate your provider in the module path as opposed to the class path. The module system can more thoroughly check for dependencies in modules in the module path. Note that you can use named modules in a non-modular JDK; the module declaration will be ignored. Also, you can still package your providers in unnamed or automatic modules.">Step 4: Create a Module Declaration for Your Provider</a>), use the Java compiler to compile your files.</p>
</div>
</div>
<div class="sect3"><a id="GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F"></a>
<h3 id="JSSEC-GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F" class="sect3">Step 6: Place Your Provider in a JAR File</h3>
<div>
<div class="section" id="GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F__ADDTHEFILEJAVA.SECURITY.PROVIDERTOU-025DFEDB">
<p class="subhead3">Add the File java.security.Provider to Use the ServiceLoader Class to Search for Providers</p>
<p>If your provider is packaged in an automatic or unnamed module (you did not create a module declaration as described in <a href="howtoimplaprovider.htm#GUID-7C304A79-6D0B-438B-A02E-51648C909876" title="This step is optional but recommended; it enables you to package your provider in a named module. A modular JDK can then locate your provider in the module path as opposed to the class path. The module system can more thoroughly check for dependencies in modules in the module path. Note that you can use named modules in a non-modular JDK; the module declaration will be ignored. Also, you can still package your providers in unnamed or automatic modules.">Step 4: Create a Module Declaration for Your Provider</a>) and you want the use the <span class="apiname">java.util.ServiceLoader</span> to search for your providers, then add the file <code>META-INF/services/java.security.Provider</code> to the JAR file and ensure that the file contains the fully qualified class name of your provider implementation.</p>
<p>The security provider loading mechanism uses the <a href="https://docs.oracle.com/javase/9/docs/api/java/util/ServiceLoader.html" target="_blank"><span class="apiname">ServiceLoader</span></a> class to search for providers before consulting the class path.</p>
<p>For example, if the fully qualified class name of your provider is <code class="codeph">p.Provider</code> and all the compiled code of your provider is in the directory <code>classes</code>, then create a file named <code>classes/META-INF/services/java.security.Provider</code> that contains the following line:</p>
<pre dir="ltr">
p.MyProvider
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F__RUNTHEJARCOMMANDTOCREATEAMODULEJARF-025E01A6">
<p class="subhead3">Run the jar Command to Create a JAR File</p>
<p>The following command creates a JAR file named <code>MyProvider.jar</code>. All the compiled code for the module JAR file is in the directory <code>classes</code>. In addition, the module descriptor, <code>module-info.class</code>, is in the directory <code>classes</code>:</p>
<pre dir="ltr">
jar --create --file MyProvider.jar --module-version 1.0 -C classes
</pre>
<div class="infobox-note" id="GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F__GUID-FC0BD0DE-0B46-47DD-88FD-BBE643CECA04">
<p class="notep1">Note:</p>
The <code>module-info.class</code> file and the <code class="codeph">--module-version</code> option are optional. However, the <code>module-info.class</code> file is required if you want to create a modular JAR file. (A modular JAR file is a regular JAR file that has a <code>module-info.class</code> file in its top-level directory.)</div>
<p>See <a class="olink JSWOR614" target="_blank" href="../tools/jar.htm#JSWOR614">jar</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-2D4432F9-1C3C-4A91-8612-2B2840188B36"></a>
<h3 id="JSSEC-GUID-2D4432F9-1C3C-4A91-8612-2B2840188B36" class="sect3">Step 7: Sign Your JAR File, If Necessary</h3>
<div>
<p>If your provider is supplying encryption algorithms through the <span class="apiname">Cipher</span>, <span class="apiname">KeyAgreement</span>, <span class="apiname">KeyGenerator</span>, <span class="apiname">Mac</span>, or <span class="apiname">SecretKeyFactory</span> classes, you must sign your JAR file so that the JCA can authenticate the code at run time; see <a href="howtoimplaprovider.htm#GUID-AEE5234F-24F1-4899-B490-C79F0C2D8D59" title="When instantiating a provider's implementation (class) of a Cipher, KeyAgreement, KeyGenerator, MAC, or SecretKey factory, the framework will determine the provider's codebase (JAR file) and verify its signature. In this way, JCA authenticates the provider and ensures that only providers signed by a trusted entity can be plugged into the JCA. Thus, one requirement for encryption providers is that they must be signed, as described in later steps.">Step 1.1: Consider Additional JCA Provider Requirements and Recommendations for Encryption Implementations</a>. If you are not providing an implementation of this type, then you can skip this step.</p>
</div>
<div class="sect4"><a id="GUID-434AACF7-0D2C-494A-B32A-508A6B605F62"></a>
<h4 id="JSSEC-GUID-434AACF7-0D2C-494A-B32A-508A6B605F62" class="sect4">Step 7.1: Get a Code-Signing Certificate</h4>
<div>
<p>The next step is to request a code-signing certificate so that you can use it to sign your provider prior to testing. The certificate will be good for both testing and production. It will be valid for 5 years.</p>
<div class="section">
<p>Below are the steps you should use to get a code-signing certificate. See <a class="olink JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549" target="_blank" href="../tools/keytool.htm#JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549">keytool</a> in the <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand" id="GUID-434AACF7-0D2C-494A-B32A-508A6B605F62__USEKEYTOOLTOGENERATEADSAKEYPAIRUSIN-7569AAA1"><span>Use <span class="bold">keytool</span> to generate a RSA keypair, using RSA algorithm as an example:</span>
<div>
<pre class="codeblock" dir="ltr">
keytool -genkeypair -alias <span class="variable">&lt;alias&gt;</span> \
        -keyalg RSA -keysize 2048 \
        -dname "cn=<span class="variable">&lt;Company Name&gt;</span>, \
        ou=Java Software Code Signing, \
        o=Oracle Corporation" \
        -keystore <span class="variable">&lt;keystore file name&gt;</span> \  
        -storepass <span class="variable">&lt;keystore password&gt;</span>
</pre></div>
<div>
<p>This will generate a DSA keypair (a public key and an associated private key) and store it in an entry in the specified keystore. The public key is stored in a self-signed certificate. The keystore entry can subsequently be accessed using the specified alias.</p>
<p>The option values in angle brackets ("&lt;" and "&gt;") represent the actual values that must be supplied. For example, <code class="codeph">&lt;alias&gt;</code> must be replaced with whatever alias name you wish to be used to refer to the newly-generated keystore entry in the future, and <code class="codeph">&lt;keystore file name&gt;</code> must be replaced with the name of the keystore to be used.</p>
<div class="infoboxnotealso" id="GUID-434AACF7-0D2C-494A-B32A-508A6B605F62__GUID-BFAEADA0-1705-445D-9874-DF195A5DF8FB">
<p class="notep1">Tip:</p>
Do not surround actual values with angle brackets. For example, if you want your alias to be <code class="codeph">myTestAlias</code>, specify the <code class="codeph">-alias</code> option as follows:
<pre class="codeblock" dir="ltr">
    -alias myTestAlias
</pre></div>
If you specify a keystore that doesn't yet exist, it will be created.
<div class="infobox-note" id="GUID-434AACF7-0D2C-494A-B32A-508A6B605F62__GUID-AABAAA98-A479-4148-AABB-245A84439DBA">
<p class="notep1">Note:</p>
If command lines you type are not allowed to be as long as the <code class="codeph">keytool -genkeypair</code> command you want to execute (for example, if you are typing to a Microsoft Windows DOS prompt), you can create and execute a plain-text batch file containing the command. That is, create a new text file that contains nothing but the full <code class="codeph">keytool -genkeypair</code> command. (Remember to type it all on one line.) Save the file with a .bat extension. Then in your DOS window, type the file name (with its path, if necessary). This will cause the command in the batch file to be executed.</div>
</div>
</li>
<li class="stepexpand"><span>Use <span class="bold">keytool</span> to generate a certificate signing request.</span>
<div>
<pre class="codeblock" dir="ltr">
    keytool -certreq -alias &lt;alias&gt; \
        -file &lt;csr file name&gt; \
        -keystore &lt;keystore file name&gt; \
        -storepass &lt;keystore password&gt; 
</pre>
Here, <code class="codeph"><span class="variable">&lt;alias&gt;</span></code> is the alias for the DSA keypair entry created in the previous step. This command generates a Certificate Signing Request (CSR), using the PKCS#10 format. It stores the CSR in the file whose name is specified in <code class="codeph"><span class="variable">&lt;csr file name&gt;</span></code>.</div>
</li>
<li class="stepexpand"><span>Send the CSR, contact information, and other required documentation to the JCA Code Signing Certification Authority. See <a href="http://www.oracle.com/technetwork/java/javase/tech/getcodesigningcertificate-361306.html#jcacodesigning" target="_blank">JCA Code Signing Certification Authority</a> for contact information.</span></li>
<li class="stepexpand"><span>After the JCA Code Signing Certification Authority has received your email message, they will send you a request number via email. Once you receive this request number, you should print, fill out and send the Certification Form for CSPs. See <a href="http://www.oracle.com/technetwork/java/javase/tech/getcodesigningcertificate-361306.html#sendingcertificationform" target="_blank">Sending Certification Form for CSPs</a> for contact information.</span></li>
<li class="stepexpand"><span>Use <span class="bold">keytool</span> to import the certificates received from the CA.</span>
<div>Once you have received the two certificates from the JCA Code Signing Certification Authority, you can use <span class="bold">keytool</span> to import them into your keystore. First import the CA's certificate as a "trusted certificate":
<pre class="codeblock" dir="ltr">
    keytool -import -alias &lt;alias for the CA cert&gt; \
        -file &lt;CA cert file name&gt; \
        -keystore &lt;keystore file name&gt; \
        -storepass &lt;keystore password&gt;
</pre>
Then import the code-signing certificate:
<pre class="codeblock" dir="ltr">
    keytool -import -alias &lt;alias&gt; \
        -file &lt;code-signing cert file name&gt; \
        -keystore &lt;keystore file name&gt; \
        -storepass &lt;keystore password&gt;
</pre>
<p><code class="codeph"><span class="variable">&lt;alias&gt;</span></code> is the same alias as that which you created in <a href="howtoimplaprovider.htm#GUID-434AACF7-0D2C-494A-B32A-508A6B605F62__USEKEYTOOLTOGENERATEADSAKEYPAIRUSIN-7569AAA1">Step 1</a> where you generated a DSA keypair. This command replaces the self-signed certificate in the keystore entry specified by <code class="codeph"><span class="variable">&lt;alias&gt;</span></code> with the one signed by the JCA Code Signing Certification Authority.</p>
</div>
</li>
</ol>
<div class="section">
<p>Now that you have in your keystore a certificate from an entity trusted by JCA (the JCA Code Signing Certification Authority), you can place your provider code in a JAR file (<a href="howtoimplaprovider.htm#GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F">Step 6: Place Your Provider in a JAR File</a>) and then use that certificate to sign the JAR file (<a href="howtoimplaprovider.htm#GUID-CF5F0E7D-BA0E-494C-8A5A-B228FF839AEF">Step 7.2: Sign Your Provider</a>).</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-CF5F0E7D-BA0E-494C-8A5A-B228FF839AEF"></a>
<h4 id="JSSEC-GUID-CF5F0E7D-BA0E-494C-8A5A-B228FF839AEF" class="sect4">Step 7.2: Sign Your Provider</h4>
<div>
<div class="section">
<p>Sign the JAR file created in <a href="howtoimplaprovider.htm#GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F">Step 6: Place Your Provider in a JAR File</a> with the code-signing certificate obtained in <a href="howtoimplaprovider.htm#GUID-434AACF7-0D2C-494A-B32A-508A6B605F62" title="The next step is to request a code-signing certificate so that you can use it to sign your provider prior to testing. The certificate will be good for both testing and production. It will be valid for 5 years.">Step 7.1: Get a Code-Signing Certificate</a>. See <a class="olink JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864" target="_blank" href="../tools/jarsigner.htm#JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864">jarsigner</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
<pre class="codeblock" dir="ltr">
    jarsigner -keystore <span class="variable">&lt;keystore file name&gt;</span> \
        -storepass <span class="variable">&lt;keystore password&gt;</span> \
        <span class="variable">&lt;JAR file name&gt;</span> <span class="variable">&lt;alias&gt;</span>
</pre>
<p>Here, <code class="codeph"><span class="variable">&lt;alias&gt;</span></code> is the alias into the keystore for the entry containing the code-signing certificate received from the JCA Code Signing Certification Authority (the same alias as that specified in the commands in <a href="howtoimplaprovider.htm#GUID-434AACF7-0D2C-494A-B32A-508A6B605F62" title="The next step is to request a code-signing certificate so that you can use it to sign your provider prior to testing. The certificate will be good for both testing and production. It will be valid for 5 years.">Step 7.1: Get a Code-Signing Certificate</a>).</p>
<p>You can test verification of the signature via the following:</p>
<pre class="codeblock" dir="ltr">
    jarsigner -verify <span class="variable">&lt;JAR file name&gt;</span> 
</pre>
<p>The text "jar verified" will be displayed if the verification was successful.</p>
<div class="infobox-note" id="GUID-CF5F0E7D-BA0E-494C-8A5A-B228FF839AEF__GUID-9AA0BF43-A226-4E46-9B26-5B3B9AD53531">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>If you bundle a signed JCE provider as part of an RIA (applet or webstart application), for the best user experience, you should apply a second signature to the JCE provider JAR with the same certificate/key that you used to sign the applet or webstart application. See <a class="olink JSDPG747" target="_blank" href="../deploy/configuring-and-monitoring-deployment.htm#JSDPG747">Deployment Configuration File and Properties</a> to know about deploying RIAs, and <a class="olink JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864" target="_blank" href="../tools/jarsigner.htm#JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864">jarsigner</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span> for applying multiple signatures to a JAR file.</p>
</li>
<li>
<p>You cannot package signed providers in JMOD files.</p>
</li>
<li>
<p>Providers don't need to be signed.</p>
</li>
<li>
<p>You can link a provider in a custom runtime image with the <code class="codeph">jlink</code> command as long as it doesn't have a Cipher, KeyAgreement, or MAC implementation.</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect3"><a id="GUID-FB9C6DB2-DE9A-4EFE-89B4-C2C168C5982D"></a>
<h3 id="JSSEC-GUID-FB9C6DB2-DE9A-4EFE-89B4-C2C168C5982D" class="sect3">Step 8: Prepare for Testing</h3>
<div>
<p>The next steps describe how to install and configure your new provider so that it is available via the JCA.</p>
</div>
<div class="sect4"><a id="GUID-831AA25F-F702-442D-A2E4-8DA6DEA16F33"></a>
<h4 id="JSSEC-GUID-831AA25F-F702-442D-A2E4-8DA6DEA16F33" class="sect4">Step 8.1: Configure the Provider</h4>
<div>
<p>Register your provider so that the JCE framework can find your provider, either with the <span class="apiname">ServiceLoader</span> class or in the class path or module path.</p>
<ol>
<li class="stepexpand"><span>Open the <code>java.security</code> file in an editor:</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>Solaris, Linux, or macOS: <code class="codeph"><span class="codeinlineitalic">&lt;java-home&gt;</span>/conf/security/java.security</code></p>
</li>
<li>
<p>Windows: <code class="codeph"><span class="codeinlineitalic">&lt;java-home&gt;</span>\conf\security\java.security</code></p>
</li>
</ul>
</div>
</li>
<li class="stepexpand"><span>In the <code>java.security</code> file, find the section where standard providers such as SUN, SunRsaSign, and SunJCE are configured as static providers; it looks like the following:</span>
<div>
<pre class="codeblock" dir="ltr">
security.provider.1=SUN
security.provider.2=SunRsaSign
security.provider.3=SunEC
security.provider.4=SunJSSE
security.provider.5=SunJCE
security.provider.6=SunJGSS
security.provider.7=SunSASL
security.provider.8=XMLDSig
security.provider.9=SunPCSC
security.provider.10=JdkLDAP
security.provider.11=JdkSASL
security.provider.12=SunMSCAPI
security.provider.13=SunPKCS11
</pre>
<p>Each line in this section has the following form:</p>
<pre class="codeblock" dir="ltr">
security.provider.<span class="variable">n</span>=<span class="variable">provName</span>|<span class="variable">className</span> 
</pre>
<p>This declares a provider, and specifies its preference order <code class="codeph"><span class="variable">n</span></code>. The preference order is the order in which providers are searched for requested algorithms when no specific provider is requested. The order is 1-based; 1 is the most preferred, followed by 2, and so on.</p>
<p><code class="codeph"><span class="variable">provName</span></code> is the provider's name and <code class="codeph"><span class="variable">className</span></code> is the fully qualified class name of the provider. You can use either of these two names.</p>
</div>
</li>
<li class="stepexpand"><span>Register your provider by adding to the <code>java.security</code> file a line with the form <code class="codeph">security.provider.<span class="variable">n</span>=<span class="variable">provName</span>|<span class="variable">className</span></code>.</span>
<div>
<p>If you configured your provider so that the <a href="https://docs.oracle.com/javase/9/docs/api/java/util/ServiceLoader.html" target="_blank"><span class="apiname">ServiceLoader</span></a> class can search for it (because you packaged the provider in a named module as described in <a href="howtoimplaprovider.htm#GUID-7C304A79-6D0B-438B-A02E-51648C909876" title="This step is optional but recommended; it enables you to package your provider in a named module. A modular JDK can then locate your provider in the module path as opposed to the class path. The module system can more thoroughly check for dependencies in modules in the module path. Note that you can use named modules in a non-modular JDK; the module declaration will be ignored. Also, you can still package your providers in unnamed or automatic modules.">Step 4: Create a Module Declaration for Your Provider</a> or added a <code>java.security.Provider</code> file as described in <a href="howtoimplaprovider.htm#GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F__ADDTHEFILEJAVA.SECURITY.PROVIDERTOU-025DFEDB">Add the File java.security.Provider to Use the ServiceLoader Class to Search for Providers</a>), then specify just the provider's name.</p>
<p>If you have not configured your provider so that <span class="apiname">ServiceLoader</span> class can search for it, which means that the JCE framework will search for it in the class path or module path, then specify the fully qualified class name of your provider.</p>
<p>For example, the highlighted line registers the provider <code class="codeph">MyProvider</code> (whose fully qualified class name is <code class="codeph">p.MyProvider</code> and has been configured so that the <span class="apiname">ServiceLoader</span> class can search for it) as the 14th preferred provider:</p>
<pre class="codeblock" dir="ltr">
# ...
security.provider.11=JdkSASL
security.provider.12=SunMSCAPI
security.provider.13=SunPKCS11
<span class="bold">security.provider.14=MyProvider</span>
</pre>
<p>If you are not sure if the <span class="apiname">ServiceLoader</span> mechanism will be used, or if you'll be deploying on a non-modular system, then you can also register the provider again, this time using the full class name:</p>
<pre dir="ltr">
security.provider.15=p.MyProvider
</pre></div>
</li>
</ol>
<div class="section">
<p>Alternatively, you can register providers dynamically. To do so, a program (such as your test program, to be written in <a href="howtoimplaprovider.htm#GUID-C6054169-FE6E-4837-B2BD-382DFEB955C0" title="Write and compile one or more test programs that test your provider's incorporation into the Security API as well as the correctness of its algorithm(s). Create any supporting files needed, such as those for test data to be encrypted.">Step 9: Write and Compile Your Test Programs</a>) call either the <code class="codeph">addProvider</code> or <code class="codeph">insertProviderAt</code> method in the <code class="codeph">Security</code> class:</p>
<pre dir="ltr">
ServiceLoader&lt;Provider&gt; sl = ServiceLoader.load(java.security.Provider.class);
for (Provider p : sl) {
    System.out.println(p);
    if (p.getName().equals("MyProvider")) {
        Security.addProvider(p);
    }
}
</pre>
<p>This type of registration is not persistent and can only be done by code which is granted the following permission:</p>
<pre class="codeblock" dir="ltr">
java.security.SecurityPermission "insertProvider.<span class="variable">&lt;provider name&gt;</span>"
</pre>
<p>For example, if the provider name is MyJCE, and if the provider's code is in the <code class="codeph">myjce_provider.jar</code> file in the <code class="codeph">/localWork</code> directory, then the following is a sample policy file that contains a <code class="codeph">grant</code> statement that grants that permission:</p>
<pre class="codeblock" dir="ltr">
    grant codeBase "file:/localWork/myjce_provider.jar" {
        permission java.security.SecurityPermission
            "insertProvider.MyJCE";
    };
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-6E267101-15F4-4E7B-A6EB-64E36AAD1285"></a>
<h4 id="JSSEC-GUID-6E267101-15F4-4E7B-A6EB-64E36AAD1285" class="sect4">Step 8.2: Set Provider Permissions</h4>
<div>
<div class="section">
<p><a href="java-security-overview1.htm#GUID-7A49C00B-BEA6-4050-9E32-6168211585F7" title="A permission represents access to a system resource. In order for a resource access to be allowed for an applet (or an application running with a security manager), the corresponding permission must be explicitly granted to the code attempting the access.">Permissions</a> must be granted for when applications are run while a security manager is installed. A security manager may be installed for an application either through code in the application itself or through a command-line argument.</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Your provider may need the following permissions granted to it in the client environment:</span>
<div>
<ul style="list-style-type: disc;">
<li><code class="codeph">java.lang.RuntimePermission</code> to get class protection domains. The provider may need to get its own protection domain in the process of doing self-integrity checking.</li>
<li><code class="codeph">java.security.SecurityPermission</code> to set provider properties.</li>
</ul>
</div>
</li>
<li class="stepexpand"><span>To ensure your provider works when a security manager is installed, you need to test such an installation and execution environment. In addition, prior to testing your need to grant appropriate permissions to your provider and to any other providers it uses.</span>
<div>
<p>For example, a sample statement granting permissions to a provider whose name is MyJCE and whose code is in <code class="codeph">myjce_provider.jar</code> appears below. Such a statement could appear in a policy file. In this example, the <code class="codeph">myjce_provider.jar</code> file is assumed to be in the <code class="codeph">/localWork</code> directory.</p>
<pre class="codeblock" dir="ltr">
    grant codeBase "file:/localWork/myjce_provider.jar" {
        permission java.lang.RuntimePermission "getProtectionDomain";
        permission java.security.SecurityPermission
            "putProviderProperty.MyJCE";
    };
</pre></div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-C6054169-FE6E-4837-B2BD-382DFEB955C0"></a>
<h3 id="JSSEC-GUID-C6054169-FE6E-4837-B2BD-382DFEB955C0" class="sect3">Step 9: Write and Compile Your Test Programs</h3>
<div>
<p>Write and compile one or more test programs that test your provider's incorporation into the Security API as well as the correctness of its algorithm(s). Create any supporting files needed, such as those for test data to be encrypted.</p>
<ol>
<li class="stepexpand"><span>The first tests your program should perform are ones to ensure that your provider is found, and that its name, version number, and additional information is as expected.</span>
<div>To do so, you could write code like the following, substituting your provider name for <code class="codeph">MyPro</code>:
<pre class="codeblock" dir="ltr">
    import java.security.*;

    Provider p = Security.getProvider("MyPro");

    System.out.println("MyPro provider name is " + p.getName());
    System.out.println("MyPro provider version # is " + p.getVersion());
    System.out.println("MyPro provider info is " + p.getInfo());
</pre></div>
</li>
<li class="stepexpand"><span>You should ensure that your services are found.</span>
<div>For instance, if you implemented the AES encryption algorithm, you could check to ensure it's found when requested by using the following code (again substituting your provider name for "MyPro"):
<pre class="codeblock" dir="ltr">
    Cipher c = Cipher.getInstance("AES", "MyPro");

    System.out.println("My Cipher algorithm name is " + c.getAlgorithm());
</pre></div>
</li>
<li class="stepexpand"><strong>Optional:</strong> <span>If you don't specify a provider name in the call to <code class="codeph">getInstance</code>, all registered providers will be searched, in preference order (see <a href="howtoimplaprovider.htm#GUID-831AA25F-F702-442D-A2E4-8DA6DEA16F33" title="Register your provider so that the JCE framework can find your provider, either with the ServiceLoader class or in the class path or module path.">Step 8.1: Configure the Provider</a>), until one implementing the algorithm is found.</span></li>
<li class="stepexpand"><strong>Optional:</strong> <span>If your provider implements an exemption mechanism, you should write a test applet or application that uses the exemption mechanism. Such an applet/application also needs to be signed, and needs to have a "permission policy file" bundled with it.</span>
<div>See <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-B74786B8-A0AD-4DC3-8A2D-2EF41084CE3D">How to Make Applications Exempt from Cryptographic Restrictions</a> for complete information on creating and testing such an application.</div>
</li>
</ol>
</div>
</div>
<div class="sect3"><a id="GUID-3FD26072-6982-4DCE-932C-DE152C463992"></a>
<h3 id="JSSEC-GUID-3FD26072-6982-4DCE-932C-DE152C463992" class="sect3">Step 10: Run Your Test Programs</h3>
<div>
<p>When you run your test applications, the required <code class="codeph">java</code> command options will vary depending on factors such as whether you packaged your provider as a named, automatic, or unnamed module and if you configured it so that the <span class="apiname">ServiceLoader</span> class can search for it.</p>
<div class="section">
<p>If you packaged your provider as a named module and have configured it so that the <span class="apiname">ServiceLoader</span> class can search for it (by registering it with its name in the <code>java.security</code> as described in <a href="howtoimplaprovider.htm#GUID-831AA25F-F702-442D-A2E4-8DA6DEA16F33" title="Register your provider so that the JCE framework can find your provider, either with the ServiceLoader class or in the class path or module path.">Step 8.1: Configure the Provider</a>), then run your test program with the following command:</p>
<pre dir="ltr">
java --module-path "jars" <span class="variable">&lt;other java options&gt;</span>
</pre>
<p>The directory <code>jars</code> contains your provider.</p>
<p>You may require more options depending on your provider code style (see <a href="howtoimplaprovider.htm#GUID-AB9C2460-0CF2-48BA-B9FE-7059071344CE">Step 3.1: Create a Provider That Uses String Objects to Register Its Services</a> and <a href="howtoimplaprovider.htm#GUID-CB446B7A-CEA2-4F4A-A4AF-4D492CB58733">Step 3.2: Create a Provider That Uses Provider.Service</a>), if you packaged your provider in a different kind of module, or if you have not configured it for the <span class="apiname">ServiceLoader</span> class. The following table describes these options.</p>
<p>For the <code class="codeph">java</code> commands, the name of the provider is <code class="codeph">MyProvider</code>, its fully qualified class name is <code class="codeph">p.MyProvider</code>, and it is packaged in the file <code>com.foo.MyProvider.jar</code>, which is in the directory <code>jars</code>.</p>
<div class="tblformal" id="GUID-3FD26072-6982-4DCE-932C-DE152C463992__GUID-BC884FEB-0E59-4323-BB7E-5AFEE114EB77">
<p class="titleintable">Table 3-2 Expected Java Runtime Options for Various Provider Implementation Styles</p>
<table class="cellalignment475" title="Expected Java Runtime Options for Various Provider Implementation Styles" summary="Expected java options depending on module type, provider coding style, and ServiceLoader class configuration">
<thead>
<tr class="cellalignment447">
<th class="cellalignment476" id="d34834e2545">Module Type</th>
<th class="cellalignment477" id="d34834e2547">Provider Code Style</th>
<th class="cellalignment464" id="d34834e2549">Configured for ServiceLoader Class?</th>
<th class="cellalignment478" id="d34834e2551">Provider Name Used in java.security File</th>
<th class="cellalignment479" id="d34834e2553">java Command</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2557" headers="d34834e2545">Unnamed</td>
<td class="cellalignment481" headers="d34834e2557 d34834e2547"><span class="apiname">String</span> objects or <span class="apiname">Provider.Service</span></td>
<td class="cellalignment466" headers="d34834e2557 d34834e2549">No</td>
<td class="cellalignment482" headers="d34834e2557 d34834e2551">Fully qualified class name</td>
<td class="cellalignment483" headers="d34834e2557 d34834e2553"><code class="codeph">java -cp "jars/com.foo.MyProvider.jar" <span class="variable">&lt;other java options&gt;</span></code></td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2575" headers="d34834e2545">Unnamed</td>
<td class="cellalignment481" headers="d34834e2575 d34834e2547"><span class="apiname">String</span> objects or <span class="apiname">Provider.Service</span></td>
<td class="cellalignment466" headers="d34834e2575 d34834e2549">Yes</td>
<td class="cellalignment482" headers="d34834e2575 d34834e2551">Fully qualified class name or provider name</td>
<td class="cellalignment483" headers="d34834e2575 d34834e2553"><code class="codeph">java -cp "jars/com.foo.MyProvider.jar" <span class="variable">&lt;other java options&gt;</span></code></td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2593" headers="d34834e2545">Automatic</td>
<td class="cellalignment481" headers="d34834e2593 d34834e2547"><span class="apiname">String</span> objects or <span class="apiname">Provider.Service</span></td>
<td class="cellalignment466" headers="d34834e2593 d34834e2549">No</td>
<td class="cellalignment482" headers="d34834e2593 d34834e2551">Fully qualified class name</td>
<td class="cellalignment483" headers="d34834e2593 d34834e2553"><code class="codeph">java --module&ndash;path "jars/com.foo.MyProvider.jar" --add&ndash;modules=com.foo.MyProvider <span class="variable">&lt;other java options&gt;</span></code></td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2611" headers="d34834e2545">Automatic</td>
<td class="cellalignment481" headers="d34834e2611 d34834e2547"><span class="apiname">String</span> objects or <span class="apiname">Provider.Service</span></td>
<td class="cellalignment466" headers="d34834e2611 d34834e2549">Yes</td>
<td class="cellalignment482" headers="d34834e2611 d34834e2551">Fully qualified class name or provider name</td>
<td class="cellalignment483" headers="d34834e2611 d34834e2553"><code class="codeph">java --module&ndash;path "jars/com.foo.MyProvider.jar" <span class="variable">&lt;other java options&gt;</span></code></td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2629" headers="d34834e2545">Named</td>
<td class="cellalignment481" headers="d34834e2629 d34834e2547"><span class="apiname">String</span> objects or <span class="apiname">Provider.Service</span></td>
<td class="cellalignment466" headers="d34834e2629 d34834e2549">No</td>
<td class="cellalignment482" headers="d34834e2629 d34834e2551">Fully qualified class name</td>
<td class="cellalignment483" headers="d34834e2629 d34834e2553"><code class="codeph">java --module&ndash;path "jars" --add&ndash;modules=com.foo.MyProvider --add&ndash;exports=com.foo.MyProvider/p=java.base <span class="variable">&lt;other java options&gt;</span></code>
<p>You can remove the <code class="codeph">--add-exports</code> option if you add <code class="codeph">exports p</code> in the module declaration.</p>
</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2655" headers="d34834e2545">Named</td>
<td class="cellalignment481" headers="d34834e2655 d34834e2547"><span class="apiname">String</span> objects</td>
<td class="cellalignment466" headers="d34834e2655 d34834e2549">Yes</td>
<td class="cellalignment482" headers="d34834e2655 d34834e2551">Fully qualified class name</td>
<td class="cellalignment483" headers="d34834e2655 d34834e2553"><code class="codeph">java --module&ndash;path "jars" --add&ndash;exports=com.foo.MyProvider/p=java.base <span class="variable">&lt;other java options&gt;</span></code>
<p>You can remove the <code class="codeph">--add-exports</code> option if you add <code class="codeph">exports p</code> in the module declaration.</p>
</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2679" headers="d34834e2545">Named</td>
<td class="cellalignment481" headers="d34834e2679 d34834e2547"><span class="apiname">String</span> objects</td>
<td class="cellalignment466" headers="d34834e2679 d34834e2549">Yes</td>
<td class="cellalignment482" headers="d34834e2679 d34834e2551">Provider name</td>
<td class="cellalignment483" headers="d34834e2679 d34834e2553"><code class="codeph">java --module&ndash;path "jars" --add&ndash;exports=com.foo.MyProvider/p=java.base <span class="variable">&lt;other java options&gt;</span></code>
<p>You can remove the <code class="codeph">--add-exports</code> option if you add <code class="codeph">exports p</code> in the module declaration.</p>
</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2703" headers="d34834e2545">Named</td>
<td class="cellalignment481" headers="d34834e2703 d34834e2547"><span class="apiname">Provider.Service</span></td>
<td class="cellalignment466" headers="d34834e2703 d34834e2549">Yes</td>
<td class="cellalignment482" headers="d34834e2703 d34834e2551">Fully qualified class name</td>
<td class="cellalignment483" headers="d34834e2703 d34834e2553"><code class="codeph">java --module&ndash;path "jars" --add&ndash;exports=com.foo.MyProvider/p=java.base<span class="variable">&lt;other java options&gt;</span></code>
<p>You can remove the <code class="codeph">--add-exports</code> option if you add <code class="codeph">exports p</code> in the module declaration.</p>
</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment480" id="d34834e2726" headers="d34834e2545">Named</td>
<td class="cellalignment481" headers="d34834e2726 d34834e2547"><span class="apiname">Provider.Service</span></td>
<td class="cellalignment466" headers="d34834e2726 d34834e2549">Yes</td>
<td class="cellalignment482" headers="d34834e2726 d34834e2551">Provider name</td>
<td class="cellalignment483" headers="d34834e2726 d34834e2553"><code class="codeph">java --module&ndash;path "jars" <span class="variable">&lt;other java options&gt;</span></code></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="p">
<p>Once you have determined the proper <code class="codeph">java</code> options for your test programs, run them. Debug your code and continue testing as needed. If the Java runtime cannot seem to find one of your algorithms, review the previous steps and ensure that they are all completed.</p>
<p>Be sure to include testing of your programs using different installation options (for example, configured to use the <span class="apiname">ServiceLoader</span> class or to be found in the class path or module path) and execution environments (with or without a security manager running).</p>
</div>
<!-- class="section" -->
<div class="p"></div>
<!-- class="section" -->
<ol>
<li id="GUID-3FD26072-6982-4DCE-932C-DE152C463992__IFYOUFINDDURINGTESTINGTHATYOURCODEN-7568E2A4"><strong>Optional:</strong> <span>If you find during testing that your code needs modification, make the changes and recompile <a href="howtoimplaprovider.htm#GUID-83742677-6E39-4A8D-BF0F-BC743E3AE43C">Step 5: Compile Your Code</a>.</span></li>
<li><span>Place the updated provider code in a JAR file (<a href="howtoimplaprovider.htm#GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F">Step 6: Place Your Provider in a JAR File</a>).</span></li>
<li><span>Sign the JAR file (<a href="howtoimplaprovider.htm#GUID-2D4432F9-1C3C-4A91-8612-2B2840188B36">Step 7: Sign Your JAR File, If Necessary</a>).</span></li>
<li><span>Re-configure the provider (<a href="howtoimplaprovider.htm#GUID-831AA25F-F702-442D-A2E4-8DA6DEA16F33" title="Register your provider so that the JCE framework can find your provider, either with the ServiceLoader class or in the class path or module path.">Step 8.1: Configure the Provider</a>).</span></li>
<li><strong>Optional:</strong> <span>If needed, fix or add to the permissions (<a href="howtoimplaprovider.htm#GUID-6E267101-15F4-4E7B-A6EB-64E36AAD1285">Step 8.2: Set Provider Permissions</a>).</span></li>
<li id="GUID-3FD26072-6982-4DCE-932C-DE152C463992__RE-TESTYOURPROGRAMS.-7568E6BE"><span>Run your programs.</span></li>
<li><strong>Optional:</strong> <span>If required, repeat steps 1 to 6.</span></li>
</ol>
</div>
</div>
<div class="sect3"><a id="GUID-A62916EE-BE09-4229-9D05-3D6AF303CA4E"></a>
<h3 id="JSSEC-GUID-A62916EE-BE09-4229-9D05-3D6AF303CA4E" class="sect3">Step 11: Apply for U.S. Government Export Approval If Required</h3>
<div>
<p>All U.S. vendors whose providers may be exported outside the U.S. should apply to the Bureau of Industry and Security in the U.S. Department of Commerce for export approval.</p>
<div class="section">Please consult your export counsel for more information.
<div class="p">
<div class="infobox-note" id="GUID-A62916EE-BE09-4229-9D05-3D6AF303CA4E__GUID-1600EB10-8AAE-40E5-8BFB-3CB61D506E4B">
<p class="notep1">Note:</p>
If your provider calls <code class="codeph">Cipher.getInstance()</code> and the returned <code class="codeph">Cipher</code> object needs to perform strong cryptography regardless of what cryptographic strength is allowed by the user's downloaded jurisdiction policy files, you should include a copy of the <code class="codeph">cryptoPerms</code> permission policy file which you intend to bundle in the JAR file for your provider and which specifies an appropriate permission for the required cryptographic strength. The necessity for this file is just like the requirement that applets and applications "exempt" from cryptographic restrictions must include a <code class="codeph">cryptoPerms</code> permission policy file in their JAR file. See <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-B74786B8-A0AD-4DC3-8A2D-2EF41084CE3D">How to Make Applications Exempt from Cryptographic Restrictions</a>.</div>
</div>
<p>Here are two URLs that may be useful:</p>
<ul style="list-style-type: disc;">
<li><a href="http://www.commerce.gov" target="_blank">US Department of Commerce</a></li>
<li><a href="http://www.bis.doc.gov" target="_blank">Bureau of Industry and Security</a></li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-912FAB1D-628A-47EA-A1DD-A216F2DD4245"></a>
<h3 id="JSSEC-GUID-912FAB1D-628A-47EA-A1DD-A216F2DD4245" class="sect3">Step 12: Document Your Provider and Its Supported Services</h3>
<div>
<div class="section">The next step is to write documentation for your clients. At the minimum, you need to specify:</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span>The name programs should use to refer to your provider.</span>
<div>
<div class="infobox-note" id="GUID-912FAB1D-628A-47EA-A1DD-A216F2DD4245__GUID-49816D37-1A18-4121-A552-CB368FB6ABA6">
<p class="notep1">Note:</p>
As of this writing, provider name searches are <span class="bold">case-sensitive</span>. That is, if your master class specifies your provider name as "CryptoX" but a user requests "CRYPTOx", your provider will not be found. This behavior may change in the future, but for now be sure to warn your clients to use the exact case you specify.</div>
</div>
</li>
<li class="stepexpand"><span>The types of algorithms and other services implemented by your provider.</span></li>
<li class="stepexpand"><span>Instructions for installing the provider, similar to those provided in <a href="howtoimplaprovider.htm#GUID-831AA25F-F702-442D-A2E4-8DA6DEA16F33" title="Register your provider so that the JCE framework can find your provider, either with the ServiceLoader class or in the class path or module path.">Step 8.1: Configure the Provider</a>, except that the information and examples should be specific to your provider.</span></li>
<li class="stepexpand"><span>The permissions your provider will require if it is not installed as an installed extension and if a security manager is run, as described in <a href="howtoimplaprovider.htm#GUID-6E267101-15F4-4E7B-A6EB-64E36AAD1285">Step 8.2: Set Provider Permissions</a>.</span></li>
</ul>
<div class="section">In addition, your documentation should specify anything else of interest to clients, such as any default algorithm parameters.</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-CC2277C4-14EA-45A8-BC81-8A0715FDC8E9"></a>
<h4 id="JSSEC-GUID-CC2277C4-14EA-45A8-BC81-8A0715FDC8E9" class="sect4">Step 12.1: Indicate Whether Your Implementation is Cloneable for Message Digests and MACs</h4>
<div>
<p>For each Message Digest and MAC algorithm, indicate whether or not your implementation is cloneable. This is not technically necessary, but it may save clients some time and coding by telling them whether or not intermediate Message Digests or MACs may be possible through cloning.</p>
<div class="section">
<p>Clients who do not know whether or not a <code class="codeph">MessageDigest</code> or <code class="codeph">Mac</code> implementation is cloneable can find out by attempting to clone the object and catching the potential exception, as illustrated by the following example:</p>
<pre class="codeblock" dir="ltr">
    try {
        // try and clone it
        /* compute the MAC for i1 */
        mac.update(i1);
        byte[] i1Mac = mac.clone().doFinal();

        /* compute the MAC for i1 and i2 */
        mac.update(i2);
        byte[] i12Mac = mac.clone().doFinal();

        /* compute the MAC for i1, i2 and i3 */
        mac.update(i3);
        byte[] i123Mac = mac.doFinal();
    } catch (CloneNotSupportedException cnse) {
        // have to use an approach not involving cloning
    } 
</pre>
<p>Where,</p>
<dl>
<dt class="dlterm"><a id="GUID-CC2277C4-14EA-45A8-BC81-8A0715FDC8E9__GUID-7F81CA19-A39F-4982-BEE5-24482BB92369"><!-- --></a><code class="codeph">mac</code></dt>
<dd>Indicates the MAC object they received when they requested one via a call to <code class="codeph">Mac.getInstance</code></dd>
<dt class="dlterm"><a id="GUID-CC2277C4-14EA-45A8-BC81-8A0715FDC8E9__GUID-68D66E9E-92AD-4A6F-B888-6E46A19A0330"><!-- --></a><code class="codeph">i1</code>, <code class="codeph">i2</code> and <code class="codeph">i3</code></dt>
<dd>Indicates input byte arrays, and they want to calculate separate hashes for:
<ul style="list-style-type: disc;">
<li><code class="codeph">i1</code></li>
<li><code class="codeph">i1 and i2</code></li>
<li><code class="codeph">i1, i2, and i3</code></li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Key Pair Generators</p>
<p>For a key pair generator algorithm, in case the client does not explicitly initialize the key pair generator (via a call to an <code class="codeph">initialize</code> method), each provider must supply and document a default initialization.</p>
<p>For example, the Diffie-Hellman key pair generator supplied by the <span class="variable">SunJCE</span> provider uses a default prime modulus size (<code class="codeph">keysize</code>) of 2048 bits.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Key Factories</p>
<p>A provider should document all the key specifications supported by its (secret-)key factory.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Algorithm Parameter Generators</p>
<p>In case the client does not explicitly initialize the algorithm parameter generator (via a call to an <code class="codeph">init</code> method in the <code class="codeph">AlgorithmParameterGenerator</code> engine class), each provider must supply and document a default initialization.</p>
<p>For example, the <span class="variable">SunJCE</span> provider uses a default prime modulus size (<code class="codeph">keysize</code>) of 2048 bits for the generation of Diffie-Hellman parameters, the <span class="variable">Sun</span> provider a default modulus prime size of 2048 bits for the generation of DSA parameters.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Signature Algorithms</p>
<p>If you implement a signature algorithm, you should document the format in which the signature (generated by one of the <code class="codeph">sign</code> methods) is encoded.</p>
<p>For example, the SHA256withDSA signature algorithm supplied by the "SUN" provider encodes the signature as a standard <code class="codeph">ASN.1 SEQUENCE</code> of two integers, <code class="codeph">r</code> and <code class="codeph">s</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Random Number Generation (SecureRandom) Algorithms</p>
<p>For a random number generation algorithm, provide information regarding how "random" the numbers generated are, and the quality of the seed when the random number generator is self-seeding. Also note what happens when a <code class="codeph">SecureRandom</code> object (and its encapsulated <code class="codeph">SecureRandomSpi</code> implementation object) is deserialized: If subsequent calls to the <code class="codeph">nextBytes</code> method (which invokes the <code class="codeph">engineNextBytes</code> method of the encapsulated <code class="codeph">SecureRandomSpi</code> object) of the restored object yield the exact same (random) bytes as the original object would, then let users know that if this behavior is undesirable, they should seed the restored random object by calling its <code class="codeph">setSeed</code> method.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Certificate Factories</p>
<p>A provider should document what types of certificates (and their version numbers, if relevant), can be created by the factory.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Keystores</p>
<p>A provider should document any relevant information regarding the keystore implementation, such as its underlying data format.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect3"><a id="GUID-3521E2A8-93B5-4D0F-AE2D-DC1B5E6857B7"></a>
<h3 id="JSSEC-GUID-3521E2A8-93B5-4D0F-AE2D-DC1B5E6857B7" class="sect3">Step 13: Make Your Class Files and Documentation Available to Clients</h3>
<div>
<p>After writing, configuring, testing, installing and documenting your provider software, make documentation available to your customers.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-C8B79D46-6EA9-4E27-8083-7CB967732BB3"></a>
<h2 id="JSSEC-GUID-C8B79D46-6EA9-4E27-8083-7CB967732BB3" class="sect2">Further Implementation Details and Requirements</h2>
<div>
<p>This section provides additional information about alias names, service interdependencies, algorithm parameter generators and algorithm parameters.</p>
</div>
<div class="sect3"><a id="GUID-735A3CD6-0EE5-423C-B5BA-61500BA20854"></a>
<h3 id="JSSEC-GUID-735A3CD6-0EE5-423C-B5BA-61500BA20854" class="sect3">Alias Names</h3>
<div>
<p>In the JDK, the aliasing scheme enables clients to use aliases when referring to algorithms or types, rather than the standard names.</p>
<p>For many cryptographic algorithms and types, there is a single official "standard name" defined in the <a href="https://docs.oracle.com/javase/9/docs/specs/security/standard-names.html" target="_blank">Java Security Standard Algorithm Names</a>.</p>
<p>For example, "SHA-256" is the standard name for the SHA-256 Message Digest algorithm defined in RFC 1321. <code class="codeph">DiffieHellman</code> is the standard for the Diffie-Hellman key agreement algorithm defined in PKCS3.</p>
<p>In the JDK, there is an aliasing scheme that enables clients to use aliases when referring to algorithms or types, rather than their standard names.</p>
<p>For example, the "SUN" provider's master class (<code class="codeph">Sun.java</code>) defines the alias <code class="codeph">"SHA1/DSA"</code> for the algorithm whose standard name is <code class="codeph">"SHA1withDSA"</code>. Thus, the following statements are equivalent:</p>
<pre class="codeblock" dir="ltr">
    Signature sig = Signature.getInstance("SHA1withDSA", "SUN");

    Signature sig = Signature.getInstance("SHA1/DSA", "SUN");
</pre>
<p>Aliases can be defined in your "master class" (see <a href="howtoimplaprovider.htm#GUID-1C82EDB9-96CA-44AB-8590-E299814D6A46" title="Create a subclass of the java.security.Provider class. This is essentially a lookup table that advertises the algorithms that your provider implements.">Step 3: Write Your Master Class, a Subclass of Provider</a>). To define an alias, create a property named</p>
<pre class="codeblock" dir="ltr">
    Alg.Alias.<span class="variable">engineClassName.aliasName</span>
</pre>
<p>where <span class="variable">engineClassName</span> is the name of an engine class (e.g., <code class="codeph">Signature</code>), and <span class="variable">aliasName</span> is your alias name. The <span class="variable">value</span> of the property must be the standard algorithm (or type) name for the algorithm (or type) being aliased.</p>
<p>As an example, the "SUN" provider defines the alias <code class="codeph">"SHA1/DSA"</code> for the signature algorithm whose standard name is <code class="codeph">"SHA1withDSA"</code> by setting a property named <code class="codeph">Alg.Alias.Signature.SHA1/DSA</code> to have the value <code class="codeph">SHA1withDSA</code> via the following:</p>
<pre class="codeblock" dir="ltr">
    put("Alg.Alias.Signature.SHA1/DSA", "SHA1withDSA");
</pre>
<div class="infobox-note" id="GUID-735A3CD6-0EE5-423C-B5BA-61500BA20854__GUID-A60FE441-C25A-4F2E-B63D-944121E2B674">
<p class="notep1">Note:</p>
The aliases defined by one provider are available only to that provider and not to any other providers. Thus, aliases defined by the <span class="variable">SunJCE</span> provider are available only to the <span class="variable">SunJCE</span> provider.</div>
</div>
</div>
<div class="sect3"><a id="GUID-8ED3CE1A-B25A-4E16-B45D-4EB36C9A7406"></a>
<h3 id="JSSEC-GUID-8ED3CE1A-B25A-4E16-B45D-4EB36C9A7406" class="sect3">Service Interdependencies</h3>
<div>
<p>Some algorithms require the use of other types of algorithms. For example, a PBE algorithm usually needs to use a message digest algorithm in order to transform a password into a key.</p>
<p>If you are implementing one type of algorithm that requires another, you can do one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Provide your own implementations for both.</p>
</li>
<li>
<p>Let your implementation of one algorithm use an instance of the other type of algorithm, as supplied by the default <span class="variable">Sun</span> provider that is included with every Java SE Platform installation. For example, if you are implementing a PBE algorithm that requires a message digest algorithm, you can obtain an instance of a class implementing the SHA256 message digest algorithm by calling:</p>
<pre dir="ltr">
    MessageDigest.getInstance("SHA256", "SUN")
</pre></li>
<li>
<p>Let your implementation of one algorithm use an instance of the other type of algorithm, as supplied by another specific provider. This is only appropriate if you are sure that all clients who will use your provider will also have the other provider installed.</p>
</li>
<li>
<p>Let your implementation of one algorithm use an instance of the other type of algorithm, as supplied by another (unspecified) provider. That is, you can request an algorithm by name, but without specifying any particular provider, as in:</p>
<pre dir="ltr">
    MessageDigest.getInstance("SHA256")
</pre>
<p>This is only appropriate if you are sure that there will be at least one implementation of the requested algorithm (in this case, SHA256) installed on each Java platform where your provider will be used.</p>
</li>
</ul>
<p>Here are some common types of algorithm interdependencies:</p>
<div class="section">
<p class="subhead3">Signature and Message Digest Algorithms</p>
<p>A signature algorithm often requires use of a message digest algorithm. For example, the SHA256withDSA signature algorithm requires the SHA256 message digest algorithm.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Signature and (Pseudo-)Random Number Generation Algorithms</p>
<p>A signature algorithm often requires use of a (pseudo-)random number generation algorithm. For example, such an algorithm is required in order to generate a DSA signature.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Key Pair Generation and Message Digest Algorithms</p>
<p>A key pair generation algorithm often requires use of a message digest algorithm. For example, DSA keys are generated using the SHA-256 message digest algorithm.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Algorithm Parameter Generation and Message Digest Algorithms</p>
<p>An algorithm parameter generator often requires use of a message digest algorithm. For example, DSA parameters are generated using the SHA-256 message digest algorithm.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Keystores and Message Digest Algorithms</p>
<p>A keystore implementation will often utilize a message digest algorithm to compute keyed hashes (where the key is a user-provided password) to check the integrity of a keystore and make sure that the keystore has not been tampered with.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Key Pair Generation Algorithms and Algorithm Parameter Generators</p>
<p>A key pair generation algorithm sometimes needs to generate a new set of algorithm parameters. It can either generate the parameters directly, or use an algorithm parameter generator.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Key Pair Generation, Algorithm Parameter Generation, and (Pseudo-)Random Number Generation Algorithms</p>
<p>A key pair generation algorithm may require a source of randomness in order to generate a new key pair and possibly a new set of parameters associated with the keys. That source of randomness is represented by a <span class="apiname">SecureRandom</span> object. The implementation of the key pair generation algorithm may generate the key parameters itself, or may use an algorithm parameter generator to generate them, in which case it may or may not initialize the algorithm parameter generator with a source of randomness.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Algorithm Parameter Generators and Algorithm Parameters</p>
<p>An algorithm parameter generator's <span class="apiname">engineGenerateParameters</span> method must return an <span class="apiname">AlgorithmParameters</span> instance.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Signature and Key Pair Generation Algorithms or Key Factories</p>
<p>If you are implementing a signature algorithm, your implementation's <span class="apiname">engineInitSign</span> and <span class="apiname">engineInitVerify</span> methods will require passed-in keys that are valid for the underlying algorithm (e.g., DSA keys for the DSS algorithm). You can do one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Also create your own classes implementing appropriate interfaces (e.g. classes implementing the <span class="apiname">DSAPrivateKey</span> and <span class="apiname">DSAPublicKey</span> interfaces from the package <span class="apiname">java.security.interfaces</span>), and create your own key pair generator and/or key factory returning keys of those types. Require the keys passed to <span class="apiname">engineInitSign</span> and <span class="apiname">engineInitVerify</span> to be the types of keys you have implemented, that is, keys generated from your key pair generator or key factory. Or you can,</p>
</li>
<li>
<p>Accept keys from other key pair generators or other key factories, as long as they are instances of appropriate interfaces that enable your signature implementation to obtain the information it needs (such as the private and public keys and the key parameters). For example, the <span class="apiname">engineInitSign</span> method for a DSS <span class="apiname">Signature</span> class could accept any private keys that are instances of <span class="apiname">java.security.interfaces.DSAPrivateKey</span>.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Keystores and Key and Certificate Factories</p>
<p>A keystore implementation will often utilize a key factory to parse the keys stored in the keystore, and a certificate factory to parse the certificates stored in the keystore.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-A46F72E3-DFF4-4864-8BBC-30684ADF78BA"></a>
<h3 id="JSSEC-GUID-A46F72E3-DFF4-4864-8BBC-30684ADF78BA" class="sect3">Default Initialization</h3>
<div>
<p>In case the client does not explicitly initialize a key pair generator or an algorithm parameter generator, each provider of such a service must supply (and document) a default initialization.</p>
<div class="example" id="GUID-A46F72E3-DFF4-4864-8BBC-30684ADF78BA__GUID-9E8C5B1A-BE08-456F-AD70-62B0CFD8764F">For example, the <span class="variable">Sun</span> provider uses a default modulus size (strength) of 1024 bits for the generation of DSA parameters, and the "SunJCE" provider uses a default modulus size (keysize) of 2048 bits for the generation of Diffie-Hellman parameters.</div>
<!-- class="example" --></div>
</div>
<div class="sect3"><a id="GUID-A80C8BAC-AD25-4328-AE62-987F805B6BAF"></a>
<h3 id="JSSEC-GUID-A80C8BAC-AD25-4328-AE62-987F805B6BAF" class="sect3">Default Key Pair Generator Parameter Requirements</h3>
<div>
<p>If you implement a key pair generator, your implementation should supply default parameters that are used when clients don't specify parameters.</p>
<div class="section">
<p>The documentation you supply (<a href="howtoimplaprovider.htm#GUID-912FAB1D-628A-47EA-A1DD-A216F2DD4245">Step 12: Document Your Provider and Its Supported Services</a>) should state what the default parameters are.</p>
<p>For example, the DSA key pair generator in the <span class="variable">Sun</span> provider supplies a set of pre-computed <code class="codeph">p</code>, <code class="codeph">q</code>, and <code class="codeph">g</code> default values for the generation of 512, 768, 1024, and 2048-bit key pairs. The following <code class="codeph">p</code>, <code class="codeph">q</code>, and <code class="codeph">g</code> values are used as the default values for the generation of 1024-bit DSA key pairs:</p>
<pre class="codeblock" dir="ltr">
p = fd7f5381 1d751229 52df4a9c 2eece4e7 f611b752 3cef4400 c31e3f80
    b6512669 455d4022 51fb593d 8d58fabf c5f5ba30 f6cb9b55 6cd7813b
    801d346f f26660b7 6b9950a5 a49f9fe8 047b1022 c24fbba9 d7feb7c6
    1bf83b57 e7c6a8a6 150f04fb 83f6d3c5 1ec30235 54135a16 9132f675
    f3ae2b61 d72aeff2 2203199d d14801c7

q = 9760508f 15230bcc b292b982 a2eb840b f0581cf5

g = f7e1a085 d69b3dde cbbcab5c 36b857b9 7994afbb fa3aea82 f9574c0b
    3d078267 5159578e bad4594f e6710710 8180b449 167123e8 4c281613
    b7cf0932 8cc8a6e1 3c167a8b 547c8d28 e0a3ae1e 2bb3a675 916ea37f
    0bfa2135 62f1fb62 7a01243b cca4f1be a8519089 a883dfe1 5ae59f06
    928b665e 807b5525 64014c3b fecf492a
</pre>
<p>(The <code class="codeph">p</code> and <code class="codeph">q</code> values given here were generated by the prime generation standard, using the 160-bit</p>
<pre class="codeblock" dir="ltr">
SEED:  8d515589 4229d5e6 89ee01e6 018a237e 2cae64cd
</pre>
<p>With this seed, the algorithm found <code class="codeph">p</code> and <code class="codeph">q</code> when the counter was at 92.)</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-B1428B09-5542-4D36-9C0D-D78A8B2B3C00"></a>
<h3 id="JSSEC-GUID-B1428B09-5542-4D36-9C0D-D78A8B2B3C00" class="sect3">The Provider.Service Class</h3>
<div>
<p><code class="codeph">Provider.Service</code> class offers an alternative way for providers to advertise their services and supports additional features.</p>
<div class="section">
<p>Since its introduction, security providers have published their service information via appropriately formatted key-value String pairs they put in their Hashtable entries. While this mechanism is simple and convenient, it limits the amount customization possible. As a result, JDK 5.0 introduced a second option, the <code class="codeph">Provider.Service</code> class. It offers an alternative way for providers to advertise their services and supports additional features as described below. Note that this addition is fully compatible with the older method of using String valued Hashtable entries. A provider on JDK 5.0 can choose either method as it prefers, or even use both at the same time.</p>
<p>A <code class="codeph">Provider.Service</code> object encapsulates all information about a service. This is the provider that offers the service, its type (e.g. <code class="codeph">MessageDigest</code> or <code class="codeph">Signature</code>), the algorithm name, and the name of the class that implements the service. Optionally, it also includes a list of alternate algorithm names for this service (aliases) and attributes, which are a map of (name, value) String pairs. In addition, it defines the methods <code class="codeph">newInstance()</code> and <code class="codeph">supportsParameter()</code>. They have default implementations, but can be overridden by providers if needed, as may be the case with providers that interface with hardware security tokens.</p>
<p>The <code class="codeph">newInstance()</code> method is used by the security framework when it needs to construct new implementation instances. The default implementation uses reflection to invoke the standard constructor for the respective type of service. For all standard services except <code class="codeph">CertStore</code>, this is the no-args constructor. The <code class="codeph">constructorParameter</code> to <span class="apiname">newInstance()</span> must be null in theses cases. For services of type <code class="codeph">CertStore</code>, the constructor that takes a <code class="codeph">CertStoreParameters</code> object is invoked, and <code class="codeph">constructorParameter</code> must be a non-null instance of <code class="codeph">CertStoreParameters.</code> A security provider can override the <span class="apiname">newInstance()</span> method to implement instantiation as appropriate for that implementation. It could use direct invocation or call a constructor that passes additional information specific to the Provider instance or token. For example, if multiple Smartcard readers are present on the system, it might pass information about which reader the newly created service is to be associated with. However, despite customization all implementations must follow the conventions about <code class="codeph">constructorParameter</code> described above.</p>
<p>The <span class="apiname">supportsParameter()</span> tests whether the Service can use the specified parameter. It returns false if this service cannot use the parameter. It returns true if this service can use the parameter, if a fast test is infeasible, or if the status is unknown. It is used by the security framework with some types of services to quickly exclude non-matching implementations from consideration. It is currently only defined for the following standard services: <code class="codeph">Signature</code>, <code class="codeph">Cipher</code>, <code class="codeph">Mac</code>, and <code class="codeph">KeyAgreement</code>. The <code class="codeph">parameter</code> must be an instance of <code class="codeph">Key</code> in these cases. For example, for <code class="codeph">Signature</code> services, the framework tests whether the service can use the supplied Key before instantiating the service. The default implementation examines the attributes <code class="codeph">SupportedKeyFormats</code> and <code class="codeph">SupportedKeyClasses</code> as described below. Again, a provider may override this methods to implement additional tests.</p>
<p>The <code class="codeph">SupportedKeyFormats</code> attribute is a list of the supported formats for encoded keys (as returned by <code class="codeph">key.getFormat()</code>) separated by the "|" (pipe) character. For example, <code class="codeph">X.509|PKCS#8</code>. The <code class="codeph">SupportedKeyClasses</code> attribute is a list of the names of classes of interfaces separated by the "|" character. A key object is considered to be acceptable if it is assignable to at least one of those classes or interfaces named. In other words, if the class of the key object is a subclass of one of the listed classes (or the class itself) or if it implements the listed interface. An example value is <code class="codeph">"java.security.interfaces.RSAPrivateKey|java.security.interfaces.RSAPublicKey"</code> .</p>
<p>Four methods have been added to the Provider class for adding and looking up Services. As mentioned earlier, the implementation of those methods and also of the existing Properties methods have been specifically designed to ensure compatibility with existing Provider subclasses. This is achieved as follows:</p>
<p>If legacy Properties methods are used to add entries, the Provider class makes sure that the property strings are parsed into equivalent Service objects prior to lookup via <span class="apiname">getService()</span>. Similarly, if the <span class="apiname">putService()</span> method is used, equivalent property strings are placed into the provider's hashtable at the same time. If a provider implementation overrides any of the methods in the Provider class, it has to ensure that its implementation does not interfere with this conversion. To avoid problems, we recommend that implementations do not override any of the methods in the <code class="codeph">Provider</code> class.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-604DD293-1F38-487D-A2F9-F9E95F5D727C"></a>
<h3 id="JSSEC-GUID-604DD293-1F38-487D-A2F9-F9E95F5D727C" class="sect3">Signature Formats</h3>
<div>
<p>The signature algorithm should specify the format in which the signature is encoded.</p>
<div class="section">
<p>If you implement a signature algorithm, the documentation you supply (<a href="howtoimplaprovider.htm#GUID-912FAB1D-628A-47EA-A1DD-A216F2DD4245">Step 12: Document Your Provider and Its Supported Services</a>) should specify the format in which the signature (generated by one of the <code class="codeph">sign</code> methods) is encoded.</p>
<p>For example, the <span class="variable">SHA1withDSA</span> signature algorithm supplied by the <span class="variable">Sun</span> provider encodes the signature as a standard ASN.1 sequence of two <code class="codeph">ASN.1 INTEGER</code> values: <code class="codeph">r</code> and <code class="codeph">s</code>, in that order:</p>
<pre class="codeblock" dir="ltr">
SEQUENCE ::= {
        r INTEGER,
        s INTEGER }
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9"></a>
<h3 id="JSSEC-GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9" class="sect3">DSA Interfaces and their Required Implementations</h3>
<div>
<p>The Java Security API contains interfaces (in the <code class="codeph">java.security.interfaces</code> package) for the convenience of programmers implementing DSA services.</p>
<div class="section">
<p>The Java Security API contains the following interfaces:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAKey.html" target="_blank"><code class="codeph">Interface DSAKey</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAKeyPairGenerator.html" target="_blank"><code class="codeph">Interface DSAKeyPairGenerator</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAParams.html" target="_blank"><code class="codeph">Interface DSAParams</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAPrivateKey.html" target="_blank"><code class="codeph">Interface DSAPrivateKey</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAPublicKey.html" target="_blank"><code class="codeph">Interface DSAPublicKey</code></a></p>
</li>
</ul>
<p>The following sections discuss requirements for implementations of these interfaces.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9__DSAKEYPAIRGENERATOR-7140AF61">
<p class="subhead3">DSAKeyPairGenerator</p>
<p>The interface <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAKeyPairGenerator.html" target="_blank"><code class="codeph">Interface DSAKeyPairGenerator</code></a> is obsolete. It used to be needed to enable clients to provide DSA-specific parameters to be used rather than the default parameters your implementation supplies. However, in Java it is no longer necessary; a new <code class="codeph">KeyPairGenerator</code> <code class="codeph">initialize</code> method that takes an <code class="codeph">AlgorithmParameterSpec</code> parameter enables clients to indicate algorithm-specific parameters.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9__DSAPARAMSIMPLEMENTATION-7140B38E">
<p class="subhead3">DSAParams Implementation</p>
<p>If you are implementing a DSA key pair generator, you need a class implementing <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAParams.html" target="_blank"><code class="codeph">Interface DSAParams</code></a> for holding and returning the <code class="codeph">p</code>, <code class="codeph">q</code>, and <code class="codeph">g</code> parameters.</p>
<p>A <code class="codeph">DSAParams</code> implementation is also required if you implement the <code class="codeph">DSAPrivateKey</code> and <code class="codeph">DSAPublicKey</code> interfaces. <code class="codeph">DSAPublicKey</code> and <code class="codeph">DSAPrivateKey</code> both extend the DSAKey interface, which contains a <code class="codeph">getParams</code> method that must return a <code class="codeph">DSAParams</code> object.</p>
<div class="p">
<div class="infobox-note" id="GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9__GUID-421108DE-1D1A-4A5F-BB41-D64F0B5B8B38">
<p class="notep1">Note:</p>
There is a <code class="codeph">DSAParams</code> implementation built into the JDK: the <code class="codeph">java.security.spec.DSAParameterSpec</code> class.</div>
</div>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9__DSAPRIVATEKEYANDDSAPUBLICKEYIMPLEME-7140B6D2">
<p class="subhead3">DSAPrivateKey and DSAPublicKey Implementations</p>
<p>If you implement a DSA key pair generator or key factory, you need to create classes implementing the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAPrivateKey.html" target="_blank"><code class="codeph">Interface DSAPrivateKey</code></a> and <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAPublicKey.html" target="_blank"><code class="codeph">Interface DSAPublicKey</code></a> interfaces.</p>
<p>If you implement a DSA key pair generator, your <code class="codeph">generateKeyPair</code> method (in your <code class="codeph">KeyPairGeneratorSpi</code> subclass) will return instances of your implementations of those interfaces.</p>
<p>If you implement a DSA key factory, your <code class="codeph">engineGeneratePrivate</code> method (in your <code class="codeph">KeyFactorySpi</code> subclass) will return an instance of your <code class="codeph">DSAPrivateKey</code> implementation, and your <code class="codeph">engineGeneratePublic</code> method will return an instance of your <code class="codeph">DSAPublicKey</code> implementation.</p>
<p>Also, your <code class="codeph">engineGetKeySpec</code> and <code class="codeph">engineTranslateKey</code> methods will expect the passed-in key to be an instance of a <code class="codeph">DSAPrivateKey</code> or <code class="codeph">DSAPublicKey</code> implementation. The <code class="codeph">getParams</code> method provided by the interface implementations is useful for obtaining and extracting the parameters from the keys and then using the parameters, for example as parameters to the <code class="codeph">DSAParameterSpec</code> constructor called to create a parameter specification from parameter values that could be used to initialize a <code class="codeph">KeyPairGenerator</code> object for DSA.</p>
<p>If you implement a DSA signature algorithm, your <code class="codeph">engineInitSign</code> method (in your <code class="codeph">SignatureSpi</code> subclass) will expect to be passed a <code class="codeph">DSAPrivateKey</code> and your <code class="codeph">engineInitVerify</code> method will expect to be passed a <code class="codeph">DSAPublicKey</code>.</p>
<p>Please note: The <code class="codeph">DSAPublicKey</code> and <code class="codeph">DSAPrivateKey</code> interfaces define a very generic, provider-independent interface to DSA public and private keys, respectively. The <code class="codeph">engineGetKeySpec</code> and <code class="codeph">engineTranslateKey</code> methods (in your <code class="codeph">KeyFactorySpi</code> subclass) could additionally check if the passed-in key is actually an instance of their provider's own implementation of <code class="codeph">DSAPrivateKey</code> or <code class="codeph">DSAPublicKey</code>, e.g., to take advantage of provider-specific implementation details. The same is true for the DSA signature algorithm <code class="codeph">engineInitSign</code> and <code class="codeph">engineInitVerify</code> methods (in your <code class="codeph">SignatureSpi</code> subclass).</p>
<p>To see what methods need to be implemented by classes that implement the <code class="codeph">DSAPublicKey</code> and <code class="codeph">DSAPrivateKey</code> interfaces, first note the following interface signatures:</p>
<p>In the <code class="codeph">java.security.interfaces</code> package:</p>
<pre class="codeblock" dir="ltr">
   public interface DSAPrivateKey extends DSAKey,
                java.security.PrivateKey

   public interface DSAPublicKey extends DSAKey,
                java.security.PublicKey

   public interface DSAKey 
</pre>
<p>In the <code class="codeph">java.security</code> package:</p>
<pre class="codeblock" dir="ltr">
   public interface PrivateKey extends Key

   public interface PublicKey extends Key

   public interface Key extends java.io.Serializable 
</pre>
<p>In order to implement the <code class="codeph">DSAPrivateKey</code> and <code class="codeph">DSAPublicKey</code> interfaces, you must implement the methods they define as well as those defined by interfaces they extend, directly or indirectly.</p>
<p>Thus, for private keys, you need to supply a class that implements</p>
<ul style="list-style-type: disc;">
<li>The <code class="codeph">getX</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAPrivateKey.html" target="_blank"><code class="codeph">Interface DSAPrivateKey</code></a> interface.</li>
<li>The <code class="codeph">getParams</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAKey.html" target="_blank"><code class="codeph">Interface DSAKey</code></a> interface, since <code class="codeph">DSAPrivateKey</code> extends <code class="codeph">DSAKey</code>. Note: The <code class="codeph">getParams</code> method returns a <code class="codeph">DSAParams</code> object, so you must also have a <a href="howtoimplaprovider.htm#GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9__DSAPARAMSIMPLEMENTATION-7140B38E"><code class="codeph">DSAParams</code> implementation</a>.</li>
<li>The <code class="codeph">getAlgorithm</code>, <code class="codeph">getEncoded</code>, and <code class="codeph">getFormat</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/Key.html" target="_blank"><code class="codeph">Interface Key</code></a> interface, since <code class="codeph">DSAPrivateKey</code> extends <code class="codeph">java.security.PrivateKey</code>, and <code class="codeph">PrivateKey</code> extends <code class="codeph">Key</code>.
<p>Similarly, for public DSA keys, you need to supply a class that implements:</p>
<ul style="list-style-type: disc;">
<li>The <code class="codeph">getY</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAPublicKey.html" target="_blank"><code class="codeph">Interface DSAPublicKey</code></a> interface.</li>
<li>The <code class="codeph">getParams</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/DSAKey.html" target="_blank"><code class="codeph">Interface DSAKey</code></a> interface, since <code class="codeph">DSAPublicKey</code> extends DSAKey.
<div class="infobox-note" id="GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9__GUID-9A51D01D-705B-4488-976E-73983D4591CF">
<p class="notep1">Note:</p>
The <code class="codeph">getParams</code> method returns a <code class="codeph">DSAParams</code> object, so you must also have a <a href="howtoimplaprovider.htm#GUID-C618C5AF-737E-41AB-8FD3-6F5BB8A319A9__DSAPARAMSIMPLEMENTATION-7140B38E">DSAParams Implementation</a>.</div>
</li>
<li>The <code class="codeph">getAlgorithm</code>, <code class="codeph">getEncoded</code>, and <code class="codeph">getFormat</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/Key.html" target="_blank"><code class="codeph">Interface Key</code></a>, since <code class="codeph">DSAPublicKey</code> extends <code class="codeph">java.security.PublicKey</code>, and <code class="codeph">PublicKey</code> extends <code class="codeph">Key</code>.</li>
</ul>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-353BF021-CABC-4CB4-A019-927D423B4627"></a>
<h3 id="JSSEC-GUID-353BF021-CABC-4CB4-A019-927D423B4627" class="sect3">RSA Interfaces and their Required Implementations</h3>
<div>
<p>The Java Security API contains the interfaces (in the <code class="codeph">java.security.interfaces</code> package) for the convenience of programmers implementing RSA services.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPrivateKey.html" target="_blank"><code class="codeph">Interface RSAPrivateKey</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPrivateCrtKey.html" target="_blank"><code class="codeph">Interface RSAPrivateCrtKey</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPublicKey.html" target="_blank"><code class="codeph">Interface RSAPublicKey</code></a></p>
</li>
</ul>
The following sections discuss requirements for implementations of these interfaces.</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">RSAPrivateKey, RSAPrivateCrtKey, and RSAPublicKey Implementations</p>
<p>If you implement an RSA key pair generator or key factory, you need to create classes implementing the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPublicKey.html" target="_blank"><code class="codeph">Interface RSAPublicKey</code></a> (and/or <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPrivateCrtKey.html" target="_blank"><code class="codeph">Interface RSAPrivateCrtKey</code></a>) and <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPublicKey.html" target="_blank"><code class="codeph">Interface RSAPublicKey</code></a> interfaces. (<code class="codeph">RSAPrivateCrtKey</code> is the interface to an RSA private key, using the <span class="variable">Chinese Remainder Theorem</span> (CRT) representation.)</p>
<p>If you implement an RSA key pair generator, your <code class="codeph">generateKeyPair</code> method (in your <code class="codeph">KeyPairGeneratorSpi</code> subclass) will return instances of your implementations of those interfaces.</p>
<p>If you implement an RSA key factory, your <code class="codeph">engineGeneratePrivate</code> method (in your <code class="codeph">KeyFactorySpi</code> subclass) will return an instance of your <code class="codeph">RSAPrivateKey</code> (or <code class="codeph">RSAPrivateCrtKey</code>) implementation, and your <code class="codeph">engineGeneratePublic</code> method will return an instance of your <code class="codeph">RSAPublicKey</code> implementation.</p>
<p>Also, your <code class="codeph">engineGetKeySpec</code> and <code class="codeph">engineTranslateKey</code> methods will expect the passed-in key to be an instance of an <code class="codeph">RSAPrivateKey</code>, <code class="codeph">RSAPrivateCrtKey</code>, or <code class="codeph">RSAPublicKey</code> implementation.</p>
<p>If you implement an RSA signature algorithm, your <code class="codeph">engineInitSign</code> method (in your <code class="codeph">SignatureSpi</code> subclass) will expect to be passed either an <code class="codeph">RSAPrivateKey</code> or an <code class="codeph">RSAPrivateCrtKey</code>, and your <code class="codeph">engineInitVerify</code> method will expect to be passed an <code class="codeph">RSAPublicKey</code>.</p>
<p>Please note: The <code class="codeph">RSAPublicKey</code>, <code class="codeph">RSAPrivateKey</code>, and <code class="codeph">RSAPrivateCrtKey</code> interfaces define a very generic, provider-independent interface to RSA public and private keys. The <code class="codeph">engineGetKeySpec</code> and <code class="codeph">engineTranslateKey</code> methods (in your <code class="codeph">KeyFactorySpi</code> subclass) could additionally check if the passed-in key is actually an instance of their provider's own implementation of <code class="codeph">RSAPrivateKey</code>, <code class="codeph">RSAPrivateCrtKey</code>, or <code class="codeph">RSAPublicKey</code>, e.g., to take advantage of provider-specific implementation details. The same is true for the RSA signature algorithm <code class="codeph">engineInitSign</code> and <code class="codeph">engineInitVerify</code> methods (in your <code class="codeph">SignatureSpi</code> subclass).</p>
<p>To see what methods need to be implemented by classes that implement the <code class="codeph">RSAPublicKey</code>, <code class="codeph">RSAPrivateKey</code>, and <code class="codeph">RSAPrivateCrtKey</code> interfaces, first note the following interface signatures:</p>
<p>In the <code class="codeph">java.security.interfaces</code> package:</p>
<pre class="codeblock" dir="ltr">
    public interface RSAPrivateKey extends java.security.PrivateKey

    public interface RSAPrivateCrtKey extends RSAPrivateKey

    public interface RSAPublicKey extends java.security.PublicKey

</pre>
<p>In the <code class="codeph">java.security</code> package:</p>
<pre class="codeblock" dir="ltr">
    public interface PrivateKey extends Key

    public interface PublicKey extends Key

    public interface Key extends java.io.Serializable
</pre>
<p>In order to implement the <code class="codeph">RSAPrivateKey</code>, <code class="codeph">RSAPrivateCrtKey</code>, and <code class="codeph">RSAPublicKey</code> interfaces, you must implement the methods they define as well as those defined by interfaces they extend, directly or indirectly.</p>
<p>Thus, for RSA private keys, you need to supply a class that implements:</p>
<ul style="list-style-type: disc;">
<li>The <code class="codeph">getModulus</code> and <code class="codeph">getPrivateExponent</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPrivateKey.html" target="_blank"><code class="codeph">Interface RSAPrivateKey</code></a> interface.</li>
<li>The <code class="codeph">getAlgorithm</code>, <code class="codeph">getEncoded</code>, and <code class="codeph">getFormat</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/Key.html" target="_blank"><code class="codeph">Interface Key</code></a> interface, since <code class="codeph">RSAPrivateKey</code> extends <code class="codeph">java.security.PrivateKey</code>, and <code class="codeph">PrivateKey</code> extends <code class="codeph">Key</code>.</li>
</ul>
<p>Similarly, for RSA private keys using the <span class="variable">Chinese Remainder Theorem</span> (CRT) representation, you need to supply a class that implements:</p>
<ul style="list-style-type: disc;">
<li>All the methods listed above for RSA private keys, since <code class="codeph">RSAPrivateCrtKey</code> extends <code class="codeph">java.security.interfaces.RSAPrivateKey</code>.</li>
<li>The <code class="codeph">getPublicExponent</code>, <code class="codeph">getPrimeP</code>, <code class="codeph">getPrimeQ</code>, <code class="codeph">getPrimeExponentP</code>, <code class="codeph">getPrimeExponentQ</code>, and <code class="codeph">getCrtCoefficient</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPrivateKey.html" target="_blank"><code class="codeph">Interface RSAPrivateKey</code></a> interface.</li>
</ul>
<p>For public RSA keys, you need to supply a class that implements:</p>
<ul style="list-style-type: disc;">
<li>The <code class="codeph">getModulus</code> and <code class="codeph">getPublicExponent</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/interfaces/RSAPublicKey.html" target="_blank"><code class="codeph">Interface RSAPublicKey</code></a> interface.</li>
<li>The <code class="codeph">getAlgorithm</code>, <code class="codeph">getEncoded</code>, and <code class="codeph">getFormat</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/Key.html" target="_blank"><code class="codeph">Interface Key</code></a> interface, since <code class="codeph">RSAPublicKey</code> extends <code class="codeph">java.security.PublicKey</code>, and <code class="codeph">PublicKey</code> extends <code class="codeph">Key</code>.</li>
</ul>
<p>JCA contains a number of <code class="codeph">AlgorithmParameterSpec</code> implementations for the most frequently used cipher and key agreement algorithm parameters. If you are operating on algorithm parameters that should be for a different type of algorithm not provided by JCA, you will need to supply your own <code class="codeph">AlgorithmParameterSpec</code> implementation appropriate for that type of algorithm.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-E63F9312-ED15-41D5-8F62-93C6137D5F06"></a>
<h3 id="JSSEC-GUID-E63F9312-ED15-41D5-8F62-93C6137D5F06" class="sect3">Diffie-Hellman Interfaces and their Required Implementations</h3>
<div>
<p>JCA contains interfaces (in the <code class="codeph">javax.crypto.interfaces</code> package) for the convenience of programmers implementing Diffie-Hellman services.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHPublicKey.html" target="_blank"><code class="codeph">Interface DHPublicKey</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHKey.html" target="_blank"><code class="codeph">Interface DHKey</code></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHPrivateKey.html" target="_blank"><code class="codeph">Interface DHPrivateKey</code></a></p>
</li>
</ul>
<p>The following sections discuss requirements for implementations of these interfaces.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">DHPrivateKey and DHPublicKey Implementations</p>
<p>If you implement a Diffie-Hellman key pair generator or key factory, you need to create classes implementing the <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHPrivateKey.html" target="_blank"><code class="codeph">Interface DHPrivateKey</code></a> and <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHPublicKey.html" target="_blank"><code class="codeph">Interface DHPublicKey</code></a> interfaces.</p>
<p>If you implement a Diffie-Hellman key pair generator, your <code class="codeph">generateKeyPair</code> method (in your <code class="codeph">KeyPairGeneratorSpi</code> subclass) will return instances of your implementations of those interfaces.</p>
<p>If you implement a Diffie-Hellman key factory, your <code class="codeph">engineGeneratePrivate</code> method (in your <code class="codeph">KeyFactorySpi</code> subclass) will return an instance of your <code class="codeph">DHPrivateKey</code> implementation, and your <code class="codeph">engineGeneratePublic</code> method will return an instance of your <code class="codeph">DHPublicKey</code> implementation.</p>
<p>Also, your <code class="codeph">engineGetKeySpec</code> and <code class="codeph">engineTranslateKey</code> methods will expect the passed-in key to be an instance of a <code class="codeph">DHPrivateKey</code> or <code class="codeph">DHPublicKey</code> implementation. The <code class="codeph">getParams</code> method provided by the interface implementations is useful for obtaining and extracting the parameters from the keys. You can then use the parameters, for example, as parameters to the <code class="codeph">DHParameterSpec</code> constructor called to create a parameter specification from parameter values used to initialize a <code class="codeph">KeyPairGenerator</code> object for Diffie-Hellman.</p>
<p>If you implement the Diffie-Hellman key agreement algorithm, your <code class="codeph">engineInit</code> method (in your <code class="codeph">KeyAgreementSpi</code> subclass) will expect to be passed a <code class="codeph">DHPrivateKey</code> and your <code class="codeph">engineDoPhase</code> method will expect to be passed a <code class="codeph">DHPublicKey</code>.</p>
<div class="p">
<div class="infobox-note" id="GUID-E63F9312-ED15-41D5-8F62-93C6137D5F06__GUID-53C9A9A7-1921-4ABC-A1D6-AB8E2714B75B">
<p class="notep1">Note:</p>
The <code class="codeph">DHPublicKey</code> and <code class="codeph">DHPrivateKey</code> interfaces define a very generic, provider-independent interface to Diffie-Hellman public and private keys, respectively. The <code class="codeph">engineGetKeySpec</code> and <code class="codeph">engineTranslateKey</code> methods (in your <span class="apiname">KeyFactorySpi</span> subclass) could additionally check if the passed-in key is actually an instance of their provider's own implementation of <code class="codeph">DHPrivateKey</code> or <code class="codeph">DHPublicKey</code>, e.g., to take advantage of provider-specific implementation details. The same is true for the Diffie-Hellman algorithm <code class="codeph">engineInit</code> and <code class="codeph">engineDoPhase</code> methods (in your <code class="codeph">KeyAgreementSpi</code> subclass).</div>
</div>
<p>To see what methods need to be implemented by classes that implement the <code class="codeph">DHPublicKey</code> and <code class="codeph">DHPrivateKey</code> interfaces, first note the following interface signatures:</p>
<p>In the <code class="codeph">javax.crypto.interfaces</code> package:</p>
<pre class="codeblock" dir="ltr">
    public interface DHPrivateKey extends DHKey, java.security.PrivateKey

    public interface DHPublicKey extends DHKey, java.security.PublicKey

    public interface DHKey 
</pre>
<p>In the <code class="codeph">java.security</code> package:</p>
<pre class="codeblock" dir="ltr">
    public interface PrivateKey extends Key

    public interface PublicKey extends Key

    public interface Key extends java.io.Serializable 
</pre>
<p>To implement the <code class="codeph">DHPrivateKey</code> and <code class="codeph">DHPublicKey</code> interfaces, you must implement the methods they define as well as those defined by interfaces they extend, directly or indirectly.</p>
<p>Thus, for private keys, you need to supply a class that implements:</p>
<ul style="list-style-type: disc;">
<li>The <code class="codeph">getX</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHPrivateKey.html" target="_blank"><code class="codeph">Interface DHPrivateKey</code></a> interface.</li>
<li>The <code class="codeph">getParams</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHKey.html" target="_blank"><code class="codeph">Interface DHKey</code></a> interface, since <code class="codeph">DHPrivateKey</code> extends <code class="codeph">DHKey</code>.</li>
<li>The <code class="codeph">getAlgorithm</code>, <code class="codeph">getEncoded</code>, and <code class="codeph">getFormat</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/Key.html" target="_blank"><code class="codeph">Interface Key</code></a> interface, since <code class="codeph">DHPrivateKey</code> extends <code class="codeph">java.security.PrivateKey</code>, and <code class="codeph">PrivateKey</code> extends <code class="codeph">Key</code>.</li>
</ul>
<p>Similarly, for public Diffie-Hellman keys, you need to supply a class that implements:</p>
<ul style="list-style-type: disc;">
<li>The <code class="codeph">getY</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHPublicKey.html" target="_blank"><code class="codeph">Interface DHPublicKey</code></a> interface.</li>
<li>The <code class="codeph">getParams</code> method from the <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/interfaces/DHKey.html" target="_blank"><code class="codeph">Interface DHKey</code></a> interface, since <code class="codeph">DHPublicKey</code> extends <code class="codeph">DHKey</code>.</li>
<li>The <code class="codeph">getAlgorithm</code>, <code class="codeph">getEncoded</code>, and <code class="codeph">getFormat</code> methods from the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/Key.html" target="_blank"><code class="codeph">Interface Key</code></a> interface, since <code class="codeph">DHPublicKey</code> extends <code class="codeph">java.security.PublicKey</code>, and <code class="codeph">PublicKey</code> extends <code class="codeph">Key</code>.</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-6F87545B-E4EF-4EA7-8EAF-0FEA9DB2495E"></a>
<h3 id="JSSEC-GUID-6F87545B-E4EF-4EA7-8EAF-0FEA9DB2495E" class="sect3">Interfaces for Other Algorithm Types</h3>
<div>
<p>As noted above, the Java Security API contains interfaces for the convenience of programmers implementing services like DSA, RSA and ECC. If there are services without API support, you need to define your own APIs.</p>
<div class="section">
<p>If you are implementing a key pair generator for a different algorithm, you should create an interface with one or more <code class="codeph">initialize</code> methods that clients can call when they want to provide algorithm-specific parameters to be used rather than the default parameters your implementation supplies. Your subclass of <code class="codeph">KeyPairGeneratorSpi</code> should implement this interface.</p>
<p>For algorithms without direct API support, it is recommended that you create similar interfaces and provide implementation classes. Your public key interface should extend the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/PublicKey.html" target="_blank"><code class="codeph">Interface PublicKey</code></a> interface. Similarly, your private key interface should extend the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/PrivateKey.html" target="_blank"><code class="codeph">Interface PrivateKey</code></a> interface.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9"></a>
<h3 id="JSSEC-GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9" class="sect3">Algorithm Parameter Specification Interfaces and Classes</h3>
<div>
<p>An algorithm parameter specification is a transparent representation of the sets of parameters used with an algorithm.</p>
<div class="section">
<p>A <span class="variable">transparent</span> representation of parameters means that you can access each value individually, through one of the <span class="variable">get</span> methods defined in the corresponding specification class (e.g., <code class="codeph">DSAParameterSpec</code> defines <code class="codeph">getP</code>, <code class="codeph">getQ</code>, and <code class="codeph">getG</code> methods, to access the p, q, and g parameters, respectively).</p>
<p>This is contrasted with an <span class="variable">opaque</span> representation, as supplied by the <code class="codeph">AlgorithmParameters</code> engine class, in which you have no direct access to the key material values; you can only get the name of the algorithm associated with the parameter set (via <code class="codeph">getAlgorithm</code>) and some kind of encoding for the parameter set (via <code class="codeph">getEncoded</code>).</p>
<p>If you supply an <code class="codeph">AlgorithmParametersSpi</code>, <code class="codeph">AlgorithmParameterGeneratorSpi</code>, or <code class="codeph">KeyPairGeneratorSpi</code> implementation, you must utilize the <code class="codeph">AlgorithmParameterSpec</code> interface, since each of those classes contain methods that take an <code class="codeph">AlgorithmParameterSpec</code> parameter. Such methods need to determine which actual implementation of that interface has been passed in, and act accordingly.</p>
<p>JCA contains a number of <code class="codeph">AlgorithmParameterSpec</code> implementations for the most frequently used signature, cipher and key agreement algorithm parameters. If you are operating on algorithm parameters that should be for a different type of algorithm not provided by JCA, you will need to supply your own <code class="codeph">AlgorithmParameterSpec</code> implementation appropriate for that type of algorithm.</p>
<p>Java defines the following algorithm parameter specification interfaces and classes in the <code class="codeph">java.security.spec</code> and <code class="codeph">javax.crypto.spec</code> packages:</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The AlgorithmParameterSpec Interface</p>
<p><code class="codeph">AlgorithmParameterSpec</code> is an interface to a transparent specification of cryptographic parameters.</p>
<p>This interface contains no methods or constants. Its only purpose is to group (and provide type safety for) all parameter specifications. All parameter specifications must implement this interface.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DSAParameterSpec Class</p>
<p>This class (which implements the <code class="codeph">AlgorithmParameterSpec</code> and <code class="codeph">DSAParams</code> interfaces) specifies the set of parameters used with the DSA algorithm. It has the following methods:</p>
<pre class="codeblock" dir="ltr">
    public BigInteger getP()

    public BigInteger getQ()

    public BigInteger getG()
</pre>
<p>These methods return the DSA algorithm parameters: the prime <code class="codeph">p</code>, the sub-prime <code class="codeph">q</code>, and the base <code class="codeph">g</code>.</p>
<p>Many types of DSA services will find this class useful - for example, it is utilized by the DSA signature, key pair generator, algorithm parameter generator, and algorithm parameters classes implemented by the <span class="variable">Sun</span> provider. As a specific example, an algorithm parameters implementation must include an implementation for the <code class="codeph">getParameterSpec</code> method, which returns an <code class="codeph">AlgorithmParameterSpec</code>. The DSA algorithm parameters implementation supplied by <span class="variable">Sun</span> returns an instance of the <code class="codeph">DSAParameterSpec</code> class.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The IvParameterSpec Class</p>
<p>This class (which implements the <code class="codeph">AlgorithmParameterSpec</code> interface) specifies the initialization vector (IV) used with a cipher in feedback mode.</p>
<div class="tblformal" id="GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9__GUID-560C045E-D56F-441E-B87B-566DF016C49E">
<p class="titleintable">Table 3-3 Method in <code class="codeph">IvParameterSpec</code></p>
<table class="cellalignment456" title="Method in IvParameterSpec" summary="Methods in the IvParameterSpec class">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4749">Method</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4751">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4755" headers="d34834e4749"><code class="codeph">byte[] getIV()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4755 d34834e4751">Returns the initialization vector (IV).</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The OAEPParameterSpec Class</p>
<p>This class specifies the set of parameters used with OAEP Padding, as defined in the PKCS #1 standard.</p>
<div class="tblformal" id="GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9__GUID-651DADDC-41F1-4D6F-BB06-AD0FF59E73B7">
<p class="titleintable">Table 3-4 Methods in <code class="codeph">OAEPParameterSpec</code></p>
<table class="cellalignment456" title="Methods in OAEPParameterSpec" summary="Methods in the OAEPParameterSpec class">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4777">Method</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4779">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4783" headers="d34834e4777"><code class="codeph">String getDigestAlgorithm()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4783 d34834e4779">Returns the message digest algorithm name.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4789" headers="d34834e4777"><code class="codeph">String getMGFAlgorithm()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4789 d34834e4779">Returns the mask generation function algorithm name.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4795" headers="d34834e4777"><code class="codeph">AlgorithmParameterSpec getMGFParameters()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4795 d34834e4779">Returns the parameters for the mask generation function.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4801" headers="d34834e4777"><code class="codeph">PSource getPSource()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4801 d34834e4779">Returns the source of encoding input P.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The PBEParameterSpec Class</p>
<p>This class (which implements the <code class="codeph">AlgorithmParameterSpec</code> interface) specifies the set of parameters used with a password-based encryption (PBE) algorithm.</p>
<div class="tblformal" id="GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9__GUID-C45AE15E-8842-4E64-93AA-5CA8BF26BA57">
<p class="titleintable">Table 3-5 Methods in <code class="codeph">PBEParameterSpec</code></p>
<table class="cellalignment456" title="Methods in PBEParameterSpec" summary="Methods in the PBEParameterSpec class">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4826">Method</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4828">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4832" headers="d34834e4826"><code class="codeph">int getIterationCount()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4832 d34834e4828">Returns the iteration count.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4838" headers="d34834e4826"><code class="codeph">byte[] getSalt()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4838 d34834e4828">Returns the salt.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The RC2ParameterSpec Class</p>
<p>This class (which implements the <code class="codeph">AlgorithmParameterSpec</code> interface) specifies the set of parameters used with the RC2 algorithm.</p>
<div class="tblformal" id="GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9__GUID-2694D9E7-97F1-4FF7-ADA4-2CA01AD507BD">
<p class="titleintable">Table 3-6 Methods in <code class="codeph">RC2ParameterSpec</code></p>
<table class="cellalignment456" title="Methods in RC2ParameterSpec" summary="Methods in the RC2ParameterSpec class">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4863">Method</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4865">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4869" headers="d34834e4863"><code class="codeph">boolean equals(Object obj)</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4869 d34834e4865">Tests for equality between the specified object and this object.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4875" headers="d34834e4863"><code class="codeph">int getEffectiveKeyBits()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4875 d34834e4865">Returns the effective key size in bits.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4881" headers="d34834e4863"><code class="codeph">byte[] getIV()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4881 d34834e4865">Returns the IV or null if this parameter set does not contain an IV.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4887" headers="d34834e4863"><code class="codeph">int hashCode()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4887 d34834e4865">Calculates a hash code value for the object.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The RC5ParameterSpec Class</p>
<p>This class (which implements the <code class="codeph">AlgorithmParameterSpec</code> interface) specifies the set of parameters used with the RC5 algorithm.</p>
<div class="tblformal" id="GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9__GUID-EA4BD83F-60B2-4A21-AAAE-249AD07DF7C5">
<p class="titleintable">Table 3-7 Methods in <code class="codeph">RC5ParameterSpec</code></p>
<table class="cellalignment456" title="Methods in RC5ParameterSpec" summary="Methods in the RC5ParameterSpec Class">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4912">Method</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4914">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4918" headers="d34834e4912"><code class="codeph">boolean equals(Object obj)</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4918 d34834e4914">Tests for equality between the specified object and this object.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4924" headers="d34834e4912"><code class="codeph">byte[] getIV()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4924 d34834e4914">Returns the IV or null if this parameter set does not contain an IV.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4930" headers="d34834e4912"><code class="codeph">int getRounds()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4930 d34834e4914">Returns the number of rounds.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4936" headers="d34834e4912"><code class="codeph">int getVersion()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4936 d34834e4914">Returns the version.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4942" headers="d34834e4912"><code class="codeph">int getWordSize()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4942 d34834e4914">Returns the word size in bits.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4948" headers="d34834e4912"><code class="codeph">int hashCode()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4948 d34834e4914">Calculates a hash code value for the object.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DHParameterSpec Class</p>
<p>This class (which implements the <code class="codeph">AlgorithmParameterSpec</code> interface) specifies the set of parameters used with the Diffie-Hellman algorithm.</p>
<div class="tblformal" id="GUID-4EC9F5A8-8427-40DC-A480-38482B05C8A9__GUID-AD371F63-DD89-44FE-8288-02BD1F92E3E0">
<p class="titleintable">Table 3-8 Methods in DHParameterSpec</p>
<table class="cellalignment456" title="Methods in DHParameterSpec" summary="Methods in the DHParameterSpec class">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4971">Method</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e4973">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4977" headers="d34834e4971"><code class="codeph">BigInteger getG()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4977 d34834e4973">Returns the base generator <code class="codeph">g</code>.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4986" headers="d34834e4971"><code class="codeph">int getL()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4986 d34834e4973">Returns the size in bits, <code class="codeph">l</code>, of the random exponent (private value).</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e4995" headers="d34834e4971"><code class="codeph">BigInteger getP()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e4995 d34834e4973">Returns the prime modulus <code class="codeph">p</code>.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
Many types of Diffie-Hellman services will find this class useful; for example, it is used by the Diffie-Hellman key agreement, key pair generator, algorithm parameter generator, and algorithm parameters classes implemented by the "SunJCE" provider. As a specific example, an algorithm parameters implementation must include an implementation for the <code class="codeph">getParameterSpec</code> method, which returns an <code class="codeph">AlgorithmParameterSpec</code>. The Diffie-Hellman algorithm parameters implementation supplied by "SunJCE" returns an instance of the <code class="codeph">DHParameterSpec</code> class.</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6"></a>
<h3 id="JSSEC-GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6" class="sect3">Key Specification Interfaces and Classes Required by Key Factories</h3>
<div>
<p>A key factory provides bi-directional conversions between opaque keys (of type <code class="codeph">Key</code>) and key specifications. If you implement a key factory, you thus need to understand and utilize key specifications. In some cases, you also need to implement your own key specifications.</p>
<div class="section">
<p>Key specifications are transparent representations of the key material that constitutes a key. If the key is stored on a hardware device, its specification may contain information that helps identify the key on the device.</p>
<p>A <span class="variable">transparent</span> representation of keys means that you can access each key material value individually, through one of the <span class="variable">get</span> methods defined in the corresponding specification class. For example, <code class="codeph">java.security.spec.DSAPrivateKeySpec</code> defines <code class="codeph">getX</code>, <code class="codeph">getP</code>, <code class="codeph">getQ</code>, and <code class="codeph">getG</code> methods, to access the private key <code class="codeph">x</code>, and the DSA algorithm parameters used to calculate the key: the prime <code class="codeph">p</code>, the sub-prime <code class="codeph">q</code>, and the base <code class="codeph">g</code>.</p>
<p>This is contrasted with an <span class="variable">opaque</span> representation, as defined by the Key interface, in which you have no direct access to the parameter fields. In other words, an "opaque" representation gives you limited access to the key - just the three methods defined by the Key interface: <code class="codeph">getAlgorithm</code>, <code class="codeph">getFormat</code>, and <code class="codeph">getEncoded</code>.</p>
<p>A key may be specified in an algorithm-specific way, or in an algorithm-independent encoding format (such as ASN.1). For example, a DSA private key may be specified by its components <code class="codeph"><span class="variable">x</span></code>, <code class="codeph"><span class="variable">p</span></code>, <code class="codeph"><span class="variable">q</span></code>, and <code class="codeph"><span class="variable">g</span></code> (see <a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/DSAPrivateKeySpec.html" target="_blank"><code class="codeph">DSAPrivateKeySpec</code></a>), or it may be specified using its DER encoding (see <a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/PKCS8EncodedKeySpec.html" target="_blank"><code class="codeph">PKCS8EncodedKeySpec</code></a>).</p>
<p>Java defines the following key specification interfaces and classes in the <code class="codeph">java.security.spec</code> and <code class="codeph">javax.crypto.spec</code> packages:</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__THEKEYSPECINTERFACE-73DA08B1">
<p class="subhead3">The <code class="codeph">KeySpec</code> Interface</p>
<p>This interface contains no methods or constants. Its only purpose is to group (and provide type safety for) all key specifications. All key specifications must implement this interface.</p>
<p>Java supplies several classes implementing the <span class="apiname">KeySpec</span> interface:</p>
<ul style="list-style-type: disc;">
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/DSAPrivateKeySpec.html" target="_blank"><span class="apiname">DSAPrivateKeySpec</span></a></li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/DSAPublicKeySpec.html" target="_blank"><span class="apiname">DSAPublicKeySpec</span></a></li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/RSAPrivateKeySpec.html" target="_blank"><span class="apiname">RSAPrivateKeySpec</span></a></li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/RSAPublicKeySpec.html" target="_blank"><span class="apiname">RSAPublicKeySpec</span></a></li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/EncodedKeySpec.html" target="_blank"><span class="apiname">EncodedKeySpec</span></a></li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/PKCS8EncodedKeySpec.html" target="_blank"><span class="apiname">PKCS8EncodedKeySpec</span></a></li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/security/spec/X509EncodedKeySpec.html" target="_blank"><span class="apiname">X509EncodedKeySpec</span></a></li>
</ul>
<p>If your provider uses key types (e.g., <code class="codeph">Your_PublicKey_type</code> and <code class="codeph">Your_PrivateKey_type</code>) for which the JDK does not already provide corresponding <code class="codeph">KeySpec</code> classes, there are two possible scenarios, one of which requires that you implement your own key specifications:</p>
<ol>
<li>
<p>If your users will never have to access specific key material values of your key type, you will not have to provide any <code class="codeph">KeySpec</code> classes for your key type.</p>
<p>In this scenario, your users will always create <code class="codeph">Your_PublicKey_type</code> and <code class="codeph">Your_PrivateKey_type</code> keys through the appropriate <code class="codeph">KeyPairGenerator</code> supplied by your provider for that key type. If they want to store the generated keys for later usage, they retrieve the keys' encodings (using the <code class="codeph">getEncoded</code> method of the <code class="codeph">Key</code> interface). When they want to create an <code class="codeph">Your_PublicKey_type</code> or <code class="codeph">Your_PrivateKey_type</code> key from the encoding (e.g., in order to initialize a Signature object for signing or verification), they create an instance of <code class="codeph">X509EncodedKeySpec</code> or <code class="codeph">PKCS8EncodedKeySpec</code> from the encoding, and feed it to the appropriate <code class="codeph">KeyFactory</code> supplied by your provider for that algorithm, whose <code class="codeph">generatePublic</code> and <code class="codeph">generatePrivate</code> methods will return the requested <code class="codeph">PublicKey</code> (an instance of <code class="codeph">Your_PublicKey_type</code>) or <code class="codeph">PrivateKey</code> (an instance of <code class="codeph">Your_PrivateKey_type</code>) object, respectively.</p>
</li>
<li>If you anticipate a need for users to access specific key material values of your key type, or to construct a key of your key type from key material and associated parameter values, rather than from its encoding (as in the above case), you have to specify new <code class="codeph">KeySpec</code> classes (classes that implement the <code class="codeph">KeySpec</code> interface) with the appropriate constructor methods and <span class="variable">get</span> methods for returning key material fields and associated parameter values for your key type. You will specify those classes in a similar manner as is done by the <code class="codeph">DSAPrivateKeySpec</code> and <code class="codeph">DSAPublicKeySpec</code> classes. You need to ship those classes along with your provider classes, for example, as part of your provider JAR file.</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DSAPrivateKeySpec Class</p>
<p>This class (which implements the <code class="codeph">KeySpec</code> Interface) specifies a DSA private key with its associated parameters. It has the following methods:</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-1EE9B5E3-B8FD-4DCE-847E-9180552A0296">
<p class="titleintable">Table 3-9 Methods in DSAPrivateKeySpec</p>
<table class="cellalignment456" title="Methods in DSAPrivateKeySpec" summary="List of methods in DSAPrivateKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5271">Method in DSAPrivateKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5273">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5277" headers="d34834e5271"><code class="codeph">public BigInteger getX()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5277 d34834e5273">Returns the private key x.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5283" headers="d34834e5271"><code class="codeph">public BigInteger getP()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5283 d34834e5273">Returns the prime p.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5289" headers="d34834e5271"><code class="codeph">public BigInteger getQ()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5289 d34834e5273">Returns the sub-prime q.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5295" headers="d34834e5271"><code class="codeph">public BigInteger getG()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5295 d34834e5273">Returns the base g.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>These methods return the private key <code class="codeph">x</code>, and the DSA algorithm parameters used to calculate the key: the prime <code class="codeph">p</code>, the sub-prime <code class="codeph">q</code>, and the base <code class="codeph">g</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DSAPublicKeySpec Class</p>
<p>This class (which implements the <code class="codeph">KeySpec</code> Interface) specifies a DSA public key with its associated parameters. It has the following methods:</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-5E1FD16D-0364-485E-A50F-AACEA77F5D68">
<p class="titleintable">Table 3-10 Methods in DSAPublicKeySpec</p>
<table class="cellalignment475" title="Methods in DSAPublicKeySpec" summary="List of methods in DSAPublicKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5332">Method in DSAPublicKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5334">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5338" headers="d34834e5332"><code class="codeph">public BigInteger getY()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5338 d34834e5334">returns the public key y.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5344" headers="d34834e5332"><code class="codeph">public BigInteger getP()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5344 d34834e5334">Returns the prime p.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5350" headers="d34834e5332"><code class="codeph">public BigInteger getQ()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5350 d34834e5334">Returns the sub-prime q.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5356" headers="d34834e5332"><code class="codeph">public BigInteger getG()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5356 d34834e5334">Returns the base g.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The RSAPrivateKeySpec Class</p>
<p>This class (which implements the <code class="codeph">KeySpec</code> Interface) specifies an RSA private key. It has the following methods:</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-F824E25B-B667-4E68-8327-FCAC9718815E">
<p class="titleintable">Table 3-11 Methods in RSAPrivateKeySpec</p>
<table class="cellalignment475" title="Methods in RSAPrivateKeySpec" summary="List of methods in RSAPrivateKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5379">Method in RSAPrivateKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5381">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5385" headers="d34834e5379"><code class="codeph">public BigInteger getModulus()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5385 d34834e5381">Returns the modulus.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5391" headers="d34834e5379"><code class="codeph">public BigInteger getPrivateExponent()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5391 d34834e5381">Returns the private exponent.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>These methods return the RSA modulus <code class="codeph">n</code> and private exponent <code class="codeph">d</code> values that constitute the RSA private key.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The RSAPrivateCrtKeySpec Class</p>
<p>This class (which extends the <code class="codeph">RSAPrivateKeySpec</code> class) specifies an RSA private key, as defined in the PKCS#1 standard, using the <span class="variable">Chinese Remainder Theorem</span> (CRT) information values. It has the following methods (in addition to the methods inherited from its superclass <code class="codeph">RSAPrivateKeySpec</code> ):</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-BCAE5CFB-F7CA-4C49-B623-2F381316FC3F">
<p class="titleintable">Table 3-12 Methods in RSAPrivateCrtKeySpec</p>
<table class="cellalignment475" title="Methods in RSAPrivateCrtKeySpec" summary="List of methods in RSAPrivateCrtKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5428">Method in RSAPrivateCrtKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5430">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5434" headers="d34834e5428"><code class="codeph">public BigInteger getPublicExponent()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5434 d34834e5430">Returns the public exponent.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5440" headers="d34834e5428"><code class="codeph">public BigInteger getPrimeP()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5440 d34834e5430">Returns the prime P.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5446" headers="d34834e5428"><code class="codeph">public BigInteger getPrimeQ()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5446 d34834e5430">Returns the prime Q.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5452" headers="d34834e5428"><code class="codeph">public BigInteger getPrimeExponentP()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5452 d34834e5430">Returns the primeExponentP.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5458" headers="d34834e5428"><code class="codeph">public BigInteger getPrimeExponentQ()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5458 d34834e5430">Returns the primeExponentQ.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5464" headers="d34834e5428"><code class="codeph">public BigInteger getCrtCoefficient()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5464 d34834e5430">Returns the crtCoefficient.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>These methods return the public exponent <code class="codeph">e</code> and the CRT information integers: the prime factor <code class="codeph">p</code> of the modulus <code class="codeph">n</code>, the prime factor <code class="codeph">q</code> of <code class="codeph">n</code>, the exponent <code class="codeph">d mod (p-1)</code>, the exponent <code class="codeph">d mod (q-1)</code>, and the Chinese Remainder Theorem coefficient <code class="codeph">(inverse of q) mod p</code>.</p>
<p>An RSA private key logically consists of only the modulus and the private exponent. The presence of the CRT values is intended for efficiency.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The RSAPublicKeySpec Class</p>
<p>This class (which implements the <code class="codeph">KeySpec</code> Interface) specifies an RSA public key. It has the following methods:</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-E171C644-B094-4DDC-B4EB-08E76AC4543D">
<p class="titleintable">Table 3-13 Methods in RSAPublicKeySpec</p>
<table class="cellalignment475" title="Methods in RSAPublicKeySpec" summary="List of methods in RSAPublicKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5516">Method in RSAPublicKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5518">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5522" headers="d34834e5516"><code class="codeph">public BigInteger getModulus()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5522 d34834e5518">Returns the modulus.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5528" headers="d34834e5516"><code class="codeph">public BigInteger getPublicExponent()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5528 d34834e5518">Returns the public exponent.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The EncodedKeySpec Class</p>
<p>This abstract class (which implements the <code class="codeph">KeySpec</code> Interface) represents a public or private key in encoded format.</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-60FAE739-4095-4FC5-94C7-A9B65AC04C85">
<p class="titleintable">Table 3-14 Methods in EncodedKeySpec</p>
<table class="cellalignment475" title="Methods in EncodedKeySpec" summary="List of methods in EncodedKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5551">Method in EncodedKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5553">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5557" headers="d34834e5551"><code class="codeph">public abstract byte[] getEncoded()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5557 d34834e5553">Returns the encoded key.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5563" headers="d34834e5551"><code class="codeph">public abstract String getFormat()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5563 d34834e5553">Returns the name of the encoding format.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The JDK supplies two classes implementing the <code class="codeph">EncodedKeySpec</code> interface: <code class="codeph">PKCS8EncodedKeySpec</code> and <code class="codeph">X509EncodedKeySpec</code>. If desired, you can supply your own <code class="codeph">EncodedKeySpec</code> implementations for those or other types of key encodings.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The PKCS8EncodedKeySpec Class</p>
<p>This class, which is a subclass of <code class="codeph">EncodedKeySpec</code>, represents the DER encoding of a private key, according to the format specified in the PKCS #8 standard.</p>
<p>Its <code class="codeph">getEncoded</code> method returns the key bytes, encoded according to the PKCS #8 standard. Its <code class="codeph">getFormat</code> method returns the string "PKCS#8".</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The X509EncodedKeySpec Class</p>
<p>This class, which is a subclass of <code class="codeph">EncodedKeySpec</code>, represents the DER encoding of a public or private key, according to the format specified in the X.509 standard.</p>
<p>Its <code class="codeph">getEncoded</code> method returns the key bytes, encoded according to the X.509 standard. Its <code class="codeph">getFormat</code> method returns the string "X.509".<code class="codeph">DHPrivateKeySpec</code>, <code class="codeph">DHPublicKeySpec</code>, <code class="codeph">DESKeySpec</code>, <code class="codeph">DESedeKeySpec</code>, <code class="codeph">PBEKeySpec</code>, and <code class="codeph">SecretKeySpec</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DHPrivateKeySpec Class</p>
<p>This class (which implements the <code class="codeph">KeySpec</code> interface) specifies a Diffie-Hellman private key with its associated parameters.</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-18467DAF-8EF1-42DA-B4D5-7CBB4EA96CD5">
<p class="titleintable">Table 3-15 Methods in DHPrviateKeySpec</p>
<table class="cellalignment475" title="Methods in DHPrviateKeySpec" summary="List of methods in DHPrviateKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5651">Method in DHPrivateKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5653">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5657" headers="d34834e5651"><code class="codeph">BigInteger getG()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5657 d34834e5653">Returns the base generator <code class="codeph">g</code>.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5666" headers="d34834e5651"><code class="codeph">BigInteger getP()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5666 d34834e5653">Returns the prime modulus <code class="codeph">p</code>.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5675" headers="d34834e5651"><code class="codeph">BigInteger getX()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5675 d34834e5653">Returns the private value <code class="codeph">x</code>.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DHPublicKeySpec Class</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-EB5C5B01-8EEC-4D46-BE8F-248BFC0548A3">
<p class="titleintable">Table 3-16 Methods in DHPublicKeySpec</p>
<table class="cellalignment475" title="Methods in DHPublicKeySpec" summary="List of methods in DHPublicKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5697">Method in DHPublicKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5699">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5703" headers="d34834e5697"><code class="codeph">BigInteger getG()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5703 d34834e5699">Returns the base generator <code class="codeph">g</code>.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5712" headers="d34834e5697"><code class="codeph">BigInteger getP()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5712 d34834e5699">Returns the prime modulus <code class="codeph">p</code>.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5721" headers="d34834e5697"><code class="codeph">BigInteger getY()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5721 d34834e5699">Returns the public value <code class="codeph">y</code>.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DESKeySpec Class</p>
<p>This class (which implements the <code class="codeph">KeySpec</code> interface) specifies a DES key.</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-6F7067FE-280E-4C76-B742-9611CF17DB3F">
<p class="titleintable">Table 3-17 Methods in DESKeySpec</p>
<table class="cellalignment475" title="Methods in DESKeySpec" summary="List of methods in DESKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5747">Method in DESKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5749">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5753" headers="d34834e5747"><code class="codeph">byte[] getKey()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5753 d34834e5749">Returns the DES key bytes.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5759" headers="d34834e5747"><code class="codeph">static boolean isParityAdjusted(byte[] key, int offset)</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5759 d34834e5749">Checks if the given DES key material is parity-adjusted.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5765" headers="d34834e5747"><code class="codeph">static boolean isWeak(byte[] key, int offset)</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5765 d34834e5749">Checks if the given DES key material is weak or semi-weak.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The DESedeKeySpec Class</p>
<p>This class (which implements the <code class="codeph">KeySpec</code> interface) specifies a DES-EDE (Triple DES) key.</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-6760BDD0-C8AE-4EE6-ADAD-A66B108A0BBF">
<p class="titleintable">Table 3-18 Methods in DESedeKeySpec</p>
<table class="cellalignment475" title="Methods in DESedeKeySpec" summary="List of methods in DESedeKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5788">Method in DESedeKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5790">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5794" headers="d34834e5788"><code class="codeph">byte[] getKey()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5794 d34834e5790">Returns the DES-EDE key.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5800" headers="d34834e5788"><code class="codeph">static boolean isParityAdjusted(byte[] key, int offset)</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5800 d34834e5790">Checks if the given DES-EDE key is parity-adjusted.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The PBEKeySpec Class</p>
<p>This class implements the <code class="codeph">KeySpec</code> interface. A user-chosen password can be used with password-based encryption (PBE); the password can be viewed as a type of raw key material. An encryption mechanism that uses this class can derive a cryptographic key from the raw key material.</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-4DCC8AC8-3BB2-4441-9127-CE623BED2997">
<p class="titleintable">Table 3-19 Methods in PBEKeySpec</p>
<table class="cellalignment475" title="Methods in PBEKeySpec" summary="List of methods in PBEKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5823">Method in PBEKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5825">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5829" headers="d34834e5823"><code class="codeph">void clearPassword</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5829 d34834e5825">Clears the internal copy of the password.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5835" headers="d34834e5823"><code class="codeph">int getIterationCount</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5835 d34834e5825">Returns the iteration count or 0 if not specified.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5841" headers="d34834e5823"><code class="codeph">int getKeyLength</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5841 d34834e5825">Returns the to-be-derived key length or 0 if not specified.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5847" headers="d34834e5823"><code class="codeph">char[] getPassword</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5847 d34834e5825">Returns a copy of the password.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5853" headers="d34834e5823"><code class="codeph">byte[] getSalt</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5853 d34834e5825">Returns a copy of the salt or null if not specified.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">The SecretKeySpec Class</p>
<p>This class implements the <code class="codeph">KeySpec</code> interface. Since it also implements the <code class="codeph">SecretKey</code> interface, it can be used to construct a <code class="codeph">SecretKey</code> object in a provider-independent fashion, i.e., without having to go through a provider-based <code class="codeph">SecretKeyFactory</code>.</p>
<div class="tblformal" id="GUID-97E2DE2A-5DFD-4A87-AFA7-CDECC3F77FA6__GUID-7DAE6B47-86D9-443B-8353-15A44F2D1A1C">
<p class="titleintable">Table 3-20 Methods in SecretKeySpec</p>
<table class="cellalignment475" title="Methods in SecretKeySpec" summary="List of methods in SecretKeySpec">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5885">Method in SecretKeySpec</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d34834e5887">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5891" headers="d34834e5885"><code class="codeph">boolean equals (Object obj)</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5891 d34834e5887">Indicates whether some other object is "equal to" this one.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5897" headers="d34834e5885"><code class="codeph">String getAlgorithm()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5897 d34834e5887">Returns the name of the algorithm associated with this secret key.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5903" headers="d34834e5885"><code class="codeph">byte[] getEncoded()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5903 d34834e5887">Returns the key material of this secret key.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5909" headers="d34834e5885"><code class="codeph">String getFormat()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5909 d34834e5887">Returns the name of the encoding format for this secret key.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d34834e5915" headers="d34834e5885"><code class="codeph">int hashCode()</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d34834e5915 d34834e5887">Calculates a hash code value for the object.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-63A770A3-398A-41C4-B2C9-894D76567F5C"></a>
<h3 id="JSSEC-GUID-63A770A3-398A-41C4-B2C9-894D76567F5C" class="sect3">Secret-Key Generation</h3>
<div>
<p>If you provide a secret-key generator (subclass of <code class="codeph">javax.crypto.KeyGeneratorSpi</code>) for a particular secret-key algorithm, you may return the generated secret-key object.</p>
<div class="section">
<p>The generated secret-key object (which must be an instance of <code class="codeph">javax.crypto.SecretKey</code>, see <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/KeyGeneratorSpi.html#engineGenerateKey--" target="_blank">engineGenerateKey</a>) can be returned in one of the following ways:</p>
<ul style="list-style-type: disc;">
<li>You implement a class whose instances represent secret-keys of the algorithm associated with your key generator. Your key generator implementation returns instances of that class. This approach is useful if the keys generated by your key generator have provider-specific properties.</li>
<li>Your key generator returns an instance of <a href="https://docs.oracle.com/javase/9/docs/api/javax/crypto/spec/SecretKeySpec.html" target="_blank"><code class="codeph">SecretKeySpec</code></a>, which already implements the <code class="codeph">javax.crypto.SecretKey</code> interface. You pass the (raw) key bytes and the name of the secret-key algorithm associated with your key generator to the <code class="codeph">SecretKeySpec</code> constructor. This approach is useful if the underlying (raw) key bytes can be represented as a byte array and have no key-parameters associated with them.</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-5A41A05A-B8F0-4E24-A61B-347721809A8B"></a>
<h3 id="JSSEC-GUID-5A41A05A-B8F0-4E24-A61B-347721809A8B" class="sect3">Adding New Object Identifiers</h3>
<div>
<p>The following information applies to providers who supply an algorithm that is not listed as one of the standard algorithms in <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a>.</p>
<div class="section">
<p class="subhead3">Mapping from OID to Name</p>
<p>Sometimes the JCA needs to instantiate a cryptographic algorithm implementation from an algorithm identifier (for example, as encoded in a certificate), which by definition includes the object identifier (OID) of the algorithm. For example, in order to verify the signature on an X.509 certificate, the JCA determines the signature algorithm from the signature algorithm identifier that is encoded in the certificate, instantiates a Signature object for that algorithm, and initializes the Signature object for verification.</p>
<p>For the JCA to find your algorithm, you must provide the object identifier of your algorithm as an alias entry for your algorithm in the provider master file.</p>
<pre class="codeblock" dir="ltr">
    put("Alg.Alias.&lt;engine_type&gt;.1.2.3.4.5.6.7.8",
        "&lt;algorithm_alias_name&gt;");
</pre>
<p>Note that if your algorithm is known under more than one object identifier, you need to create an alias entry for each object identifier under which it is known.</p>
<p>An example of where the JCA needs to perform this type of mapping is when your algorithm ("<code class="codeph">Foo</code>") is a signature algorithm and users run the <code class="codeph">keytool</code> command and specify your (signature) algorithm alias.</p>
<pre class="codeblock" dir="ltr">
    % keytool -genkeypair -sigalg 1.2.3.4.5.6.7.8
</pre>
<p>In this case, your provider master file should contain the following entries:</p>
<pre class="codeblock" dir="ltr">
    put("Signature.Foo", "com.xyz.MyFooSignatureImpl");
    put("Alg.Alias.Signature.1.2.3.4.5.6.7.8", "Foo");
</pre>
<p>Other examples of where this type of mapping is performed are (1) when your algorithm is a keytype algorithm and your program parses a certificate (using the X.509 implementation of the SUN provider) and extracts the public key from the certificate in order to initialize a Signature object for verification, and (2) when <code class="codeph">keytool</code> users try to access a private key of your keytype (for example, to perform a digital signature) after having generated the corresponding keypair. In these cases, your provider master file should contain the following entries:</p>
<pre class="codeblock" dir="ltr">
    put("KeyFactory.Foo", "com.xyz.MyFooKeyFactoryImpl");
    put("Alg.Alias.KeyFactory.1.2.3.4.5.6.7.8", "Foo");
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Mapping from Name to OID</p>
<p>If the JCA needs to perform the inverse mapping (that is, from your algorithm name to its associated OID), you need to provide an alias entry of the following form for one of the OIDs under which your algorithm should be known:</p>
<pre class="codeblock" dir="ltr">
    put("Alg.Alias.Signature.OID.1.2.3.4.5.6.7.8", "MySigAlg");
</pre>
<p>If your algorithm is known under more than one object identifier, prefix the preferred one with "OID."</p>
<p>An example of where the JCA needs to perform this kind of mapping is when users run <code class="codeph">keytool</code> in any mode that takes a <code class="codeph">-sigalg</code> option. For example, when the <code class="codeph">-genkeypair</code> and <code class="codeph">-certreq</code> commands are invoked, the user can specify your (signature) algorithm with the <code class="codeph">-sigalg</code> option.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-ECCC1170-B552-4CF9-BD00-64A70DEC2AC6"></a>
<h3 id="JSSEC-GUID-ECCC1170-B552-4CF9-BD00-64A70DEC2AC6" class="sect3">Ensuring Exportability</h3>
<div>
<p>A key feature of JCA is the exportability of the JCA framework and of the provider cryptography implementations if certain conditions are met.</p>
<p>By default, an application can use cryptographic algorithms of any strength. However, due to import regulations in some countries, you may have to limit those algorithms' strength. You do this with jurisdiction policy files; see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-EFA5AC2D-644E-4CD9-8523-C6D3936D5FB1">Cryptographic Strength Configuration</a>. The JCA framework will enforce the restrictions specified in the installed jurisdiction policy files.</p>
<p>As noted elsewhere, you can write just one version of your provider software, implementing cryptography of maximum strength. It is up to JCA, not your provider, to enforce any jurisdiction policy file-mandated restrictions regarding the cryptographic algorithms and maximum cryptographic strengths available to applets/applications in different locations.</p>
<p>The conditions that must be met by your provider in order to enable it to be plugged into JCA are the following:</p>
<ul style="list-style-type: disc;">
<li>The provider code should be written in such a way that provider classes become unusable if instantiated by an application directly, bypassing JCA. See <a href="howtoimplaprovider.htm#GUID-1D2FDA77-743C-47CB-9CCB-2585FEC0607A" title="When instantiating a provider's implementation (class) of a Cipher, KeyAgreement, KeyGenerator, MAC, or SecretKey factory, the framework will determine the provider's codebase (JAR file) and verify its signature. In this way, JCA authenticates the provider and ensures that only providers signed by a trusted entity can be plugged into the JCA. Thus, one requirement for encryption providers is that they must be signed, as described in later steps.">Step 1: Write your Service Implementation Code</a> in <a href="howtoimplaprovider.htm#GUID-CC161921-EBD2-48C6-B543-A956658B68B6" title="Follow these steps to implement a provider and integrate it into the JCA framework:">Steps to Implement and Integrate a Provider</a>.</li>
<li>The provider package must be signed by an entity trusted by the JCA framework. (See <a href="howtoimplaprovider.htm#GUID-434AACF7-0D2C-494A-B32A-508A6B605F62" title="The next step is to request a code-signing certificate so that you can use it to sign your provider prior to testing. The certificate will be good for both testing and production. It will be valid for 5 years.">Step 7.1: Get a Code-Signing Certificate</a> through <a href="howtoimplaprovider.htm#GUID-CF5F0E7D-BA0E-494C-8A5A-B228FF839AEF">Step 7.2: Sign Your Provider</a>.) U.S. vendors whose providers may be exported outside the U.S. first need to apply for U.S. government export approval. (See <a href="howtoimplaprovider.htm#GUID-A62916EE-BE09-4229-9D05-3D6AF303CA4E" title="All U.S. vendors whose providers may be exported outside the U.S. should apply to the Bureau of Industry and Security in the U.S. Department of Commerce for export approval.">Step 11: Apply for U.S. Government Export Approval If Required</a>.)</li>
</ul>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137"></a>
<h2 id="JSSEC-GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137" class="sect2">Sample Code for MyProvider</h2>
<div>
<p>The following is the complete source code for an example provider, MyProvider. It's a portable provider; you can specify it in a class or module path. It consists of two modules:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">com.example.MyProvider</code>: Contains an example provider that demonstrate how to write a provider with the <span class="apiname">Provider.Service</span> mechanism. You must compile, package, and sign the provider, then specify it in your class or module path as described in <a href="howtoimplaprovider.htm#GUID-CC161921-EBD2-48C6-B543-A956658B68B6" title="Follow these steps to implement a provider and integrate it into the JCA framework:">Steps to Implement and Integrate a Provider</a>.</p>
</li>
<li>
<p><code class="codeph">com.example.MyApp</code>: Contains a sample application that uses the MyProvider provider. It finds and loads this provider with the <span class="apiname">ServiceLoader</span> mechanism, and then registers it dynamically with the <span class="apiname">Security.addProvider()</span> method.</p>
</li>
</ul>
<p>This example consists of the following files:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph"><a href="howtoimplaprovider.htm#GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYPROVIDER_MODULE-INFO.JAVA">src/com.example.MyProvider/module-info.java</a></code></li>
<li><code class="codeph"><a href="howtoimplaprovider.htm#GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYPROVIDER.JAVA">src/com.example.MyProvider/com/example/MyProvider/MyProvider.java</a></code></li>
<li><code class="codeph"><a href="howtoimplaprovider.htm#GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYCIPHER.JAVA">src/com.example.MyProvider/com/example/MyProvider/MyCipher.java</a></code></li>
<li><code class="codeph"><a href="howtoimplaprovider.htm#GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_JAVA.SECURITY.PROVIDER">src/com.example.MyProvider/META-INF/services/java.security.Provider</a></code></li>
<li><code class="codeph"><a href="howtoimplaprovider.htm#GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYAPP_MODULE-INFO">src/com.example.MyApp/module-info.java</a></code></li>
<li><code class="codeph"><a href="howtoimplaprovider.htm#GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYAPP.JAVA">src/com.example.MyApp/com/example/MyApp/MyApp.java</a></code></li>
<li><code class="codeph"><a href="howtoimplaprovider.htm#GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_RUNTEST.SH">RunTest.sh</a></code></li>
</ul>
<div class="section" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYPROVIDER_MODULE-INFO.JAVA">
<p class="subhead2">src/com.example.MyProvider/module-info.java</p>
<p>See <a href="howtoimplaprovider.htm#GUID-7C304A79-6D0B-438B-A02E-51648C909876" title="This step is optional but recommended; it enables you to package your provider in a named module. A modular JDK can then locate your provider in the module path as opposed to the class path. The module system can more thoroughly check for dependencies in modules in the module path. Note that you can use named modules in a non-modular JDK; the module declaration will be ignored. Also, you can still package your providers in unnamed or automatic modules.">Step 4: Create a Module Declaration for Your Provider</a> for information about the module declaration, which is specified in <span class="apiname">module-info.java</span>.</p>
<pre dir="ltr">
module com.example.MyProvider {
    provides java.security.Provider with com.example.MyProvider.MyProvider;
}
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYPROVIDER.JAVA">
<p class="subhead2">src/com.example.MyProvider/com/example/MyProvider/MyProvider.java</p>
</div>
<!-- class="section" -->
<p>The <span class="apiname">MyProvider</span> class is an example of a provider that uses the <span class="apiname">Provider.Service</span> class. See <a href="howtoimplaprovider.htm#GUID-CB446B7A-CEA2-4F4A-A4AF-4D492CB58733">Step 3.2: Create a Provider That Uses Provider.Service</a>.</p>
<pre dir="ltr">
package com.example.MyProvider;

import java.security.*;
import java.util.*;

/**
 * Test JCE provider.
 *
 * Registers services using Provider.Service and overrides newInstance().
 */
public final class MyProvider extends Provider {

    public MyProvider() {
        super("MyProvider", "1.0", "My JCE provider");

        final Provider p = this;

        AccessController.doPrivileged((PrivilegedAction&lt;Void&gt;) () -&gt; {
            putService(new ProviderService(p, "Cipher",
                    "MyCipher", "com.example.MyProvider.MyCipher"));
            return null;
        });
    }

    private static final class ProviderService extends Provider.Service {

        ProviderService(Provider p, String type, String algo, String cn) {
            super(p, type, algo, cn, null, null);
        }

        ProviderService(Provider p, String type, String algo, String cn,
                String[] aliases, HashMap&lt;String, String&gt; attrs) {
            super(p, type, algo, cn,
                    (aliases == null ? null : Arrays.asList(aliases)), attrs);
        }

        @Override
        public Object newInstance(Object ctrParamObj)
                throws NoSuchAlgorithmException {

            String type = getType();
            if (ctrParamObj != null) {
                throw new InvalidParameterException(
                        "constructorParameter not used with " + type
                        + " engines");
            }
            String algo = getAlgorithm();
            try {
                if (type.equals("Cipher")) {
                    if (algo.equals("MyCipher")) {
                        return new MyCipher();
                    }
                }
            } catch (Exception ex) {
                throw new NoSuchAlgorithmException(
                        "Error constructing " + type + " for "
                        + algo + " using SunMSCAPI", ex);
            }
            throw new ProviderException("No impl for " + algo
                    + " " + type);
        }
    }

    @Override
    public String toString() {
        return "MyProvider [getName()=" + getName()
                + ", getVersionStr()=" + getVersionStr() + ", getInfo()="
                + getInfo() + "]";
    }
}
</pre>
<div class="section" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYCIPHER.JAVA">
<p class="subhead2">src/com.example.MyProvider/com/example/MyProvider/MyCipher.java</p>
<p>The <span class="apiname">MyCipher</span> class extends the <span class="apiname">CipherSPI</span>, which is a Server Provider Interface (SPI). Each cryptographic service that a provider implements has a subclass of the appropriate SPI. See <a href="howtoimplaprovider.htm#GUID-1D2FDA77-743C-47CB-9CCB-2585FEC0607A" title="When instantiating a provider's implementation (class) of a Cipher, KeyAgreement, KeyGenerator, MAC, or SecretKey factory, the framework will determine the provider's codebase (JAR file) and verify its signature. In this way, JCA authenticates the provider and ensures that only providers signed by a trusted entity can be plugged into the JCA. Thus, one requirement for encryption providers is that they must be signed, as described in later steps.">Step 1: Write your Service Implementation Code</a>.</p>
<div class="infobox-note" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__GUID-53A626BF-DDDB-4135-98C4-B94A602BBBEB">
<p class="notep1">Note:</p>
This code is only a stub provider that demonstrates how to write a provider; it's missing the actual cryptographic algorithm implementation. The <code class="codeph">MyCipher</code> class would contain an actual cryptographic algorithm implementation if MyProvider were a real security provider.</div>
<pre dir="ltr">
package com.example.MyProvider;

import java.security.*;
import java.security.spec.*;
import javax.crypto.*;

/**
 * Implementation represents a test Cipher.
 *
 * All are stubs.
 */
public class MyCipher extends CipherSpi {

    @Override
    protected byte[] engineDoFinal(byte[] input, int inputOffset, int inputLen)
            throws IllegalBlockSizeException, BadPaddingException {
        return null;
    }

    @Override
    protected int engineDoFinal(byte[] input, int inputOffset, int inputLen,
            byte[] output, int outputOffset) throws ShortBufferException,
            IllegalBlockSizeException, BadPaddingException {
        return 0;
    }

    @Override
    protected int engineGetBlockSize() {
        return 0;
    }

    @Override
    protected byte[] engineGetIV() {
        return null;
    }

    @Override
    protected int engineGetOutputSize(int inputLen) {
        return 0;
    }

    @Override
    protected AlgorithmParameters engineGetParameters() {
        return null;
    }

    @Override
    protected void engineInit(int opmode, Key key, SecureRandom random)
            throws InvalidKeyException {
    }

    @Override
    protected void engineInit(int opmode, Key key,
            AlgorithmParameterSpec params, SecureRandom random)
            throws InvalidKeyException, InvalidAlgorithmParameterException {
    }

    @Override
    protected void engineInit(int opmode, Key key, AlgorithmParameters params,
            SecureRandom random) throws InvalidKeyException,
            InvalidAlgorithmParameterException {
    }

    @Override
    protected void engineSetMode(String mode) throws NoSuchAlgorithmException {
    }

    @Override
    protected void engineSetPadding(String padding)
            throws NoSuchPaddingException {
    }

    @Override
    protected int engineGetKeySize(Key key)
            throws InvalidKeyException {
        return 0;
    }

    @Override
    protected byte[] engineUpdate(byte[] input, int inputOffset, int inputLen) {
        return null;
    }

    @Override
    protected int engineUpdate(byte[] input, int inputOffset, int inputLen,
            byte[] output, int outputOffset) throws ShortBufferException {
        return 0;
    }
}
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_JAVA.SECURITY.PROVIDER">
<p class="subhead2">src/com.example.MyProvider/META-INF/services/java.security.Provider</p>
<p>The <code>java.security.Provider</code> file enables automatic or unnamed modules to use the <span class="apiname">ServiceLoader</span> class to search for your providers. See <a href="howtoimplaprovider.htm#GUID-B30F5AA2-6517-4107-9FFF-F6BBE57A7A5F">Step 6: Place Your Provider in a JAR File</a>.</p>
<pre dir="ltr">
com.example.MyProvider.MyProvider
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYAPP_MODULE-INFO">
<p class="subhead2">src/com.example.MyApp/module-info.java</p>
<p>This file contains a <span class="apiname">uses</span> directive, which specifies a service that the module requires. This directive helps the module system locate providers and ensure that they run reliably. This is the complement to the <code class="codeph">provides</code> directive in the <code class="codeph">MyProvider</code> module definition.</p>
<pre dir="ltr">
module com.example.MyApp {
    uses java.security.Provider;
}
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_MYAPP.JAVA">
<p class="subhead2">src/com.example.MyApp/com/example/MyApp/MyApp.java</p>
<pre dir="ltr">
package com.example.MyApp;

import java.util.*;
import java.security.*;
import javax.crypto.*;

/**
 * A simple JCE test client to access a simple test Provider/Cipher
 * implementation in a signed modular jar.
 */
public class MyApp {

    private static final String PROVIDER = "MyProvider";
    private static final String CIPHER = "MyCipher";

    public static void main(String[] args) throws Exception {

        /*
         * Registers MyProvider dynamically.
         *
         * Could do statically by editing the java.security file.
         * Use the first form if using ServiceLoader ("uses" or
         * META-INF/service), the second if using the traditional class
         * lookup method.  Both if provider could be deployed to either.
         *
         * security.provider.14=MyProvider
         * security.provider.15=com.example.MyProvider.MyProvider
         */
        ServiceLoader&lt;Provider&gt; sl =
            ServiceLoader.load(java.security.Provider.class);
        for (Provider p : sl) {
            if (p.getName().equals(PROVIDER)) {
                System.out.println("Registering the Provider");
                Security.addProvider(p);
            }
        }

        /*
         * Get a MyCipher from MyProvider and initialize it.
         */
        Cipher cipher = Cipher.getInstance(CIPHER, PROVIDER);
        cipher.init(Cipher.ENCRYPT_MODE, (Key) null);

        /*
         * What Provider did we get?
         */
        Provider p = cipher.getProvider();
        Class c = p.getClass();
        Module m = c.getModule();
        System.out.println(p.getName() + ": version "
            + p.getVersionStr() + "\n"
            + p.getInfo() + "\n    "
            + ((m.getName() == null) ? "&lt;UNNAMED&gt;" : m.getName())
            + "/" + c.getName());
    }
}
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-0BB9FD94-C66E-44BC-BE8A-AF7CB376F137__MYPROVIDER_EXAMPLE_RUNTEST.SH">
<p class="subhead2">RunTest.sh</p>
<pre dir="ltr">
#!/bin/sh

#
# A simple example to show how a JCE provider could be developed in a
# modular JDK, for deployment as either Named/Unnamed modules.
#

#
# Edit as appropriate
#
JDK_DIR=d:/java/jdk9
KEYSTORE=YourKeyStore
STOREPASS=YourStorePass
SIGNER=YourAlias

echo "-----------"
echo "Clean/Init"
echo "-----------"
rm -rf mods jars
mkdir mods jars

echo "--------------------"
echo "Compiling MyProvider"
echo "--------------------"
${JDK_DIR}/bin/javac.exe \
    --module-source-path src \
    -d mods \
    $(find src/com.example.MyProvider -name '*.java' -print)

echo "------------------------------------"
echo "Packaging com.example.MyProvider.jar"
echo "------------------------------------"
${JDK_DIR}/bin/jar.exe --create \
    --file jars/com.example.MyProvider.jar \
    --verbose \
    --module-version=1.0 \
    -C mods/com.example.MyProvider . \
    -C src/com.example.MyProvider META-INF/services

echo "----------------------------------"
echo "Signing com.example.MyProvider.jar"
echo "----------------------------------"
${JDK_DIR}/bin/jarsigner.exe \
    -keystore ${KEYSTORE} \
    -storepass ${STOREPASS} \
    jars/com.example.MyProvider.jar ${SIGNER}

echo "---------------"
echo "Compiling MyApp"
echo "---------------"
${JDK_DIR}/bin/javac.exe \
    --module-source-path src \
    -d mods \
    $(find src/com.example.MyApp -name '*.java' -print)

echo "-------------------------------"
echo "Packaging com.example.MyApp.jar"
echo "-------------------------------"
${JDK_DIR}/bin/jar.exe --create \
    --file jars/com.example.MyApp.jar \
    --verbose \
    --module-version=1.0 \
    -C mods/com.example.MyApp .

echo "------------------------"
echo "Test1                   "
echo "Named Provider/Named App"
echo "------------------------"
${JDK_DIR}/bin/java.exe \
    --module-path 'jars' \
    -m com.example.MyApp/com.example.MyApp.MyApp

echo "--------------------------"
echo "Test2                     "
echo "Named Provider/Unnamed App"
echo "--------------------------"
${JDK_DIR}/bin/java.exe \
    --module-path 'jars/com.example.MyProvider.jar' \
    --class-path 'jars/com.example.MyApp.jar' \
    com.example.MyApp.MyApp

echo "--------------------------"
echo "Test3                     "
echo "Unnamed Provider/Named App"
echo "--------------------------"
${JDK_DIR}/bin/java.exe \
    --module-path 'jars/com.example.MyApp.jar' \
    --class-path 'jars/com.example.MyProvider.jar' \
    -m com.example.MyApp/com.example.MyApp.MyApp

echo "----------------------------"
echo "Test4                       "
echo "Unnamed Provider/Unnamed App"
echo "----------------------------"
${JDK_DIR}/bin/java.exe \
    --class-path \
        'jars/com.example.MyProvider.jar;jars/com.example.MyApp.jar' \
    com.example.MyApp.MyApp
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment446">
<tr>
<td class="cellalignment453">
<table class="cellalignment451">
<tr>
<td class="cellalignment450"><a href="java-cryptography-architecture-jca-reference-guide.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment450"><a href="oracleproviders.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment455">
<table class="cellalignment449">
<tr>
<td class="cellalignment450"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment450"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment450"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
