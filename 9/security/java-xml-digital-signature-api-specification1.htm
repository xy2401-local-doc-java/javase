<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Java XML Digital Signature API Specification</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2017-10-12T19:32:24Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E68624-04" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="xml-digital-signature1.htm" title="Previous" type="text/html" />
<link rel="Next" href="java-xml-digital-signature-api-overview-and-tutorial.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSSEC.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSSEC.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-573AFFD2-7232-48F1-A376-DB0555C2F588"></a> <span id="PAGE" style="display:none;">23/28</span> <!-- End Header -->
<h1 id="JSSEC-GUID-573AFFD2-7232-48F1-A376-DB0555C2F588" class="sect1">Java XML Digital Signature API Specification</h1>
<div>
<p>This document describes the <a href="http://jcp.org/en/jsr/detail?id=105" target="_blank">Java XML Digital Signature API Specification (JSR 105)</a>. The purpose of this JSR is to define a standard Java API for generating and validating XML signatures.</p>
<p>When this specification is final, there will be a Reference Implementation which will demonstrate the capabilities of this API and will provide an operational definition of this specification. A Technology Compatibility Kit (TCK) will also be available that will verify whether an implementation of the specification is compliant. These are required as per the <a href="http://jcp.org/en/procedures/jcp2" target="_blank">Java Community Process 2.1</a>.</p>
<p>The JSR 105 API is intended to target the following two types of users:</p>
<ul style="list-style-type: disc;">
<li>
<p>Java programmers who want to use the JSR 105 API to generate and validate XML signatures.</p>
</li>
<li>
<p>Java programmers who want to create a concrete implementation of the JSR 105 API and register it as a cryptographic service of a JCA provider (see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-D8E30FE5-66B4-4F6A-88B7-280789E68307" title="In order to be used, a cryptographic provider must first be installed, then registered either statically or dynamically. There are a variety of Sun providers shipped with this release (SUN, SunJCE, SunJSSE, SunRsaSign, etc.) that are already installed and registered. The following sections describe how to install and register additional providers.Each Provider class instance has a (currently case-sensitive) name, a version number, and a string description of the provider and its services.">The Provider Class</a>).</p>
</li>
</ul>
</div>
<div class="sect2"><a id="GUID-5C9B86D5-9D1A-4C18-8399-E291F3B335C5"></a>
<h2 id="JSSEC-GUID-5C9B86D5-9D1A-4C18-8399-E291F3B335C5" class="sect2">Acknowledgements</h2>
<div>
<p>The JSR 105 Expert Group:</p>
<ul style="list-style-type: disc;">
<li>
<p>Nicolas Catania, Hewlett-Packard</p>
</li>
<li>
<p>Donald E. Eastlake 3rd, Motorola</p>
</li>
<li>
<p>Christian Geuer-Pollmann, Apache Software Foundation</p>
</li>
<li>
<p>Hans Granqvist, VeriSign</p>
</li>
<li>
<p>Kazuyuki Harada, Fujitsu</p>
</li>
<li>
<p>Anthony Ho, DSTC</p>
</li>
<li>
<p>Merlin Hughes, Baltimore Technologies</p>
</li>
<li>
<p>Joyce Leung, IBM</p>
</li>
<li>
<p>Gregor Karlinger, IAIK</p>
</li>
<li>
<p>Serge Mister, Entrust Technologies</p>
</li>
<li>
<p>Takuya Mori, NEC Corporation</p>
</li>
<li>
<p>Sean Mullan, Sun Microsystems (co-specification lead)</p>
</li>
<li>
<p>Anthony Nadalin, IBM (co-specification lead)</p>
</li>
<li>
<p>Erwin van der Koogh, Apache Software Foundation</p>
</li>
<li>
<p>Chris Yeung, XML Asia</p>
</li>
</ul>
<p>Also, special thanks to: Valerie Peng, Vincent Ryan, Sharon Liu, Chok Poh, K. Venugopal Rao., Paul Rank, Alexey Gavrilov, Bill Situ, Eric Jendrock, Andrew Fan, Manveen Kaur, Tom Amiro, Michael Mi, Dmitri Silaev, Roman Makarchuk, Vanitha Venkatraman, Arkadiy Sutchilin, and Scott Fordin from Sun Microsystems, Vishal Mahajan from Apache, and Martin Centner from IAIK.</p>
</div>
</div>
<div class="sect2"><a id="GUID-5A0BE185-C9B7-4323-9C3F-6BC8A52181F6"></a>
<h2 id="JSSEC-GUID-5A0BE185-C9B7-4323-9C3F-6BC8A52181F6" class="sect2">Requirements</h2>
<div>
<p>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <a href="http://www.ietf.org/rfc/rfc2119.txt" target="_blank">RFC 2119</a>.</p>
<ol>
<li>
<p><a href="http://www.w3.org/TR/xmldsig-core/" target="_blank">W3C Recommendation, XML-Signature Syntax and Processing</a><span class="bold">.</span></p>
<ul style="list-style-type: disc;">
<li>
<p>The API MUST allow a programmer to generate and validate XML Signatures such that all of the SHOULD and MUST requirements specified by the W3C recommendation can be satisfied.</p>
</li>
<li>
<p>The API MUST allow an implementation of the API to be created such that all of the SHOULD and MUST requirements specified by the W3C recommendation can be satisfied.</p>
</li>
</ul>
</li>
<li>
<p>An implementation SHOULD support the <a href="http://www.w3.org/TR/xmldsig-filter2/" target="_blank"><span class="bold">W3C Recommendation, XML-Signature XPath Filter Transform 2.0</span></a>.</p>
</li>
<li>
<p>An implementation SHOULD support the <a href="http://www.w3.org/TR/xml-exc-c14n/" target="_blank"><span class="bold">W3C Recommendation, Exclusive XML Canonicalization Version 1.0</span></a>.</p>
</li>
<li>
<p><span class="bold">DOM-independent API.</span> The API MUST NOT have dependencies on a specific XML representation, such as DOM. It MUST be possible to create implementations of the API for different XML processing and mechanism representations, such as DOM, <a href="http://jdom.org" target="_blank"><span class="bold">JDOM</span></a> or <a href="http://www.dom4j.org/" target="_blank"><span class="bold">dom4j</span></a>.</p>
</li>
<li>
<p><span class="bold">Extensible, provider-based API.</span> It MUST be possible for a third-party to create and plug in an implementation responsible for managing and creating cryptographic and transform algorithms, dereferencing URIs, and marshalling objects to/from XML.</p>
</li>
<li>
<p><span class="bold">Support for a default XML mechanism type: DOM.</span> An implementation MUST minimally support the default mechanism type: DOM. This ensures that all implementations of JSR 105 are guaranteed a minimal level of functionality. Implementations MAY support other mechanism types.</p>
</li>
<li>
<p><span class="bold">Interoperability for the default XML mechanism type: DOM.</span> The API SHOULD ensure that applications using a DOM implementation are portable and interoperable.</p>
</li>
<li>
<p><span class="bold">J2SE requirements.</span> Implementations of this technology MAY support J2SE 1.2 or later but MUST at a minimum support version 1.4 or later of J2SE.</p>
</li>
</ol>
</div>
</div>
<div class="sect2"><a id="GUID-E977E6F2-4B80-4D2A-A9A0-FCEE0AA90DD3"></a>
<h2 id="JSSEC-GUID-E977E6F2-4B80-4D2A-A9A0-FCEE0AA90DD3" class="sect2">API Dependencies</h2>
<div>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.oracle.com/technetwork/java/archive-139210.html" target="_blank">J2SE (JDK) 1.2</a> or higher</p>
</li>
<li>
<p><a href="http://www.w3.org/DOM/DOMTR" target="_blank">W3C DOM Level 2 API</a><span class="bold">. This dependency is required by classes of the</span> <span class="bold">javax.xml.crypto.dom</span> <span class="bold">and</span> <span class="bold">javax.xml.crypto.dsig.dom</span> <span class="bold">packages.</span></p>
</li>
</ul>
</div>
</div>
<div class="sect2"><a id="GUID-C1DEB54D-7B22-4B64-AE48-2AA892090357"></a>
<h2 id="JSSEC-GUID-C1DEB54D-7B22-4B64-AE48-2AA892090357" class="sect2">Non-Goals</h2>
<div>
<ol>
<li>
<p><span class="bold">Support for non-DOM implementations.</span> While the API SHOULD allow non-DOM implementations to be created, it is beyond the scope of the first version to ensure interoperability between implementations other than DOM. Additional standard service provider types MAY be added in the future and necessary API enhancements MAY be considered for a maintenance revision of JSR 105.</p>
</li>
<li>
<p><span class="bold">Support for a higher-level API.</span> We expect that programmers MAY design high-level APIs which will be built on the JSR 105 API to hide low-level details, address common use-cases or apply profiling constraints. However, it is beyond the scope of the first version to support these requirements. A high-level API MAY be considered for a maintenance release of JSR 105.</p>
</li>
<li>
<p><span class="bold">Support for user-pluggable algorithms (other than transform and canonicalization algorithms which is supported by the</span> <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/TransformService.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig.TransformService</span></a> <span class="bold">class)</span>: Allowing developers to plug in their own implementations of XML Signature algorithms without requiring them to create a complete JSR 105 implementation seems like a worthy goal but SHALL NOT be REQUIRED for this release of JSR 105. A solution we are investigating for a subsequent release of Java SE is to enhance the underlying JCA/JCE to add better support for registering, parsing and processing XML security algorithms, parameters, and key information.</p>
</li>
</ol>
</div>
</div>
<div class="sect2"><a id="GUID-1B1274E9-DFE2-4443-9F22-1731EBF7A234"></a>
<h2 id="JSSEC-GUID-1B1274E9-DFE2-4443-9F22-1731EBF7A234" class="sect2">Package Overview</h2>
<div>
<p>The JSR 105 API consists of 6 packages:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto</span></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dom</span></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig</span></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/dom/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig.dom</span></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig.keyinfo</span></a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/spec/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig.spec</span></a></p>
</li>
</ul>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto</span></a> package contains common classes that are used to perform XML cryptographic operations, such as generating an XML signature or encrypting XML data. Two notable classes in this package are the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/KeySelector.html" target="_blank"><span class="apiname">KeySelector</span></a> class, the purpose of which is to allow developers to supply implementations which locate and optionally validate keys using the information contained in a <span class="apiname">KeyInfo</span> object, and the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/URIDereferencer.html" target="_blank"><span class="apiname">URIDereferencer</span></a> class which allows developers to create and specify their own URI dereferencing implementations.</p>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig</span></a> package includes interfaces that represent the core elements defined in the W3C XML digital signature specification. Of primary significance is the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignature.html" target="_blank"><span class="apiname">XMLSignature</span></a> class, which allows you to sign and validate an XML digital signature. Most of the XML signature structures or elements are represented by a corresponding interface (except for the <span class="apiname">KeyInfo</span> structures, which are included in their own package, and discussed in the next paragraph). These interfaces include: <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/SignedInfo.html" target="_blank"><span class="apiname">SignedInfo</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/CanonicalizationMethod.html" target="_blank"><span class="apiname">CanonicalizationMethod</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/SignatureMethod.html" target="_blank"><span class="apiname">SignatureMethod</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/Reference.html" target="_blank"><span class="apiname">Reference</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/Transform.html" target="_blank"><span class="apiname">Transform</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/DigestMethod.html" target="_blank"><span class="apiname">DigestMethod</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLObject.html" target="_blank"><span class="apiname">XMLObject</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/Manifest.html" target="_blank"><span class="apiname">Manifest</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/SignatureProperty.html" target="_blank"><span class="apiname">SignatureProperty</span></a>, and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/SignatureProperties.html" target="_blank"><span class="apiname">SignatureProperties</span></a>. The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignatureFactory.html" target="_blank"><span class="apiname">XMLSignatureFactory</span></a> class is an abstract factory that is used to create objects that implement these interfaces.</p>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig.keyinfo</span></a> package contains interfaces that represent most of the <span class="apiname">KeyInfo</span> structures defined in the W3C XML digital signature recommendation, including <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyInfo.html" target="_blank"><span class="apiname">KeyInfo</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyName.html" target="_blank"><span class="apiname">KeyName</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyValue.html" target="_blank"><span class="apiname">KeyValue</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/X509Data.html" target="_blank"><span class="apiname">X509Data</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/X509IssuerSerial.html" target="_blank"><span class="apiname">X509IssuerSerial</span></a>, <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/RetrievalMethod.html" target="_blank"><span class="apiname">RetrievalMethod</span></a>, and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/PGPData.html" target="_blank"><span class="apiname">PGPData</span></a>. The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyInfoFactory.html" target="_blank"><span class="apiname">KeyInfoFactory</span></a> class is an abstract factory that is used to create objects that implement these interfaces.</p>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/spec/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig.spec</span></a> package contains interfaces and classes representing input parameters for the digest, signature, transform, or canonicalization algorithms used in the processing of XML signatures.</p>
<p>Finally, the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dom</span></a> and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/dom/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig.dom</span></a> packages contains DOM-specific classes for the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto</span></a> and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/package-summary.html" target="_blank"><span class="apiname">javax.xml.crypto.dsig</span></a> packages, respectively. Only developers and users who are creating or using a DOM-based <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignatureFactory.html" target="_blank"><span class="apiname">XMLSignatureFactory</span></a> or <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyInfoFactory.html" target="_blank"><span class="apiname">KeyInfoFactory</span></a> implementation should need to make direct use of these packages.</p>
</div>
</div>
<div class="sect2"><a id="GUID-C096F341-4814-48A7-BAD9-E99AAF81DBC3"></a>
<h2 id="JSSEC-GUID-C096F341-4814-48A7-BAD9-E99AAF81DBC3" class="sect2">Service Providers</h2>
<div>
<p>A JSR 105 cryptographic service is a concrete implementation of the abstract <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignatureFactory.html" target="_blank"><span class="apiname">XMLSignatureFactory</span></a> and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyInfoFactory.html" target="_blank"><span class="apiname">KeyInfoFactory</span></a> classes and is responsible for creating objects and algorithms that parse, generate and validate XML Signatures and <span class="apiname">KeyInfo</span> structures. A concrete implementation of <span class="apiname">XMLSignatureFactory</span> MUST provide support for each of the REQUIRED algorithms as specified by the W3C recommendation for XML Signatures. It MAY support other algorithms as defined by the W3C recommendation or other specifications.</p>
<p>JSR 105 leverages the JCA provider model (see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-D8E30FE5-66B4-4F6A-88B7-280789E68307" title="In order to be used, a cryptographic provider must first be installed, then registered either statically or dynamically. There are a variety of Sun providers shipped with this release (SUN, SunJCE, SunJSSE, SunRsaSign, etc.) that are already installed and registered. The following sections describe how to install and register additional providers.Each Provider class instance has a (currently case-sensitive) name, a version number, and a string description of the provider and its services.">The Provider Class</a>) for registering and loading <span class="apiname">XMLSignatureFactory</span> and <span class="apiname">KeyInfoFactory</span> implementations.</p>
<p>Each concrete <span class="apiname">XMLSignatureFactory</span> or <span class="apiname">KeyInfoFactory</span> implementation supports a specific <span class="italic">XML mechanism type</span> that identifies the XML processing mechanism that an implementation uses internally to parse and generate XML signature and <span class="apiname">KeyInfo</span> structures. This JSR supports one standard type: <span class="bold">DOM</span>. Support for new standard types (such as JDOM) MAY be added in the future.</p>
<p>A JSR 105 implementation SHOULD use underlying JCA engine classes, such as <a href="https://docs.oracle.com/javase/9/docs/api/java/security/Signature.html" target="_blank"><span class="apiname">java.security.Signature</span></a> and <a href="https://docs.oracle.com/javase/9/docs/api/java/security/MessageDigest.html" target="_blank"><span class="apiname">java.security.MessageDigest</span></a> to perform cryptographic operations.</p>
<p>In addition to the <span class="apiname">XMLSignatureFactory</span> and <span class="apiname">KeyInfoFactory</span> classes, JSR 105 supports a service provider interface for transform and canonicalization algorithms. The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/TransformService.html" target="_blank"><span class="apiname">TransformService</span></a> class allows you to develop and plug in an implementation of a specific transform or canonicalization algorithm for a particular XML mechanism type. The <span class="apiname">TransformService</span> class uses the standard JCA provider model for registering and loading implementations. Each JSR 105 implementation SHOULD use the <span class="apiname">TransformService</span> class to find a provider that supports transform and canonicalization algorithms in XML Signatures that it is generating or validating.</p>
</div>
</div>
<div class="sect2"><a id="GUID-08601D38-4641-479C-81C6-32E5E63AFB9A"></a>
<h2 id="JSSEC-GUID-08601D38-4641-479C-81C6-32E5E63AFB9A" class="sect2">DOM Mechanism Requirements</h2>
<div>
<p>The following requirements MUST be abided by when implementing a DOM-based <span class="apiname">XMLSignatureFactory</span>, <span class="apiname">KeyInfoFactory</span> or <span class="apiname">TransformService</span> in order to minimize interoperability problems:</p>
<ol>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignatureFactory.html#unmarshalXMLSignature" target="_blank"><span class="apiname">unmarshalXMLSignature</span></a> method of <span class="apiname">XMLSignatureFactory</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/dom/DOMValidateContext.html" target="_blank"><span class="apiname">DOMValidateContext</span></a> types. If the type is <span class="apiname">DOMValidateContext</span>, it SHOULD contain an <a href="https://docs.oracle.com/javase/9/docs/api/org/w3c/dom/Element.html" target="_blank"><span class="apiname">Element</span></a> of type Signature. Additionally, the <span class="apiname">unmarshalXMLSignature</span> method MAY populate the Id/Element mappings of the passed-in <span class="apiname">DOMValidateContext</span>.</p>
</li>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignature.html#sign" target="_blank"><span class="apiname">sign</span></a> method of <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignature.html" target="_blank"><span class="apiname">XMLSignature</span></a>s produced by <span class="apiname">XMLSignatureFactory</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/dom/DOMSignContext.html" target="_blank"><span class="apiname">DOMSignContext</span></a> types and the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignature.html#validate" target="_blank"><span class="apiname">validate</span></a> method MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/dom/DOMValidateContext.html" target="_blank"><span class="apiname">DOMValidateContext</span></a> types. This requirement also applies to the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignature.SignatureValue.html#validate" target="_blank"><span class="apiname">validate</span></a> method of <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignature.SignatureValue.html" target="_blank"><span class="apiname">SignatureValue</span></a> and the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/Reference.html#validate" target="_blank"><span class="apiname">validate</span></a> method of <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/Reference.html" target="_blank"><span class="apiname">Reference</span></a>.</p>
</li>
<li>
<p>The implementation MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMStructure.html" target="_blank"><span class="apiname">DOMStructure</span></a>s as the mechanism for the application to specify extensible content (any elements or mixed content).</p>
</li>
<li>
<p>If the <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/URIDereferencer.html#dereference" target="_blank"><span class="apiname">dereference</span></a> method of user-specified <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/URIDereferencer.html" target="_blank"><span class="apiname">URIDereferencer</span></a>s returns <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/NodeSetData.html" target="_blank"><span class="apiname">NodeSetData</span></a> objects, the iterator method MUST return an iteration over objects of type <span class="apiname">org.w3c.dom.Node</span>.</p>
</li>
<li>
<p><span class="apiname">URIReference</span> objects passed to the dereference method of user-specified <span class="apiname">URIDereferencers</span> MUST be of type <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMURIReference.html" target="_blank"><span class="apiname">DOMURIReference</span></a> and <span class="apiname">XMLCryptoContext</span> objects MUST implement <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMCryptoContext.html" target="_blank"><span class="apiname">DOMCryptoContext</span></a>.</p>
</li>
<li>
<p>The previous 2 requirements also apply to <span class="apiname">URIDereferencers</span> returned by the <span class="apiname">getURIDereferencer</span> method of <span class="apiname">XMLSignatureFactory</span> and <span class="apiname">KeyInfoFactory</span>.</p>
</li>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyInfoFactory.html#unmarshalKeyInfo" target="_blank"><span class="apiname">unmarshalKeyInfo</span></a> method of <span class="apiname">KeyInfoFactory</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMStructure.html" target="_blank"><span class="apiname">DOMStructure</span></a> types. If the type is <span class="apiname">DOMStructure</span>, it SHOULD contain an <a href="https://docs.oracle.com/javase/9/docs/api/org/w3c/dom/Element.html" target="_blank"><span class="apiname">Element</span></a> of type <span class="apiname">KeyInfo</span>.</p>
</li>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/Transform.html#transform" target="_blank"><span class="apiname">transform</span></a> method of <span class="apiname">Transform</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMCryptoContext.html" target="_blank"><span class="apiname">DOMCryptoContext</span></a> context parameter types.</p>
</li>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignatureFactory.html#newTransform-String-XMLStructure-" target="_blank"><span class="apiname">newtransform</span></a> and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignatureFactory.html#newCanonicalizationMethod-String-XMLStructure-" target="_blank"><span class="apiname">newCanonicalizationMethod</span></a> methods of <span class="apiname">XMLSignatureFactory</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMStructure.html" target="_blank"><span class="apiname">DOMStructure</span></a> parameter types.</p>
</li>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/TransformService.html#init" target="_blank"><span class="apiname">init</span></a>, and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/TransformService.html#marshalParams" target="_blank"><span class="apiname">marshalParams</span></a> methods of <span class="apiname">TransformService</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMStructure.html" target="_blank"><span class="apiname">DOMStructure</span></a> and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMCryptoContext.html" target="_blank"><span class="apiname">DOMCryptoContext</span></a> types.</p>
</li>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/XMLSignatureFactory.html#unmarshalXMLSignature" target="_blank"><span class="apiname">unmarshalXMLSignature</span></a> method of <span class="apiname">XMLSignatureFactory</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMStructure.html" target="_blank"><span class="apiname">DOMStructure</span></a> types. If the type is <span class="apiname">DOMStructure</span>, it SHOULD contain an <a href="https://docs.oracle.com/javase/9/docs/api/org/w3c/dom/Element.html" target="_blank"><span class="apiname">Element</span></a> of type <span class="apiname">Signature</span>.</p>
</li>
<li>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dsig/keyinfo/KeyInfo.html#marshal" target="_blank"><span class="apiname">marshal</span></a> method of <span class="apiname">KeyInfo</span> MUST support <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMStructure.html" target="_blank"><span class="apiname">DOMStructure</span></a> and <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/crypto/dom/DOMCryptoContext.html" target="_blank"><span class="apiname">DOMCryptoContext</span></a> parameter types.</p>
</li>
</ol>
<p>Note that a DOM implementation MAY internally use other XML parsing APIs other than DOM as long as it doesn't affect interoperability. For example, a DOM implementation of <span class="apiname">XMLSignatureFactory</span> might use a SAX parser internally to canonicalize data.</p>
</div>
</div>
<div class="sect2"><a id="GUID-ABDD4731-6332-4B90-9830-7EB41827E6DB"></a>
<h2 id="JSSEC-GUID-ABDD4731-6332-4B90-9830-7EB41827E6DB" class="sect2">Open API Issues</h2>
<div>
<p>The following is a list of open API issues.</p>
<ol>
<li>
<p>ID attribute registration of external XML document references is not supported. Consider the following reference:</p>
<p>Dereferencing the external document results in an octet stream which is subsequently converted to a NodeSet by the JSR 105 implementation. But the API does not provide a mechanism for registering ID attributes of external documents and therefore the XPath Transform implementation may be unable to identify the "foo" ID.</p>
</li>
</ol>
<pre dir="ltr">
&lt;Reference URI="document.xml"&gt;
  &lt;Transforms&gt;
    &lt;Transform Algorithm="http://www.w3.org/TR/1999/REC-xpath-19991116"&gt;
      &lt;XPath&gt;id("foo")&lt;/XPath&gt;
    &lt;/Transform&gt;
  &lt;/Transforms&gt;
&lt;/Reference&gt; 
</pre></div>
</div>
<div class="sect2"><a id="GUID-0285EE4D-4F15-424F-86EF-95EE97C43889"></a>
<h2 id="JSSEC-GUID-0285EE4D-4F15-424F-86EF-95EE97C43889" class="sect2">Programming Examples</h2>
<div>
<p>Examples 1-3 below demonstrate how to generate different types of simple XML Digital Signature using the JSR 105 API. Example 1 describes how to generate a detached signature using the DSA signature algorithm. Example 2 describes how to generate an enveloped signature. Example 3 describes how to generate an enveloping signature. Example 4 describes how to validate an XML Signature.</p>
<div class="example" id="GUID-0285EE4D-4F15-424F-86EF-95EE97C43889__GUID-204117C4-D258-4126-A7B0-5DEE08F4F750">
<p class="titleinexample">Example 11-1 1. Generating a detached XML Digital Signature</p>
<pre dir="ltr">
import javax.xml.crypto.*;
import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dom.*;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.security.*;
import java.util.Collections;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;

/**
 * This is a simple example of generating a Detached XML
 * Signature using the JSR 105 API. The resulting signature will look
 * like (key and signature values will be different):
 *
 * &lt;pre&gt;&lt;code&gt;
 * &lt;Signature xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;
 *   &lt;SignedInfo&gt;
 *     &lt;CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/&gt;
 *     &lt;SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#dsa-sha256"/&gt;
 *     &lt;Reference URI="http://www.w3.org/TR/xml-stylesheet"&gt;
 *       &lt;DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/&gt;
 *       &lt;DigestValue&gt;60NvZvtdTB+7UnlLp/H24p7h4bs=&lt;/DigestValue&gt;
 *     &lt;/Reference&gt;
 *   &lt;/SignedInfo&gt;
 *   &lt;SignatureValue&gt;
 *     DpEylhQoiUKBoKWmYfajXO7LZxiDYgVtUtCNyTgwZgoChzorA2nhkQ==
 *   &lt;/SignatureValue&gt;
 *   &lt;KeyInfo&gt;
 *     &lt;KeyValue&gt;
 *       &lt;DSAKeyValue&gt;
 *         &lt;P&gt;
 *           rFto8uPQM6y34FLPmDh40BLJ1rVrC8VeRquuhPZ6jYNFkQuwxnu/wCvIAMhukPBL
 *           FET8bJf/b2ef+oqxZajEb+88zlZoyG8g/wMfDBHTxz+CnowLahnCCTYBp5kt7G8q
 *           UobJuvjylwj1st7V9Lsu03iXMXtbiriUjFa5gURasN8=
 *         &lt;/P&gt;
 *         &lt;Q&gt;
 *           kEjAFpCe4lcUOdwphpzf+tBaUds=
 *         &lt;/Q&gt;
 *         &lt;G&gt;
 *           oe14R2OtyKx+s+60O5BRNMOYpIg2TU/f15N3bsDErKOWtKXeNK9FS7dWStreDxo2
 *           SSgOonqAd4FuJ/4uva7GgNL4ULIqY7E+mW5iwJ7n/WTELh98mEocsLXkNh24HcH4
 *           BZfSCTruuzmCyjdV1KSqX/Eux04HfCWYmdxN3SQ/qqw=
 *         &lt;/G&gt;
 *         &lt;Y&gt;
 *           pA5NnZvcd574WRXuOA7ZfC/7Lqt4cB0MRLWtHubtJoVOao9ib5ry4rTk0r6ddnOv
 *           AIGKktutzK3ymvKleS3DOrwZQgJ+/BDWDW8kO9R66o6rdjiSobBi/0c2V1+dkqOg
 *           jFmKz395mvCOZGhC7fqAVhHat2EjGPMfgSZyABa7+1k=
 *         &lt;/Y&gt;
 *       &lt;/DSAKeyValue&gt;
 *     &lt;/KeyValue&gt;
 *   &lt;/KeyInfo&gt;
 * &lt;/Signature&gt;
 * &lt;/code&gt;&lt;/pre&gt;
 */
public class GenDetached {

    //
    // Synopsis: java GenDetached [output]
    //
    // where output is the name of the file that will contain the detached
    // signature. If not specified, standard output is used.
    //
    public static void main(String[] args) throws Exception {

        // First, create a DOM XMLSignatureFactory that will be used to
        // generate the XMLSignature and marshal it to DOM.
        XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

        // Create a Reference to an external URI that will be digested
        // using the SHA256 digest algorithm
        Reference ref = fac.newReference("http://www.w3.org/TR/xml-stylesheet",
            fac.newDigestMethod(DigestMethod.SHA256, null));

        // Create the SignedInfo
        SignedInfo si = fac.newSignedInfo(
            fac.newCanonicalizationMethod
                (CanonicalizationMethod.INCLUSIVE_WITH_COMMENTS,
                 (C14NMethodParameterSpec) null),
            fac.newSignatureMethod("http://www.w3.org/2000/09/xmldsig#dsa-sha256", null),
            Collections.singletonList(ref));

        // Create a DSA KeyPair
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("DSA");
        kpg.initialize(2048);
        KeyPair kp = kpg.generateKeyPair();

        // Create a KeyValue containing the DSA PublicKey that was generated
        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(kp.getPublic());

        // Create a KeyInfo and add the KeyValue to it
        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv));

        // Create the XMLSignature (but don't sign it yet)
        XMLSignature signature = fac.newXMLSignature(si, ki);

        // Create the Document that will hold the resulting XMLSignature
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true); // must be set
        Document doc = dbf.newDocumentBuilder().newDocument();

        // Create a DOMSignContext and set the signing Key to the DSA
        // PrivateKey and specify where the XMLSignature should be inserted
        // in the target document (in this case, the document root)
        DOMSignContext signContext = new DOMSignContext(kp.getPrivate(), doc);

        // Marshal, generate (and sign) the detached XMLSignature. The DOM
        // Document will contain the XML Signature if this method returns
        // successfully.
        signature.sign(signContext);

        // output the resulting document
        OutputStream os;
        if (args.length &gt; 0) {
           os = new FileOutputStream(args[0]);
        } else {
           os = System.out;
        }

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans = tf.newTransformer();
        trans.transform(new DOMSource(doc), new StreamResult(os));
    }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0285EE4D-4F15-424F-86EF-95EE97C43889__GUID-96181504-3E74-4E17-9B9A-80BF82F3E782">
<p class="titleinexample">Example 11-2 2. Generating an enveloped XML Digital Signature</p>
<pre dir="ltr">
import javax.xml.crypto.*;
import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dom.*;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.spec.*;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.security.*;
import java.util.Collections;
import java.util.Iterator;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;

/**
 * This is a simple example of generating an Enveloped XML
 * Signature using the JSR 105 API. The resulting signature will look
 * like (key and signature values will be different):
 *
 * &lt;pre&gt;&lt;code&gt;
 *&lt;Envelope xmlns="urn:envelope"&gt;
 * &lt;Signature xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;
 *   &lt;SignedInfo&gt;
 *     &lt;CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/&gt;
 *     &lt;SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#dsa-sha256"/&gt;
 *     &lt;Reference URI=""&gt;
 *       &lt;Transforms&gt;
 *         &lt;Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/&gt;
 *       &lt;/Transforms&gt;
 *       &lt;DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/&gt;
 *       &lt;DigestValue&gt;K8M/lPbKnuMDsO0Uzuj75lQtzQI=&lt;DigestValue&gt;
 *     &lt;/Reference&gt;
 *   &lt;/SignedInfo&gt;
 *   &lt;SignatureValue&gt;
 *     DpEylhQoiUKBoKWmYfajXO7LZxiDYgVtUtCNyTgwZgoChzorA2nhkQ==
 *   &lt;/SignatureValue&gt;
 *   &lt;KeyInfo&gt;
 *     &lt;KeyValue&gt;
 *       &lt;DSAKeyValue&gt;
 *         &lt;P&gt;
 *           rFto8uPQM6y34FLPmDh40BLJ1rVrC8VeRquuhPZ6jYNFkQuwxnu/wCvIAMhukPBL
 *           FET8bJf/b2ef+oqxZajEb+88zlZoyG8g/wMfDBHTxz+CnowLahnCCTYBp5kt7G8q
 *           UobJuvjylwj1st7V9Lsu03iXMXtbiriUjFa5gURasN8=
 *         &lt;/P&gt;
 *         &lt;Q&gt;
 *           kEjAFpCe4lcUOdwphpzf+tBaUds=
 *         &lt;/Q&gt;
 *         &lt;G&gt;
 *           oe14R2OtyKx+s+60O5BRNMOYpIg2TU/f15N3bsDErKOWtKXeNK9FS7dWStreDxo2
 *           SSgOonqAd4FuJ/4uva7GgNL4ULIqY7E+mW5iwJ7n/WTELh98mEocsLXkNh24HcH4
 *           BZfSCTruuzmCyjdV1KSqX/Eux04HfCWYmdxN3SQ/qqw=
 *         &lt;/G&gt;
 *         &lt;Y&gt;
 *           pA5NnZvcd574WRXuOA7ZfC/7Lqt4cB0MRLWtHubtJoVOao9ib5ry4rTk0r6ddnOv
 *           AIGKktutzK3ymvKleS3DOrwZQgJ+/BDWDW8kO9R66o6rdjiSobBi/0c2V1+dkqOg
 *           jFmKz395mvCOZGhC7fqAVhHat2EjGPMfgSZyABa7+1k=
 *         &lt;/Y&gt;
 *       &lt;/DSAKeyValue&gt;
 *     &lt;/KeyValue&gt;
 *   &lt;/KeyInfo&gt;
 * &lt;/Signature&gt;
 *&lt;/Envelope&gt;
 * &lt;/code&gt;&lt;/pre&gt;
 */
public class GenEnveloped {

    //
    // Synopsis: java GenEnveloped [document] [output]
    //
    //    where "document" is the name of a file containing the XML document
    //    to be signed, and "output" is the name of the file to store the
    //    signed document. The 2nd argument is optional - if not specified,
    //    standard output will be used.
    //
    public static void main(String[] args) throws Exception {

        // Create a DOM XMLSignatureFactory that will be used to generate the
        // enveloped signature
        XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

        // Create a Reference to the enveloped document (in this case we are
        // signing the whole document, so a URI of "" signifies that) and
        // also specify the SHA256 digest algorithm and the ENVELOPED Transform.
        Reference ref = fac.newReference
            ("", fac.newDigestMethod(DigestMethod.SHA256, null),
             Collections.singletonList
              (fac.newTransform
                (Transform.ENVELOPED, (TransformParameterSpec) null)),
             null, null);

        // Create the SignedInfo
        SignedInfo si = fac.newSignedInfo
            (fac.newCanonicalizationMethod
             (CanonicalizationMethod.INCLUSIVE_WITH_COMMENTS,
              (C14NMethodParameterSpec) null),
             fac.newSignatureMethod("http://www.w3.org/2000/09/xmldsig#dsa-sha256", null),
             Collections.singletonList(ref));

        // Create a DSA KeyPair
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("DSA");
        kpg.initialize(2048);
        KeyPair kp = kpg.generateKeyPair();

        // Create a KeyValue containing the DSA PublicKey that was generated
        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(kp.getPublic());

        // Create a KeyInfo and add the KeyValue to it
        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv));

        // Instantiate the document to be signed
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        Document doc =
            dbf.newDocumentBuilder().parse(new FileInputStream(args[0]));

        // Create a DOMSignContext and specify the DSA PrivateKey and
        // location of the resulting XMLSignature's parent element
        DOMSignContext dsc = new DOMSignContext
            (kp.getPrivate(), doc.getDocumentElement());

        // Create the XMLSignature (but don't sign it yet)
        XMLSignature signature = fac.newXMLSignature(si, ki);

        // Marshal, generate (and sign) the enveloped signature
        signature.sign(dsc);

        // output the resulting document
        OutputStream os;
        if (args.length &gt; 1) {
           os = new FileOutputStream(args[1]);
        } else {
           os = System.out;
        }

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans = tf.newTransformer();
        trans.transform(new DOMSource(doc), new StreamResult(os));
    }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0285EE4D-4F15-424F-86EF-95EE97C43889__GUID-2BD29F3A-48DA-43C5-8053-869CDAF6035C">
<p class="titleinexample">Example 11-3 3. Generating an enveloping XML Digital Signature</p>
<pre dir="ltr">
import javax.xml.crypto.*;
import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dom.*;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.security.*;
import java.util.Arrays;
import java.util.Collections;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

/**
 * This is a simple example of generating an Enveloping XML
 * Signature using the JSR 105 API. The signature in this case references a
 * local URI that points to an Object element.
 * The resulting signature will look like (certificate and
 * signature values will be different):
 *
 * &lt;pre&gt;&lt;code&gt;
 * &lt;Signature xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;
 *   &lt;SignedInfo&gt;
 *     &lt;CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"/&gt;
 *     &lt;SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#dsa-sha256"/&gt;
 *     &lt;Reference URI="#object"&gt;
 *       &lt;DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/&gt;
 *       &lt;DigestValue&gt;7/XTsHaBSOnJ/jXD5v0zL6VKYsk=&lt;/DigestValue&gt;
 *     &lt;/Reference&gt;
 *   &lt;/SignedInfo&gt;
 *   &lt;SignatureValue&gt;
 *     RpMRbtMHLa0siSS+BwUpLIEmTfh/0fsld2JYQWZzCzfa5kBTz25+XA==
 *   &lt;/SignatureValue&gt;
 *   &lt;KeyInfo&gt;
 *     &lt;KeyValue&gt;
 *       &lt;DSAKeyValue&gt;
 *         &lt;P&gt;
 *           /KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0Imbz
 *           RMqzVDZkVG9xD7nN1kuFw==
 *         &lt;/P&gt;
 *         &lt;Q&gt;
 *           li7dzDacuo67Jg7mtqEm2TRuOMU=
 *         &lt;/Q&gt;
 *         &lt;G&gt;
 *           Z4Rxsnqc9E7pGknFFH2xqaryRPBaQ01khpMdLRQnG541Awtx/XPaF5Bpsy4pNWMOH
 *           CBiNU0NogpsQW5QvnlMpA==
 *         &lt;/G&gt;
 *         &lt;Y&gt;
 *           wbEUaCgHZXqK4qLvbdYrAc6+Do0XVcsziCJqxzn4cJJRxwc3E1xnEXHscVgr1Cql9
 *           i5fanOKQbFXzmb+bChqig==
 *         &lt;/Y&gt;
 *       &lt;/DSAKeyValue&gt;
 *     &lt;/KeyValue&gt;
 *   &lt;/KeyInfo&gt;
 *   &lt;Object Id="object"&gt;some text&lt;/Object&gt;
 * &lt;/Signature&gt;
 *
 * &lt;/code&gt;&lt;/pre&gt;
 */
public class GenEnveloping {

    //
    // Synopis: java GenEnveloping [output]
    //
    //   where "output" is the name of a file that will contain the
    //   generated signature. If not specified, standard ouput will be used.
    //
    public static void main(String[] args) throws Exception {

        // First, create the DOM XMLSignatureFactory that will be used to
        // generate the XMLSignature
        XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

        // Next, create a Reference to a same-document URI that is an Object
        // element and specify the SHA256 digest algorithm
        Reference ref = fac.newReference("#object",
            fac.newDigestMethod(DigestMethod.SHA256, null));

        // Next, create the referenced Object
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        Document doc = dbf.newDocumentBuilder().newDocument();
        Node text = doc.createTextNode("some text");
        XMLStructure content = new DOMStructure(text);
        XMLObject obj = fac.newXMLObject
            (Collections.singletonList(content), "object", null, null);

        // Create the SignedInfo
        SignedInfo si = fac.newSignedInfo(
            fac.newCanonicalizationMethod
                (CanonicalizationMethod.INCLUSIVE_WITH_COMMENTS,
                 (C14NMethodParameterSpec) null),
            fac.newSignatureMethod("http://www.w3.org/2000/09/xmldsig#dsa-sha256", null),
            Collections.singletonList(ref));

        // Create a DSA KeyPair
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("DSA");
        kpg.initialize(2048);
        KeyPair kp = kpg.generateKeyPair();

        // Create a KeyValue containing the DSA PublicKey that was generated
        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(kp.getPublic());

        // Create a KeyInfo and add the KeyValue to it
        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv));

        // Create the XMLSignature (but don't sign it yet)
        XMLSignature signature = fac.newXMLSignature(si, ki,
            Collections.singletonList(obj), null, null);

        // Create a DOMSignContext and specify the DSA PrivateKey for signing
        // and the document location of the XMLSignature
        DOMSignContext dsc = new DOMSignContext(kp.getPrivate(), doc);

        // Lastly, generate the enveloping signature using the PrivateKey
        signature.sign(dsc);

        // output the resulting document
        OutputStream os;
        if (args.length &gt; 0) {
           os = new FileOutputStream(args[0]);
        } else {
           os = System.out;
        }

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans = tf.newTransformer();
        trans.transform(new DOMSource(doc), new StreamResult(os));
    }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0285EE4D-4F15-424F-86EF-95EE97C43889__GUID-A388AA5A-3BD0-468F-BD1C-6D0209D06F2E">
<p class="titleinexample">Example 11-4 4. Validating an XML Digital Signature</p>
<pre dir="ltr">
import javax.xml.crypto.*;
import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dom.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.keyinfo.*;
import java.io.FileInputStream;
import java.security.*;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

/**
 * This is a simple example of validating an XML
 * Signature using the JSR 105 API. It assumes the key needed to
 * validate the signature is contained in a KeyValue KeyInfo.
 */
public class Validate {

    //
    // Synopsis: java Validate [document]
    //
    //    where "document" is the name of a file containing the XML document
    //    to be validated.
    //
    public static void main(String[] args) throws Exception {

        // Instantiate the document to be validated
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        Document doc =
            dbf.newDocumentBuilder().parse(new FileInputStream(args[0]));

        // Find Signature element
        NodeList nl =
            doc.getElementsByTagNameNS(XMLSignature.XMLNS, "Signature");
        if (nl.getLength() == 0) {
            throw new Exception("Cannot find Signature element");
        }

        // Create a DOM XMLSignatureFactory that will be used to unmarshal the
        // document containing the XMLSignature
        XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

        // Create a DOMValidateContext and specify a KeyValue KeySelector
        // and document context
        DOMValidateContext valContext = new DOMValidateContext
            (new KeyValueKeySelector(), nl.item(0));

        // unmarshal the XMLSignature
        XMLSignature signature = fac.unmarshalXMLSignature(valContext);

        // Validate the XMLSignature (generated above)
        boolean coreValidity = signature.validate(valContext);

        // Check core validation status
        if (coreValidity == false) {
            System.err.println("Signature failed core validation");
            boolean sv = signature.getSignatureValue().validate(valContext);
            System.out.println("signature validation status: " + sv);
            // check the validation status of each Reference
            Iterator i = signature.getSignedInfo().getReferences().iterator();
            for (int j=0; i.hasNext(); j++) {
                boolean refValid =
                    ((Reference) i.next()).validate(valContext);
                System.out.println("ref["+j+"] validity status: " + refValid);
            }
        } else {
            System.out.println("Signature passed core validation");
        }
    }

    /**
     * KeySelector which retrieves the public key out of the
     * KeyValue element and returns it.
     * NOTE: If the key algorithm doesn't match signature algorithm,
     * then the public key will be ignored.
     */
    private static class KeyValueKeySelector extends KeySelector {
        public KeySelectorResult select(KeyInfo keyInfo,
                                        KeySelector.Purpose purpose,
                                        AlgorithmMethod method,
                                        XMLCryptoContext context)
            throws KeySelectorException {
            if (keyInfo == null) {
                throw new KeySelectorException("Null KeyInfo object!");
            }
            SignatureMethod sm = (SignatureMethod) method;
            List list = keyInfo.getContent();

            for (int i = 0; i &lt; list.size(); i++) {
                XMLStructure xmlStructure = (XMLStructure) list.get(i);
                if (xmlStructure instanceof KeyValue) {
                    PublicKey pk = null;
                    try {
                        pk = ((KeyValue)xmlStructure).getPublicKey();
                    } catch (KeyException ke) {
                        throw new KeySelectorException(ke);
                    }
                    // make sure algorithm is compatible with method
                    if (algEquals(sm.getAlgorithm(), pk.getAlgorithm())) {
                        return new SimpleKeySelectorResult(pk);
                    }
                }
            }
            throw new KeySelectorException("No KeyValue element found!");
        }

        //@@@FIXME: this should also work for key types other than DSA/RSA
        static boolean algEquals(String algURI, String algName) {
            if (algName.equalsIgnoreCase("DSA") &amp;&amp;
                algURI.equalsIgnoreCase("http://www.w3.org/2000/09/xmldsig#dsa-sha256")) {
                return true;
            } else if (algName.equalsIgnoreCase("RSA") &amp;&amp;
                       algURI.equalsIgnoreCase("http://www.w3.org/2000/09/xmldsig#dsa-sha256")) {
                return true;
            } else {
                return false;
            }
        }
    }

    private static class SimpleKeySelectorResult implements KeySelectorResult {
        private PublicKey pk;
        SimpleKeySelectorResult(PublicKey pk) {
            this.pk = pk;
        }

        public Key getKey() { return pk; }
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment446">
<tr>
<td class="cellalignment453">
<table class="cellalignment451">
<tr>
<td class="cellalignment450"><a href="xml-digital-signature1.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment450"><a href="java-xml-digital-signature-api-overview-and-tutorial.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment455">
<table class="cellalignment449">
<tr>
<td class="cellalignment450"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment450"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment450"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
