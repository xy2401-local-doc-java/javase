<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Java PKI Programmers Guide</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="The Java Certification Path API consists of classes and interfaces for handling certification paths, which are also called certification chains. If a certification path meets certain validation rules, it may be used to securely establish the mapping of a public key to a subject." />
<meta name="dcterms.created" content="2017-10-12T19:32:24Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E68624-04" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="java-secure-socket-extension-jsse-reference-guide.htm" title="Previous" type="text/html" />
<link rel="Next" href="introduction-java-sasl-api.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSSEC.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSSEC.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-650D0D53-B617-4055-AFD3-AF5C2629CBBF"></a> <span id="PAGE" style="display:none;">20/28</span> <!-- End Header -->
<h1 id="JSSEC-GUID-650D0D53-B617-4055-AFD3-AF5C2629CBBF" class="sect1"><span class="enumeration_chapter">9</span> Java PKI Programmers Guide</h1>
<div>
<p>The Java Certification Path API consists of classes and interfaces for handling certification paths, which are also called certification chains. If a certification path meets certain validation rules, it may be used to securely establish the mapping of a public key to a subject.</p>
<div class="section">
<p class="subhead1">Topics</p>
<p><a href="java-pki-programmers-guide.htm#GUID-D6A18B1E-A2A8-4CA2-BD18-514CD807810E" title="The Java Certification Path API defines interfaces and abstract classes for creating, building, and validating certification paths.&nbsp; Implementations may be plugged in using a provider-based interface.">PKI Programmers Guide Overview</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-271526C4-6095-4233-9F7F-0CD0C62BDA93" title="The core classes of the Java Certification Path API consist of interfaces and classes that support certification path functionality in an algorithm and implementation-independent manner.">Core Classes and Interfaces</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-266DD62E-39A7-435B-90DF-7EB1425D56E1" title="Experienced programmers can create their own provider packages supplying certification path service implementations.">Implementing a Service Provider</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-EF1585DC-20BF-4140-B71E-0A8528D4A57D" title="The Java Certification Path API requires and utilizes a set of standard names for certification path validation algorithms, encodings and certificate storage types.">Appendix A: Standard Names</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-EB250086-0AC1-4D60-AE2A-FC7461374746">Appendix B: CertPath Implementation in SUN Provider</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-E6E737DB-4000-4005-969E-BCD0238B1566" title="Client-side support for the On-Line Certificate Status Protocol (OCSP) as defined in RFC 2560 is supported.">Appendix C: OCSP Support</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-FF62B0E3-E57A-4F40-970A-0481AF750CCD" title="The JdkLDAP provider supports the LDAP implementation of the CertStore engine class.">Appendix D: CertPath Implementation in JdkLDAP Provider</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3" title="The jdk.certpath.disabledAlgorithms Security Property contains a list of cryptographic algorithms and key size constraints that are considered weak or broken. Certificates and other data (CRLs, OCSPResponses) containing any of these algorithms or key sizes will be blocked during certification path building and validation. This property is used by Oracle's PKIX implementation, other implementations might not examine and use it.">Appendix E: Disabling Cryptographic Algorithms</a></p>
</div>
<!-- class="section" --></div>
<div class="sect2"><a id="GUID-D6A18B1E-A2A8-4CA2-BD18-514CD807810E"></a>
<h2 id="JSSEC-GUID-D6A18B1E-A2A8-4CA2-BD18-514CD807810E" class="sect2">PKI Programmers Guide Overview</h2>
<div>
<p>The Java Certification Path API defines interfaces and abstract classes for creating, building, and validating certification paths.&nbsp; Implementations may be plugged in using a provider-based interface.</p>
<div class="section">
<p>This API is based on the <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-3E0744CE-6AC7-4A6D-A1F6-6C01199E6920">Cryptographic Service Providers</a> architecture, described in the <cite>Java Cryptography Architecture Reference Guide</cite>, and includes algorithm-specific classes for building and validating X.509 certification paths according to the PKIX standards. The PKIX standards were developed by the <a href="http://datatracker.ietf.org/wg/pkix/charter/" target="_blank">IETF PKIX working group</a>.</p>
<p>This API was originally specified using the <a href="http://jcp.org/en/home/index" target="_blank">Java Community Process</a> program as Java Specification Request (JSR) 000055. The API was included in the Java SDK, starting with Java SE Development Kit (JDK) 1.4. See <a href="http://jcp.org/en/jsr/detail?id=55" target="_blank">JSR 55: Certification Path API</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Who Should Read This Document</p>
<p>This document is intended for two types of experienced developers:</p>
<ol>
<li>
<p>Those who want to design secure applications that build or validate certification paths.</p>
</li>
<li>
<p>Those who want to write a service provider implementation for building or validating certification paths.</p>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section" id="GUID-D6A18B1E-A2A8-4CA2-BD18-514CD807810E__GUID-4BEA98CF-CE46-4BB2-B7D0-E7170C4B955C">
<p>This document assumes that you have already read <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-3E0744CE-6AC7-4A6D-A1F6-6C01199E6920">Cryptographic Service Providers</a>.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-2EFB901C-9ED1-4823-9311-B05B49E34AEA"></a>
<h3 id="JSSEC-GUID-2EFB901C-9ED1-4823-9311-B05B49E34AEA" class="sect3">Introduction to Public Key Certificates</h3>
<div>
<p>Users of public key applications and systems must be confident that a subject's public key is genuine, i.e., that the associated private key is owned by the subject. Public key certificates are used to establish this trust.</p>
<p>A <span class="bold">public key (or identity) certificate</span> is a binding of a public key to an identity, which is digitally signed by the private key of another entity, often called a <span class="bold">Certification Authority</span> (CA). For the remainder of this section, the term CA is used to refer to an entity that signs a certificate.</p>
<p>If the user does not have a trusted copy of the public key of the CA that signed the subject's public key certificate, then another public key certificate vouching for the signing CA is required. This logic can be applied recursively, until a chain of certificates (or <span class="bold">a certification path</span>) is discovered from a <span class="bold">trust anchor</span> or a <span class="bold">most-trusted CA</span> to the target subject (commonly referred to as the <span class="bold">end-entity</span>). The <span class="bold">most-trusted CA</span> is usually specified by a certificate issued to a CA that the user directly trusts. In general, a certification path is an ordered list of certificates, usually comprised of the end-entity's public key certificate and zero or more additional certificates. A certification path typically has one or more encodings, allowing it to be safely transmitted across networks and to different operating system architectures.</p>
<p>The following figure illustrates a certification path from a most-trusted CA's public key (CA 1) to the target subject (Alice). The certification path establishes trust in Alice's public key through an intermediate CA named CA2.</p>
<div class="figure" id="GUID-2EFB901C-9ED1-4823-9311-B05B49E34AEA__GUID-9B683BE7-5148-49FD-A561-A5E6C220F7F7">
<p class="titleinfigure">Figure 9-1 Certification Path from CA's Public Key (CA 1) to the Target Subject</p>
<img width="420" height="128" src="img/publickey_pki.png" alt="Description of Figure 9-1 follows" title="Description of Figure 9-1 follows" /><br />
<a href="img_text/publickey_pki.htm">Description of "Figure 9-1 Certification Path from CA's Public Key (CA 1) to the Target Subject"</a></div>
<!-- class="figure" -->
<p>A certification path must be validated before it can be relied on to establish trust in a subject's public key. Validation can consist of various checks on the certificates contained in the certification path, such as verifying the signatures and checking that each certificate has not been revoked. The PKIX standards define an algorithm for validating certification paths consisting of X.509 certificates.</p>
<p>Often a user may not have a certification path from a most-trusted CA to the subject. Providing services to build or discover certification paths is an important feature of public key enabled systems. <a href="http://www.ietf.org/rfc/rfc2587.txt" target="_blank">RFC 2587</a> defines an LDAP (Lightweight Directory Access Protocol) schema definition that facilitates the discovery of X.509 certification paths using the LDAP directory service protocol.</p>
<p>Building and validating certification paths is an important part of many standard security protocols such as SSL/TLS/DTLS, S/MIME, and IPsec. The Java Certification Path API provides a set of classes and interfaces for developers who need to integrate this functionality into their applications. This API benefits two types of developers: those who need to write service provider implementations for a specific certification path building or validation algorithm; and those who need to access standard algorithms for creating, building, and validating certification paths in an implementation-independent manner.</p>
</div>
</div>
<div class="sect3"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23"></a>
<h3 id="JSSEC-GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23" class="sect3">X.509 Certificates and Certificate Revocation Lists (CRLs)</h3>
<div>
<p>A public-key certificate is a digitally signed statement from one entity saying that the public key and some other information of another entity has some specific value.</p>
<div class="section">
<p>The following table defines some of the key terms:</p>
<dl>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-AE06C840-0CDB-4B6E-8704-6D4748E6E0F0"><!-- --></a><span class="variable">Public Keys</span></dt>
<dd>These are numbers associated with a particular entity, and are intended to be known to everyone who needs to have trusted interactions with that entity. Public keys are used to verify signatures.</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-BD9AF829-3573-4518-B55C-7176F73B1766"><!-- --></a><span class="variable">Digitally Signed</span></dt>
<dd>If some data is <span class="variable">digitally signed</span> it has been stored with the "identity" of an entity, and a signature that proves that entity knows about the data. The data is rendered unforgeable by signing with the entitys' private key.</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-D9C21B0B-3E70-4DC5-AE83-BB794E175306"><!-- --></a><span class="variable">Identity</span></dt>
<dd>A known way of addressing an entity. In some systems the identity is the public key, in others it can be anything from a UNIX UID to an Email address to an X.509 Distinguished Name.</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-02ECE861-7359-4FF7-8A78-EE7F9B412062"><!-- --></a><span class="variable">Signature</span></dt>
<dd>A signature is computed over some data using the private key of an entity (the signer).</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-27909E67-E056-4AC0-8BBB-26C32D3D2ACF"><!-- --></a><span class="variable">Private Keys</span></dt>
<dd>These are numbers, each of which is supposed to be known only to the particular entity whose private key it is (that is, it's supposed to be kept secret). Private and public keys exist in pairs in all public key cryptography systems (also referred to as "public key crypto systems"). In a typical public key crypto system, such as DSA, a private key corresponds to exactly one public key. Private keys are used to compute signatures.</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-A64089C4-83C1-4550-9D16-28732ADA7947"><!-- --></a><span class="variable">Entity</span></dt>
<dd>An entity is a person, organization, program, computer, business, bank, or something else you are trusting to some degree.</dd>
</dl>
<p>Basically, public key cryptography requires access to users' public keys. In a large-scale networked environment it is impossible to guarantee that prior relationships between communicating entities have been established or that a trusted repository exists with all used public keys. Certificates were invented as a solution to this public key distribution problem. Now a <span class="variable">Certification Authority</span> (CA) can act as a <span class="variable">Trusted Third Party</span>. CAs are entities (e.g., businesses) that are trusted to sign (issue) certificates for other entities. It is assumed that CAs will only create valid and reliable certificates as they are bound by legal agreements. There are many public Certification Authorities, such as <a href="http://www.verisign.com" target="_blank">VeriSign</a>, <a href="http://www.thawte.com" target="_blank">Thawte</a>, <a href="http://www.entrust.com" target="_blank">Entrust</a>, and so on. You can also run your own Certification Authority using products such as the Netscape/Microsoft Certificate Servers or the Entrust CA product for your organization.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">What Applications use Certificates?</p>
<p>Probably the most widely visible application of X.509 certificates today is in web browsers (such as Mozilla Firefox and Microsoft Internet Explorer) that support the TLS protocol. TLS (Transport Layer Security) is a security protocol that provides privacy and authentication for your network traffic. These browsers can only use this protocol with web servers that support TLS.</p>
<p>Other technologies that rely on X.509 certificates include:</p>
<ul style="list-style-type: disc;">
<li>Various code-signing schemes, such as signed Java ARchives, and Microsoft Authenticode.</li>
<li>Various secure E-Mail standards, such as PEM and S/MIME.</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">How do I Get a Certificate?</p>
<p>There are two basic techniques used to get certificates:</p>
<ul style="list-style-type: disc;">
<li>You can create one yourself (using the right tools, such as keytool).</li>
<li>You can ask a Certification Authority to issue you one (either directly or using a tool such as <span class="bold">keytool</span> to generate the request).</li>
</ul>
<p>The main inputs to the certificate creation process are:</p>
<ul style="list-style-type: disc;">
<li>Matched <span class="variable">public and private keys</span>, generated using some special tools (such as keytool), or a browser. <span class="bold">Only the public key is ever shown to anyone else.</span> The private key is used to sign data; if someone knows your private key, they can masquerade as you ... perhaps forging legal documents attributed to you!</li>
<li>You need to provide <span class="variable">information about the entity being certified</span> (e.g., you). This normally includes information such as your name and organizational address. If you ask a CA to issue a certificate for you, you will normally need to provide proof to show correctness of the information.</li>
</ul>
<p>If you are asking a CA to issue you a certificate, you provide your public key and some information about you. You'll use a tool (such as keytool or a browser that supports Certificate Signing Request generation). to digitally sign this information, and send it to the CA. The CA will then generate the certificate and return it.</p>
<p>If you're generating the certificate yourself, you'll take that same information, add a little more (dates during which the certificate is valid, a serial number), and just create the certificate using some tool (such as keytool). Not everyone will accept self-signed certificates; one part of the value provided by a CA is to serve as a neutral and trusted introduction service, based in part on their verification requirements, which are openly published in their Certification Service Practices (CSP).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">What's Inside an X.509 Certificate?</p>
<p>The X.509 standard defines what information can go into a certificate, and describes how to write it down (the data format). All X.509 certificates have the following data, in addition to the signature:</p>
<dl>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-1B3500E7-D036-45DA-BDD4-B6698F4CF5CF"><!-- --></a><span class="bold">Version</span></dt>
<dd>This identifies which version of the X.509 standard applies to this certificate, which affects what information can be specified in it. Thus far, three versions are defined.</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-1A458D8C-2304-4E0F-BEE6-C7BFD204A10B"><!-- --></a><span class="bold">Serial Number</span></dt>
<dd>The entity that created the certificate is responsible for assigning it a serial number to distinguish it from other certificates it issues. This information is used in numerous ways, for example when a certificate is revoked its serial number is placed in a Certificate Revocation List (CRL).</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-0B248269-402E-42E7-A0B3-597ADDE96611"><!-- --></a><span class="bold">Signature Algorithm Identifier</span></dt>
<dd>This identifies the algorithm used by the CA to sign the certificate.</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-1BD8A301-9D9B-411D-A04C-51FE3686E206"><!-- --></a><span class="bold">Issuer Name</span></dt>
<dd>The X.500 name of the entity that signed the certificate. This is normally a CA. Using this certificate implies trusting the entity that signed this certificate. (Note that in some cases, such as <span class="variable">root or top-level</span> CA certificates, the issuer signs its own certificate.)</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-D359D40A-D9C6-4212-B15D-CEC95618C378"><!-- --></a><span class="bold">Validity Period</span></dt>
<dd>Each certificate is valid only for a limited amount of time. This period is described by a start date and time and an end date and time, and can be as short as a few seconds or almost as long as a century. The validity period chosen depends on a number of factors, such as the strength of the private key used to sign the certificate or the amount one is willing to pay for a certificate. This is the expected period that entities can rely on the public value, if the associated private key has not been compromised.</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-01030D38-927F-4C7E-859A-AF25A09F8992"><!-- --></a><span class="bold">Subject Name</span></dt>
<dd>The name of the entity whose public key the certificate identifies. This name uses the X.500 standard, so it is intended to be unique across the Internet. This is the Distinguished Name (DN) of the entity, for example,
<pre dir="ltr">
    CN=Java Duke, OU=Java Software Division, O=Sun Microsystems Inc, C=US
</pre>
(These refer to the subject's Common Name, Organizational Unit, Organization, and Country.)</dd>
<dt class="dlterm"><a id="GUID-8DEBED06-13C6-4608-8C74-7C8144EF0D23__GUID-36D2585D-476B-44DC-BDB6-6E2AB2FB112A"><!-- --></a><span class="bold">Subject Public Key Information</span></dt>
<dd>This is the public key of the entity being named, together with an algorithm identifier which specifies which public key crypto system this key belongs to and any associated key parameters.</dd>
</dl>
<p><span class="variable">X.509 Version 1</span> has been available since 1988, is widely deployed, and is the most generic.</p>
<p><span class="variable">X.509 Version 2</span> introduced the concept of subject and issuer unique identifiers to handle the possibility of reuse of subject and/or issuer names over time. Most certificate profile documents strongly recommend that names not be reused, and that certificates should not make use of unique identifiers. Version 2 certificates are not widely used.</p>
<p><span class="variable">X.509 Version 3</span> is the most recent (1996) and supports the notion of extensions, whereby anyone can define an extension and include it in the certificate. Some common extensions in use today are: <span class="variable">KeyUsage</span> (limits the use of the keys to particular purposes such as "signing-only") and <span class="variable">AlternativeNames</span> (allows other identities to also be associated with this public key, e.g. DNS names, Email addresses, IP addresses). Extensions can be marked <span class="variable">critical</span> to indicate that the extension should be checked and enforced/used. For example, if a certificate has the KeyUsage extension marked critical and set to "keyCertSign" then if this certificate is presented during SSL communication, it should be rejected, as the certificate extension indicates that the associated private key should only be used for signing certificates and not for SSL use.</p>
<p>All the data in a certificate is encoded using two related standards called ASN.1/DER. <span class="variable">Abstract Syntax Notation 1</span> describes data. The <cite>Distinguished Encoding Rules</cite> describe a single way to store and transfer that data.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">What Java API Can Be Used to Access and Manage Certificates?</p>
<p>The Certificate API, found in the <a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/package-summary.html" target="_blank"><code class="codeph">java.security.cert</code></a> package, includes the following:</p>
<ul style="list-style-type: disc;">
<li><span class="bold">CertificateFactory</span> class defines the functionality of a certificate factory, which is used to generate certificate, certificate revocation list (CRL), and certification path objects from their encoding.</li>
<li><span class="bold">Certificate</span> class is an abstract class for managing a variety of certificates. It is an abstraction for certificates that have different formats but important common uses. For example, different types of certificates, such as X.509 and PGP, share general certificate functionality (like encoding and verifying) and some types of information like public key.</li>
<li><span class="bold">CRL</span> class is an abstract class for managing a variety of Certificate Revocation Lists (CRLs).</li>
<li><span class="bold">X509Certificate</span> class is an abstract class for X.509 Certificates. It provides a standard way to access all the attributes of an X.509 certificate.</li>
<li><span class="bold">X509Extension</span> interface is an interface for an X.509 extension. The extensions defined for X.509 v3 certificates and v2 CRLs (Certificate Revocation Lists) provide mechanisms for associating additional attributes with users or public keys, such as for managing the certification hierarchy, and for managing CRL distribution.</li>
<li><span class="bold">X509CRL</span> class is an abstract class for an X.509 Certificate Revocation List (CRL). A CRL is a time-stamped list identifying revoked certificates. It is signed by a Certification Authority (CA) and made freely available in a public repository.</li>
<li><span class="bold">X509CRLEntry</span> class is an abstract class for a CRL entry.</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">What Java Tool Can Generate, Display, Import, and Export X.509 Certificates?</p>
<p>There is a tool named <a class="olink JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549" target="_blank" href="../tools/keytool.htm#JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549">keytool</a> that can be used to create public/private key pairs and X.509 v3 certificates, and to manage keystores. Keys and certificates are used to digitally sign your Java applications and applets (see <a class="olink JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864" target="_blank" href="../tools/jarsigner.htm#JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864">jarsigner</a>).</p>
<p>A <span class="variable">keystore</span> is a protected database that holds keys and certificates. Access to a keystore is guarded by a password (defined at the time the keystore is created, by the person who creates the keystore, and changeable only when providing the current password). In addition, each private key in a keystore can be guarded by its own password.</p>
<p>Using <span class="bold">keytool</span>, it is possible to display, import, and export X.509 v1, v2, and v3 certificates stored as files, and to generate new v3 certificates. For examples, see the "EXAMPLES" section for <a class="olink JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549" target="_blank" href="../tools/keytool.htm#JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549">keytool</a> in the <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-271526C4-6095-4233-9F7F-0CD0C62BDA93"></a>
<h2 id="JSSEC-GUID-271526C4-6095-4233-9F7F-0CD0C62BDA93" class="sect2">Core Classes and Interfaces</h2>
<div>
<p>The core classes of the Java Certification Path API consist of interfaces and classes that support certification path functionality in an algorithm and implementation-independent manner.</p>
<div class="section">The API builds on and extends the existing <code class="codeph">java.security.cert</code> package for handling certificates. The core classes can be broken up into 4 class categories: Basic, Validation, Building, and Storage:
<ul style="list-style-type: disc;">
<li>
<p><a href="java-pki-programmers-guide.htm#GUID-2D30176C-EE5A-41F8-896B-1A16E7F786B8" title="The basic certification path classes provide fundamental functionality for encoding and representing certification paths. The key basic class in the Java Certification Path API is CertPath, which encapsulates the universal aspects shared by all types of certification paths. An application uses an instance of the CertificateFactory class to create a CertPath object.">Basic Certification Path Classes</a></p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CertPath</code>, <code class="codeph">CertificateFactory</code>, and <code class="codeph">CertPathParameters</code></p>
</li>
</ul>
</li>
<li>
<p><a href="java-pki-programmers-guide.htm#GUID-C825028D-5F30-4041-ACC4-466657F59F02" title="The Java Certification Path API includes classes and interfaces for validating certification paths. An application uses an instance of the CertPathValidator class to validate a CertPath object. If successful, the result of the validation algorithm is returned in an object implementing the CertPathValidatorResult interface.">Certification Path Validation Classes</a></p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CertPathValidator</code>, <code class="codeph">CertPathValidatorResult</code>, and <code class="codeph">CertPathChecker</code></p>
</li>
</ul>
</li>
<li>
<p><a href="java-pki-programmers-guide.htm#GUID-CBABC770-E714-4E6C-AD40-EA680BE91C20" title="The Java Certification Path API includes classes for building (or discovering) certification paths. An application uses an instance of the CertPathBuilder class to build a CertPath object. If successful, the result of the build is returned in an object implementing the CertPathBuilderResult interface.">Certification Path Building Classes</a></p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CertPathBuilder</code>, and <code class="codeph">CertPathBuilderResult</code></p>
</li>
</ul>
</li>
<li>
<p><a href="java-pki-programmers-guide.htm#GUID-AB96FD45-6F8A-4785-B6C5-082BEB6CDA5E" title="The Java Certification Path API includes the CertStore class for retrieving certificates and CRLs from a repository.">Certificate/CRL Storage Classes</a></p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CertStore</code>, <code class="codeph">CertStoreParameters</code>, <code class="codeph">CertSelector</code>, and <code class="codeph">CRLSelector</code></p>
</li>
</ul>
</li>
</ul>
<p>The Java Certification Path API also includes a set of algorithm-specific classes modeled for use with the PKIX certification path validation algorithm defined in <a href="http://www.ietf.org/rfc/rfc5280.txt" target="_blank">RFC 5280</a>: <cite>Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</cite>. The <a href="java-pki-programmers-guide.htm#GUID-5BBEF087-CA8A-4287-97FB-BD88DCD12FE5" title="The Java Certification Path API includes a set of algorithm-specific classes modeled for use with the PKIX certification path validation algorithm.">PKIX Classes</a> are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">TrustAnchor</code></p>
</li>
<li>
<p><code class="codeph">PKIXParameters</code></p>
</li>
<li>
<p><code class="codeph">PKIXCertPathValidatorResult</code></p>
</li>
<li>
<p><code class="codeph">PKIXBuilderParameters</code></p>
</li>
<li>
<p><code class="codeph">PKIXCertPathBuilderResult</code></p>
</li>
<li>
<p><code class="codeph">PKIXCertPathChecker</code></p>
</li>
<li>
<p><code class="codeph">PKIXRevocationChecker</code></p>
</li>
</ul>
<p>The complete reference documentation for the relevant Certification Path API classes can be found in <a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/package-summary.html" target="_blank"><code class="codeph">java.security.cert</code></a> .</p>
<p>Most of the classes and interfaces in the <span class="apiname">CertPath</span> API are not thread-safe. However, there are some exceptions, which will be noted in this guide and in the API specification. Multiple threads that need to access a single non-thread-safe object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Topics</p>
<p><a href="java-pki-programmers-guide.htm#GUID-2D30176C-EE5A-41F8-896B-1A16E7F786B8" title="The basic certification path classes provide fundamental functionality for encoding and representing certification paths. The key basic class in the Java Certification Path API is CertPath, which encapsulates the universal aspects shared by all types of certification paths. An application uses an instance of the CertificateFactory class to create a CertPath object.">Basic Certification Path Classes</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-C825028D-5F30-4041-ACC4-466657F59F02" title="The Java Certification Path API includes classes and interfaces for validating certification paths. An application uses an instance of the CertPathValidator class to validate a CertPath object. If successful, the result of the validation algorithm is returned in an object implementing the CertPathValidatorResult interface.">Certification Path Validation Classes</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-CBABC770-E714-4E6C-AD40-EA680BE91C20" title="The Java Certification Path API includes classes for building (or discovering) certification paths. An application uses an instance of the CertPathBuilder class to build a CertPath object. If successful, the result of the build is returned in an object implementing the CertPathBuilderResult interface.">Certification Path Building Classes</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-AB96FD45-6F8A-4785-B6C5-082BEB6CDA5E" title="The Java Certification Path API includes the CertStore class for retrieving certificates and CRLs from a repository.">Certificate/CRL Storage Classes</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-5BBEF087-CA8A-4287-97FB-BD88DCD12FE5" title="The Java Certification Path API includes a set of algorithm-specific classes modeled for use with the PKIX certification path validation algorithm.">PKIX Classes</a></p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-2D30176C-EE5A-41F8-896B-1A16E7F786B8"></a>
<h3 id="JSSEC-GUID-2D30176C-EE5A-41F8-896B-1A16E7F786B8" class="sect3">Basic Certification Path Classes</h3>
<div>
<p>The basic certification path classes provide fundamental functionality for encoding and representing certification paths. The key basic class in the Java Certification Path API is <code class="codeph">CertPath</code>, which encapsulates the universal aspects shared by all types of certification paths. An application uses an instance of the <code class="codeph">CertificateFactory</code> class to create a <code class="codeph">CertPath</code> object.</p>
<div class="section">
<p class="subhead3">Topics</p>
<p><a href="java-pki-programmers-guide.htm#GUID-E47B8A0E-6B3A-4B49-994D-CF185BF441EC" title="The CertPath class is an abstract class for certification paths. It defines the functionality shared by all certification path objects. Various certification path types can be implemented by subclassing the CertPath class, even though they may have different contents and ordering schemes.">The CertPath Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-BCABADD4-C0DC-4987-B187-F086B4BCE195" title="The CertificateFactory class is an engine class that defines the functionality of a certificate factory. It is used to generate Certificate, CRL, and CertPath objects.">The CertificateFactory Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-2AF52C1B-8EE2-4D65-9273-F7AC523AB42F" title="The CertPathParameters interface is a transparent representation of the set of parameters used with a particular certification path builder or validation algorithm.">The CertPathParameters Interface</a></p>
</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-E47B8A0E-6B3A-4B49-994D-CF185BF441EC"></a>
<h4 id="JSSEC-GUID-E47B8A0E-6B3A-4B49-994D-CF185BF441EC" class="sect4">The CertPath Class</h4>
<div>
<p>The <code class="codeph">CertPath</code> class is an abstract class for certification paths. It defines the functionality shared by all certification path objects. Various certification path types can be implemented by subclassing the <code class="codeph">CertPath</code> class, even though they may have different contents and ordering schemes.</p>
<p>All <code class="codeph">CertPath</code> objects are serializable, immutable and thread-safe and share the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>A type</p>
<p>This corresponds to the type of the certificates in the certification path, for example: X.509. The type of a <code class="codeph">CertPath</code> is obtained using the method:</p>
<pre class="codeblock" dir="ltr">
    public String getType()
</pre>
<p>For standard certificate types, see <a href="https://docs.oracle.com/javase/9/docs/specs/security/standard-names.html#certificatefactory-types" target="_blank">CertificateFactory Types</a>.</p>
</li>
<li>
<p>A list of certificates</p>
<p>The <code class="codeph">getCertificates</code> method returns the list of certificates in the certification path:</p>
<pre class="codeblock" dir="ltr">
    public abstract List&lt;? extends Certificate&gt; getCertificates()
</pre>
This method returns a <code class="codeph">List</code> of zero or more <code class="codeph">java.security.cert.Certificate</code> objects. The returned <code class="codeph">List</code> and the <code class="codeph">Certificates</code> contained within it are immutable, in order to protect the contents of the <code class="codeph">CertPath</code> object. The ordering of the certificates returned depends on the type. By convention, the certificates in a <code class="codeph">CertPath</code> object of type X.509 are ordered starting with the target certificate and ending with a certificate issued by the trust anchor. That is, the issuer of one certificate is the subject of the following one. The certificate representing the <code class="codeph">TrustAnchor</code> should not be included in the certification path. Unvalidated X.509 <code class="codeph">CertPath</code>s may not follow this convention. PKIX <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" title="The CertPathValidator class is an engine class used to validate a certification path.">CertPathValidator</a></code>s will detect any departure from these conventions that cause the certification path to be invalid and throw a <code class="codeph">CertPathValidatorException</code>.</li>
<li>
<p>One or more encodings</p>
<p>Each <code class="codeph">CertPath</code> object supports one or more encodings. These are external encoded forms for the certification path, used when a standard representation of the path is needed outside the Java Virtual Machine (as when transmitting the path over a network to some other party). Each path can be encoded in a default format, the bytes of which are returned using the method:</p>
<pre class="codeblock" dir="ltr">
    public abstract byte[] getEncoded()
</pre>
Alternatively, the <code class="codeph">getEncoded(String)</code> method returns a specific supported encoding by specifying the encoding format as a <code class="codeph">String</code> (ex: "PKCS7"). For standard encoding formats, see <a href="https://docs.oracle.com/javase/9/docs/specs/security/standard-names.html#certpath-encodings" target="_blank">CertPath Encodings</a>.
<pre class="codeblock" dir="ltr">
    public abstract byte[] getEncoded(String encoding)
</pre>
Also, the <code class="codeph">getEncodings</code> method returns an iterator over the supported encoding format <code class="codeph">String</code>s (the default encoding format is returned first):
<pre class="codeblock" dir="ltr">
    public abstract Iterator&lt;String&gt; getEncodings()
</pre></li>
</ul>
<p>All <code class="codeph">CertPath</code> objects are also <code class="codeph">Serializable</code>. <code class="codeph">CertPath</code> objects are resolved into an alternate <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/CertPath.CertPathRep.html" target="_blank">CertPath.CertPathRep</a></code> object during serialization. This allows a <code class="codeph">CertPath</code> object to be serialized into an equivalent representation regardless of its underlying implementation.</p>
<p><code class="codeph">CertPath</code> objects are generated from an encoded byte array or list of <code class="codeph">Certificate</code>s using a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BCABADD4-C0DC-4987-B187-F086B4BCE195" title="The CertificateFactory class is an engine class that defines the functionality of a certificate factory. It is used to generate Certificate, CRL, and CertPath objects.">CertificateFactory</a></code>. Alternatively, a <code class="codeph">CertPathBuilder</code> may be used to try to find a <code class="codeph">CertPath</code> from a most-trusted CA to a particular subject. Once a <code class="codeph">CertPath</code> object has been created, it may be validated by passing it to the <code class="codeph">validate</code> method of <code class="codeph">CertPathValidator</code>. Each of these concepts are explained in more detail in subsequent sections.</p>
</div>
</div>
<div class="sect4"><a id="GUID-BCABADD4-C0DC-4987-B187-F086B4BCE195"></a>
<h4 id="JSSEC-GUID-BCABADD4-C0DC-4987-B187-F086B4BCE195" class="sect4">The CertificateFactory Class</h4>
<div>
<p>The <code class="codeph">CertificateFactory</code> class is an engine class that defines the functionality of a certificate factory. It is used to generate <code class="codeph">Certificate</code>, <code class="codeph">CRL</code>, and <code class="codeph">CertPath</code> objects.</p>
<p>A <code class="codeph">CertificateFactory</code> should not be confused with a <code class="codeph">CertPathBuilder</code>. A <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a></code> (discussed later) is used to discover or find a certification path when one does not exist. In contrast, a <code class="codeph">CertificateFactory</code> is used when a certification path has already been discovered and the caller needs to instantiate a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-E47B8A0E-6B3A-4B49-994D-CF185BF441EC" title="The CertPath class is an abstract class for certification paths. It defines the functionality shared by all certification path objects. Various certification path types can be implemented by subclassing the CertPath class, even though they may have different contents and ordering schemes.">CertPath</a></code> object from its contents, which exist in a different form such as an encoded byte array or an array of <code class="codeph">Certificate</code>s.</p>
<div class="section">
<p class="subhead3">Creating a CertificateFactory Object</p>
<p>See the <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-9A581FBA-EDF7-4BCA-8244-4CE2C75E4CEA" title="The CertificateFactory class defines the functionality of a certificate factory, which is used to generate certificate and certificate revocation list (CRL) objects from their encoding.">CertificateFactory</a> section in the <cite>Java Cryptography Architecture Reference Guide</cite> for the details of creating a <code class="codeph">CertificateFactory</code> object.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Generating CertPath Objects</p>
<p>A <code class="codeph">CertificateFactory</code> instance generates <code class="codeph">CertPath</code> objects from a <code class="codeph">List</code> of <code class="codeph">Certificate</code> objects or from an <code class="codeph">InputStream</code> that contains the encoded form of a <code class="codeph">CertPath</code>. Just like a <code class="codeph">CertPath</code>, each <code class="codeph">CertificateFactory</code> supports a default encoding format for certification paths (ex: PKCS#7). To generate a <code class="codeph">CertPath</code> object and initialize it with the data read from an input stream (in the default encoding format), use the <code class="codeph">generateCertPath</code> method:</p>
<pre dir="ltr">
public final CertPath generateCertPath(InputStream inStream)
</pre>
<p>or from a particular encoding format:</p>
<pre dir="ltr">
    public final CertPath generateCertPath(InputStream inStream, 
                                           String encoding)
</pre>
<p>To find out what encoding formats are supported, use the <code class="codeph">getCertPathEncodings</code> method (the default encoding is returned first):</p>
<pre dir="ltr">
public final Iterator&lt;String&gt; getCertPathEncodings()
</pre>
<p>To generate a certification path object from a <code class="codeph">List</code> of <code class="codeph">Certificate</code> objects, use the following method:</p>
<pre dir="ltr">
public final CertPath generateCertPath(List&lt;? extends Certificate&gt; certificates)
</pre>
<p>A <code class="codeph">CertificateFactory</code> always returns <code class="codeph">CertPath</code> objects that consist of <code class="codeph">Certificates</code> that are of the same type as the factory. For example, a <code class="codeph">CertificateFactory</code> of type X.509 returns <code class="codeph">CertPath</code> objects consisting of certificates that are an instance of <code class="codeph">java.security.cert.X509Certificate</code>.</p>
<p>The following code sample illustrates generating a certification path from a PKCS#7 encoded certificate reply stored in a file:</p>
<pre dir="ltr">
    // open an input stream to the file
    FileInputStream fis = new FileInputStream(filename);
    // instantiate a CertificateFactory for X.509
    CertificateFactory cf = CertificateFactory.getInstance("X.509");
    // extract the certification path from
    // the PKCS7 SignedData structure
    CertPath cp = cf.generateCertPath(fis, "PKCS7");
    // print each certificate in the path
    List&lt;Certificate&gt; certs = cp.getCertificates();
    for (Certificate cert : certs) {
        System.out.println(cert);
    }
</pre>
<p>Here's another code sample that fetches a certificate chain from a <code class="codeph">KeyStore</code> and converts it to a <code class="codeph">CertPath</code> using a <code class="codeph">CertificateFactory</code>:</p>
<pre dir="ltr">
    // instantiate a KeyStore with type JKS
    KeyStore ks = KeyStore.getInstance("JKS");
    // load the contents of the KeyStore
    ks.load(new FileInputStream("./keystore"),
        "password".toCharArray());
    // fetch certificate chain stored with alias "sean"
    Certificate[] certArray = ks.getCertificateChain("sean");
    // convert chain to a List
    List certList = Arrays.asList(certArray);
    // instantiate a CertificateFactory for X.509
    CertificateFactory cf = CertificateFactory.getInstance("X.509");
    // extract the certification path from
    // the List of Certificates
    CertPath cp = cf.generateCertPath(certList);
</pre>
<p>Note that there is an existing method in <code class="codeph">CertificateFactory</code> named <code class="codeph">generateCertificates</code> that parses a sequence of <code class="codeph">Certificates</code>. For encodings consisting of multiple certificates, use <code class="codeph">generateCertificates</code> when you want to parse a collection of possibly unrelated certificates. Otherwise, use <code class="codeph">generateCertPath</code> when you want to generate a <code class="codeph">CertPath</code> and subsequently validate it with a <code class="codeph">CertPathValidator</code> (discussed later).</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-2AF52C1B-8EE2-4D65-9273-F7AC523AB42F"></a>
<h4 id="JSSEC-GUID-2AF52C1B-8EE2-4D65-9273-F7AC523AB42F" class="sect4">The CertPathParameters Interface</h4>
<div>
<p>The <code class="codeph">CertPathParameters</code> interface is a transparent representation of the set of parameters used with a particular certification path builder or validation algorithm.</p>
<p>Its main purpose is to group (and provide type safety for) all certification path parameter specifications. The <code class="codeph">CertPathParameters</code> interface extends the <code class="codeph">Cloneable</code> interface and defines a <code class="codeph">clone()</code> method that does not throw an exception. All concrete implementations of this interface should implement and override the <code class="codeph">Object.clone()</code> method, if necessary. This allows applications to clone any <code class="codeph">CertPathParameters</code> object.</p>
<p>Objects implementing the <code class="codeph">CertPathParameters</code> interface are passed as arguments to methods of the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" title="The CertPathValidator class is an engine class used to validate a certification path.">CertPathValidator</a></code> and <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a></code> classes. Typically, a concrete implementation of the <code class="codeph">CertPathParameters</code> interface will hold a set of input parameters specific to a particular certification path build or validation algorithm. For example, the <code class="codeph">PKIXParameters</code> class is an implementation of the <code class="codeph">CertPathParameters</code> interface that holds a set of input parameters for the PKIX certification path validation algorithm. One such parameter is the set of most-trusted CAs that the caller trusts for anchoring the validation process. This parameter among others is discussed in more detail in the section discussing the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-3D95A3BE-74CB-4357-BB85-9A8DEA36A457" title="The PKIXParametersClass class specifies the set of input parameters defined by the PKIX certification path validation algorithm. It also includes a few additional useful parameters.">PKIXParameters</a></code> class.</p>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-C825028D-5F30-4041-ACC4-466657F59F02"></a>
<h3 id="JSSEC-GUID-C825028D-5F30-4041-ACC4-466657F59F02" class="sect3">Certification Path Validation Classes</h3>
<div>
<p>The Java Certification Path API includes classes and interfaces for validating certification paths. An application uses an instance of the <code class="codeph">CertPathValidator</code> class to validate a <code class="codeph">CertPath</code> object. If successful, the result of the validation algorithm is returned in an object implementing the <code class="codeph">CertPathValidatorResult</code> interface.</p>
<div class="section">
<p class="subhead3">Topics</p>
<p><a href="java-pki-programmers-guide.htm#GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" title="The CertPathValidator class is an engine class used to validate a certification path.">The CertPathValidator Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-29AC2D33-7518-4DEA-A4CC-544CB174B915" title="The CertPathValidatorResult interface is a transparent representation of the successful result or output of a certification path validation algorithm.">The CertPathValidatorResult Interface</a></p>
</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A"></a>
<h4 id="JSSEC-GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" class="sect4">The CertPathValidator Class</h4>
<div>
<p>The <code class="codeph">CertPathValidator</code> class is an engine class used to validate a certification path.</p>
<div class="section">
<p class="subhead3">Creating a CertPathValidator Object</p>
<p>As with all engine classes, the way to get a <code class="codeph">CertPathValidator</code> object for a particular validation algorithm is to call one of the <code class="codeph">getInstance</code> static factory methods on the <code class="codeph">CertPathValidator</code> class:</p>
<pre class="codeblock" dir="ltr">
        public static CertPathValidator getInstance(String algorithm)
        public static CertPathValidator getInstance(String algorithm, 
                                                    String provider)
        public static CertPathValidator getInstance(String algorithm, 
                                                    Provider provider)
</pre>
<p>The <code class="codeph">algorithm</code> parameter is the name of a certification path validation algorithm (for example, "PKIX"). Standard <code class="codeph">CertPathValidator</code> algorithm names are listed in the <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Validating a Certification Path</p>
<p>Once a <code class="codeph">CertPathValidator</code> object is created, paths can be validated by calling the <code class="codeph">validate</code> method, passing it the certification path to be validated and a set of algorithm-specific parameters:</p>
<pre class="codeblock" dir="ltr">
        public final CertPathValidatorResult 
                validate(CertPath certPath, CertPathParameters params)
                throws CertPathValidatorException, 
                       InvalidAlgorithmParameterException
</pre>
<p>If the validation algorithm is successful, the result is returned in an object implementing the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-29AC2D33-7518-4DEA-A4CC-544CB174B915" title="The CertPathValidatorResult interface is a transparent representation of the successful result or output of a certification path validation algorithm.">CertPathValidatorResult</a></code> interface. Otherwise, a <code class="codeph">CertPathValidatorException</code> is thrown. The <code class="codeph">CertPathValidatorException</code> contains methods that return the <code class="codeph">CertPath</code>, and if relevant, the index of the certificate that caused the algorithm to fail and the root exception or cause of the failure.</p>
<p>Note that the <code class="codeph">CertPath</code> and <code class="codeph">CertPathParameters</code> passed to the <code class="codeph">validate</code> method must be of a type that is supported by the validation algorithm. Otherwise, an <code class="codeph">InvalidAlgorithmParameterException</code> is thrown. For example, a <code class="codeph">CertPathValidator</code> instance that implements the PKIX algorithm validates <code class="codeph">CertPath</code> objects of type X.509 and <code class="codeph">CertPathParameters</code> that are an instance of <code class="codeph">PKIXParameters</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-29AC2D33-7518-4DEA-A4CC-544CB174B915"></a>
<h4 id="JSSEC-GUID-29AC2D33-7518-4DEA-A4CC-544CB174B915" class="sect4">The CertPathValidatorResult Interface</h4>
<div>
<p>The <code class="codeph">CertPathValidatorResult</code> interface is a transparent representation of the successful result or output of a certification path validation algorithm.</p>
<p>The main purpose of this interface is to group and provide type safety for all validation results. Similar to the <code class="codeph">CertPathParameters</code> interface, <code class="codeph">CertPathValidatorResult</code> extends <code class="codeph">Cloneable</code> and defines a <code class="codeph">clone()</code> method that does not throw an exception. This allows applications to clone any <code class="codeph">CertPathValidatorResult</code> object.</p>
<p>Objects implementing the <code class="codeph">CertPathValidatorResult</code> interface are returned by the <code class="codeph">validate</code> method of <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-29AC2D33-7518-4DEA-A4CC-544CB174B915" title="The CertPathValidatorResult interface is a transparent representation of the successful result or output of a certification path validation algorithm.">CertPathValidatorResult</a></code> interface when successful. If not successful, a <code class="codeph">CertPathValidatorException</code> is thrown with a description of the failure. Typically, a concrete implementation of the <code class="codeph">CertPathValidatorResult</code> interface will hold a set of output parameters specific to a particular certification path validation algorithm. For example, the <code class="codeph">PKIXCertPathValidatorResult</code> class is an implementation of the <code class="codeph">CertPathValidatorResult</code> interface, which contains methods to get the output parameters of the PKIX certification path validation algorithm. One such parameter is the valid policy tree. This parameter among others is discussed in more detail in the section discussing the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-DF6CA960-B37A-4EE1-9E43-76561F711A7D" title="The PKIXCertPathValidatorResult class represents the result of the PKIX certification path validation algorithm.">PKIXCertPathValidatorResult</a></code> class.</p>
<p>The following code sample shows how to create a <code class="codeph">CertPathValidator</code> and use it to validate a certification path. The sample assumes that the <code class="codeph">CertPath</code> and <code class="codeph">CertPathParameters</code> objects which are passed to the <code class="codeph">validate</code> method have been previously created; a more complete example will be illustrated in the section describing the PKIX classes.</p>
<pre class="codeblock" dir="ltr">
    // create CertPathValidator that implements the "PKIX" algorithm
    CertPathValidator cpv = null;
    try {
        cpv = CertPathValidator.getInstance("PKIX");
    } catch (NoSuchAlgorithmException nsae) {
        System.err.println(nsae);
        System.exit(1);
    }
    // validate certification path ("cp") with specified parameters ("params")
    try {
        CertPathValidatorResult cpvResult = cpv.validate(cp, params);
    } catch (InvalidAlgorithmParameterException iape) {
        System.err.println("validation failed: " + iape);
        System.exit(1);
    } catch (CertPathValidatorException cpve) {
        System.err.println("validation failed: " + cpve);
        System.err.println("index of certificate that caused exception: "
                + cpve.getIndex());
        System.exit(1);
    }
</pre></div>
</div>
</div>
<div class="sect3"><a id="GUID-CBABC770-E714-4E6C-AD40-EA680BE91C20"></a>
<h3 id="JSSEC-GUID-CBABC770-E714-4E6C-AD40-EA680BE91C20" class="sect3">Certification Path Building Classes</h3>
<div>
<p>The Java Certification Path API includes classes for building (or discovering) certification paths. An application uses an instance of the <code class="codeph">CertPathBuilder</code> class to build a <code class="codeph">CertPath</code> object. If successful, the result of the build is returned in an object implementing the <code class="codeph">CertPathBuilderResult</code> interface.</p>
<div class="section">
<p class="subhead3">Topics</p>
<p><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">The CertPathBuilder Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-47B1564D-DFC3-4F0F-A006-CB7303EDD919" title="The CertPathBuilderResult interface is a transparent representation of the result or output of a certification path builder algorithm.">The CertPathBuilderResult Interface</a></p>
</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95"></a>
<h4 id="JSSEC-GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" class="sect4">The CertPathBuilder Class</h4>
<div>
<p>The <code class="codeph">CertPathBuilder</code> class is an engine class used to build a certification path.</p>
<div class="section">
<p class="subhead3">Creating a CertPathBuilder Object</p>
<p>As with all engine classes, the way to get a <code class="codeph">CertPathBuilder</code> object for a particular build algorithm is to call one of the <code class="codeph">getInstance</code> static factory method on the <code class="codeph">CertPathBuilder</code> class:</p>
<pre class="codeblock" dir="ltr">
        public static CertPathBuilder getInstance(String algorithm)
        public static CertPathBuilder getInstance(String algorithm, 
                                                  String provider)
        public static CertPathBuilder getInstance(String algorithm, 
                                                  Provider provider)
</pre>
<p>The <code class="codeph">algorithm</code> parameter is the name of a certification path builder algorithm (for example, "PKIX"). Standard <code class="codeph">CertPathBuilder</code> algorithm names are listed in <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Building a Certification Path</p>
<p>Once a <code class="codeph">CertPathBuilder</code> object is created, paths can be constructed by calling the <code class="codeph">build</code> method, passing it an algorithm-specific parameter specification:</p>
<pre class="codeblock" dir="ltr">
        public final CertPathBuilderResult build(CertPathParameters params)
                throws CertPathBuilderException, 
                       InvalidAlgorithmParameterException
</pre>
<p>If the build algorithm is successful, the result is returned in an object implementing the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-47B1564D-DFC3-4F0F-A006-CB7303EDD919" title="The CertPathBuilderResult interface is a transparent representation of the result or output of a certification path builder algorithm.">CertPathBuilderResult</a></code> interface. Otherwise, a <code class="codeph">CertPathBuilderException</code> is thrown containing information about the failure; for example, the underlying exception (if any) and an error message.</p>
<p>Note that the <code class="codeph">CertPathParameters</code> passed to the <code class="codeph">build</code> method must be of a type that is supported by the build algorithm. Otherwise, an <code class="codeph">InvalidAlgorithmParameterException</code> is thrown.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-47B1564D-DFC3-4F0F-A006-CB7303EDD919"></a>
<h4 id="JSSEC-GUID-47B1564D-DFC3-4F0F-A006-CB7303EDD919" class="sect4">The CertPathBuilderResult Interface</h4>
<div>
<p>The <code class="codeph">CertPathBuilderResult</code> interface is a transparent representation of the result or output of a certification path builder algorithm.</p>
<p>This interface contains a method to return the certification path that has been successfully built:</p>
<pre class="codeblock" dir="ltr">
        public CertPath getCertPath()
</pre>
<p>The purpose of the <code class="codeph">CertPathBuilderResult</code> interface is to group (and provide type safety for) all build results. Like the <code class="codeph">CertPathValidatorResult</code> interface, <code class="codeph">CertPathBuilderResult</code> extends <code class="codeph">Cloneable</code> and defines a <code class="codeph">clone()</code> method that does not throw an exception. This allows applications to clone any <code class="codeph">CertPathBuilderResult</code> object.</p>
<p>Objects implementing the <code class="codeph">CertPathBuilderResult</code> interface are returned by the <code class="codeph">build</code> method of <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a></code>.</p>
<p>The following code sample shows how to create a <code class="codeph">CertPathBuilder</code> and use it to build a certification path. The sample assumes that the <code class="codeph">CertPathParameters</code> object which is passed to the <code class="codeph">build</code> method has been previously created; a more complete example will be illustrated in the section describing the PKIX classes.</p>
<pre class="codeblock" dir="ltr">
    // create CertPathBuilder that implements the "PKIX" algorithm
    CertPathBuilder cpb = null;
    try {
        cpb = CertPathBuilder.getInstance("PKIX");
    } catch (NoSuchAlgorithmException nsae) {
        System.err.println(nsae);
        System.exit(1);
    }
    // build certification path using specified parameters ("params")
    try {
        CertPathBuilderResult cpbResult = cpb.build(params);
        CertPath cp = cpbResult.getCertPath();
        System.out.println("build passed, path contents: " + cp);
    } catch (InvalidAlgorithmParameterException iape) {
        System.err.println("build failed: " + iape);
        System.exit(1);
    } catch (CertPathBuilderException cpbe) {
        System.err.println("build failed: " + cpbe);
        System.exit(1);
    }
</pre></div>
</div>
</div>
<div class="sect3"><a id="GUID-AB96FD45-6F8A-4785-B6C5-082BEB6CDA5E"></a>
<h3 id="JSSEC-GUID-AB96FD45-6F8A-4785-B6C5-082BEB6CDA5E" class="sect3">Certificate/CRL Storage Classes</h3>
<div>
<p>The Java Certification Path API includes the <code class="codeph">CertStore</code> class for retrieving certificates and CRLs from a repository.</p>
<p>This class enables a caller to specify the repository a <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation should use to find certificates and CRLs. See the <code class="codeph">addCertStores</code> method of the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-3D95A3BE-74CB-4357-BB85-9A8DEA36A457" title="The PKIXParametersClass class specifies the set of input parameters defined by the PKIX certification path validation algorithm. It also includes a few additional useful parameters.">PKIXParameters</a></code> class.</p>
<p>A <code class="codeph">CertPathValidator</code> implementation may use the <code class="codeph">CertStore</code> object that the caller specifies as a callback mechanism to fetch CRLs for performing revocation checks. Similarly, a <code class="codeph">CertPathBuilder</code> may use the <code class="codeph">CertStore</code> as a callback mechanism to fetch certificates and, if performing revocation checks, CRLs.</p>
<div class="section">
<p class="subhead3">Topics</p>
<p><a href="java-pki-programmers-guide.htm#GUID-5404B79C-3D49-4668-974C-1BACD1A98B73" title="The CertStore class is an engine class used to provide the functionality of a certificate and certificate revocation list (CRL) repository.">The CertStore Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-BC87018F-F888-4905-8ED4-AE574C646AF2" title="The CertStoreParameters interface is a transparent representation of the set of parameters used with a particular CertStore.">The CertStoreParameters Interface</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-263AAFB6-DC37-4B64-95E7-60D59D7728B5" title="The CertSelector and CRLSelector interfaces are a specification of the set of criteria for selecting certificates and CRLs from a collection or large group of certificates and CRLs.">The CertSelector and CRLSelector Interfaces</a></p>
</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-5404B79C-3D49-4668-974C-1BACD1A98B73"></a>
<h4 id="JSSEC-GUID-5404B79C-3D49-4668-974C-1BACD1A98B73" class="sect4">The CertStore Class</h4>
<div>
<p>The <code class="codeph">CertStore</code> class is an engine class used to provide the functionality of a certificate and certificate revocation list (CRL) repository.</p>
<p>This class can be used by <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a></code> and <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" title="The CertPathValidator class is an engine class used to validate a certification path.">CertPathValidator</a></code> implementations to find certificates and CRLs, or as a general purpose certificate and CRL retrieval mechanism.</p>
<p>Unlike the <code class="codeph">java.security.KeyStore</code> class, which provides access to a cache of private keys and trusted certificates, a <code class="codeph">CertStore</code> is designed to provide access to a potentially vast repository of untrusted certificates and CRLs. For example, an LDAP implementation of <code class="codeph">CertStore</code> provides access to certificates and CRLs stored in one or more directories using the LDAP protocol.</p>
<p>All public methods of <code class="codeph">CertStore</code> objects are thread-safe. That is, multiple threads may concurrently invoke these methods on a single <code class="codeph">CertStore</code> object (or more than one) with no ill effects. This allows a <code class="codeph">CertPathBuilder</code> to search for a CRL while simultaneously searching for further certificates, for instance.</p>
<div class="section">
<p class="subhead3">Creating a CertStore Object</p>
<p>As with all engine classes, the way to get a <code class="codeph">CertStore</code> object for a particular repository type is to call one of the <code class="codeph">getInstance</code> static factory methods on the <code class="codeph">CertStore</code> class:</p>
<pre class="codeblock" dir="ltr">
        public static CertStore getInstance(String type, 
                CertStoreParameters params)
        public static CertStore getInstance(String type,
                CertStoreParameters params, String provider)
        public static CertStore getInstance(String type,
                CertStoreParameters params, Provider provider)
</pre>
<p>The <code class="codeph">type</code> parameter is the name of a certificate repository type (for example, "LDAP"). Standard <code class="codeph">CertStore</code> types are listed in <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a>.</p>
<p>The initialization parameters (<code class="codeph">params</code>) are specific to the repository type. For example, the initialization parameters for a server-based repository may include the hostname and the port of the server. An <code class="codeph">InvalidAlgorithmParameterException</code> is thrown if the parameters are invalid for this <code class="codeph">CertStore</code> type. The <code class="codeph">getCertStoreParameters</code> method returns the <code class="codeph">CertStoreParameters</code> that were used to initialize a <code class="codeph">CertStore</code>:</p>
<pre class="codeblock" dir="ltr">
        public final CertStoreParameters getCertStoreParameters()
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Retrieving Certificates</p>
<p>After you have created a <code class="codeph">CertStore</code> object, you can retrieve certificates from the repository using the <code class="codeph">getCertificates</code> method. This method takes a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-263AAFB6-DC37-4B64-95E7-60D59D7728B5" title="The CertSelector and CRLSelector interfaces are a specification of the set of criteria for selecting certificates and CRLs from a collection or large group of certificates and CRLs.">CertSelector</a></code> (discussed in more detail later) object as an argument, which specifies a set of selection criteria for determining which certificates should be returned:</p>
<pre class="codeblock" dir="ltr">
        public final Collection&lt;? extends Certificate&gt; getCertificates(CertSelector selector) 
                throws CertStoreException
</pre>
<p>This method returns a <code class="codeph">Collection</code> of <code class="codeph">java.security.cert.Certificate</code> objects that satisfy the selection criteria. An empty <code class="codeph">Collection</code> is returned if there are no matches. A <code class="codeph">CertStoreException</code> is usually thrown if an unexpected error condition is encountered, such as a communications failure with a remote repository.</p>
<p>For some <code class="codeph">CertStore</code> implementations, it may not be feasible to search the entire repository for certificates or CRLs that match the specified selection criteria. In these instances, the <code class="codeph">CertStore</code> implementation may use information that is specified in the selectors to locate certificates and CRLs. For instance, an LDAP <code class="codeph">CertStore</code> may not search all entries in the directory. Instead, it may just search entries that are likely to contain the certificates it is looking for. If the <code class="codeph">CertSelector</code> provided does not provide enough information for the LDAP <code class="codeph">CertStore</code> to determine which entries it should look in, the LDAP <code class="codeph">CertStore</code> may throw a <code class="codeph">CertStoreException</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Retrieving CRLs</p>
<p>You can also retrieve CRLs from the repository using the <code class="codeph">getCRLs</code> method. This method takes a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-263AAFB6-DC37-4B64-95E7-60D59D7728B5" title="The CertSelector and CRLSelector interfaces are a specification of the set of criteria for selecting certificates and CRLs from a collection or large group of certificates and CRLs.">CRLSelector</a></code> (discussed in more detail later) object as an argument, which specifies a set of selection criteria for determining which CRLs should be returned:</p>
<pre class="codeblock" dir="ltr">
        public final Collection&lt;? extends CRL&gt; getCRLs(CRLSelector selector) 
                throws CertStoreException
</pre>
<p>This method returns a <code class="codeph">Collection</code> of <code class="codeph">java.security.cert.CRL</code> objects that satisfy the selection criteria. An empty <code class="codeph">Collection</code> is returned if there are no matches.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-BC87018F-F888-4905-8ED4-AE574C646AF2"></a>
<h4 id="JSSEC-GUID-BC87018F-F888-4905-8ED4-AE574C646AF2" class="sect4">The CertStoreParameters Interface</h4>
<div>
<p>The <code class="codeph">CertStoreParameters</code> interface is a transparent representation of the set of parameters used with a particular <code class="codeph">CertStore</code>.</p>
<p>The main purpose of this interface is to group and provide type safety for all certificate storage parameter specifications. The <code class="codeph">CertStoreParameters</code> interface extends the <code class="codeph">Cloneable</code> interface and defines a <code class="codeph">clone</code> method that does not throw an exception. Implementations of this interface should implement and override the <code class="codeph">Object.clone()</code> method, if necessary. This allows applications to clone any <code class="codeph">CertStoreParameters</code> object.</p>
<p>Objects implementing the <code class="codeph">CertStoreParameters</code> interface are passed as arguments to the <code class="codeph">getInstance</code> method of the <code class="codeph">CertStore</code> class. Two classes implementing the <code class="codeph">CertStoreParameters</code> interface are defined in this API: the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BC87018F-F888-4905-8ED4-AE574C646AF2__THELDAPCERTSTOREPARAMETERSCLASS-C0996E42">LDAPCertStoreParameters</a></code> class and the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BC87018F-F888-4905-8ED4-AE574C646AF2__THECOLLECTIONCERTSTOREPARAMETERSCLA-C09970DC">CollectionCertStoreParameters</a></code> class.</p>
<div class="section" id="GUID-BC87018F-F888-4905-8ED4-AE574C646AF2__THELDAPCERTSTOREPARAMETERSCLASS-C0996E42">
<p class="subhead3">The LDAPCertStoreParameters Class</p>
<p>The <code class="codeph">LDAPCertStoreParameters</code> class is an implementation of the <code class="codeph">CertStoreParameters</code> interface and holds a set of minimal initialization parameters (host and port number of the directory server) for retrieving certificates and CRLs from a <code class="codeph">CertStore</code> of type <span class="bold">LDAP</span>.</p>
<p>See <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/LDAPCertStoreParameters.html" target="_blank"><code class="codeph">LDAPCertStoreParameters</code></a></code>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BC87018F-F888-4905-8ED4-AE574C646AF2__THECOLLECTIONCERTSTOREPARAMETERSCLA-C09970DC">
<p class="subhead3">The CollectionCertStoreParameters Class</p>
<p>The <code class="codeph">CollectionCertStoreParameters</code> class is an implementation of the <code class="codeph">CertStoreParameters</code> interface and holds a set of initialization parameters for retrieving certificates and CRLs from a <code class="codeph">CertStore</code> of type <span class="bold">Collection</span>.</p>
<p>See <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/CollectionCertStoreParameters.html" target="_blank"><code class="codeph">CollectionCertStoreParameters</code></a></code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-263AAFB6-DC37-4B64-95E7-60D59D7728B5"></a>
<h4 id="JSSEC-GUID-263AAFB6-DC37-4B64-95E7-60D59D7728B5" class="sect4">The CertSelector and CRLSelector Interfaces</h4>
<div>
<p>The <code class="codeph">CertSelector</code> and <code class="codeph">CRLSelector</code> interfaces are a specification of the set of criteria for selecting certificates and CRLs from a collection or large group of certificates and CRLs.</p>
<p>The interfaces group and provide type safety for all selector specifications. Each selector interface extends <code class="codeph">Cloneable</code> and defines a <code class="codeph">clone()</code> method that does not throw an exception. This allows applications to clone any <code class="codeph">CertSelector</code> or <code class="codeph">CRLSelector</code> object.</p>
<p>The <code class="codeph">CertSelector</code> and <code class="codeph">CRLSelector</code> interfaces each define a method named <code class="codeph">match</code>. The <code class="codeph">match</code> method takes a <code class="codeph">Certificate</code> or <code class="codeph">CRL</code> object as an argument and returns <code class="codeph">true</code> if the object satisfies the selection criteria. Otherwise, it returns <code class="codeph">false</code>. The <code class="codeph">match</code> method for the <code class="codeph">CertSelector</code> interface is defined as follows:</p>
<pre class="codeblock" dir="ltr">
        public boolean match(Certificate cert)
</pre>
<p>and for the <code class="codeph">CRLSelector</code> interface:</p>
<pre class="codeblock" dir="ltr">
        public boolean match(CRL crl)
</pre>
<p>Typically, objects implementing these interfaces are passed as parameters to the <code class="codeph">getCertificates</code> and <code class="codeph">getCRLs</code> methods of the <code class="codeph">CertStore</code> class. These methods return a <code class="codeph">Collection</code> of <code class="codeph">Certificate</code>s or <code class="codeph">CRL</code>s from the <code class="codeph">CertStore</code> repository that match the specified selection criteria. <code class="codeph">CertSelector</code>s may also be used to specify the validation constraints on a target or end-entity certificate in a certification path (see for example, the <code class="codeph">PKIXParameters.setTargetCertConstraints</code> method.)</p>
</div>
<div class="sect5"><a id="GUID-2229C26E-1196-4E4F-8F23-731CE5CA254E"></a>
<h5 id="JSSEC-GUID-2229C26E-1196-4E4F-8F23-731CE5CA254E" class="sect5">The X509CertSelector Class</h5>
<div>
<p>The <code class="codeph">X509CertSelector</code> class is an implementation of the <code class="codeph">CertSelector</code> interface that defines a set of criteria for selecting X.509 certificates.</p>
<p>An <code class="codeph">X509Certificate</code> object must match <span class="variable">all</span> of the specified criteria to be selected by the <code class="codeph">match</code> method. The selection criteria are designed to be used by a <code class="codeph">CertPathBuilder</code> implementation to discover potential certificates as it builds an X.509 certification path.</p>
<p>For example, the <code class="codeph">setSubject</code> method of <code class="codeph">X509CertSelector</code> allows a PKIX <code class="codeph">CertPathBuilder</code> to filter out <code class="codeph">X509Certificate</code>s that do not match the issuer name of the preceding <code class="codeph">X509Certificate</code> in a partially completed chain. By setting this and other criteria in an <code class="codeph">X509CertSelector</code> object, a <code class="codeph">CertPathBuilder</code> is able to discard irrelevant certificates and more easily find an X.509 certification path that meets the requirements specified in the <code class="codeph">CertPathParameters</code> object.</p>
<p>See <a href="http://www.ietf.org/rfc/rfc5280.txt" target="_blank">RFC 5280</a> for definitions of the X.509 certificate extensions mentioned in this section.</p>
<div class="section">
<p class="subhead3">Creating an X509CertSelector Object</p>
<p>An <code class="codeph">X509CertSelector</code> object is created by calling the default constructor:</p>
<pre class="codeblock" dir="ltr">
        public X509CertSelector()
</pre>
<p>No criteria are initially set (any <code class="codeph">X509Certificate</code> will match).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Setting Selection Criteria</p>
<p>The selection criteria allow a caller to match on different components of an X.509 certificate. A few of the methods for setting selection criteria are described here. See <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/X509CertSelector.html" target="_blank"><code class="codeph">X509CertSelector</code></a></code>.</p>
<p>The <code class="codeph">setIssuer</code> methods set the issuer criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setIssuer(X500Principal issuer)
        public void setIssuer(String issuerDN)
        public void setIssuer(byte[] issuerDN)
</pre>
<p>The specified distinguished name (in <code class="codeph">X500Principal</code>, <a href="http://www.ietf.org/rfc/rfc2253.txt" target="_blank">RFC 2253</a> String or ASN.1 DER encoded form) must match the issuer distinguished name in the certificate. If null, any issuer distinguished name will do. Note that use of an <code class="codeph">X500Principal</code> to represent a distinguished name is preferred because it is more efficient and suitably typed.</p>
<p>Similarly, the <code class="codeph">setSubject</code> methods set the subject criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setSubject(X500Principal subject)
        public void setSubject(String subjectDN)
        public void setSubject(byte[] subjectDN)
</pre>
<p>The specified distinguished name (in <code class="codeph">X500Principal</code>, RFC 2253 String or ASN.1 DER encoded form) must match the subject distinguished name in the certificate. If null, any subject distinguished name will do.</p>
<p>The <code class="codeph">setSerialNumber</code> method sets the serialNumber criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setSerialNumber(BigInteger serial)
</pre>
<p>The specified serial number must match the certificate serial number in the certificate. If null, any certificate serial number will do.</p>
<p>The <code class="codeph">setAuthorityKeyIdentifier</code> method sets the authorityKeyIdentifier criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setAuthorityKeyIdentifier(byte[] authorityKeyID)
</pre>
<p>The certificate must contain an Authority Key Identifier extension matching the specified value. If null, no check will be done on the authorityKeyIdentifier criterion.</p>
<p>The <code class="codeph">setCertificateValid</code> method sets the certificateValid criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setCertificateValid(Date certValid)
</pre>
<p>The specified date must fall within the certificate validity period for the certificate. If null, any date is valid.</p>
<p>The <code class="codeph">setKeyUsage</code> method sets the keyUsage criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setKeyUsage(boolean[] keyUsage)
</pre>
<p>The certificate's Key Usage Extension must allow the specified key usage values (those which are set to true). If null, no keyUsage check will be done.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Getting Selection Criteria</p>
<p>The current values for each of the selection criteria can be retrieved using an appropriate <code class="codeph">get</code> method. See <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/X509CertSelector.html" target="_blank"><code class="codeph">X509CertSelector</code></a></code> .</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-2229C26E-1196-4E4F-8F23-731CE5CA254E__GUID-222FD599-5D26-4181-B9F5-C319EDD5BBC7">
<p>Here is an example of retrieving X.509 certificates from an LDAP <code class="codeph">CertStore</code> with the <code class="codeph">X509CertSelector</code> class.</p>
<p>First, we create the <code class="codeph">LDAPCertStoreParameters</code> object that we will use to initialize the <code class="codeph">CertStore</code> object with the hostname and port of the LDAP server:</p>
<pre class="codeblock" dir="ltr">
        LDAPCertStoreParameters lcsp = new 
                LDAPCertStoreParameters("ldap.sun.com", 389);
</pre>
<p>Next, create the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-5404B79C-3D49-4668-974C-1BACD1A98B73" title="The CertStore class is an engine class used to provide the functionality of a certificate and certificate revocation list (CRL) repository.">CertStore</a></code> object, and pass it the <code class="codeph">LDAPCertStoreParameters</code> object, as in the following statement:</p>
<pre class="codeblock" dir="ltr">
        CertStore cs = CertStore.getInstance("LDAP", lcsp);
</pre>
<p>This call creates a <code class="codeph">CertStore</code> object that retrieves certificates and CRLs from an LDAP repository using the schema defined in RFC 2587.</p>
<p>The following block of code establishes an <code class="codeph">X509CertSelector</code> to retrieve all unexpired (as of the current date and time) end-entity certificates issued to a particular subject with 1) a key usage that allows digital signatures, and 2) a subject alternative name with a specific email address:</p>
<pre class="codeblock" dir="ltr">
        X509CertSelector xcs = new X509CertSelector();

        // select only unexpired certificates
        xcs.setCertificateValid(new Date());

        // select only certificates issued to
        // 'CN=alice, O=xyz, C=us'
        xcs.setSubject(new X500Principal("CN=alice, O=xyz, C=us"));

        // select only end-entity certificates
        xcs.setBasicConstraints(-2);

        // select only certificates with a digitalSignature
        // keyUsage bit set (set the first entry in the
        // boolean array to true)
        boolean[] keyUsage = {true};
        xcs.setKeyUsage(keyUsage);

        // select only certificates with a subjectAltName of
        // 'alice@xyz.example.com' (1 is the integer value of 
        // an RFC822Name)
        xcs.addSubjectAlternativeName(1, "alice@xyz.example.com");
</pre>
<p>Then we pass the selector to the <code class="codeph">getCertificates</code> method of our <code class="codeph">CertStore</code> object that we previously created:</p>
<pre class="codeblock" dir="ltr">
        Collection&lt;Certificate&gt; certs = cs.getCertificates(xcs);
</pre>
<p>A PKIX <code class="codeph">CertPathBuilder</code> may use similar code to help discover and sort through potential certificates by discarding those that do not meet validation constraints or other criteria.</p>
</div>
<!-- class="example" --></div>
</div>
<div class="sect5"><a id="GUID-08C0B832-6934-4A28-8932-8CEB87259BA8"></a>
<h5 id="JSSEC-GUID-08C0B832-6934-4A28-8932-8CEB87259BA8" class="sect5">The X509CRLSelector Class</h5>
<div>
<p>The <code class="codeph">X509CRLSelector</code> class is an implementation of the <code class="codeph">CRLSelector</code> interface that defines a set of criteria for selecting X.509 CRLs.</p>
<p>An <code class="codeph">X509CRL</code> object must match <span class="variable">all</span> of the specified criteria to be selected by the <code class="codeph">match</code> method. The selection criteria are designed to be useful to a <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation that must retrieve CRLs from a repository to check the revocation status of certificates in an X.509 certification path.</p>
<p>For example, the <code class="codeph">setDateAndTime</code> method of <code class="codeph">X509CRLSelector</code> allows a PKIX <code class="codeph">CertPathValidator</code> to filter out <code class="codeph">X509CRL</code>s that have been issued after or expire before the time indicated. By setting this and other criteria in an <code class="codeph">X509CRLSelector</code> object, it allows the <code class="codeph">CertPathValidator</code> to discard irrelevant CRLs and more easily check if a certificate has been revoked.</p>
<p>Please refer to <a href="http://www.ietf.org/rfc/rfc5280.txt" target="_blank">RFC 5280</a> for definitions of the X.509 CRL fields and extensions mentioned in this section.</p>
<div class="section">
<p class="subhead3">Creating an X509CRLSelector Object</p>
<p>An <code class="codeph">X509CRLSelector</code> object is created by calling the default constructor:</p>
<pre class="codeblock" dir="ltr">
        public X509CRLSelector()
</pre>
<p>No criteria are initially set (any <code class="codeph">X509CRL</code> will match).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Setting Selection Criteria</p>
<p>The selection criteria allow a caller to match on different components of an X.509 CRL. Most of the methods for setting selection criteria are described here. Please refer to the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/X509CRLSelector.html" target="_blank"><code class="codeph">X509CRLSelector Class</code></a></code> API documentation for details on the remaining methods.</p>
<p>The <code class="codeph">setIssuers</code> and <code class="codeph">setIssuerNames</code> methods set the issuerNames criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setIssuers(Collection&lt;X500Principal&gt; issuers)
        public void setIssuerNames(Collection&lt;?&gt; names)
</pre>
<p>The issuer distinguished name in the CRL must match at least one of the specified distinguished names. The <code class="codeph">setIssuers</code> method is preferred as the use of <code class="codeph">X500Principal</code>s to represent distinguished names is more efficient and suitably typed. For the <code class="codeph">setIssuerNames</code> method, each entry of the <code class="codeph">names</code> argument is either a <code class="codeph">String</code> or a byte array (representing the name, in RFC 2253 or ASN.1 DER encoded form, respectively). If null, any issuer distinguished name will do.</p>
<p>The <code class="codeph">setMinCRLNumber</code> and <code class="codeph">setMaxCRLNumber</code> methods set the minCRLNumber and maxCRLNumber criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setMinCRLNumber(BigInteger minCRL)
        public void setMaxCRLNumber(BigInteger maxCRL)
</pre>
<p>The CRL must have a CRL Number extension whose value is greater than or equal to the specified value if the <code class="codeph">setMinCRLNumber</code> method is called, and less than or equal to the specified value if the <code class="codeph">setMaxCRLNumber</code> method is called. If the value passed to one of these methods is null, the corresponding check is not done.</p>
<p>The <code class="codeph">setDateAndTime</code> method sets the dateAndTime criterion:</p>
<pre class="codeblock" dir="ltr">
        public void setDateAndTime(Date dateAndTime)
</pre>
<p>The specified date must be equal to or later than the value of the thisUpdate component of the CRL and earlier than the value of the nextUpdate component. If null, no dateAndTime check will be done.</p>
<p>The <code class="codeph">setCertificateChecking</code> method sets the certificate whose revocation status is being checked:</p>
<pre class="codeblock" dir="ltr">
        public void setCertificateChecking(X509Certificate cert)
</pre>
<p>This is not a criterion. Rather, it is optional information that may help a <code class="codeph">CertStore</code> find CRLs that would be relevant when checking revocation for the specified certificate. If null is specified, then no such optional information is provided. An application should always call this method when checking revocation for a particular certificate, as it may provide the <code class="codeph">CertStore</code> with more information for finding the correct CRLs and filtering out irrelevant ones.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Getting Selection Criteria</p>
<p>The current values for each of the selection criteria can be retrieved using an appropriate <code class="codeph">get</code> method. Please refer to the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/X509CRLSelector.html" target="_blank"><code class="codeph">X509CRLSelector Class</code></a></code> API documentation for further details on these methods.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-08C0B832-6934-4A28-8932-8CEB87259BA8__GUID-D4DD15D1-6345-446B-8B02-0F2C7C1FCBC4">
<p>Creating an <code class="codeph">X509CRLSelector</code> to retrieve CRLs from an LDAP repository is similar to the <code class="codeph">X509CertSelector</code> example. Suppose we want to retrieve all current (as of the current date and time) CRLs issued by a specific CA and with a minimum CRL number. First, we create an <code class="codeph">X509CRLSelector</code> object and call the appropriate methods to set the selection criteria:</p>
<pre class="codeblock" dir="ltr">
        X509CRLSelector xcrls = new X509CRLSelector();
        // select CRLs satisfying current date and time
        xcrls.setDateAndTime(new Date());
        // select CRLs issued by 'O=xyz, C=us'
        xcrls.addIssuerName("O=xyz, C=us");
        // select only CRLs with a CRL number at least '2'
        xcrls.setMinCRLNumber(new BigInteger("2"));
</pre>
<p>Then we pass the selector to the <code class="codeph">getCRLs</code> method of our <code class="codeph">CertStore</code> object (created in the <code class="codeph">X509CertSelector</code> example):</p>
<pre class="codeblock" dir="ltr">
        Collection&lt;CRL&gt; crls = cs.getCRLs(xcrls);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-5BBEF087-CA8A-4287-97FB-BD88DCD12FE5"></a>
<h3 id="JSSEC-GUID-5BBEF087-CA8A-4287-97FB-BD88DCD12FE5" class="sect3">PKIX Classes</h3>
<div>
<p>The Java Certification Path API includes a set of algorithm-specific classes modeled for use with the PKIX certification path validation algorithm.</p>
<p>The PKIX certification path validation algorithm is defined in <a href="http://www.ietf.org/rfc/rfc5280.txt" target="_blank">RFC 5280</a>: <cite>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</cite>.</p>
<div class="section">
<p class="subhead3">Topics</p>
<p><a href="java-pki-programmers-guide.htm#GUID-772D31A0-FF9B-4A1E-985B-2100177C74F9" title='The TrustAnchor class represents a "most-trusted CA", which is used as a trust anchor for validating X.509 certification paths.'>The TrustAnchor Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-3D95A3BE-74CB-4357-BB85-9A8DEA36A457" title="The PKIXParametersClass class specifies the set of input parameters defined by the PKIX certification path validation algorithm. It also includes a few additional useful parameters.">The PKIXParameters Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-29AC2D33-7518-4DEA-A4CC-544CB174B915" title="The CertPathValidatorResult interface is a transparent representation of the successful result or output of a certification path validation algorithm.">The CertPathValidatorResult Interface</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-3AD41382-E729-469B-83EE-CB2FE66D71D8" title="The PKIX validation algorithm defines several outputs related to certificate policy processing. Most applications will not need to use these outputs, but all providers that implement the PKIX validation or building algorithm must support them.">The PolicyNode Interface and PolicyQualifierInfo Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-BB092D65-80CA-457E-A7B4-F1B41A1A674A" title="The PKIXBuilderParameters class specifies the set of parameters to be used with CertPathBuilder class.">The PKIXBuilderParameters Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-BF0E3B2B-1DA5-4A95-A8DD-C03C04EA70E7" title="The PKIXCertPathBuilderResult class represents the successful result of the PKIX certification path construction algorithm.">The PKIXCertPathBuilderResult Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-D46630F6-939D-4054-A451-3D8206ED4E62" title="The PKIXCertPathChecker class allows a user to extend a PKIX CertPathValidator or CertPathBuilder implementation. This is an advanced feature that most users will not need to understand. However, anyone implementing a PKIX service provider should read this section">The PKIXCertPathChecker Class</a></p>
<p><a href="java-pki-programmers-guide.htm#GUID-F727578E-71D0-4BC5-9B06-47EE13F9CBCF" title="Using a PKIXCertPathChecker to customize certificate path validation is relatively straightforward.">Using PKIXCertPathChecker in Certificate Path Validation</a></p>
</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-772D31A0-FF9B-4A1E-985B-2100177C74F9"></a>
<h4 id="JSSEC-GUID-772D31A0-FF9B-4A1E-985B-2100177C74F9" class="sect4">The TrustAnchor Class</h4>
<div>
<p>The <code class="codeph">TrustAnchor</code> class represents a "most-trusted CA", which is used as a trust anchor for validating X.509 certification paths.</p>
<p>A <code class="codeph">TrustAnchor</code> includes the public key of the CA, the CA's name, and any constraints on the set of paths that can be validated using this key. These parameters can be specified in the form of a trusted <code class="codeph">X509Certificate</code> or as individual parameters.</p>
<p>All <code class="codeph">TrustAnchor</code> objects are immutable and thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single <code class="codeph">TrustAnchor</code> object (or more than one) with no ill effects. Requiring <code class="codeph">TrustAnchor</code> objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about coordinating access.</p>
<div class="p">
<div class="infobox-note" id="GUID-772D31A0-FF9B-4A1E-985B-2100177C74F9__GUID-A6811FA1-310C-4285-8B60-CFFE15ADB5EF">
<p class="notep1">Note:</p>
Although this class is described as a PKIX class it may be used with other X.509 certification path validation algorithms.</div>
</div>
<div class="section">
<p class="subhead3">Creating a TrustAnchor Object</p>
<p>To instantiate a <code class="codeph">TrustAnchor</code> object, a caller must specify "the most-trusted CA" as a trusted <code class="codeph">X509Certificate</code> or public key and distinguished name pair. The caller may also optionally specify name constraints that are applied to the trust anchor by the validation algorithm during initialization. Note that support for name constraints on trust anchors is not required by the PKIX algorithm, therefore a PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> may choose not to support this parameter and instead throw an exception. Use one of the following constructors to create a <code class="codeph">TrustAnchor</code> object:</p>
<pre class="codeblock" dir="ltr">
        public TrustAnchor(X509Certificate trustedCert, 
                byte[] nameConstraints)
        public TrustAnchor(X500Principal caPrincipal, PublicKey pubKey, 
                byte[] nameConstraints)
        public TrustAnchor(String caName, PublicKey pubKey, 
                byte[] nameConstraints)
</pre>
<p>The <code class="codeph">nameConstraints</code> parameter is specified as a byte array containing the ASN.1 DER encoding of a NameConstraints extension. An <code class="codeph">IllegalArgumentException</code> is thrown if the name constraints cannot be decoded (are not formatted correctly).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Getting Parameter Values</p>
<p>Each of the parameters can be retrieved using a corresponding get method:</p>
<pre class="codeblock" dir="ltr">
        public final X509Certificate getTrustedCert()
        public final X500Principal getCA()
        public final String getCAName()
        public final PublicKey getCAPublicKey()
        public final byte[] getNameConstraints()
</pre>
<div class="infobox-note" id="GUID-772D31A0-FF9B-4A1E-985B-2100177C74F9__GUID-096C0339-B93D-4C97-8EF4-83EAB4B4F0F0">
<p class="notep1">Note:</p>
The <code class="codeph">getTrustedCert</code> method returns <code class="codeph">null</code> if the trust anchor was specified as a public key and name pair. Likewise, the <code class="codeph">getCA</code>, <code class="codeph">getCAName</code> and <code class="codeph">getCAPublicKey</code> methods return <code class="codeph">null</code> if the trust anchor was specified as an <code class="codeph">X509Certificate</code>.</div>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-3D95A3BE-74CB-4357-BB85-9A8DEA36A457"></a>
<h4 id="JSSEC-GUID-3D95A3BE-74CB-4357-BB85-9A8DEA36A457" class="sect4">The PKIXParameters Class</h4>
<div>
<p>The <code class="codeph">PKIXParametersClass</code> class specifies the set of input parameters defined by the PKIX certification path validation algorithm. It also includes a few additional useful parameters.</p>
<p>This class implements the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-2AF52C1B-8EE2-4D65-9273-F7AC523AB42F" title="The CertPathParameters interface is a transparent representation of the set of parameters used with a particular certification path builder or validation algorithm.">CertPathParameters</a></code> interface.</p>
<p>An X.509 <code class="codeph">CertPath</code> object and a <code class="codeph">PKIXParameters</code> object are passed as arguments to the <code class="codeph">validate</code> method of a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" title="The CertPathValidator class is an engine class used to validate a certification path.">CertPathValidator</a></code> instance implementing the PKIX algorithm. The <code class="codeph">CertPathValidator</code> uses the parameters to initialize the PKIX certification path validation algorithm.</p>
<div class="section">
<p class="subhead3">Creating a PKIXParameters Object</p>
<p>To instantiate a <code class="codeph">PKIXParameters</code> object, a caller must specify "the most-trusted CA(s)" as defined by the PKIX validation algorithm. The most-trusted CAs can be specified using one of two constructors:</p>
<pre class="codeblock" dir="ltr">
        public PKIXParameters(Set&lt;TrustAnchor&gt; trustAnchors) 
            throws InvalidAlgorithmParameterException
        public PKIXParameters(KeyStore keystore)
            throws KeyStoreException, InvalidAlgorithmParameterException
</pre>
<p>The first constructor allows the caller to specify the most-trusted CAs as a <code class="codeph">Set</code> of <code class="codeph">TrustAnchor</code> objects. Alternatively, a caller can use the second constructor and specify a <code class="codeph">KeyStore</code> instance containing trusted certificate entries, each of which will be considered as a most-trusted CA.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Setting Parameter Values</p>
<p>After a <code class="codeph">PKIXParameters</code> object has been created, a caller can set (or replace the current value of) various parameters. A few of the methods for setting parameters are described here. Please refer to the <code class="codeph">PKIXParameters</code> API documentation for details on the other methods.</p>
<p>The <code class="codeph">setInitialPolicies</code> method sets the initial policy identifiers, as specified by the PKIX validation algorithm. The elements of the <code class="codeph">Set</code> are object identifiers (OIDs) represented as a <code class="codeph">String</code>. If the <code class="codeph">initialPolicies</code> parameter is null or not set, any policy is acceptable:</p>
<pre class="codeblock" dir="ltr">
        public void setInitialPolicies(Set&lt;String&gt; initialPolicies)
</pre>
<p>The <code class="codeph">setDate</code> method sets the time for which the validity of the path should be determined. If the <code class="codeph">date</code> parameter is not set or is null, the current date is used:</p>
<pre class="codeblock" dir="ltr">
        public void setDate(Date date)
</pre>
<p>The <code class="codeph">setPolicyMappingInhibited</code> method sets the value of the policy mapping inhibited flag. The default value for the flag, if not specified, is false:</p>
<pre class="codeblock" dir="ltr">
        public void setPolicyMappingInhibited(boolean val)
</pre>
<p>The <code class="codeph">setExplicitPolicyRequired</code> method sets the value of the explicit policy required flag. The default value for the flag, if not specified, is false:</p>
<pre class="codeblock" dir="ltr">
        public void setExplicitPolicyRequired(boolean val)
</pre>
<p>The <code class="codeph">setAnyPolicyInhibited</code> method sets the value of the any policy inhibited flag. The default value for the flag, if not specified, is false:</p>
<pre class="codeblock" dir="ltr">
        public void setAnyPolicyInhibited(boolean val)
</pre>
<p>The <code class="codeph">setTargetCertConstraints</code> method allows the caller to set constraints on the target or end-entity certificate. For example, the caller can specify that the target certificate must contain a specific subject name. The constraints are specified as a <code class="codeph">CertSelector</code> object. If the <code class="codeph">selector</code> parameter is null or not set, no constraints are defined on the target certificate:</p>
<pre class="codeblock" dir="ltr">
        public void setTargetCertConstraints(CertSelector selector)
</pre>
<p>The <code class="codeph">setCertStores</code> method allows a caller to specify a <code class="codeph">List</code> of <code class="codeph">CertStore</code> objects that will be used by a PKIX implementation of <code class="codeph">CertPathValidator</code> to find CRLs for path validation. This provides an extensible mechanism for specifying where to locate CRLs. The <code class="codeph">setCertStores</code> method takes a <code class="codeph">List</code> of <code class="codeph">CertStore</code> objects as a parameter. The first <code class="codeph">CertStore</code>s in the list may be preferred to those that appear later.</p>
<pre class="codeblock" dir="ltr">
        public void setCertStores(List&lt;CertStore&gt; stores)
</pre>
<p>The <code class="codeph">setCertPathCheckers</code> method allows a caller to extend the PKIX validation algorithm by creating implementation-specific certification path checkers. For example, this mechanism can be used to process private certificate extensions. The <code class="codeph">setCertPathCheckers</code> method takes a list of <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-D46630F6-939D-4054-A451-3D8206ED4E62" title="The PKIXCertPathChecker class allows a user to extend a PKIX CertPathValidator or CertPathBuilder implementation. This is an advanced feature that most users will not need to understand. However, anyone implementing a PKIX service provider should read this section">PKIXCertPathChecker</a></code> (discussed later) objects as a parameter:</p>
<pre class="codeblock" dir="ltr">
        public void setCertPathCheckers(List&lt;PKIXCertPathChecker&gt; checkers)
</pre>
<p>The <code class="codeph">setRevocationEnabled</code> method allows a caller to disable revocation checking. Revocation checking is enabled by default, since it is a required check of the PKIX validation algorithm. However, PKIX does not define how revocation should be checked. An implementation may use CRLs or OCSP, for example. This method allows the caller to disable the implementation's default revocation checking mechanism if it is not appropriate. A different revocation checking mechanism can then be specified by calling the <code class="codeph">setCertPathCheckers</code> method, and passing it a <code class="codeph">PKIXCertPathChecker</code> that implements the alternate mechanism.</p>
<pre class="codeblock" dir="ltr">
        public void setRevocationEnabled(boolean val)
</pre>
<p>The <code class="codeph">setPolicyQualifiersRejected</code> method allows a caller to enable or disable policy qualifier processing. When a <code class="codeph">PKIXParameters</code> object is created, this flag is set to <code class="codeph">true</code>. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications that want to use a more sophisticated policy must set this flag to <code class="codeph">false</code>.</p>
<pre class="codeblock" dir="ltr">
        public void setPolicyQualifiersRejected(boolean qualifiersRejected)
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Getting Parameter Values</p>
<p>The current values for each of the parameters can be retrieved using an appropriate <code class="codeph">get</code> method. Please refer to the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXParameters.html" target="_blank"><code class="codeph">Class PKIXParameters</code></a></code> API documentation for further details on these methods.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-DF6CA960-B37A-4EE1-9E43-76561F711A7D"></a>
<h4 id="JSSEC-GUID-DF6CA960-B37A-4EE1-9E43-76561F711A7D" class="sect4">The PKIXCertPathValidatorResult Class</h4>
<div>
<p>The <code class="codeph">PKIXCertPathValidatorResult</code> class represents the result of the PKIX certification path validation algorithm.</p>
<p>This class implements the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-29AC2D33-7518-4DEA-A4CC-544CB174B915" title="The CertPathValidatorResult interface is a transparent representation of the successful result or output of a certification path validation algorithm.">CertPathValidatorResult</a></code> interface.&nbsp; It holds the valid policy tree and subject public key resulting from the validation algorithm, and includes methods (<code class="codeph">getPolicyTree()</code> and <code class="codeph">getPublicKey()</code>) for returning them. Instances of <code class="codeph">PKIXCertPathValidatorResult</code> are returned by the <code class="codeph">validate</code> method of <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" title="The CertPathValidator class is an engine class used to validate a certification path.">CertPathValidator</a></code> objects implementing the PKIX algorithm.</p>
<p>Please refer to the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXCertPathValidatorResult.html" target="_blank"><code class="codeph">PKIXCertPathValidatorResult</code></a></code> API documentation for more detailed information on this class.</p>
</div>
</div>
<div class="sect4"><a id="GUID-3AD41382-E729-469B-83EE-CB2FE66D71D8"></a>
<h4 id="JSSEC-GUID-3AD41382-E729-469B-83EE-CB2FE66D71D8" class="sect4">The PolicyNode Interface and PolicyQualifierInfo Class</h4>
<div>
<p>The PKIX validation algorithm defines several outputs related to certificate policy processing. Most applications will not need to use these outputs, but all providers that implement the PKIX validation or building algorithm must support them.</p>
<div class="section">
<p>The <code class="codeph">PolicyNode</code> interface represents a node of a valid policy tree resulting from a successful execution of the PKIX certification path validation. An application can obtain the root of a valid policy tree using the <code class="codeph">getPolicyTree</code> method of <code class="codeph">PKIXCertPathValidatorResult</code>. Policy Trees are discussed in more detail in the <a href="http://www.ietf.org/rfc/rfc5280.txt" target="_blank">RFC 5280</a>.</p>
<p>The <code class="codeph">getPolicyQualifiers</code> method of <code class="codeph">PolicyNode</code> returns a <code class="codeph">Set</code> of <code class="codeph">PolicyQualifierInfo</code> objects, each of which represents a policy qualifier contained in the Certificate Policies extension of the relevant certificate that this policy applies to.</p>
<p>Most applications will not need to examine the valid policy tree and policy qualifiers. They can achieve their policy processing goals by setting the policy-related parameters in <code class="codeph">PKIXParameters</code>. However, the valid policy tree is available for more sophisticated applications, especially those that process policy qualifiers.</p>
<p>Please refer to the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PolicyNode.html" target="_blank"><code class="codeph">Interface PolicyNode</code></a></code> and <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PolicyQualifierInfo.html" target="_blank"><code class="codeph">PolicyQualifierInfo</code></a></code> API documentation for more detailed information on these classes.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-3AD41382-E729-469B-83EE-CB2FE66D71D8__GUID-C0D7260A-3ACE-449E-A3EE-6C6E42E82B68">
<p class="titleinexample">Example 9-1 Example of Validating a Certification Path using the PKIX algorithm</p>
<p>This is an example of validating a certification path with the PKIX validation algorithm. The example ignores most of the exception handling and assumes that the certification path and public key of the trust anchor have already been created.</p>
<p>First, create the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-808C1A6D-6A67-4026-A9DE-223A428EC80A" title="The CertPathValidator class is an engine class used to validate a certification path.">CertPathValidator</a></code>, as in the following line:</p>
<pre class="codeblock" dir="ltr">
    CertPathValidator cpv = CertPathValidator.getInstance("PKIX");
</pre>
<p>The next step is to create a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-772D31A0-FF9B-4A1E-985B-2100177C74F9" title='The TrustAnchor class represents a "most-trusted CA", which is used as a trust anchor for validating X.509 certification paths.'>TrustAnchor</a></code> object. This will be used as an anchor for validating the certification path. In this example, the most-trusted CA is specified as a public key and name (name constraints are not applied and are specified as <code class="codeph">null</code>):</p>
<pre class="codeblock" dir="ltr">
    TrustAnchor anchor = new TrustAnchor("O=xyz,C=us", pubkey, null);
</pre>
<p>The next step is to create a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-3D95A3BE-74CB-4357-BB85-9A8DEA36A457" title="The PKIXParametersClass class specifies the set of input parameters defined by the PKIX certification path validation algorithm. It also includes a few additional useful parameters.">PKIXParameters</a></code> object. This will be used to populate the parameters used by the PKIX algorithm. In this example, we pass to the constructor a <code class="codeph">Set</code> containing a single element - the <code class="codeph">TrustAnchor</code> we created in the previous step:</p>
<pre class="codeblock" dir="ltr">
    PKIXParameters params = new PKIXParameters(Collections.singleton(anchor));
</pre>
<p>Next, we populate the parameters object with constraints or other parameters used by the validation algorithm. In this example, we enable the explicitPolicyRequired flag and specify a set of initial policy OIDs (the contents of the set are not shown):</p>
<pre class="codeblock" dir="ltr">
    // set other PKIX parameters here
    params.setExplicitPolicyRequired(true);
    params.setInitialPolicies(policyIds);
</pre>
<p>The final step is to validate the certification path using the input parameter set we have created:</p>
<pre class="codeblock" dir="ltr">
    try {
        PKIXCertPathValidatorResult result =
            (PKIXCertPathValidatorResult) cpv.validate(certPath, params);
        PolicyNode policyTree = result.getPolicyTree();
        PublicKey subjectPublicKey = result.getPublicKey();
    } catch (CertPathValidatorException cpve) {
        System.out.println("Validation failure, cert[" 
            + cpve.getIndex() + "] :" + cpve.getMessage());
    }
</pre>
<p>If the validation algorithm is successful, the policy tree and subject public key resulting from the validation algorithm are obtained using the <code class="codeph">getPolicyTree</code> and <code class="codeph">getPublicKey</code> methods of <code class="codeph">PKIXCertPathValidatorResult</code>.</p>
<p>Otherwise, a <code class="codeph">CertPathValidatorException</code> is thrown and the caller can catch the exception and print some details about the failure, such as the error message and the index of the certificate that caused the failure.</p>
</div>
<!-- class="example" --></div>
</div>
<div class="sect4"><a id="GUID-BB092D65-80CA-457E-A7B4-F1B41A1A674A"></a>
<h4 id="JSSEC-GUID-BB092D65-80CA-457E-A7B4-F1B41A1A674A" class="sect4">The PKIXBuilderParameters Class</h4>
<div>
<p>The <code class="codeph">PKIXBuilderParameters</code> class specifies the set of parameters to be used with <code class="codeph">CertPathBuilder</code> class.</p>
<p>This class (which extends the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-3D95A3BE-74CB-4357-BB85-9A8DEA36A457" title="The PKIXParametersClass class specifies the set of input parameters defined by the PKIX certification path validation algorithm. It also includes a few additional useful parameters.">PKIXParameters</a></code> class) specifies the set of parameters to be used with <a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a> class that build certification paths validated against the PKIX certification path validation algorithm.</p>
<p>A <code class="codeph">PKIXBuilderParameters</code> object is passed as an argument to the <code class="codeph">build</code> method of a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a></code> instance implementing the PKIX algorithm. All PKIX <code class="codeph">CertPathBuilder</code>s <span class="variable">must</span> return certification paths which have been validated according to the PKIX certification path validation algorithm.</p>
<p>Please note that the mechanism that a PKIX <code class="codeph">CertPathBuilder</code> uses to validate a constructed path is an implementation detail. For example, an implementation might attempt to first build a path with minimal validation and then fully validate it using an instance of a PKIX <code class="codeph">CertPathValidator</code>, whereas a more efficient implementation may validate more of the path as it is building it, and backtrack to previous stages if it encounters validation failures or dead-ends.</p>
<div class="section">
<p class="subhead3">Creating a PKIXBuilderParameters Object</p>
<p>Creating a <code class="codeph">PKIXBuilderParameters</code> object is similar to creating a <code class="codeph">PKIXParameters</code> object. However, a caller <span class="variable">must</span> specify constraints on the target or end-entity certificate when creating a <code class="codeph">PKIXBuilderParameters</code> object. These constraints should provide the <code class="codeph">CertPathBuilder</code> with enough information to find the target certificate. The constraints are specified as a <code class="codeph">CertSelector</code> object. Use one of the following constructors to create a <code class="codeph">PKIXBuilderParameters</code> object:</p>
<pre class="codeblock" dir="ltr">
        public PKIXBuilderParameters(Set&lt;TrustAnchor&gt; trustAnchors, 
                CertSelector targetConstraints)
                throws InvalidAlgorithmParameterException
        public PKIXBuilderParameters(KeyStore keystore, 
                CertSelector targetConstraints) 
                throws KeyStoreException, InvalidAlgorithmParameterException
                                                
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Getting/Setting Parameter Values</p>
<p>The <code class="codeph">PKIXBuilderParameters</code> class inherits all of the parameters that can be set in the <code class="codeph">PKIXParameters</code> class. In addition, the <code class="codeph">setMaxPathLength</code> method can be called to place a limit on the maximum number of certificates in a certification path:</p>
<pre class="codeblock" dir="ltr">
        public void setMaxPathLength(int maxPathLength)
</pre>
<p>The <code class="codeph">maxPathLength</code> parameter specifies the maximum number of non-self-issued intermediate certificates that may exist in a certification path. A <code class="codeph">CertPathBuilder</code> instance implementing the PKIX algorithm must not build paths longer than the length specified. If the value is 0, the path can only contain a single certificate. If the value is -1, the path length is unconstrained (i.e., there is no maximum). The default maximum path length, if not specified, is 5. This method is useful to prevent the <code class="codeph">CertPathBuilder</code> from spending resources and time constructing long paths that may or may not meet the caller's requirements.</p>
<p>If any of the CA certificates in the path contain a Basic Constraints extension, the value of the pathLenConstraint component of the extension overrides the value of the <code class="codeph">maxPathLength</code> parameter whenever the result is a certification path of smaller length. There is also a corresponding <code class="codeph">getMaxPathLength</code> method for retrieving this parameter:</p>
<pre class="codeblock" dir="ltr">
        public int getMaxPathLength()
</pre>
<p>Also, the <code class="codeph">setCertStores</code> method (inherited from the <code class="codeph">PKIXParameters</code> class) is typically used by a PKIX implementation of <code class="codeph">CertPathBuilder</code> to find Certificates for path construction as well as finding CRLs for path validation. This provides an extensible mechanism for specifying where to locate Certificates and CRLs.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-BF0E3B2B-1DA5-4A95-A8DD-C03C04EA70E7"></a>
<h4 id="JSSEC-GUID-BF0E3B2B-1DA5-4A95-A8DD-C03C04EA70E7" class="sect4">The PKIXCertPathBuilderResult Class</h4>
<div>
<p>The <code class="codeph">PKIXCertPathBuilderResult</code> class represents the successful result of the PKIX certification path construction algorithm.</p>
<p>This class extends the <code class="codeph">PKIXCertPathValidatorResult</code> class and implements the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-47B1564D-DFC3-4F0F-A006-CB7303EDD919" title="The CertPathBuilderResult interface is a transparent representation of the result or output of a certification path builder algorithm.">CertPathBuilder</a></code> interface.&nbsp; Instances of <code class="codeph">PKIXCertPathBuilderResult</code> are returned by the <code class="codeph">build</code> method of <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a></code> objects implementing the PKIX algorithm.</p>
<p>The <code class="codeph">getCertPath</code> method of a <code class="codeph">PKIXCertPathBuilderResult</code> instance always returns a <code class="codeph">CertPath</code> object validated using the PKIX certification path validation algorithm. The returned <code class="codeph">CertPath</code> object does not include the most-trusted CA certificate that may have been used to anchor the path. Instead, use the <code class="codeph">getTrustAnchor</code> method to get the <code class="codeph">Certificate</code> of the most-trusted CA.</p>
<p>See the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXCertPathBuilderResult.html" target="_blank"><code class="codeph">PKIXCertPathBuilderResult</code></a></code> API documentation for more detailed information on this class.</p>
<div class="example" id="GUID-BF0E3B2B-1DA5-4A95-A8DD-C03C04EA70E7__GUID-A7BCEA02-89BD-4A73-90B3-B3FA597AB3B3">
<p class="titleinexample">Example 9-2 Example of Building a Certification Path using the PKIX algorithm</p>
<p>This is an example of building a certification path validated against the PKIX algorithm. Some details have been left out, such as exception handling, and the creation of the trust anchors and certificates for populating the <code class="codeph">CertStore</code>.</p>
<p>First, create the <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BEFCC824-21C1-4AD3-B670-D0CA01F08D95" title="The CertPathBuilder class is an engine class used to build a certification path.">CertPathBuilder</a></code>, as in the following example:</p>
<pre class="codeblock" dir="ltr">
    CertPathBuilder cpb = CertPathBuilder.getInstance("PKIX");
</pre>
<p>This call creates a <code class="codeph">CertPathBuilder</code> object that returns paths validated against the PKIX algorithm.</p>
<p>The next step is to create a <code class="codeph"><a href="java-pki-programmers-guide.htm#GUID-BB092D65-80CA-457E-A7B4-F1B41A1A674A" title="The PKIXBuilderParameters class specifies the set of parameters to be used with CertPathBuilder class.">PKIXBuilderParameters</a></code> object. This will be used to populate the PKIX parameters used by the <code class="codeph">CertPathBuilder</code>:</p>
<pre class="codeblock" dir="ltr">
    // Create parameters object, passing it a Set of
    // trust anchors for anchoring the path
    // and a target subject DN.
    X509CertSelector targetConstraints = new X509CertSelector();
    targetConstraints.setSubject("CN=alice,O=xyz,C=us");
    PKIXBuilderParameters params = 
        new PKIXBuilderParameters(trustAnchors, targetConstraints);
</pre>
<p>The next step is to specify the <code class="codeph">CertStore</code> that the <code class="codeph">CertPathBuilder</code> will use to look for certificates and CRLs. For this example, we will populate a Collection <code class="codeph">CertStore</code> with the certificates and CRLs:</p>
<pre class="codeblock" dir="ltr">
    CollectionCertStoreParameters ccsp = 
        new CollectionCertStoreParameters(certsAndCrls);
    CertStore store = CertStore.getInstance("Collection", ccsp);
    params.addCertStore(store);
</pre>
<p>The next step is to build the certification path using the input parameter set we have created:</p>
<pre class="codeblock" dir="ltr">
    try {
        PKIXCertPathBuilderResult result = 
            (PKIXCertPathBuilderResult) cpb.build(params);
        CertPath cp = result.getCertPath();
    } catch (CertPathBuilderException cpbe) {
        System.out.println("build failed: " + cpbe.getMessage());
    }
</pre>
<p>If the <code class="codeph">CertPathBuilder</code> cannot build a path that meets the supplied parameters it will throw a <code class="codeph">CertPathBuilderException</code>. Otherwise, the validated certification path can be obtained from the <code class="codeph">PKIXCertPathBuilderResult</code> using the <code class="codeph">getCertPath</code> method.</p>
</div>
<!-- class="example" --></div>
</div>
<div class="sect4"><a id="GUID-D46630F6-939D-4054-A451-3D8206ED4E62"></a>
<h4 id="JSSEC-GUID-D46630F6-939D-4054-A451-3D8206ED4E62" class="sect4">The PKIXCertPathChecker Class</h4>
<div>
<p>The PKIXCertPathChecker class allows a user to extend a PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation. This is an advanced feature that most users will not need to understand. However, anyone implementing a PKIX service provider should read this section</p>
<p>The <code class="codeph">PKIXCertPathChecker</code> class is an abstract class that executes one or more checks on an X.509 certificate. Developers should create concrete implementations of the <code class="codeph">PKIXCertPathChecker</code> class when it is necessary to dynamically extend a PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation at runtime. The following are a few examples of when a <code class="codeph">PKIXCertPathChecker</code> implementation is useful:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the revocation mechanism supplied by a PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation is not adequate: For example, you can use the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXRevocationChecker.html" target="_blank"><code class="codeph">PKIXRevocationChecker</code></a></code> (introduced in JDK 8; see <a href="java-pki-programmers-guide.htm#GUID-43A3A247-E165-408C-AD74-88A75BFB4750" title="An instance of PKIXRevocationChecker checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs).">Check Revocation Status of Certificates with PKIXRevocationChecker Class</a>) to have more control over the revocation mechanism, or you can implement your own <code class="codeph">PKIXCertPathChecker</code> to check that certificates have not been revoked.</p>
</li>
<li>
<p>If the user wants to recognize certificates containing a critical private extension. Since the extension is private, it will not be recognized by the PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation and a <code class="codeph">CertPathValidatorException</code> will be thrown. In this case, a developer can implement a <code class="codeph">PKIXCertPathChecker</code> that recognizes and processes the critical private extension.</p>
</li>
<li>
<p>If the developer wants to record information about each certificate processed for debugging or display purposes.</p>
</li>
<li>
<p>If the user wants to reject certificates with certain policy qualifiers.</p>
</li>
</ul>
<p>The <code class="codeph">setCertPathCheckers</code> method of the <code class="codeph">PKIXParameters</code> class allows a user to pass a <code class="codeph">List</code> of <code class="codeph">PKIXCertPathChecker</code> objects to a PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation. Each of the <code class="codeph">PKIXCertPathChecker</code> objects will be called in turn, for each certificate processed by the PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> implementation.</p>
<div class="section">
<p class="subhead3">Creating and using a PKIXCertPathChecker Object</p>
<p>The <code class="codeph">PKIXCertPathChecker</code> class does not have a public constructor. This is intentional, since creating an instance of <code class="codeph">PKIXCertPathChecker</code> is an implementation-specific issue. For example, the constructor for a <code class="codeph">PKIXCertPathChecker</code> implementation that uses OCSP to check a certificate's revocation status may require the hostname and port of the OCSP server:</p>
<pre class="codeblock" dir="ltr">
        PKIXCertPathChecker checker = new OCSPChecker("ocsp.sun.com", 1321);
</pre>
<p>Once the checker has been instantiated, it can be added as a parameter using the <code class="codeph">addCertPathChecker</code> method of the <code class="codeph">PKIXParameters</code> class:</p>
<pre class="codeblock" dir="ltr">
        params.addCertPathChecker(checker);
</pre>
<p>Alternatively, a <code class="codeph">List</code> of checkers can be added using the <code class="codeph">setCertPathCheckers</code> method of the <code class="codeph">PKIXParameters</code> class.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Implementing a PKIXCertPathChecker Object</p>
<p>The <code class="codeph">PKIXCertPathChecker</code> class is abstract. It has four methods (<code class="codeph">check</code>, <code class="codeph">getSupportedExtensions</code>, <code class="codeph">init</code>, and <code class="codeph">isForwardCheckingSupported</code>) that all concrete subclasses must implement.</p>
<p>Implementing a <code class="codeph">PKIXCertPathChecker</code> may be trivial or complex. A <code class="codeph">PKIXCertPathChecker</code> implementation can be stateless or stateful. A stateless implementation does not maintain state between successive calls of the <code class="codeph">check</code> method. For example, a <code class="codeph">PKIXCertPathChecker</code> that checks that each certificate contains a particular policy qualifier is stateless. In contrast, a stateful implementation does maintain state between successive calls of the <code class="codeph">check</code> method. The <code class="codeph">check</code> method of a stateful implementation usually depends on the contents of prior certificates in the certification path. For example, a <code class="codeph">PKIXCertPathChecker</code> that processes the NameConstraints extension is stateful.</p>
<p>Also, the order in which the certificates processed by a service provider implementation are presented (passed) to a <code class="codeph">PKIXCertPathChecker</code> is very important, especially if the implementation is stateful. Depending on the algorithm used by the service provider, the certificates may be presented in <span class="variable">reverse</span> or <span class="variable">forward</span> order. A reverse ordering means that the certificates are ordered from the most trusted CA (if present) to the target subject, whereas a forward ordering means that the certificates are ordered from the target subject to the most trusted CA. The order must be made known to the <code class="codeph">PKIXCertPathChecker</code> implementation, so that it knows how to process consecutive certificates.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Initializing a PKIXCertPathChecker Object</p>
<p>The <code class="codeph">init</code> method initializes the internal state of the checker:</p>
<pre class="codeblock" dir="ltr">
        public abstract void init(boolean forward)
</pre>
<p>All stateful implementations should clear or initialize any internal state in the checker. This prevents a service provider implementation from calling a checker that is in an uninitialized state. It also allows stateful checkers to be reused in subsequent operations without reinstantiating them. The <code class="codeph">forward</code> parameter indicates the order of the certificates presented to the <code class="codeph">PKIXCertPathChecker</code>. If <code class="codeph">forward</code> is <code class="codeph">true</code>, the certificates are presented from target to trust anchor; if <code class="codeph">false</code>, from trust anchor to target.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Forward Checking</p>
<p>The <code class="codeph">isForwardCheckingSupported</code> method returns a <code class="codeph">boolean</code> that indicates if the <code class="codeph">PKIXCertPathChecker</code> supports forward checking:</p>
<pre class="codeblock" dir="ltr">
        public abstract boolean isForwardCheckingSupported()
</pre>
<p>All <code class="codeph">PKIXCertPathChecker</code> implementations <span class="variable">must</span>support reverse checking. A <code class="codeph">PKIXCertPathChecker</code> implementation <span class="variable">may</span>support forward checking.</p>
<p>Supporting forward checking improves the efficiency of <code class="codeph">CertPathBuilder</code>s that build forward, since it allows paths to be checked as they are built. However, some stateful <code class="codeph">PKIXCertPathChecker</code>s may find it difficult or impossible to support forward checking.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Supported Extensions</p>
<p>The <code class="codeph">getSupportedExtensions</code> method returns an immutable <code class="codeph">Set</code> of OID <code class="codeph">String</code>s for the X.509 extensions that the <code class="codeph">PKIXCertPathChecker</code> implementation supports (i.e., recognizes, is able to process):</p>
<pre class="codeblock" dir="ltr">
        public abstract Set&lt;String&gt; getSupportedExtensions()
</pre>
<p>The method should return <code class="codeph">null</code> if no extensions are processed. All implementations should return the <code class="codeph">Set</code> of OID <code class="codeph">String</code>s that the <code class="codeph">check</code> method may process.</p>
<p>A <code class="codeph">CertPathBuilder</code> can use this information to identify certificates with unrecognized critical extensions, even when performing a forward build with a <code class="codeph">PKIXCertPathChecker</code> that does not support forward checking.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Executing the Check</p>
<p>The following method executes a check on the certificate:</p>
<pre class="codeblock" dir="ltr">
        public abstract void 
                check(Certificate cert, Collection&lt;String&gt; unresolvedCritExts)
                throws CertPathValidatorException
</pre>
<p>The <code class="codeph">unresolvedCritExts</code> parameter contains a collection of OIDs as <code class="codeph">String</code>s. These OIDs represent the set of critical extensions in the certificate that have not yet been resolved by the certification path validation algorithm. Concrete implementations of the <code class="codeph">check</code> method should remove any critical extensions that it processes from the <code class="codeph">unresolvedCritExts</code> parameter.</p>
<p>If the certificate does not pass the check(s), a <code class="codeph">CertPathValidatorException</code> should be thrown.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Cloning a PKIXCertPathChecker</p>
<p>The <code class="codeph">PKIXCertPathChecker</code> class implements the <code class="codeph">Cloneable</code> interface. All stateful <code class="codeph">PKIXCertPathChecker</code> implementations must override the <code class="codeph">clone</code> method if necessary. The default implementation of the <code class="codeph">clone</code> method calls the <code class="codeph">Object.clone</code> method, which performs a simple clone by copying all fields of the original object to the new object. A stateless implementation should not override the <code class="codeph">clone</code> method. However, all stateful implementations must ensure that the default <code class="codeph">clone</code> method is correct, and override it if necessary. For example, a <code class="codeph">PKIXCertPathChecker</code> that stores state in an array must override the <code class="codeph">clone</code> method to make a copy of the array, rather than just a reference to the array.</p>
<p>The reason that <code class="codeph">PKIXCertPathChecker</code> objects are <code class="codeph">Cloneable</code> is to allow a PKIX <code class="codeph">CertPathBuilder</code> implementation to efficiently backtrack and try another path when a potential certification path reaches a dead end or point of failure. In this case, the implementation is able to restore prior path validation states by restoring the cloned objects.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-D46630F6-939D-4054-A451-3D8206ED4E62__GUID-44A52013-BF80-49DC-BE95-A0AC981333E7">
<p class="titleinexample">Example 9-3 Sample Code to Check for a Private Extension</p>
<p>This is an example of a stateless <code class="codeph">PKIXCertPathChecker</code> implementation. It checks if a private extension exists in a certificate and processes it according to some rules.</p>
<pre class="codeblock" dir="ltr">
        import java.security.cert.Certificate;
        import java.security.cert.X509Certificate;
        import java.util.Collection;
        import java.util.Collections;
        import java.util.Set;
        import java.security.cert.PKIXCertPathChecker;
        import java.security.cert.CertPathValidatorException;

        public class MyChecker extends PKIXCertPathChecker {
            private static Set supportedExtensions =
                Collections.singleton("2.16.840.1.113730.1.1");

            /*
             * Initialize checker
             */
            public void init(boolean forward) 
                throws CertPathValidatorException {
                // nothing to initialize
            }

            public Set getSupportedExtensions() {        
                return supportedExtensions;
            }

            public boolean isForwardCheckingSupported() {
                return true;
            }

            /*
             * Check certificate for presence of Netscape's
             * private extension
             * with OID "2.16.840.1.113730.1.1"
             */
            public void check(Certificate cert, 
                              Collection unresolvedCritExts)
                throws CertPathValidatorException 
            {
                X509Certificate xcert = (X509Certificate) cert;
                byte[] ext = 
                    xcert.getExtensionValue("2.16.840.1.113730.1.1");
                if (ext == null)
                    return;

                //
                // process private extension according to some 
                // rules - if check fails, throw a 
                // CertPathValidatorException ...
                // {insert code here}

                // remove extension from collection of unresolved 
                // extensions (if it exists)
                if (unresolvedCritExts != null)
                    unresolvedCritExts.remove("2.16.840.1.113730.1.1");
            }
        }
</pre></div>
<!-- class="example" -->
<div class="section">
<p class="subhead3">How a PKIX Service Provider implementation should use a PKIXCertPathChecker</p>
<p>Each <code class="codeph">PKIXCertPathChecker</code> object must be initialized by a service provider implementation before commencing the build or validation algorithm, for example:</p>
<pre class="codeblock" dir="ltr">
        List&lt;PKIXCertPathChecker&gt; checkers = params.getCertPathCheckers();
        for (PKIXCertPathChecker checker : checkers) {
            checker.init(false);
        }
</pre>
<p>For each certificate that it validates, the service provider implementation must call the <code class="codeph">check</code> method of each <code class="codeph">PKIXCertPathChecker</code> object in turn, passing it the certificate and any remaining unresolved critical extensions:</p>
<pre class="codeblock" dir="ltr">
        for (PKIXCertPathChecker checker : checkers) {
            checker.check(cert, unresolvedCritExts);
        }
</pre>
<p>If any of the <code class="codeph">check</code>s throw a <code class="codeph">CertPathValidatorException</code>, a <code class="codeph">CertPathValidator</code> implementation should terminate the validation procedure. However, a <code class="codeph">CertPathBuilder</code> implementation may simply log the failure and continue to search for other potential paths. If all of the <code class="codeph">check</code>s are successful, the service provider implementation should check that all critical extensions have been resolved and if not, consider the validation to have failed. For example:</p>
<pre class="codeblock" dir="ltr">
        if (unresolvedCritExts != null &amp;&amp;
            !unresolvedCritExts.isEmpty())
        {
            // note that a CertPathBuilder may have an enclosing
            // try block to catch the exception below and continue on error
            throw new CertPathValidatorException
                ("Unrecognized Critical Extension");
        }
</pre>
<p>As discussed in the previous section, a <code class="codeph">CertPathBuilder</code> implementation may need to backtrack when a potential certification path reaches a dead end or point of failure. Backtracking in this context implies returning to the previous certificate in the path and checking for other potential paths. If the <code class="codeph">CertPathBuilder</code> implementation is validating the path as it is building it, it will need to restore the previous state of each <code class="codeph">PKIXCertPathChecker</code>. It can do this by making clones of the <code class="codeph">PKIXCertPathChecker</code> objects <span class="variable">before</span> each certificate is processed, for example:</p>
<pre class="codeblock" dir="ltr">
        /* clone checkers */
        List newList = new ArrayList(checkers);
        ListIterator li = newList.listIterator();
        while (li.hasNext()) {   
            PKIXCertPathChecker checker = (PKIXCertPathChecker) li.next();
            li.set(checker.clone());
        }
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect4"><a id="GUID-F727578E-71D0-4BC5-9B06-47EE13F9CBCF"></a>
<h4 id="JSSEC-GUID-F727578E-71D0-4BC5-9B06-47EE13F9CBCF" class="sect4">Using PKIXCertPathChecker in Certificate Path Validation</h4>
<div>
<p>Using a <code class="codeph">PKIXCertPathChecker</code> to customize certificate path validation is relatively straightforward.</p>
<div class="section">
<p class="subhead3">Basic Certification Path Validation</p>
<p>First, consider code that validates a certificate path:</p>
<pre class="codeblock" dir="ltr">
Set&lt;TrustAnchor&gt; trustAnchors = getTrustAnchors();
CertPath cp = getCertPath();

PKIXParameters pkixp = new PKIXParameters(trustAnchors);
pkixp.setRevocationEnabled(false);

CertPathValidator cpv = CertPathValidator.getInstance("PKIX");
PKIXCertPathValidatorResult pcpvr =
    (PKIXCertPathValidatorResult)cpv.validate(cp, pkixp);
</pre>
<p>If the validation fails, the <code class="codeph">validate()</code> method throws an exception.</p>
<p>The fundamental steps are as follows:</p>
<ol>
<li>Obtain the CA root certificates and the certification path to be validated.</li>
<li>Create a <code class="codeph">PKIXParameters</code> with the trust anchors.</li>
<li>Use a <code class="codeph">CertPathValidator</code> to validate the certificate path.</li>
</ol>
<p>In this example, <code class="codeph">getTrustAnchors()</code> and <code class="codeph">getCertPath()</code> are the methods that obtain CA root certificates and the certification path.</p>
<p>The <code class="codeph">getTrustAnchors()</code> method in the example must return a <code class="codeph">Set</code> of <code class="codeph">TrustAnchor</code>s that represent the CA root certificates you wish to use for validation. Here is one simple implementation that loads a single CA root certificate from a file:</p>
<pre class="codeblock" dir="ltr">
public Set&lt;TrustAnchor&gt; getTrustAnchors()
    throws IOException, CertificateException {

  CertificateFactory cf = CertificateFactory.getInstance("X.509");

  X509Certificate c;
  try (InputStream in = new FileInputStream("x509_ca-certificate.cer")) {
    c = (X509Certificate)cf.generateCertificate(in);
  }

  TrustAnchor anchor = new TrustAnchor(c, null);
  return Collections.singleton(anchor);
}
</pre>
<p>Similarly, here is a simple implementation of <code class="codeph">getCertPath()</code> that loads a certificate path from a file:</p>
<pre class="codeblock" dir="ltr">
public CertPath getCertPath() throws IOException, CertificateException {
  CertificateFactory cf = CertificateFactory.getInstance("X.509");

  CertPath cp;
  try (InputStream in = new FileInputStream("certpath.pkcs7")) {     
    cp = cf.generateCertPath(in, "PKCS7");
  }   
  return cp;
}
</pre>
<p>Note that PKCS#7 does not require a specific order for the certificates in the file, so this code only works for certification path validation when the certificates are ordered starting from the entity to be validated and progressing back toward the CA root. If the certificates are not in the right order, you need to do some additional processing. <code class="codeph">CertificateFactory</code> has a <code class="codeph">generateCertPath()</code> method that accepts a <code class="codeph">Collection</code>, which is useful for this type of processing.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Adding in a <code class="codeph">PKIXCertPathChecker</code></p>
<p>To customize certification path validation, add a <code class="codeph">PKIXCertPathChecker</code> as follows. In this example, <code class="codeph">SimpleChecker</code> is a <code class="codeph">PKIXCertPathChecker</code> subclass. The new lines are shown in <span class="bold">bold</span>.</p>
<pre class="codeblock" dir="ltr">
Set&lt;TrustAnchor&gt; trustAnchors = getTrustAnchors();
CertPath cp = getCertPath();

PKIXParameters pkixp = new PKIXParameters(trustAnchors);
pkixp.setRevocationEnabled(false);

<span class="bold">SimpleChecker sc = new SimpleChecker();
pkixp.addCertPathChecker(sc);</span>

CertPathValidator cpv = CertPathValidator.getInstance("PKIX");
PKIXCertPathValidatorResult pcpvr =
    (PKIXCertPathValidatorResult)cpv.validate(cp, pkixp);
</pre>
<p><code class="codeph">SimpleChecker</code> is a rudimentary subclass of <code class="codeph">PKIXCertPathChecker</code>. Its <code class="codeph">check()</code> method is called for every certificate in the certification path that is being validated. <code class="codeph">SimpleChecker</code> uses an <code class="codeph">AlgorithmConstraints</code> implementation to examine the signature algorithm and public key of each certificate.</p>
<pre class="codeblock" dir="ltr">
import java.security.AlgorithmConstraints;
import java.security.CryptoPrimitive;
import java.security.Key;
import java.security.cert.*;
import java.util.*;

public class SimpleChecker extends PKIXCertPathChecker {
  private final static Set&lt;CryptoPrimitive&gt; SIGNATURE_PRIMITIVE_SET =
      EnumSet.of(CryptoPrimitive.SIGNATURE);
  
  public void init(boolean forward) throws CertPathValidatorException {}
  
  public boolean isForwardCheckingSupported() { return true; }
  
  public Set&lt;String&gt; getSupportedExtensions() { return null; }
  
  public void check(Certificate cert,
      Collection&lt;String&gt; unresolvedCritExts)
      throws CertPathValidatorException {
    X509Certificate c = (X509Certificate)cert;
    String sa = c.getSigAlgName();
    Key key = c.getPublicKey();
    
    AlgorithmConstraints constraints = new SimpleConstraints();
    
    if (constraints.permits(SIGNATURE_PRIMITIVE_SET, sa, null) == false)
      throw new CertPathValidatorException("Forbidden algorithm: " + sa);

    if (constraints.permits(SIGNATURE_PRIMITIVE_SET, key) == false)
      throw new CertPathValidatorException("Forbidden key: " + key);
  }
}
</pre>
<p>Finally, <code class="codeph">SimpleConstraints</code> is an <code class="codeph">AlgorithmConstraints</code> implementation that requires RSA 2048.</p>
<pre class="codeblock" dir="ltr">
import java.security.AlgorithmConstraints;
import java.security.AlgorithmParameters;
import java.security.CryptoPrimitive;
import java.security.Key;
import java.security.interfaces.RSAKey;
import java.util.Set;

public class SimpleConstraints implements AlgorithmConstraints {
  public boolean permits(Set&lt;CryptoPrimitive&gt; primitives,
      String algorithm, AlgorithmParameters parameters) {
    return permits(primitives, algorithm, null, parameters);
  }

  public boolean permits(Set&lt;CryptoPrimitive&gt; primitives, Key key) {
    return permits(primitives, null, key, null);
  }
  
  public boolean permits(Set&lt;CryptoPrimitive&gt; primitives,
      String algorithm, Key key, AlgorithmParameters parameters) {
    if (algorithm == null) algorithm = key.getAlgorithm();
    
    if (algorithm.indexOf("RSA") == -1) return false;
    
    if (key != null) {
      RSAKey rsaKey = (RSAKey)key;
      int size = rsaKey.getModulus().bitLength();
      if (size &lt; 2048) return false;
    }

    return true;
  }
}
</pre></div>
<!-- class="section" --></div>
<div class="sect5"><a id="GUID-43A3A247-E165-408C-AD74-88A75BFB4750"></a>
<h5 id="JSSEC-GUID-43A3A247-E165-408C-AD74-88A75BFB4750" class="sect5">Check Revocation Status of Certificates with PKIXRevocationChecker Class</h5>
<div>
<p>An instance of <code class="codeph">PKIXRevocationChecker</code> checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs).</p>
<p>The <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXRevocationChecker.html" target="_blank"><code class="codeph">PKIXRevocationChecker</code></a></code> (introduced in JDK 8), which is a subclass of <code class="codeph">PKIXCertPathChecker</code>, checks the revocation status of certificates with the PKIX algorithm.</p>
<p>An instance of <code class="codeph">PKIXRevocationChecker</code> checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs). OCSP is described in <a href="http://www.ietf.org/rfc/rfc2560.txt" target="_blank">RFC 2560</a> and is a network protocol for determining the status of a certificate. A CRL is a time-stamped list identifying revoked certificates, and RFC 5280 describes an algorithm for determining the revocation status of certificates using CRLs.</p>
<p>Each PKIX <code class="codeph">CertPathValidator</code> and <code class="codeph">CertPathBuilder</code> instance provides a default revocation implementation that is enabled by default. If you want more control over the revocation settings used by that implementation, use the <code class="codeph">PKIXRevocationChecker</code> class.</p>
<p>Follow these general steps to check the revocation status of a certificate path with the <code class="codeph">PKIXRevocationChecker</code> class:</p>
<ol>
<li>
<p>Obtain a <code class="codeph">PKIXRevocationChecker</code> instance by calling the <code class="codeph">getRevocationChecker</code> method of a PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> instance.</p>
</li>
<li>
<p>Set additional parameters and options specific to certificate revocation with methods contained in the <code class="codeph">PKIXRevocationChecker</code> class. These methods include <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXRevocationChecker.html#setOcspResponder-java.net.URI-" target="_blank"><code class="codeph">setOCSPResponder(URI)</code></a></code>, which sets the URI that identifies the location of the OCSP responder (although normally the URI is included in the certificate and does not have to be set) and <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXRevocationChecker.html#setOptions-java.util.Set-" target="_blank"><code class="codeph">setOptions(Set&lt;PKIXRevocationChecker.Option&gt;)</code></a></code>, which sets revocation options. <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXRevocationChecker.Option.html" target="_blank"><code class="codeph">PKIXRevocationChecker.Option</code></a></code> is an enumerated type used to specify the following options:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">ONLY_END_ENTITY</code>: Only check the revocation status of end-entity certificates.</li>
<li><code class="codeph">PREFER_CRLS</code>: By default, OCSP is the preferred mechanism for checking revocation status, with CRLs as the fallback mechanism. Switch this preference to CRLs with this option.</li>
<li><code class="codeph">SOFT_FAIL</code>: Ignore network failures.</li>
</ul>
</li>
<li>
<p>After obtaining an instance of <code class="codeph">PKIXRevocationChecker</code>, add it to a <code class="codeph">PKIXParameters</code> or <code class="codeph">PKIXBuilderParameters</code> object with the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXParameters.html" target="_blank"><code class="codeph">addCertPathChecker</code></a></code> or <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXParameters.html" target="_blank"><code class="codeph">setCertPathCheckers</code></a></code> method.</p>
</li>
<li>
<p>Follow one of these steps depending on whether you are using a PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> instance:</p>
<ul style="list-style-type: disc;">
<li>
<p>If you are using a PKIX <code class="codeph">CertPathValidator</code> instance, call the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/PKIXCertPathValidatorResult.html" target="_blank"><code class="codeph">validate</code></a></code> method using as arguments the certificate path you want to validate and the <code class="codeph">PKIXParameters</code> object that contains a revocation checker.</p>
</li>
<li>
<p>If you are using a PKIX <code class="codeph">CertPathBuilder</code> instance, call the <code class="codeph"><a href="https://docs.oracle.com/javase/9/docs/api/java/security/cert/CertPathBuilder.html#build-java.security.cert.CertPathParameters-" target="_blank"><code class="codeph">build</code></a></code> method using as arguments the <code class="codeph">PKIXBuilderParameters</code> object that contains a revocation checker.</p>
</li>
</ul>
</li>
<li>
<p>Call the <code class="codeph">validate</code> method of the PKIX <code class="codeph">CertPathValidator</code> or <code class="codeph">CertPathBuilder</code> instance using as arguments the certificate path you want to validate and the <code class="codeph">PKIXParameters</code> or <code class="codeph">PKIXBuilderParameters</code> object that contains a revocation checker.</p>
</li>
</ol>
<p>The following excerpt checks the revocation status of certificates contained in a certificate path. The <code class="codeph">CertPath</code> object <code class="codeph">path</code> is the certificate path, and <code class="codeph">params</code> is an object of type <code class="codeph">PKIXParameters</code>:</p>
<pre class="codeblock" dir="ltr">
    CertPathValidator cpv = CertPathValidator.getInstance("PKIX");
    PKIXRevocationChecker rc = (PKIXRevocationChecker)cpv.getRevocationChecker();
    rc.setOptions(EnumSet.of(Option.SOFT_FAIL));
    params.addCertPathChecker(rc);
    params.setRevocationEnabled(false);
    CertPathValidatorResult res = cpv.validate(path, params);
</pre>
<p>In this excerpt, the <code class="codeph">SOFT_FAIL</code> option causes the revocation checker to ignore any network failures (such as failing to establish a connection to the OCSP server) when it checks the revocation status.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-266DD62E-39A7-435B-90DF-7EB1425D56E1"></a>
<h2 id="JSSEC-GUID-266DD62E-39A7-435B-90DF-7EB1425D56E1" class="sect2">Implementing a Service Provider</h2>
<div>
<p>Experienced programmers can create their own provider packages supplying certification path service implementations.</p>
<div class="section">
<p>This section assumes that you have read <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-2BCFDD85-D533-4E6C-8CE9-29990DEB0190" title='The Java Cryptography Architecture (JCA) is a major piece of the platform, and contains a "provider" architecture and a set of APIs for digital signatures, message digests (hashes), certificates and certificate validation, encryption (symmetric/asymmetric block/stream ciphers), key generation and management, and secure random number generation, to name a few.'>Java Cryptography Architecture (JCA) Reference Guide</a>.</p>
<p>The following engine classes are defined in the Java Certification Path API:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code class="codeph">CertPathValidator</code></span> - used to validate certification paths</p>
</li>
<li>
<p><span class="bold"><code class="codeph">CertPathBuilder</code></span> - used to build certification paths</p>
</li>
<li>
<p><span class="bold"><code class="codeph">CertStore</code></span> - used to retrieve certificates and CRLs from a repository</p>
</li>
</ul>
<p>In addition, the pre-existing <code class="codeph">CertificateFactory</code> engine class also supports the generation of certification paths.</p>
<p>The application interfaces supplied by an engine class are implemented in terms of a "Service Provider Interface" (SPI). The name of each SPI class is the same as that of the corresponding engine class, followed by "Spi". For example, the SPI class corresponding to the <code class="codeph">CertPathValidator</code> engine class is the <code class="codeph">CertPathValidatorSpi</code> class. Each SPI class is abstract. To supply the implementation of a particular type of service, for a specific algorithm or type, a provider must subclass the corresponding SPI class and provide implementations for all the abstract methods. For example, the <code class="codeph">CertStore</code> class provides access to the functionality of retrieving certificates and CRLs from a repository. The actual implementation supplied in a <code class="codeph">CertStoreSpi</code> subclass would be that for a specific type of certificate repository, such as LDAP.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-BFF21E4E-30F9-4D92-BD1E-C530DD33609F"></a>
<h3 id="JSSEC-GUID-BFF21E4E-30F9-4D92-BD1E-C530DD33609F" class="sect3">Steps to Implement and Integrate a Provider</h3>
<div>
<p>When implementing and integrating a provider for the certification path services, you must ensure that certain information is provided.</p>
<div class="section">
<p>Developers should follow the <a href="howtoimplaprovider.htm#GUID-CC161921-EBD2-48C6-B543-A956658B68B6" title="Follow these steps to implement a provider and integrate it into the JCA framework:">Steps to Implement and Integrate a Provider</a>. Here are some additional rules to follow for certain steps:</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Step 3: Write your "Master Class", a subclass of Provider</p>
<p>In <a href="howtoimplaprovider.htm#GUID-1C82EDB9-96CA-44AB-8590-E299814D6A46" title="Create a subclass of the java.security.Provider class. This is essentially a lookup table that advertises the algorithms that your provider implements.">Step 3: Write Your Master Class, a Subclass of Provider</a> these are the properties that must be defined for the certification path services, where the algorithm name is substituted for <span class="variable">algName</span>, and certstore type for <span class="variable">storeType</span>:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CertPathValidator</code>.<span class="variable">algName</span></p>
</li>
<li>
<p><code class="codeph">CertPathBuilder</code>.<span class="variable">algName</span></p>
</li>
<li>
<p><code class="codeph">CertStore</code>.<span class="variable">storeType</span></p>
</li>
</ul>
<p>See <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a> for the standard names that are defined for <span class="variable">algName</span> and <span class="variable">storeType</span>. The value of each property must be the fully qualified name of the class implementing the specified algorithm, or certstore type. That is, it must be the package name followed by the class name, where the two are separated by a period. For example, a provider sets the <code class="codeph">CertPathValidator.PKIX</code> property to have the value <code>"sun.security.provider.certpath.PKIXCertPathValidator"</code> as follows:</p>
<pre class="codeblock" dir="ltr">
put("CertPathValidator.PKIX", "sun.security.provider.certpath.PKIXCertPathValidator")
</pre>
<p>In addition, service attributes can be defined for the certification path services. These attributes can be used as filters for selecting service providers. See Appendix A for the definition of some standard service attributes. For example, a provider may set the <code class="codeph">ValidationAlgorithm</code> service attribute to the name of an RFC or specification that defines the PKIX validation algorithm:</p>
<pre class="codeblock" dir="ltr">
put("CertPathValidator.PKIX ValidationAlgorithm", "RFC5280");
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-BFF21E4E-30F9-4D92-BD1E-C530DD33609F__GUID-37433574-5578-471C-8D0A-9293E3E576DD">
<p class="subhead3">Step 11: Document your Provider and its Supported Services</p>
<p>In <a href="howtoimplaprovider.htm#GUID-912FAB1D-628A-47EA-A1DD-A216F2DD4245">Step 12: Document Your Provider and Its Supported Services</a>, certification path service providers should document the following information for each SPI:</p>
<p><span class="bold">Certificate Factories</span></p>
<p>A provider should document what types of certification paths (and the version numbers of the certificates in the path, if relevant) can be created by the factory. A provider should describe the ordering of the certificates in the certification path, as well as the contents.</p>
<p>A provider should document the list of encoding formats supported. This is not technically necessary, since the client can request them by calling the <span class="apiname">getCertPathEncodings</span> method. However, the documentation should describe each encoding format in more detail and reference any standards when applicable.</p>
<p><span class="bold">Certification Path Validators</span></p>
<p>A provider should document any relevant information regarding the <code class="codeph">CertPathValidator</code> implementation, including the types of certification paths that it validates. In particular, a PKIX <code class="codeph">CertPathValidator</code> implementation should document the following information:</p>
<ul style="list-style-type: disc;">
<li>The RFC or specification it is compliant with.</li>
<li>The mechanism it uses to check that certificates have not been revoked.</li>
<li>Any optional certificate or CRL extensions that it recognizes and how it processes them.</li>
</ul>
<p><span class="bold">Certification Path Builders</span></p>
<p>A provider should document any relevant information regarding the <code class="codeph">CertPathBuilder</code> implementation, including the types of certification paths that it creates and whether or not they are validated. In particular a PKIX <code class="codeph">CertPathBuilder</code> implementation should document the following information:</p>
<ul style="list-style-type: disc;">
<li>The RFC or specification it is compliant with.</li>
<li>The mechanism it uses to check that certificates have not been revoked.</li>
<li>Any optional certificate or CRL extensions that it recognizes and how it processes them.</li>
<li>Details on the algorithm it uses for finding certification paths. Ex: depth-first, breadth-first, forward (i.e., from target to trust anchor(s)), reverse (i.e., from trust anchor(s) to target).</li>
<li>The algorithm it uses to select and sort potential certificates. For example, given two certificates that are potential candidates for the next certificate in the path, what criteria are used to select one before the other? What criteria are used to reject a certificate?</li>
<li>If applicable, the algorithm it uses for backtracking or constructing another path (i.e., when potential paths do not meet constraints).</li>
<li>The types of <code class="codeph">CertStore</code> implementations that have been tested. The implementation should be designed to work with any <code class="codeph">CertStore</code> type, but this information may still be useful.</li>
</ul>
<p>All <code class="codeph">CertPathBuilder</code> implementations should provide additional debugging support, in order to analyze and correct potential path building problems. Details on how to access this debugging information should be documented.</p>
<p><span class="bold">Certificate/CRL Stores</span></p>
<p>A provider should document what types of certificates and CRLs (and the version numbers, if relevant) are retrieved by the <code class="codeph">CertStore</code>.</p>
<p>A provider should also document any relevant information regarding the <code class="codeph">CertStore</code> implementation (such as protocols used or formats supported). For example, an LDAP <code class="codeph">CertStore</code> implementation should describe which versions of LDAP are supported and which standard attributes are used for finding certificates and CRLs. It should also document if the implementation caches results, and for how long (i.e., under what conditions are they refreshed).</p>
<p>If the implementation returns the certificates and CRLs in a particular order, it should describe the sorting algorithm. An implementation should also document any additional or default initialization parameters. Finally, an implementation should document if and how it uses information in the <code class="codeph">CertSelector</code> or <code class="codeph">CRLSelector</code> objects to find certificates and CRLs.</p>
</div>
<!-- class="section" --></div>
<div class="sect4"><a id="GUID-255CC70E-E05E-4109-AA6E-51B83C5A3618"></a>
<h4 id="JSSEC-GUID-255CC70E-E05E-4109-AA6E-51B83C5A3618" class="sect4">Service Interdependencies</h4>
<div>
<p>Common types of algorithm interdependencies in certification path service implementations.</p>
<p>The following are some common types of algorithm interdependencies in certification path service implementations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Certification Path Validation and Signature Algorithms</p>
<p>A <code class="codeph">CertPathValidator</code> implementation often requires use of a signature algorithm to verify each certificate's digital signature. The <span class="apiname">setSigProvider</span> method of the <code class="codeph">PKIXParameters</code> class allows a user to specify a specific <code class="codeph">Signature</code> provider.</p>
</li>
<li>
<p>Certification Path Builders and Certificate Factories</p>
<p>A <code class="codeph">CertPathBuilder</code> implementation will often utilize a <code class="codeph">CertificateFactory</code> to generate a certification path from a list of certificates.</p>
</li>
<li>
<p>CertStores and Certificate Factories</p>
<p>A <code class="codeph">CertStore</code> implementation will often utilize a <code class="codeph">CertificateFactory</code> to generate certificates and CRLs from their encodings. For example, an LDAP <code class="codeph">CertStore</code> implementation may use an X.509 <code class="codeph">CertificateFactory</code> to generate X.509 certificates and CRLs from their ASN.1 encoded form.</p>
</li>
</ul>
</div>
</div>
<div class="sect4"><a id="GUID-5C8A1966-6636-475F-B533-3D080DB0653A"></a>
<h4 id="JSSEC-GUID-5C8A1966-6636-475F-B533-3D080DB0653A" class="sect4">Certification Path Parameter Specification Interfaces</h4>
<div>
<p>The Certification Path API contains two interfaces representing <span class="variable">transparent</span> specifications of parameters, the <code class="codeph">CertPathParameters</code> and <code class="codeph">CertStoreParameters</code> interfaces.</p>
<p>Two implementations of the <code class="codeph">CertPathParameters</code> interface are included, the <code class="codeph">PKIXParameters</code> and <code class="codeph">PKIXBuilderParameters</code> classes. If you are working with PKIX certification path validation and algorithm parameters, you can utilize these classes. If you need parameters for a different algorithm, you will need to supply your own <code class="codeph">CertPathParameters</code> implementation for that algorithm.</p>
<p>Two implementations of the <code class="codeph">CertStoreParameters</code> interface are included, the <code class="codeph">LDAPCertStoreParameters</code> and the <code class="codeph">CollectionCertStoreParameters</code> classes. These classes are to be used with LDAP and Collection <code class="codeph">CertStore</code> implementations, respectively. If you need parameters for a different repository type, you will need to supply your own <code class="codeph">CertStoreParameters</code> implementation for that type.</p>
<p>The <code class="codeph">CertPathParameters</code> and <code class="codeph">CertStoreParameters</code> interfaces each define a <code class="codeph">clone</code> method that implementations should override. A typical implementation will perform a "deep" copy of the object, such that subsequent changes to the copy will not affect the original (and vice versa). However, this is not an absolute requirement for implementations of <code class="codeph">CertStoreParameters</code>. A shallow copy implementation of <code class="codeph">clone</code> is more appropriate for applications that need to hold a reference to a parameter contained in the <code class="codeph">CertStoreParameters</code>. For example, since <span class="apiname">CertStore.getInstance</span> makes a clone of the specified <code class="codeph">CertStoreParameters</code>, a shallow copy <code class="codeph">clone</code> allows an application to hold a reference to and later release the resources of a particular <code class="codeph">CertStore</code> initialization parameter, rather than waiting for the garbage collection mechanism. This should be done with the utmost care, since the <code class="codeph">CertStore</code> may still be in use by other threads.</p>
</div>
</div>
<div class="sect4"><a id="GUID-67EDE244-431F-4382-9384-B5CBD8163C05"></a>
<h4 id="JSSEC-GUID-67EDE244-431F-4382-9384-B5CBD8163C05" class="sect4">Certification Path Result Specification Interfaces</h4>
<div>
<p>The Certification Path API contains two interfaces representing <span class="variable">transparent</span> specifications of results, the <code class="codeph">CertPathValidatorResult</code> and <code class="codeph">CertPathBuilderResult</code> interfaces.</p>
<p>One implementation for each of the interfaces is included: the <code class="codeph">PKIXCertPathValidatorResult</code> and <code class="codeph">PKIXCertPathBuilderResult</code> classes. If you are implementing PKIX certification path service providers, you can utilize these classes. If you need certification path results for a different algorithm, you will need to supply your own <code class="codeph">CertPathValidatorResult</code> or <code class="codeph">CertPathBuilderResult</code> implementation for that algorithm.</p>
<p>A PKIX implementation of a <code class="codeph">CertPathValidator</code> or a <code class="codeph">CertPathBuilder</code> may find it useful to store additional information in the <code class="codeph">PKIXCertPathValidatorResult</code> or <code class="codeph">PKIXCertPathBuilderResult</code>, such as debugging traces. In these cases, the implementation should implement a subclass of the appropriate result class with methods to retrieve the relevant information. These classes must be shipped with the provider classes, for example, as part of the provider JAR file.</p>
</div>
</div>
<div class="sect4"><a id="GUID-C6FC73C4-E9CA-45A2-A135-5E81FA345F5F"></a>
<h4 id="JSSEC-GUID-C6FC73C4-E9CA-45A2-A135-5E81FA345F5F" class="sect4">Certification Path Exception Classes</h4>
<div>
<p>The Certification Path API contains a set of exception classes for handling errors. <code class="codeph">CertPathValidatorException, CertPathBuilderException</code>, and <code class="codeph">CertStoreException</code> are subclasses of <code class="codeph">GeneralSecurityException</code>.</p>
<p>You may need to extend these classes in your service provider implementation.</p>
<p>For example, a <code class="codeph">CertPathBuilder</code> implementation may provide additional information such as debugging traces when a <code class="codeph">CertPathBuilderException</code> is thrown. The implementation may throw a subclass of <code class="codeph">CertPathBuilderException</code> that holds this information. Likewise, a <code class="codeph">CertStore</code> implementation can provide additional information when a failure occurs by throwing a subclass of <code class="codeph">CertStoreException</code> . Also, you may want to implement a subclass of <code class="codeph">CertPathValidatorException</code> to describe a particular failure mode of your <code class="codeph">CertPathValidator</code> implementation.</p>
<p>In each case, the new exception classes must be shipped with the provider classes, for example, as part of the provider JAR file. Each provider should document the exception subclasses.</p>
</div>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-EF1585DC-20BF-4140-B71E-0A8528D4A57D"></a>
<h2 id="JSSEC-GUID-EF1585DC-20BF-4140-B71E-0A8528D4A57D" class="sect2">Appendix A: Standard Names</h2>
<div>
<p>The Java Certification Path API requires and utilizes a set of standard names for certification path validation algorithms, encodings and certificate storage types.</p>
<div class="section">
<p>The standard names previously found here in Appendix A and in the other security specifications (JCA/JSSE/etc.) have been combined in the <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=security_standard_algorithm_spec" target="_blank">Java Security Standard Algorithm Names Specification</a>. Specific provider information can be found in the <a href="oracleproviders.htm#GUID-FE2D2E28-C991-4EF9-9DBE-2A4982726313" title="This document contains the technical details of the providers that are included in the JDK. It is assumed that readers have a strong understanding of the Java Cryptography Architecture and Provider Architecture.">JDK Providers</a>.</p>
<p>Please note that a service provider may choose to define a new name for a proprietary or non-standard algorithm that is not mentioned in the Standard Names document. However, to prevent name collisions, it is recommended that the name be prefixed with the reverse Internet domain name of the provider's organization (for example: <code class="codeph">com.sun.MyCertPathValidator</code>).</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-EB250086-0AC1-4D60-AE2A-FC7461374746"></a>
<h2 id="JSSEC-GUID-EB250086-0AC1-4D60-AE2A-FC7461374746" class="sect2">Appendix B: CertPath Implementation in SUN Provider</h2>
<div>
<div class="section">
<p>The "SUN" provider supports the following standard algorithms, types and encodings:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">CertificateFactory</code>: <span class="bold">X.509</span> <code class="codeph">CertPath</code> type with <span class="bold">PKCS7</span> and <span class="bold">PkiPath</span> encodings</li>
<li><code class="codeph">CertPathValidator</code>: <span class="bold">PKIX</span> algorithm</li>
<li><code class="codeph">CertPathBuilder</code>: <span class="bold">PKIX</span> algorithm</li>
<li><code class="codeph">CertStore</code>: <span class="bold">Collection</span> <code class="codeph">CertStore</code> type</li>
</ul>
<p>Each of these service provider interface implementations is discussed in more detail below.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">CertificateFactory</p>
<p>The "SUN" provider for the <code class="codeph">CertificateFactory</code> engine class supports generation of X.509 <code class="codeph">CertPath</code> objects. The PKCS7 and PkiPath encodings are supported. The PKCS#7 implementation supports a subset of <a href="http://www.ietf.org/rfc/rfc2315.txt" target="_blank">RFC 2315</a> (only the SignedData ContentInfo type is supported). The certificates in the <code class="codeph">CertPath</code> are ordered in the forward direction (from target to trust anchor). Each certificate in the <code class="codeph">CertPath</code> is of type <code class="codeph">java.security.cert.X509Certificate</code> , and versions 1, 2 and 3 are supported.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">CertPathValidator</p>
<p>The "SUN" provider supplies a PKIX implementation of the <code class="codeph">CertPathValidator</code> engine class. The implementation validates <code class="codeph">CertPath</code>s of type X.509 and implements the certification path validation algorithm defined in <a href="http://www.ietf.org/rfc/rfc5280.txt" target="_blank">RFC 5280:</a> <cite>PKIX Certificate and CRL Profile</cite>. This implementation sets the <code class="codeph">ValidationAlgorithm</code> service attribute to "RFC5280".</p>
<p>Weak cryptographic algorithms can be disabled in the "SUN" provider using the <code class="codeph">jdk.certpath.disabledAlgorithms</code> Security Property. See <a href="java-pki-programmers-guide.htm#GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3" title="The jdk.certpath.disabledAlgorithms Security Property contains a list of cryptographic algorithms and key size constraints that are considered weak or broken. Certificates and other data (CRLs, OCSPResponses) containing any of these algorithms or key sizes will be blocked during certification path building and validation. This property is used by Oracle's PKIX implementation, other implementations might not examine and use it.">Appendix E: Disabling Cryptographic Algorithms</a> for a description and examples of this property.</p>
<p>The PKIX Certificate and CRL Profile has many optional features. The "SUN" provider implements support for the policy mapping, <a href="java-pki-programmers-guide.htm#GUID-EB250086-0AC1-4D60-AE2A-FC7461374746__SECTION-1310-623E8D62">authority information access</a> and <a href="java-pki-programmers-guide.htm#GUID-EB250086-0AC1-4D60-AE2A-FC7461374746__SECTION-139-623E860E">CRL distribution point certificate</a> extensions, the issuing distribution point CRL extension, and the reason code and certificate issuer CRL entry extensions. It does not implement support for the freshest CRL or subject information access certificate extensions. It also does not include support for the freshest CRL and delta CRL Indicator CRL extensions and the invalidity date and hold instruction code CRL entry extensions.</p>
<p>The implementation supports a CRL revocation checking mechanism that conforms to section 6.3 of the PKIX Certificate and CRL Profile. OCSP (<a href="http://www.ietf.org/rfc/rfc2560.txt" target="_blank">RFC 2560</a>) is also currently supported as a built in revocation checking mechanism. See <a href="java-pki-programmers-guide.htm#GUID-E6E737DB-4000-4005-969E-BCD0238B1566" title="Client-side support for the On-Line Certificate Status Protocol (OCSP) as defined in RFC 2560 is supported.">Appendix C: OCSP Support</a> for more details on the implementation and configuration and how it works in conjunction with CRLs.</p>
<p>The implementation does not support the <code class="codeph">nameConstraints</code> parameter of the <code class="codeph">TrustAnchor</code> class and the <code class="codeph">validate</code> method throws an <code class="codeph">InvalidAlgorithmParameterException</code> if it is specified.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">CertPathBuilder</p>
<p>The "SUN" provider supplies a PKIX implementation of the <code class="codeph">CertPathBuilder</code> engine class. The implementation builds <code class="codeph">CertPath</code>s of type X.509. Each <code class="codeph">CertPath</code> is validated according to the PKIX algorithm defined in <a href="http://www.ietf.org/rfc/rfc5280.txt" target="_blank">RFC 5280: <span class="variable">PKIX Certificate and CRL Profile</span></a>. This implementation sets the <code class="codeph">ValidationAlgorithm</code> service attribute to "RFC5280".</p>
<p>The implementation requires that the <code class="codeph">targetConstraints</code> parameter of a <code class="codeph">PKIXBuilderParameters</code> object is an instance of <code class="codeph">X509CertSelector</code> and the subject criterion is set to a non-null value. Otherwise the <code class="codeph">build</code> method throws an <code class="codeph">InvalidAlgorithmParameterException</code>.</p>
<p>The implementation builds <code class="codeph">CertPath</code> objects in a forward direction using a depth-first algorithm. It backtracks to previous states and tries alternate paths when a potential path is determined to be invalid or exceeds the <code class="codeph">PKIXBuilderParameters</code> <code class="codeph">maxPathLength</code> parameter.</p>
<p>Validation of the path is performed in the same manner as the <code class="codeph">CertPathValidator</code> implementation. The implementation validates most of the path as it is being built, in order to eliminate invalid paths earlier in the process. Validation checks that cannot be executed on certificates ordered in a forward direction are delayed and executed on the path after it has been constructed (but before it is returned to the application).</p>
<p>As with <code class="codeph">CertPathValidator</code>, the <code class="codeph">jdk.certpath.disabledAlgorithms</code> Security Property can be used to exclude cryptographic algorithms that are not considered safe.</p>
<p>When two or more potential certificates are discovered that may lead to finding a path that meets the specified constraints, the implementation uses the following criteria to prioritize the certificates (in the examples below, assume a <code class="codeph">TrustAnchor</code> distinguished name of "ou=D,ou=C,o=B,c=A" is specified):</p>
<ol>
<li>The issuer DN of the certificate matches the DN of one of the specified <code class="codeph">TrustAnchor</code>s (ex: issuerDN = "ou=D,ou=C,o=B,c=A").</li>
<li>The issuer DN of the certificate is a descendant of the DN of one of the <code class="codeph">TrustAnchor</code>s, ordered by proximity to the anchor (ex: issuerDN = "ou=E,ou=D,ou=C,o=B,c=A").</li>
<li>The issuer DN of the certificate is an ancestor of the DN of one of the <code class="codeph">TrustAnchor</code>s, ordered by proximity to the anchor (ex: issuerDN = "ou=C,o=B,c=A".</li>
<li>The issuer DN of the certificate is in the same namespace of one of the <code class="codeph">TrustAnchor</code>s, ordered by proximity to the anchor (ex: issuerDN = "ou=G,ou=C,o=B,c=A").</li>
<li>The issuer DN of the certificate is an ancestor of the subject DN of the certificate, ordered by proximity to the subject.</li>
</ol>
<p>These are followed by certificates which don't meet any of the above criteria.</p>
<p>This implementation has been tested with the LDAP and Collection <code class="codeph">CertStore</code> implementations included in this release of the "SUN" provider.</p>
<p>Debugging support can be enabled by setting the <code class="codeph">java.security.debug</code> property to <code class="codeph">certpath</code>. For example:</p>
<pre class="codeblock" dir="ltr">
       java -Djava.security.debug=certpath BuildCertPath

</pre>
<p>This will print additional debugging information to standard error.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Collection CertStore</p>
<p>The SUN provider supports the Collection implementation of the <code class="codeph">CertStore</code> engine class.</p>
<p>The Collection <code class="codeph">CertStore</code> implementation can hold any objects that are an instance of <code class="codeph">java.security.cert.Certificate</code> or <code class="codeph">java.security.cert.CRL</code>.</p>
<p>The certificates and CRLs are not returned in any particular order and will not contain duplicates.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-EB250086-0AC1-4D60-AE2A-FC7461374746__SECTION-139-623E860E">
<p class="subhead2">Support for the CRL Distribution Points Extension</p>
<p>Support for the CRL Distribution Points extension is available. It is disabled by default for compatibility and can be enabled by setting the system property <code class="codeph">com.sun.security.enableCRLDP</code> to the value true.</p>
<p>If set to true, Sun's PKIX implementation uses the information in a certificate's CRL Distribution Points extension (in addition to <code class="codeph">CertStores</code> that are specified) to find the CRL, provided the distribution point is an X.500 distinguished name or a URI of type ldap, http, or ftp.</p>
<div class="infobox-note" id="GUID-EB250086-0AC1-4D60-AE2A-FC7461374746__GUID-04FA26C1-BD2F-49EA-AB41-4CDACEB64B54">
<p class="notep1">Note:</p>
Depending on your network and firewall setup, it may be necessary to also configure your networking proxy servers.</div>
</div>
<!-- class="section" -->
<div class="section" id="GUID-EB250086-0AC1-4D60-AE2A-FC7461374746__SECTION-1310-623E8D62">
<p class="subhead2">Support for the Authority Information Access (AIA) Extension</p>
<p>Support for the <code class="codeph">caIssuers</code> access method of the Authority Information Access extension is available. It is disabled by default for compatibility and can be enabled by setting the system property <code class="codeph">com.sun.security.enableAIAcaIssuers</code> to the value true.</p>
<p>If set to true, Sun's PKIX implementation of <code class="codeph">CertPathBuilder</code> uses the information in a certificate's AIA extension (in addition to CertStores that are specified) to find the issuing CA certificate, provided it is a URI of type ldap, http, or ftp.</p>
<div class="infobox-note" id="GUID-EB250086-0AC1-4D60-AE2A-FC7461374746__GUID-0073BEE2-F442-4AB2-96B8-353D0D92AE36">
<p class="notep1">Note:</p>
Depending on your network and firewall setup, it may be necessary to also configure your networking proxy servers.</div>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-E6E737DB-4000-4005-969E-BCD0238B1566"></a>
<h2 id="JSSEC-GUID-E6E737DB-4000-4005-969E-BCD0238B1566" class="sect2">Appendix C: OCSP Support</h2>
<div>
<p>Client-side support for the On-Line Certificate Status Protocol (OCSP) as defined in RFC 2560 is supported.</p>
<div class="section">OCSP checking is controlled by the following five Security Properties:
<div class="tblformal" id="GUID-E6E737DB-4000-4005-969E-BCD0238B1566__GUID-E342DEB0-ACE2-44DB-8E21-61EFDDA25D57">
<table class="cellalignment456" summary="The five Security Properties control the OCSP checking">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d127369e5170">Property Name</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d127369e5172">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5176" headers="d127369e5170"><code class="codeph">ocsp.enable</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5176 d127369e5172">This property's value is either true or false. If true, OCSP checking is enabled when doing certificate revocation checking; if false or not set, OCSP checking is disabled.</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5182" headers="d127369e5170"><code class="codeph">ocsp.responderURL</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5182 d127369e5172">This property's value is a URL that identifies the location of the OCSP responder. Here is an example
<pre class="codeblock" dir="ltr">
ocsp.responderURL=http://ocsp.example.net:80
</pre>
<p>By default, the location of the OCSP responder is determined implicitly from the certificate being validated. The property is used when the Authority Information Access extension (defined in RFC 5280) is absent from the certificate or when it requires overriding.</p>
</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5194" headers="d127369e5170"><code class="codeph">ocsp.responderCertSubjectName</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5194 d127369e5172">This property's value is the subject name of the OCSP responder's certificate. Here is an example
<pre class="codeblock" dir="ltr">
ocsp.responderCertSubjectName="CN=OCSP Responder, O=XYZ Corp"
</pre>
<p>By default, the certificate of the OCSP responder is that of the issuer of the certificate being validated. This property identifies the certificate of the OCSP responder when the default does not apply. Its value is a string distinguished name (defined in RFC 2253) which identifies a certificate in the set of certificates supplied during cert path validation. In cases where the subject name alone is not sufficient to uniquely identify the certificate, then both the <code class="codeph">ocsp.responderCertIssuerName</code> and <code class="codeph">ocsp.responderCertSerialNumber</code> properties must be used instead. When this property is set, then those two properties are ignored.</p>
</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5212" headers="d127369e5170"><code class="codeph">ocsp.responderCertIssuerName</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5212 d127369e5172">This property's value is the issuer name of the OCSP responder's certificate . Here is an example
<pre class="codeblock" dir="ltr">
ocsp.responderCertIssuerName="CN=Enterprise CA, O=XYZ Corp"
</pre>
<p>By default, the certificate of the OCSP responder is that of the issuer of the certificate being validated. This property identifies the certificate of the OCSP responder when the default does not apply. Its value is a string distinguished name (defined in RFC 2253) which identifies a certificate in the set of certificates supplied during cert path validation. When this property is set then the <code class="codeph">ocsp.responderCertSerialNumber</code> property must also be set. Note that this property is ignored when the <code class="codeph">ocsp.responderCertSubjectName</code> property has been set.</p>
</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5230" headers="d127369e5170"><code class="codeph">ocsp.responderCertSerialNumber</code></td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5230 d127369e5172">This property's value is the serial number of the OCSP responder's certificate Here is an example
<pre class="codeblock" dir="ltr">
ocsp.responderCertSerialNumber=2A:FF:00
</pre>
<p>By default, the certificate of the OCSP responder is that of the issuer of the certificate being validated. This property identifies the certificate of the OCSP responder when the default does not apply. Its value is a string of hexadecimal digits (colon or space separators may be present) which identifies a certificate in the set of certificates supplied during cert path validation. When this property is set then the <code class="codeph">ocsp.responderCertIssuerName</code> property must also be set. Note that this property is ignored when the <code class="codeph">ocsp.responderCertSubjectName</code> property has been set.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>These properties may be set either statically in the Java runtime's <code>&lt;java_home&gt;/conf/security/java.security</code> file, or dynamically using the <span class="apiname">java.security.Security.setProperty()</span> method.</p>
<p>By default, OCSP checking is not enabled. It is enabled by setting the <code class="codeph">ocsp.enable</code> property to <code class="codeph">"true"</code>. Use of the remaining properties is optional. Note that enabling OCSP checking only has an effect if revocation checking has also been enabled. Revocation checking is enabled via the <span class="apiname">PKIXParameters.setRevocationEnabled()</span> method.</p>
<p>OCSP checking works in conjunction with Certificate Revocation Lists (CRLs) during revocation checking. Below is a summary of the interaction of OCSP and CRLs. Failover to CRLs occurs only if an OCSP problem is encountered. Failover does not occur if the OCSP responder confirms either that the certificate has been revoked or that it has not been revoked.</p>
<div class="tblformal" id="GUID-E6E737DB-4000-4005-969E-BCD0238B1566__GUID-923086ED-0588-4942-882E-B5A4E1809341">
<table class="cellalignment456" summary="Summary of the interaction of OCSP and CRLs.">
<thead>
<tr class="cellalignment447">
<th class="cellalignment457" rowspan="1" colspan="1" id="d127369e5277">PKIXParameters RevocationEnabled (default=true)</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d127369e5279"><code class="codeph">ocsp.enable</code> (default=false)</th>
<th class="cellalignment457" rowspan="1" colspan="1" id="d127369e5283">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5287" headers="d127369e5277">true</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5287 d127369e5279">true</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5287 d127369e5283">Revocation checking using OCSP, failover to using CRLs</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5294" headers="d127369e5277">true</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5294 d127369e5279">false</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5294 d127369e5283">Revocation checking using CRLs only</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5301" headers="d127369e5277">false</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5301 d127369e5279">true</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5301 d127369e5283">No revocation checking</td>
</tr>
<tr class="cellalignment447">
<td class="cellalignment447" rowspan="1" colspan="1" id="d127369e5308" headers="d127369e5277">false</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5308 d127369e5279">false</td>
<td class="cellalignment447" rowspan="1" colspan="1" headers="d127369e5308 d127369e5283">No revocation checking</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-FF62B0E3-E57A-4F40-970A-0481AF750CCD"></a>
<h2 id="JSSEC-GUID-FF62B0E3-E57A-4F40-970A-0481AF750CCD" class="sect2">Appendix D: CertPath Implementation in JdkLDAP Provider</h2>
<div>
<p>The JdkLDAP provider supports the LDAP implementation of the <code class="codeph">CertStore</code> engine class.</p>
<div class="section">
<p class="subhead2">LDAP CertStore</p>
<p>The LDAP <code class="codeph">CertStore</code> implementation retrieves certificates and CRLs from an LDAP directory using the LDAP schema defined in <a href="http://www.ietf.org/rfc/rfc2587.txt" target="_blank">RFC 2587</a>.</p>
<p>The LDAPSchema service attribute is set to "RFC2587".</p>
<p>The implementation fetches certificates from different locations, depending on the values of the subject, issuer, and basicConstraints selection criteria specified in the <code class="codeph">X509CertSelector</code>. It performs as many of the following operations as possible:</p>
<ol>
<li>Subject non-null, basicConstraints &lt;= -1
<p>Looks for certificates in the subject DN's "userCertificate" attribute.</p>
</li>
<li>Subject non-null, basicConstraints &gt;= -1
<p>Looks for certificates in the forward element of the subject DN's "crossCertificatePair" attribute AND in the subject's "caCertificate" attribute.</p>
</li>
<li>Issuer non-null, basicConstraints &gt;= -1
<p>Looks for certificates in the reverse element of the issuer DN's "crossCertificatePair" attribute AND in the issuer DN's "caCertificate" attribute.</p>
</li>
</ol>
<p>In each case, certificates are checked using <span class="apiname">X509CertSelector.match()</span> before adding them to the resulting collection.</p>
<p>If none of the conditions specified above applies, then an exception is thrown to indicate that it was impossible to fetch certificates using the criteria supplied. Note that even if one or more of the conditions apply, the Collection returned may still be empty if there are no certificates in the directory.</p>
<p>The implementation fetches CRLs from the issuer DNs specified in the <span class="apiname">setCertificateChecking</span>, <span class="apiname">addIssuerName</span> or <span class="apiname">setIssuerNames</span> methods of the <code class="codeph">X509CRLSelector</code> class. If no issuer DNs have been specified using one of these methods, the implementation throws an exception indicating it was impossible to fetch CRLs using the criteria supplied. Otherwise, the CRLs are searched as follows:</p>
<ol>
<li>
<p>The implementation first creates a list of issuer names. If a certificate was specified in the <span class="apiname">setCertificateChecking</span> method, it uses the issuer of that certificate. Otherwise, it uses the issuer names specified using the <span class="apiname">addIssuerName</span> or <span class="apiname">setIssuerNames</span> methods.</p>
</li>
<li>
<p>Next, the implementation iterates through the list of issuer names. For each issuer name, it searches first in the issuer's <code class="codeph">"authorityRevocationList"</code> attribute and then, if no matching CRL was found there, in the issuer's <code class="codeph">"certificateRevocationList"</code> attribute. One exception to the above is that if the issuer name was obtained from the certificate specified in the <span class="apiname">setCertificateChecking</span> method, it only checks the issuer's <code class="codeph">"authorityRevocationList"</code> attribute if the specified certificate is a CA certificate.</p>
</li>
<li>
<p>All CRLs are checked using <span class="apiname">X509CRLSelector.match()</span> before adding them to the resulting collection.</p>
</li>
<li>
<p>If no CRLs satisfying the selection criteria can be found, an empty Collection is returned.</p>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Caching</p>
<p>By default each LDAP CertStore instance caches lookups for a maximum of 30 seconds. The cache lifetime can be changed by setting the system property <code class="codeph">sun.security.certpath.ldap.cache.lifetime</code> to a value in seconds. A value of <code class="codeph">0</code> disables the cache completely. A value of <code class="codeph">-1</code> means unlimited lifetime.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3"></a>
<h2 id="JSSEC-GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3" class="sect2">Appendix E: Disabling Cryptographic Algorithms</h2>
<div>
<p>The <code class="codeph">jdk.certpath.disabledAlgorithms</code> Security Property contains a list of cryptographic algorithms and key size constraints that are considered weak or broken. Certificates and other data (CRLs, OCSPResponses) containing any of these algorithms or key sizes will be blocked during certification path building and validation. This property is used by Oracle's PKIX implementation, other implementations might not examine and use it.</p>
<div class="section" id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3__THEEXACTSYNTAXOFTHEJDK.CERTPATH.DIS-E836920C">
<div class="p">The exact syntax of the <code class="codeph">jdk.certpath.disabledAlgorithms</code> property is described in the <code>java.security</code> file. In Java SE 9, the default value of the property is:
<pre dir="ltr">
jdk.certpath.disabledAlgorithms=MD2, MD5, SHA1 jdkCA &amp; usage TLSServer, \
    RSA keySize &lt; 1024, DSA keySize &lt; 1024, EC keySize &lt; 224
</pre></div>
<div class="p">In this syntax:
<dl>
<dt class="dlterm"><a id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3__GUID-B0501142-4173-4B89-BCAB-258A16642B90"><!-- --></a>MD2</dt>
<dd>Any MD2-based algorithm will be blocked.
<p>For example, a certificate, CRL, or OCSPResponse signed with an MD2withRSA signature algorithm.</p>
</dd>
<dt class="dlterm"><a id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3__GUID-B88364D6-A8F1-4647-89E9-254574E7A6CF"><!-- --></a>MD5</dt>
<dd>Any MD5-based algorithm will be blocked.
<p>For example, a certificate, CRL, or OCSPResponse signed with an MD5withRSA signature algorithm.</p>
</dd>
<dt class="dlterm"><a id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3__GUID-BBF5D821-1F96-4B27-8790-1C16DE97E2A0"><!-- --></a>SHA1 jdkCA &amp; usage TLSServer</dt>
<dd>All SHA1 certificates that chain to trust anchors pre-installed in the cacerts keystore and that are used for authentication of TLS Servers. See <a href="http://openjdk.java.net/jeps/288" target="_blank">JEP 288</a>.</dd>
<dt class="dlterm"><a id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3__GUID-0277D5D2-7B44-497A-8326-E03E7308FEF8"><!-- --></a>RSA keySize &lt; 1024</dt>
<dd>Any RSA key less than 1024 bits will be blocked.
<p>For example, a certificate with a 768-bit RSA public key.</p>
</dd>
<dt class="dlterm"><a id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3__GUID-D46E89B2-3499-4AA3-9722-B052D8DCA85E"><!-- --></a>DSA keySize &lt; 1024</dt>
<dd>Any DSA key less than 1024 bits will be blocked.
<p>For example, a certificate with a 512-bit DSA public key.</p>
</dd>
<dt class="dlterm"><a id="GUID-D2A99DE3-62CF-4E4B-BF91-814C4A5C4DD3__GUID-D354B4DE-FA31-45F3-97D4-0B50CE4E7122"><!-- --></a>EC keySize &lt; 224</dt>
<dd>Any EC key less than 224 bits will be blocked.
<p>For example, a certificate with a 160-bit EC public key.</p>
</dd>
</dl>
</div>
<p>Administrators or users can modify the value of the <code class="codeph">jdk.certpath.disabledAlgorithms</code> property to address additional security requirements. However, removing any of the current algorithms or key sizes is not recommended.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment446">
<tr>
<td class="cellalignment453">
<table class="cellalignment451">
<tr>
<td class="cellalignment450"><a href="java-secure-socket-extension-jsse-reference-guide.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment450"><a href="introduction-java-sasl-api.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment455">
<table class="cellalignment449">
<tr>
<td class="cellalignment450"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment450"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment450"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
