<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Garbage Collector Implementation</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="One strength of the Java SE platform is that it shields the developer from the complexity of memory allocation and garbage collection." />
<meta name="dcterms.created" content="2017-10-11T21:49:04Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide" />
<meta name="dcterms.identifier" content="E76294-05" />
<meta name="dcterms.isVersionOf" content="JSGCT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2014, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="ergonomics.htm" title="Previous" type="text/html" />
<link rel="Next" href="factors-affecting-garbage-collection-performance.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSGCT.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSGCT.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSGCT.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-23844E39-7499-400C-A579-032B68E53073"></a> <span id="PAGE" style="display:none;">6/14</span> <!-- End Header -->
<h1 id="JSGCT-GUID-23844E39-7499-400C-A579-032B68E53073" class="sect1"><span class="enumeration_chapter">3</span> Garbage Collector Implementation</h1>
<div>
<p>One strength of the Java SE platform is that it shields the developer from the complexity of memory allocation and garbage collection.</p>
<p>However, when garbage collection is the principal bottleneck, it's useful to understand some aspects of the implementation. Garbage collectors make assumptions about the way applications use objects, and these are reflected in tunable parameters that can be adjusted for improved performance without sacrificing the power of the abstraction.</p>
<div class="section">
<p class="subhead1">Topics</p>
<ul style="list-style-type: disc;">
<li><a href="garbage-collector-implementation.htm#GUID-71D796B3-CBAB-4D80-B5C3-2620E45F6E5D" title="An object is considered garbage and its memory can be reused by the VM when it can no longer be reached from any reference of any other live object in the running program.">Generational Garbage Collection</a></li>
<li><a href="garbage-collector-implementation.htm#GUID-16166ED9-32C6-402D-BB22-FD85BCB04E57" title="To optimize for this scenario, memory is managed in generations (memory pools holding objects of different ages). Garbage collection occurs in each generation when the generation fills up.">Generations</a></li>
<li><a href="garbage-collector-implementation.htm#GUID-C2CA24AD-DC01-4B31-A868-F7DAC7E3BF4D" title="The primary measures of garbage collection are throughput and latency.">Performance Considerations</a></li>
<li><a href="garbage-collector-implementation.htm#GUID-A24775AB-16A3-4B86-9963-76E5AC398A3E" title="Throughput and footprint are best measured using metrics particular to the application.">Throughput and Footprint Measurement</a></li>
</ul>
</div>
<!-- class="section" --></div>
<div class="props_rev_3"><a id="GUID-71D796B3-CBAB-4D80-B5C3-2620E45F6E5D"></a>
<h2 id="JSGCT-GUID-71D796B3-CBAB-4D80-B5C3-2620E45F6E5D" class="sect2">Generational Garbage Collection</h2>
<div>
<p>An object is considered garbage and its memory can be reused by the VM when it can no longer be reached from any reference of any other live object in the running program.</p>
<p>A theoretical, most straightforward garbage collection algorithm iterates over every reachable object every time it runs. Any leftover objects are considered garbage. The time this approach takes is proportional to the number of live objects, which is prohibitive for large applications maintaining lots of live data.</p>
<p>The Java HotSpot VM incorporates a number of different garbage collection algorithms that all use a technique called <span class="variable">generational collection</span>. While naive garbage collection examines every live object in the heap every time, generational collection exploits several empirically observed properties of most applications to minimize the work required to reclaim unused (garbage) objects. The most important of these observed properties is the <span class="variable">weak generational hypothesis</span>, which states that most objects survive for only a short period of time.</p>
<p>The blue area in <a href="garbage-collector-implementation.htm#GUID-71D796B3-CBAB-4D80-B5C3-2620E45F6E5D__DISTRIBUTION_LIFETIMES">Figure 3-1</a> is a typical distribution for the lifetimes of objects. The x-axis shows object lifetimes measured in bytes allocated. The byte count on the y-axis is the total bytes in objects with the corresponding lifetime. The sharp peak at the left represents objects that can be reclaimed (in other words, have "died") shortly after being allocated. For example, <code class="codeph">iterator</code> objects are often only alive for the duration of a single loop.</p>
<div class="figure" id="GUID-71D796B3-CBAB-4D80-B5C3-2620E45F6E5D__DISTRIBUTION_LIFETIMES">
<p class="titleinfigure">Figure 3-1 Typical Distribution for Lifetimes of Objects</p>
<img width="543" height="356" src="img/jsgct_dt_003_alc_vs_srvng.png" alt="Description of Figure 3-1 follows" title="Description of Figure 3-1 follows" /><br />
<a href="img_text/jsgct_dt_003_alc_vs_srvng.htm">Description of "Figure 3-1 Typical Distribution for Lifetimes of Objects"</a></div>
<!-- class="figure" -->
<p>Some objects do live longer, and so the distribution stretches out to the right. For instance, there are typically some objects allocated at initialization that live until the VM exits. Between these two extremes are objects that live for the duration of some intermediate computation, seen here as the lump to the right of the initial peak. Some applications have very different looking distributions, but a surprisingly large number possess this general shape. Efficient collection is made possible by focusing on the fact that a majority of objects "die young."</p>
</div>
</div>
<div class="props_rev_3"><a id="GUID-16166ED9-32C6-402D-BB22-FD85BCB04E57"></a>
<h2 id="JSGCT-GUID-16166ED9-32C6-402D-BB22-FD85BCB04E57" class="sect2">Generations</h2>
<div>
<p>To optimize for this scenario, memory is managed in <span class="italic">generations</span> (memory pools holding objects of different ages). Garbage collection occurs in each generation when the generation fills up.</p>
<p>The vast majority of objects are allocated in a pool dedicated to young objects (the <span class="italic">young generation</span>), and most objects die there. When the young generation fills up, it causes a <span class="italic">minor collection</span> in which only the young generation is collected; garbage in other generations isn't reclaimed. The costs of such collections are, to the first order, proportional to the number of live objects being collected; a young generation full of dead objects is collected very quickly. Typically, some fraction of the surviving objects from the young generation are moved to the <span class="italic">old generation</span> during each minor collection. Eventually, the old generation fills up and must be collected, resulting in a <span class="italic">major collection</span>, in which the entire heap is collected. Major collections usually last much longer than minor collections because a significantly larger number of objects are involved. <a href="garbage-collector-implementation.htm#GUID-16166ED9-32C6-402D-BB22-FD85BCB04E57__DEFAULT_ARRANGEMENT_GEN">Figure 3-2</a> shows the default arrangement of generations in the serial garbage collector:</p>
<div class="figure" id="GUID-16166ED9-32C6-402D-BB22-FD85BCB04E57__DEFAULT_ARRANGEMENT_GEN">
<p class="titleinfigure">Figure 3-2 Default Arrangement of Generations in the Serial Collector</p>
<img width="456" height="125" src="img/jsgct_dt_001_armgnt_gn_new.png" alt="Description of Figure 3-2 follows" title="Description of Figure 3-2 follows" /><br />
<a href="img_text/jsgct_dt_001_armgnt_gn_new.htm">Description of "Figure 3-2 Default Arrangement of Generations in the Serial Collector"</a></div>
<!-- class="figure" -->
<p>At startup, the Java HotSpot VM reserves the entire Java heap in the address space, but doesn't allocate any physical memory for it unless needed. The entire address space covering the Java heap is logically divided into young and old generations. The complete address space reserved for object memory can be divided into the young and old generations.</p>
<p>The young generation consists of eden and two survivor spaces. Most objects are initially allocated in eden. One survivor space is empty at any time, and serves as the destination of live objects in eden and the other survivor space during garbage collection; after garbage collection, eden and the source survivor space are empty. In the next garbage collection, the purpose of the two survivor spaces are exchanged. The one space recently filled is a source of live objects that are copied into the other survivor space. Objects are copied between survivor spaces in this way until they've been copied a certain number of times or there isn't enough space left there. These objects are copied into the old region. This process is also called <span class="italic">aging</span>.</p>
</div>
</div>
<div class="props_rev_3"><a id="GUID-C2CA24AD-DC01-4B31-A868-F7DAC7E3BF4D"></a>
<h2 id="JSGCT-GUID-C2CA24AD-DC01-4B31-A868-F7DAC7E3BF4D" class="sect2">Performance Considerations</h2>
<div>
<p>The primary measures of garbage collection are throughput and latency.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">Throughput</span> is the percentage of total time not spent in garbage collection considered over long periods of time. Throughput includes time spent in allocation (but tuning for speed of allocation generally isn't needed).</p>
</li>
<li>
<p><span class="italic">Latency</span> is the responsiveness of an application. Garbage collection pauses affect the responsiveness of applications.</p>
</li>
</ul>
<p>Users have different requirements of garbage collection. For example, some consider the right metric for a web server to be throughput because pauses during garbage collection may be tolerable or simply obscured by network latencies. However, in an interactive graphics program, even short pauses may negatively affect the user experience.</p>
<p>Some users are sensitive to other considerations. <span class="italic">Footprint</span> is the working set of a process, measured in pages and cache lines. On systems with limited physical memory or many processes, footprint may dictate scalability. <span class="italic">Promptness</span> is the time between when an object becomes dead and when the memory becomes available, an important consideration for distributed systems, including Remote Method Invocation (RMI).</p>
<p>In general, choosing the size for a particular generation is a trade-off between these considerations. For example, a very large young generation may maximize throughput, but does so at the expense of footprint, promptness, and pause times. Young generation pauses can be minimized by using a small young generation at the expense of throughput. The sizing of one generation doesn't affect the collection frequency and pause times for another generation.</p>
<p>There is no one right way to choose the size of a generation. The best choice is determined by the way the application uses memory as well as user requirements. Thus the virtual machine's choice of a garbage collector isn't always optimal and may be overridden with command-line options; see <a href="factors-affecting-garbage-collection-performance.htm#GUID-5508674B-F32D-4B02-9002-D0D8C7CDDC75" title="The two most important factors affecting garbage collection performance are total available memory and proportion of the heap dedicated to the young generation.">Factors Affecting Garbage Collection Performance</a>.</p>
</div>
</div>
<div class="props_rev_3"><a id="GUID-A24775AB-16A3-4B86-9963-76E5AC398A3E"></a>
<h2 id="JSGCT-GUID-A24775AB-16A3-4B86-9963-76E5AC398A3E" class="sect2">Throughput and Footprint Measurement</h2>
<div>
<p>Throughput and footprint are best measured using metrics particular to the application.</p>
<p>For example, the throughput of a web server may be tested using a client load generator, whereas the footprint of the server may be measured on the Solaris operating system using the <code class="codeph">pmap</code> command. However, pauses due to garbage collection are easily estimated by inspecting the diagnostic output of the virtual machine itself.</p>
<p>The command-line option <code class="codeph">-verbose:gc</code> prints information about the heap and garbage collection at each collection. Here is an example:</p>
<pre dir="ltr">
[15,651s][info ][gc] GC(36) Pause Young (G1 Evacuation Pause) 239M-&gt;57M(307M) (15,646s, 15,651s) 5,048ms
[16,162s][info ][gc] GC(37) Pause Young (G1 Evacuation Pause) 238M-&gt;57M(307M) (16,146s, 16,162s) 16,565ms
[16,367s][info ][gc] GC(38) Pause Full (System.gc()) 69M-&gt;31M(104M) (16,202s, 16,367s) 164,581ms
</pre>
<p>The output shows two young collections followed by a full collection that was initiated by the application with a call to <code class="codeph">System.gc()</code>. The lines start with a time stamp indicating the time from when the application was started. Next comes information about the log level (info) and tag (gc) for this line. This is followed by a GC identification number. In this case, there are three GCs with the numbers 36, 37, and 38. Then the type of GC and the cause for stating the GC is logged. After this, some information about the memory consumption is logged. That log uses the format "used before GC" -&gt; "used after GC" ("heap size").</p>
<p>In the first line of the example this is 239M-&gt;57M(307M), which means that 239 MB were used before the GC and the GC cleared up most of that memory, but 57 MB survived. The heap size is 307 MB. Note in this example that the full GC shrinks the heap from 307 MB to 104 MB. After the memory usage information, the start and end times for the GC are logged as well as the duration (end - start).</p>
<p>The <code class="codeph">-verbose:gc</code> command is an alias for <code class="codeph">-Xlog:gc</code>. <code class="codeph">-Xlog</code> is the general logging configuration option for logging in the HotSpot JVM. It's a tag-based system where <code class="codeph">gc</code> is one of the tags. To get more information about what a GC is doing, you can configure logging to print any message that has the <code class="codeph">gc</code> tag and any other tag. The command line option for this is <code class="codeph">-Xlog:gc*</code>.</p>
<p>Here's an example of one G1 young collection logged with <code class="codeph">-Xlog:gc*</code> :</p>
<pre dir="ltr">
[10.178s][info][gc,start ] GC(36) Pause Young (G1 Evacuation Pause) 
[10.178s][info][gc,task ] GC(36) Using 28 workers of 28 for evacuation 
[10.191s][info][gc,phases ] GC(36) Pre Evacuate Collection Set: 0.0ms
[10.191s][info][gc,phases ] GC(36) Evacuate Collection Set: 6.9ms 
[10.191s][info][gc,phases ] GC(36) Post Evacuate Collection Set: 5.9ms 
[10.191s][info][gc,phases ] GC(36) Other: 0.2ms 
[10.191s][info][gc,heap ] GC(36) Eden regions: 286-&gt;0(276) 
[10.191s][info][gc,heap ] GC(36) Survivor regions: 15-&gt;26(38)
[10.191s][info][gc,heap ] GC(36) Old regions: 88-&gt;88 
[10.191s][info][gc,heap ] GC(36) Humongous regions: 3-&gt;1 
[10.191s][info][gc,metaspace ] GC(36) Metaspace: 8152K-&gt;8152K(1056768K)
[10.191s][info][gc ] GC(36) Pause Young (G1 Evacuation Pause) 391M-&gt;114M(508M) 13.075ms 
[10.191s][info][gc,cpu ] GC(36) User=0.20s Sys=0.00s Real=0.01s
</pre>
<div class="infobox-note" id="GUID-A24775AB-16A3-4B86-9963-76E5AC398A3E__GUID-E8F29322-FCA8-4F68-AE8E-F05CED0DD900">
<p class="notep1">Note:</p>
The format of the output produced by <code class="codeph">-Xlog:gc*</code> is subject to change in future releases.</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment56">
<tr>
<td class="cellalignment68">
<table class="cellalignment61">
<tr>
<td class="cellalignment60"><a href="ergonomics.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment60"><a href="factors-affecting-garbage-collection-performance.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2014, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment70">
<table class="cellalignment59">
<tr>
<td class="cellalignment60"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment60"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment60"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
