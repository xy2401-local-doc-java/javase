<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Java 2D Pipeline Rendering and Properties</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This chapter provides information and guidance for troubleshooting some of the most common issues that might be found in the Java 2D API when changing pipeline rendering and properties." />
<meta name="dcterms.created" content="2017-10-12T11:32:58Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Troubleshooting Guide" />
<meta name="dcterms.identifier" content="E61074-05" />
<meta name="dcterms.isVersionOf" content="JSTGD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1995, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="awt.htm" title="Previous" type="text/html" />
<link rel="Next" href="java-2d.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSTGD.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSTGD.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSTGD.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-DEA4F3FC-87F5-4196-A295-30A559982B10"></a> <span id="PAGE" style="display:none;">18/31</span> <!-- End Header -->
<a id="JSTGD429"></a><a id="JSTGD428"></a>
<h1 id="JSTGD-GUID-DEA4F3FC-87F5-4196-A295-30A559982B10" class="sect1"><span class="enumeration_chapter">11</span> Java 2D Pipeline Rendering and Properties</h1>
<div>
<div><span>This chapter provides information and guidance for troubleshooting some of the most common issues that might be found in the Java 2D API when changing pipeline rendering and properties.</span></div>
<p>For a summary of Java 2D properties, see <a href="java-2d-properties.htm#GUID-2DC38ED7-7F26-4489-B3B5-C3B0B31E2786" title="This appendix presents properties that can be useful in troubleshooting Java 2D.">Java 2D Properties</a>.</p>
<p>By choosing a different pipeline, or manipulating the properties of a pipeline, you might be able to determine the cause of the problem, and often find a workaround.</p>
<p>In general, you can troubleshoot Java 2D pipeline issues by determining the default pipeline used in your configuration. Then, either change the pipeline to another one, or modify the properties of the default pipeline.</p>
<p>If the problem disappears, then you found a workaround. If the problem persists, then try changing another property or pipeline.</p>
<p>Java 2D uses a set of pipelines, which can be roughly defined as different ways of rendering the primitives. These pipelines are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-EAB91B4A-7486-4733-B6BB-76A52B88DEA8" title='On UNIX platforms, the default pipeline is the X11 pipeline. This pipeline uses the X protocol for rendering to the screen or to certain types of offscreen images, such as VolatileImages, or "compatible" images (images that are created with the GraphicsConfiguration.createCompatibleImage() method).'>Oracle Solaris and Linux: X11 Pipeline</a>is the default for the Oracle Solaris and Linux operating systems.</p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-AAB8CC86-652B-4A78-83EB-CDC3F5677A48" title="The default pipeline on the Windows platform is a mixture of the DirectDraw pipeline and the GDI pipeline, where some operations are performed with the DirectDraw pipeline and others with the GDI pipeline. DirectDraw and GDI APIs are used for rendering to accelerated offscreen and onscreen surfaces.">Windows OS - DirectDraw/GDI Pipeline</a> is the default on Windows</p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-69652947-7E96-454C-81CB-70703A539183" title="Starting with the Java SE 6 release, the Direct3D pipeline uses the Direct3D API for rendering. This pipeline is enabled in full-screen mode by default, if the drivers support the required features and the level of rendering quality.">Windows OS - Direct3D Pipeline in Full-Screen Mode</a> is an alternative on Windows.</p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-EDA6609A-F395-4D29-A0B7-89A5D966FDE8" title="The OpenGL pipeline is available on Oracle Solaris, Linux, and Windows.">OpenGL Pipeline in Oracle Solaris, Linux, and Windows</a>is an alternative on the Oracle Solaris and Linux operating systems, as well as Windows.</p>
</li>
</ul>
</div>
<a id="JSTGD430"></a>
<div class="props_rev_3"><a id="GUID-EAB91B4A-7486-4733-B6BB-76A52B88DEA8"></a>
<h2 id="JSTGD-GUID-EAB91B4A-7486-4733-B6BB-76A52B88DEA8" class="sect2">Oracle Solaris and Linux: X11 Pipeline</h2>
<div>
<p>On UNIX platforms, the default pipeline is the X11 pipeline. This pipeline uses the X protocol for rendering to the screen or to certain types of offscreen images, such as <code class="codeph">VolatileImages</code>, or "compatible" images (images that are created with the <span class="apiname">GraphicsConfiguration.createCompatibleImage()</span> method).</p>
<p>These types of images can be put into X11 pixmaps for improved performance, especially in the case of the Remote X server.</p>
<p>In addition, in certain cases, Java 2D uses X server extensions, for example, the MIT X shared memory extension, or Direct Graphics Access extension, Double-buffer extension for double-buffering when using the <code class="codeph">BufferStrategy</code> API.</p>
<p>An additional pipeline, the OpenGL pipeline, might offer greater performance in some configurations.</p>
<p>The following are X11 pipeline properties to troubleshoot.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-FCAC0C5C-9593-4517-8253-AFEC77339B53" title="Java 2D by default uses X11 pixmaps for storing or caching certain types of offscreen images.">X11 Pipeline Pixmaps Properties</a></p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-BD0B8E92-20D7-444B-AA09-40FE803A3D8D" title="The Java 2D X11 pipeline uses the MIT Shared Memory Extension (MIT SHM), which allows a faster exchange of data between the client and the X server. This can significantly improve the performance of Java applications.">X11 Pipeline MIT Shared Memory Extension</a></p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-52A1657B-969D-4964-A50F-D9C5C807A8B1" title="On SPARC hardware, if the framebuffer supports Sun's Direct Graphics Access (DGA) X server extension, and Java 2D has a corresponding module for accessing the framebuffer, then DGA will be used for rendering to the screen.">Oracle Solaris on SPARC: DGA Support</a></p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-2285F767-9EF1-4739-AF9A-FDA6AB6BB276" title="On certain video boards on the SPARC platform, more than one visual can be available from the X server.">Oracle Solaris on SPARC - Change Java 2D Default Visual</a></p>
</li>
</ul>
</div>
<a id="JSTGD431"></a>
<div class="props_rev_3"><a id="GUID-FCAC0C5C-9593-4517-8253-AFEC77339B53"></a>
<h3 id="JSTGD-GUID-FCAC0C5C-9593-4517-8253-AFEC77339B53" class="sect3">X11 Pipeline Pixmaps Properties</h3>
<div>
<p>Java 2D by default uses X11 pixmaps for storing or caching certain types of offscreen images.</p>
<div class="section">
<p>Only the following types of images can be stored in pixmaps:</p>
<ul style="list-style-type: disc;">
<li>
<p>Opaque images, in which case <span class="apiname">ColorModel.getTransparency()</span> returns <code class="codeph">Transparency.OPAQUE</code></p>
</li>
<li>
<p>1-bit transparent images (also known as sprites, <code class="codeph">Transparency.BITMASK</code>)</p>
</li>
</ul>
<p>The advantage of using pixmaps for storing images is that they can be put into the framebuffer's video memory at the driver's discretion, which improves the speed at which these pixmaps can be copied to the screen or another pixmap.</p>
<p>The use of pixmaps typically results in better performance. However, in certain cases, the opposite is true. These cases typically involve the use of operations that cannot be performed using the X protocol, such as antialiasing, alpha compositing, and transforms that are more complex than simple translation transforms.</p>
<p>For these operations, the X11 pipeline must do the rendering using the built-in software renderer. In most cases, this includes reading the contents of the pixmap to system memory (over the network in the case of remote X server), performing the rendering, and then sending the pixels back to the pixmap. These operations could result in extremely poor performance, especially if the X server is remote.</p>
</div>
<!-- class="section" -->
<div class="section">
<p>The following are two cases to disable the use of X11 pipeline:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Disable X11 pipeline pixmaps</span>:</p>
<p>To disable the use of pixmaps by Java2D, pass the following property to the Java VM: <code>-Dsun.java2d.pmoffscreen=false</code>.</p>
</li>
<li>
<p><span class="bold">Disable X11 pipeline shared memory pixmaps:</span></p>
<div class="p">To minimize the effect of operations that require reading pixels from a pixmap on overall performance, the X11 pipeline uses shared memory pixmaps for storing images that are often read from.
<div class="infobox-note" id="GUID-FCAC0C5C-9593-4517-8253-AFEC77339B53__GUID-60922B47-9974-400F-9828-B6687E368024">
<p class="notep1">Note:</p>
The shared memory pixmaps can only be used in the case of a local X server.</div>
</div>
<p>The advantage of using shared memory pixmaps is that the pipeline can get direct access to the pixels in the pipeline bypassing the X11 protocol, which results in better performance.</p>
<p>By default, an image is stored in a normal X server pixmap, but it can be later moved to a shared memory pixmap if the pipeline detects excessive reading from such an image. The image can be moved back to a server pixmap if it is copied from often enough.</p>
<p>The pipeline allows two ways of controlling the use of shared memory pixmaps: either disabling them or forcing all images to be stored in shared memory pixmaps.</p>
<div class="p">First, try forcing the shared memory pixmaps because it often improves performance. However, with certain video board/driver configurations, it may be necessary to disable the shared memory pixmaps to avoid rendering artifacts or crashes.
<ul style="list-style-type: disc;">
<li>
<p>To disable shared memory pixmaps, set the <code class="codeph">J2D_PIXMAPS</code> environment variable to <code class="codeph">server</code>. This is the default in remote X server case.</p>
</li>
<li>
<p>To force all pixmaps to be created in shared memory, set <code class="codeph">J2D_PIXMAPS</code> to <code class="codeph">shared</code>.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD432"></a>
<div class="props_rev_3"><a id="GUID-BD0B8E92-20D7-444B-AA09-40FE803A3D8D"></a>
<h3 id="JSTGD-GUID-BD0B8E92-20D7-444B-AA09-40FE803A3D8D" class="sect3">X11 Pipeline MIT Shared Memory Extension</h3>
<div>
<p>The Java 2D X11 pipeline uses the MIT Shared Memory Extension (MIT SHM), which allows a faster exchange of data between the client and the X server. This can significantly improve the performance of Java applications.</p>
<div class="section">
<p>The following are two ways to improve the performance of the Java application.</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span><span class="bold">Increase X Server and Java 2D shared memory:</span></span>
<div>
<p>On the Oracle Solaris operating system releases 8 and earlier, it was sometimes necessary to increase the amount of shared memory available to the system (and to X server in particular) because the default was too low, resulting in poor rendering performance. Increasing the amount of shared memory and shared memory segments can result in better performance.</p>
<p>To change the default settings on the Oracle Solaris operating system, edit the <code class="codeph">/etc/</code> system file and change the <code class="codeph">shmsys:shminfo_*</code> settings, as shown in the following example. Note that this is not needed on Oracle Solaris 9 and later.</p>
<pre dir="ltr">
set shmsys:shminfo_shmmax=10000000
set shmsys:shminfo_shmni=200
set shmsys:shminfo_shminfo=150
</pre>
<p>On Linux, this setting can be configured by editing the <code>/proc/sys/kernel/shm*</code> files.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Disable X11 pipeline shared memory extension:</span></span>
<div>
<p>In case of problems (such as crashes, or rendering artifacts) with older X servers and the Shared Memory Extension, it is useful to be able to disable the extension. To disable the use of MIT SHM, set the <code class="codeph">J2D_USE_MITSHM</code> environment variable to <code class="codeph">false</code>.</p>
</div>
</li>
</ul>
</div>
</div>
<a id="JSTGD434"></a>
<div class="props_rev_3"><a id="GUID-52A1657B-969D-4964-A50F-D9C5C807A8B1"></a>
<h3 id="JSTGD-GUID-52A1657B-969D-4964-A50F-D9C5C807A8B1" class="sect3">Oracle Solaris on SPARC: DGA Support</h3>
<div>
<p>On SPARC hardware, if the framebuffer supports Sun's Direct Graphics Access (DGA) X server extension, and Java 2D has a corresponding module for accessing the framebuffer, then DGA will be used for rendering to the screen.</p>
<div class="section">
<p>All offscreen images will reside in Java heap memory, and Java 2D's software-only rendering pipeline is used for rendering to them. This is different from a typical UNIX configuration, where X11 pixmaps are used for offscreen images.</p>
<p>The following are use cases that describe how to detect DGA extension support and disable or enable DGA:</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span><span class="bold">DGA extension for rending</span></span>
<div>
<p>To detect if the DGA extension is used for rendering to the screen, run any Java application that does some rendering or displays a GUI, and check if a <code>/tmp/wg*</code> file was created when the application started. Exit the application and verify that the file was deleted. If this is the case, then on this system, Java 2D is using DGA.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Typical DGA Issues:</span></span>
<div>
<p>Because DGA allows direct access to the framebuffer's video memory, the typical problems include corruption outside of window bounds, complete system, and X server lock-ups.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Enable or Disable DGA:</span></span>
<div>
<p>If you determine that DGA is being used, the first thing to try is to disable it. This can be done by setting the <code class="codeph">NO_J2D_DGA</code> environment variable to <code class="codeph">true</code>. This forces the default UNIX path to use only X11 for rendering to the screen, and pixmaps for accelerating offscreen images.</p>
<p>Sometimes, it could be beneficial to enable the use of pixmaps, while also using DGA for rendering to the screen. To force the use of pixmaps for accelerating offscreen images, set the following property when starting the application: <code>-Dsun.java2d.pmoffscreen=true</code>.</p>
</div>
</li>
</ul>
</div>
</div>
<a id="JSTGD435"></a>
<div class="props_rev_3"><a id="GUID-2285F767-9EF1-4739-AF9A-FDA6AB6BB276"></a>
<h3 id="JSTGD-GUID-2285F767-9EF1-4739-AF9A-FDA6AB6BB276" class="sect3">Oracle Solaris on SPARC - Change Java 2D Default Visual</h3>
<div>
<p>On certain video boards on the SPARC platform, more than one visual can be available from the X server.</p>
<div class="section">
<p>By default, Java 2D tries to select the best visual, where "best" is typically a higher-bit depth visual. For example, on some Oracle Solaris operating system releases, the default X11 visual is 8-bit PseudoColor, although 24-bit visual is also available. In these cases, Java 2D selects a 24-bit TrueColor visual as the default for Java windows.</p>
<p>While it is possible to create a Java top-level window with a <code class="codeph">GraphicsConfiguration</code> object corresponding to a different visual, in some cases, it is necessary to make Java use a different default visual instead. This can be done by setting the <code class="codeph">FORCEDEFVIS</code> environment variable. It can be set to <code class="codeph">true</code> to force the use of the default X server visual (even if it is not the best one), or it can be set to a hexadecimal number corresponding to the visual ID as reported by tools like <code class="codeph">xdpyinfo</code>.</p>
<p>To determine your X server default visual, execute the <code class="codeph">xdpyinfo</code> command and look at the <code class="codeph">default visual id</code> field.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="JSTGD436"></a>
<div class="props_rev_3"><a id="GUID-AAB8CC86-652B-4A78-83EB-CDC3F5677A48"></a>
<h2 id="JSTGD-GUID-AAB8CC86-652B-4A78-83EB-CDC3F5677A48" class="sect2">Windows OS - DirectDraw/GDI Pipeline</h2>
<div>
<p>The default pipeline on the Windows platform is a mixture of the DirectDraw pipeline and the GDI pipeline, where some operations are performed with the DirectDraw pipeline and others with the GDI pipeline. DirectDraw and GDI APIs are used for rendering to accelerated offscreen and onscreen surfaces.</p>
<div class="section">
<p>Starting with the Java SE 6 release, when the application enters full-screen mode, the new Direct3D pipeline can be used, if the drivers satisfy the requirements. The possible issues with the Direct3D pipeline include rendering artifacts, crashes, and performance related problems.</p>
<p>An additional pipeline, the OpenGL pipeline, might offer greater performance in some configurations.</p>
<p>The following are three cases to troubleshoot issues with the Direct3D pipeline such as rendering artifacts, crashes, and performance related problems:</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span><span class="bold">Disable the DirectDraw pipeline:</span></span>
<div>
<p>When DirectDraw is disabled, all operations are performed with GDI. Provide the following flag to disable the use of DirectDraw: <code>-Dsun.java2d.noddraw=true</code>. In this case, all offscreen images will be created in the Java heap, and rendered with the default software pipeline. All onscreen rendering, as well as copies of offscreen images to the screen, will be performed using GDI.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Enable the DirectDraw pipeline</span>:</span>
<div>
<p>If the pipeline was disabled by default for some reason, then it can be enabled by providing the <code>-Dsun.java2d.noddraw=false</code> flag to the VM.</p>
<p>However, typically there was a reason why it was disabled in the first place, so it is better not to force it.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Disable the built-in punting mechanism</span>:</span>
<div>
<p>In general, the DirectDraw pipeline attempts to place the offscreen surfaces in the framebuffer's video memory, which provides the fast copies from these surfaces to the screen or other accelerated surfaces, as well as hardware accelerated rendering of certain graphics operations.</p>
<p>To limit the effect of unaccelerated rendering to VRAM-based surfaces, there exists a punting mechanism, which moves the surface that is detected to be often read from to the system memory. If the surface is found to be copied from often enough, it may be promoted back to video memory.</p>
<p>However, if the pipeline cannot perform an operation using the DirectDraw API (operations using, for example, alpha compositing, or transforms, or antialiasing), then endering is performed using the software pipeline. In some cases, his means that the pixels of the destination surface, which resides in VRAM, must be read into system memory, which is a very expensive operation.</p>
<p>On certain video boards/drivers combinations, the system-memory-based DirectDraw surfaces are known to cause rendering artifacts and other issues. The DirectDraw pipeline provides a way to disable the punting mechanism so that the system memory surfaces are not used.</p>
<p>To defeat the built-in surface punting mechanism, provide the following flag to the Java VM: <code>-Dsun.java2d.ddforcevram=true</code>.</p>
<div class="infobox-note" id="GUID-AAB8CC86-652B-4A78-83EB-CDC3F5677A48__GUID-95A76626-2872-41FF-9EAA-2106D7F2E59C">
<p class="notep1">Note:</p>
<p>This mechanism can result in performance degradation because the software loops may be reading pixels from VRAM on each operation. In this case, consider disabling the DirectDraw pipeline.</p>
</div>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Disable the DirectDraw BILT operations:</span></span>
<div>
<p>In a Bit Block Transfer (BILT) operation, two bitmap patterns are combined. This operation corresponds to a call to the <span class="apiname">Graphics.drawImage()</span> API.</p>
<div class="p">In some cases, it is possible to avoid rendering problems by disabling the DirectDraw BLIT operations. GDI BLITs will be used instead.
<div class="infobox-note" id="GUID-AAB8CC86-652B-4A78-83EB-CDC3F5677A48__GUID-B2419E7D-2062-4D4C-8469-E04552101EFB">
<p class="notep1">Note:</p>
This operation might result in bad performance. Consider disabling the DirectDraw pipeline instead.</div>
</div>
<p>To disable the use of DirectDraw BLIT operations, pass the parameter <code>-Dsun.java2d.ddblit=false</code> to the Java VM.</p>
</div>
</li>
</ul>
</div>
</div>
<a id="JSTGD437"></a>
<div class="props_rev_3"><a id="GUID-69652947-7E96-454C-81CB-70703A539183"></a>
<h2 id="JSTGD-GUID-69652947-7E96-454C-81CB-70703A539183" class="sect2">Windows OS - Direct3D Pipeline in Full-Screen Mode</h2>
<div>
<p>Starting with the Java SE 6 release, the Direct3D pipeline uses the Direct3D API for rendering. This pipeline is enabled in full-screen mode by default, if the drivers support the required features and the level of rendering quality.</p>
<div class="section">
<p>It is possible to enable the Direct3D pipeline or to force its use, as described in the following sections:</p>
<p>Consider enabling the Direct3D pipeline for your application if it heavily uses rendering operations such as alpha compositing, antialiasing, and transforms.</p>
<p>However, use caution when deciding to enable this pipeline in your application. For example, some built-in video chipsets (which are used in most notebooks) do not perform well using Direct3D, even if they satisfy the quality requirements for Java 2D pipelines.</p>
<p>The following are three cases to troubleshoot problems with Direct3D API.</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span><span class="bold">Disable the Direct3D pipeline</span>:</span>
<div>
<p>Some older video boards/drivers combinations are known to cause issues (both rendering and performance) with the Direct3D pipeline. To disable the pipeline in these cases, with Java SE 5 and later releases, pass the parameter <code>-Dsun.java2d.d3d=false</code> to the Java VM, or set the <code class="codeph">J2D_D3D</code> environment variable to <code class="codeph">false</code>.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Enable the Direct3D pipeline:</span></span>
<div>
<div class="p">With Java SE 5 and later releases, to enable the Direct3D pipeline in both windowed and full-screen mode, use the parameter <code>-Dsun.java2d.d3d=true</code>, or set the <code class="codeph">J2D_D3D</code> environment variable to <code class="codeph">true</code>.
<div class="infobox-note" id="GUID-69652947-7E96-454C-81CB-70703A539183__GUID-6E77F04A-CF4E-4BC6-B61A-00EF6A410290">
<p class="notep1">Note:</p>
The pipeline is enabled only if the drivers support the minimum required features.</div>
</div>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Diagnose the Direct3D pipeline rendering problems:</span></span>
<div>
<p>With the Java SE 8 release, some rendering issues (like missing pixels, garbled rendering) can be diagnosed by forcing different Direct3D rasterizers. Set the <code class="codeph">J2D_D3D_RASTERIZER</code> environment variable to one of the following: <code class="codeph">ref</code>, <code class="codeph">rgb</code>, <code class="codeph">hal</code>, or <code class="codeph">tnl</code>.</p>
<p>See the Direct3D documentation for a description of these rasterizers. By default, the best rasterizer is chosen based on its advertised capabilities. In particular, the <code class="codeph">ref</code> rasterizer forces the use of the reference Direct3D rasterizer from Microsoft. If a rendering problem is not reproducible with this rasterizer, then it is likely to be a video driver bug.</p>
<p>The <code class="codeph">rgb</code> rasterizer is available only if the Direct3D SDK is installed. This SDK can be obtained from <a href="http://msdn.microsoft.com/directx/" target="_blank">Microsoft Game Technologies Center</a>.</p>
<p>For performance or quality problems with text rendering with the Direct3D pipeline, you can force the use of the ARGB texture instead of the default Alpha texture for the Direct3D pipeline's glyph cache. To do this, set the <code class="codeph">J2D_D3D_NOALPHATEXTURE</code> environment variable to <code class="codeph">true</code>.</p>
</div>
</li>
</ol>
</div>
</div>
<a id="JSTGD438"></a>
<div class="props_rev_3"><a id="GUID-EDA6609A-F395-4D29-A0B7-89A5D966FDE8"></a>
<h2 id="JSTGD-GUID-EDA6609A-F395-4D29-A0B7-89A5D966FDE8" class="sect2">OpenGL Pipeline in Oracle Solaris, Linux, and Windows</h2>
<div>
<p>The OpenGL pipeline is available on Oracle Solaris, Linux, and Windows.</p>
<p>This alternate pipeline uses the hardware-accelerated, cross-platform OpenGL API when rendering to <code class="codeph">VolatileImages</code>, to backbuffers created with <code class="codeph">BufferStrategy</code> API, and to the screen.</p>
<p>This pipeline can offer great performance advantages over the default (X11 or GDI/DirectDraw) pipelines for certain applications. Consider enabling the pipeline for your application if it heavily uses of rendering operations like alpha compositing, antialiasing, and transforms.</p>
<p>The following are use cases for troubleshooting problems in OpenGL pipeline</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-7637EE64-D83C-404D-8475-489ECFA8143B" title="The OpenGL pipeline is disabled by default.">Enable OpenGL Pipeline</a></p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-F86EEE41-0401-401C-8C03-A4A1328E5722" title="The OpenGL pipeline will not be enabled if the hardware or drivers do not meet the minimum requirements.">Minimum Requirements</a></p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-920D3D37-4CD1-49EE-9029-1188AE62E9B7" title="You can get detailed information about the startup procedures of the OpenGL-based Java 2D pipeline by using the J2D_TRACE_LEVEL environment variable.">Diagnose Startup Issues</a></p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-414C9563-2904-4F4C-81F7-1ACF863FCDB2" title="Diagnose if rendering or performance issues are being caused by Java 2D or by the OpenGL drivers.">Diagnose Rendering and Performance Issues</a></p>
</li>
<li>
<p><a href="java-2d-pipeline-rendering-and-properties.htm#GUID-9BC3DB14-7FCA-46D3-9296-0B03C5054DCE" title="List of graphics card manufacturers with their corresponding websites, supported platforms, and some examples of cards.">Latest OpenGL Drivers</a></p>
</li>
</ul>
</div>
<a id="JSTGD439"></a>
<div class="props_rev_3"><a id="GUID-7637EE64-D83C-404D-8475-489ECFA8143B"></a>
<h3 id="JSTGD-GUID-7637EE64-D83C-404D-8475-489ECFA8143B" class="sect3">Enable OpenGL Pipeline</h3>
<div>
<p>The OpenGL pipeline is disabled by default.</p>
<div class="section">
<p>To attempt to enable the OpenGL pipeline, provide the following option to the JVM:</p>
<p><code class="codeph">-Dsun.java2d.opengl=true</code></p>
<p>To receive verbose console output about whether the OpenGL pipeline is initialized successfully for a particular screen, set the option to True (note the uppercase <span class="italic">T</span>).</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD440"></a>
<div class="props_rev_3"><a id="GUID-F86EEE41-0401-401C-8C03-A4A1328E5722"></a>
<h3 id="JSTGD-GUID-F86EEE41-0401-401C-8C03-A4A1328E5722" class="sect3">Minimum Requirements</h3>
<div>
<p>The OpenGL pipeline will not be enabled if the hardware or drivers do not meet the minimum requirements.</p>
<p>If one of the following requirements is not met, Java 2D will fall back and use the default pipeline (X11 on Oracle Solaris/Linux or GDI/DirectDraw on Windows), which means your application will continue to work correctly, but without the OpenGL acceleration.</p>
<p>The minimum requirements for the Oracle Solaris and Linux operating systems are the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Hardware accelerated OpenGL/GLX libraries installed and configured properly</p>
</li>
<li>
<p>OpenGL version 1.2 or higher</p>
</li>
<li>
<p>GLX version 1.3 or higher</p>
</li>
<li>
<p>At least one TrueColor visual with an available depth buffer</p>
</li>
</ul>
<p>The minimum requirements for Windows OS are the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Hardware accelerated drivers supporting the extensions <code class="codeph">WGL_ARB_pbuffer</code>, <code class="codeph">WGL_ARB_render_texture</code>, and <code class="codeph">WGL_ARB_pixel_format</code></p>
</li>
<li>
<p>OpenGL version 1.2 or higher</p>
</li>
<li>
<p>At least one pixel format with an available depth buffer</p>
</li>
</ul>
</div>
</div>
<a id="JSTGD441"></a>
<div class="props_rev_3"><a id="GUID-920D3D37-4CD1-49EE-9029-1188AE62E9B7"></a>
<h3 id="JSTGD-GUID-920D3D37-4CD1-49EE-9029-1188AE62E9B7" class="sect3">Diagnose Startup Issues</h3>
<div>
<p>You can get detailed information about the startup procedures of the OpenGL-based Java 2D pipeline by using the <code class="codeph">J2D_TRACE_LEVEL</code> environment variable.</p>
<div class="section">
<p>As previously mentioned, the OpenGL pipeline might not be enabled on certain machines for various reasons. For example, the drivers might not be properly installed and might report an insufficient version number. Alternatively, your machine might have an older graphics card that does not support the appropriate OpenGL version or extensions.</p>
<p>In the Java SE 6 and later releases, you can get detailed information about the startup procedures of the OpenGL-based Java 2D pipeline by using the <code class="codeph">J2D_TRACE_LEVEL</code> environment variable, as shown in the following examples.</p>
<p>Set the <code class="codeph">J2D_TRACE_LEVEL</code> environment variable on Windows.</p>
<pre dir="ltr">
# set J2D_TRACE_LEVEL=4
# java -Dsun.java2d.opengl=True YourApp
</pre>
<p>Set the <code class="codeph">J2D_TRACE_LEVEL</code> environment variable on Solaris and Linux.</p>
<pre dir="ltr">
# export J2D_TRACE_LEVEL=4
# java -Dsun.java2d.opengl=True YourApp
</pre>
<p>The output will be different depending on your platform and the installed graphics hardware, but it can give you some insight into the reasons why the OpenGL pipeline is not being successfully enabled for your configuration.</p>
<div class="infobox-note" id="GUID-920D3D37-4CD1-49EE-9029-1188AE62E9B7__GUID-1D30D28D-510B-4860-BFA6-5CEE0E757808">
<p class="notep1">Note:</p>
<p>This output is especially useful when filing bug reports intended for the Java 2D team at Sun.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD444"></a>
<div class="props_rev_3"><a id="GUID-414C9563-2904-4F4C-81F7-1ACF863FCDB2"></a>
<h3 id="JSTGD-GUID-414C9563-2904-4F4C-81F7-1ACF863FCDB2" class="sect3">Diagnose Rendering and Performance Issues</h3>
<div>
<p>Diagnose if rendering or performance issues are being caused by Java 2D or by the OpenGL drivers.</p>
<div class="section">
<p>Because the OpenGL pipeline relies so heavily on the underlying graphics hardware and drivers, it might sometimes be difficult to determine whether rendering or performance issues are being caused by Java 2D or by the OpenGL drivers.</p>
<p>One feature new to the OpenGL pipeline in the Java SE 6 release is the use of the <code class="codeph">GL_EXT_framebuffer_object</code> extension, which provides better performance for rendering and reduced VRAM consumption when using <code class="codeph">VolatileImages</code>. This "FBO" codepath is enabled by default when the OpenGL pipeline is enabled, but only if your graphics hardware and driver support this OpenGL extension. This extension is generally available on Nvidia GeForce/Quadro FX series and later, and on ATI Radeon 9500 and later. If you suspect that the "FBO" codepath is causing problems in your application, then you can disable it by setting the following system property:</p>
<p><code>-Dsun.java2d.opengl.fbobject=false</code></p>
<p>Setting this property will cause Java 2D to fall back on the older <code class="codeph">pbuffer-based</code> codepath.</p>
<p>If you find that a certain Java 2D operation causes different visual results with the OpenGL pipeline enabled than without, then it probably indicates a graphics driver bug. Similarly, if the performance of Java 2D rendering is significantly worse with the OpenGL pipeline enabled than without, then it is most likely caused by a driver or hardware problem.</p>
<p>In either case, file a detailed bug report through the normal bug reporting channels. See <a href="submit-bug-report.htm#GUID-DB465A9C-03FA-4324-BFF9-45BF9699F349" title="Guidance about how to submit a bug report. It includes suggestions about what to try before submitting a report and which data to collect for the report.">Submit a Bug Report</a>. When filing bug reports, be as detailed as possible, and include the following information:</p>
</div>
<!-- class="section" -->
<ul>
<li><span>Operating system (for example, Ubuntu Linux 6.06, Windows XP SP2)</span></li>
<li><span>Name of graphics hardware manufacturer and device (for example, Nvidia GeForce 2 MX 440)</span></li>
<li><span>Exact driver version (for example, ATI Catalyst 6.8, Nvidia 91.33)</span></li>
<li><span>Output when <code class="codeph">J2D_TRACE_LEVEL=4</code> is specified on the command line (as described in the previous section)</span></li>
<li><span>The output of the <code class="codeph">glxinfo</code> command if you are on Oracle Solaris or Linux</span></li>
</ul>
</div>
</div>
</div>
<a id="JSTGD445"></a>
<div class="props_rev_3"><a id="GUID-9BC3DB14-7FCA-46D3-9296-0B03C5054DCE"></a>
<h2 id="JSTGD-GUID-9BC3DB14-7FCA-46D3-9296-0B03C5054DCE" class="sect2">Latest OpenGL Drivers</h2>
<div>
<p>List of graphics card manufacturers with their corresponding websites, supported platforms, and some examples of cards.</p>
<p>Because the OpenGL pipeline relies heavily on the OpenGL API and the underlying graphics hardware and drivers, it is very important to ensure that you have the latest graphics drivers installed on your machine. Drivers can be downloaded from your graphics card manufacturer's web site, as shown in the following table.</p>
<div class="tblformal" id="GUID-9BC3DB14-7FCA-46D3-9296-0B03C5054DCE__GUID-523D3D20-2C93-4DB9-A7C8-351DC3898B3A">
<table class="cellalignment341" summary="This table contains a list of graphics card manufacturers with their corresponding websites, supported platforms and some examples of cards that are known to support OpenGL.">
<thead>
<tr class="cellalignment332">
<th class="cellalignment385" id="d25675e889">Manufacturer</th>
<th class="cellalignment381" id="d25675e892">Platforms</th>
<th class="cellalignment381" id="d25675e895">Cards Known to Work</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment332">
<td class="cellalignment386" id="d25675e900" headers="d25675e889">
<p><a href="http://ati.com" target="_blank">ATI</a></p>
</td>
<td class="cellalignment383" headers="d25675e900 d25675e892">
<p>Linux, Windows</p>
</td>
<td class="cellalignment383" headers="d25675e900 d25675e895">
<p>Radeon 8500 and later, FireGL series</p>
</td>
</tr>
<tr class="cellalignment332">
<td class="cellalignment386" id="d25675e912" headers="d25675e889">
<p><a href="http://nvidia.com" target="_blank">Nvidia</a></p>
</td>
<td class="cellalignment383" headers="d25675e912 d25675e892">
<p>Oracle Solaris on x64, Linux, Windows</p>
</td>
<td class="cellalignment383" headers="d25675e912 d25675e895">
<p>GeForce 2 series and later, Quadro FX series and later</p>
</td>
</tr>
<tr class="cellalignment332">
<td class="cellalignment386" id="d25675e924" headers="d25675e889">
<p><a href="http://oracle.com/us/sun/index.htm" target="_blank">Oracle</a></p>
</td>
<td class="cellalignment383" headers="d25675e924 d25675e892">
<p>Oracle Solaris on SPARC</p>
</td>
<td class="cellalignment383" headers="d25675e924 d25675e895">
<p>Expert3D series, XVR-500, XVR-600, XVR-1200, XVR-2500</p>
</td>
</tr>
<tr class="cellalignment332">
<td class="cellalignment386" id="d25675e936" headers="d25675e889">
<p><a href="http://xig.com" target="_blank">Xi Graphics</a></p>
</td>
<td class="cellalignment383" headers="d25675e936 d25675e892">
<p>Oracle Solaris on x86, Linux</p>
</td>
<td class="cellalignment383" headers="d25675e936 d25675e895">
<p>Various (check with Xi Graphics)</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment331">
<tr>
<td class="cellalignment338">
<table class="cellalignment336">
<tr>
<td class="cellalignment335"><a href="awt.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment335"><a href="java-2d.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1995, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment340">
<table class="cellalignment334">
<tr>
<td class="cellalignment335"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment335"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment335"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
