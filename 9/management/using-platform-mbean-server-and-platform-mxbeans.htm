<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Using the Platform MBean Server and Platform MXBeans</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2017-09-14T07:10:36Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Monitoring and Management Guide" />
<meta name="dcterms.identifier" content="E75744-02" />
<meta name="dcterms.isVersionOf" content="JSMGM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="using-jconsole.htm" title="Previous" type="text/html" />
<link rel="Next" href="snmp-monitoring-and-management.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSMGM.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSMGM.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSMGM.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-6239456C-FD46-46EA-96EF-DC02800D58EC"></a> <span id="PAGE" style="display:none;">7/9</span> <!-- End Header -->
<h1 id="JSMGM-GUID-6239456C-FD46-46EA-96EF-DC02800D58EC" class="sect1"><span class="enumeration_chapter">4</span> Using the Platform MBean Server and Platform MXBeans</h1>
<div>
<p>This topic introduces the MBean server and the MXBeans that are provided as part of the Java Platform, Standard Edition (Java SE), which can be used for monitoring and management purposes. Java Management Extensions (JMX) technology MBeans and MBean servers were introduced briefly in <a href="overview-java-se-monitoring-and-management.htm#GUID-EA3CFF69-F0D3-47AB-9AED-EF1CBF7F2B24" title="The Java Virtual Machine (Java VM) is instrumented for monitoring and management, enabling built-in (or ready-to-use) management capabilities that can be accessed both remotely and locally.">Overview of Java SE Monitoring and Management</a>. See <a class="olink JSJMX-GUID-72DCB4C1-93F8-4F37-B46E-2C708139C8A5" target="_blank" href="../jmx/introduction-jmx-technology.htm#JSJMX-GUID-72DCB4C1-93F8-4F37-B46E-2C708139C8A5">Introduction to JMX Technology</a> in <span><cite>Java Platform, Standard Edition Java Management Extensions Guide</cite></span>.</p>
</div>
<div class="sect2"><a id="GUID-656AF20D-E386-4F75-9079-9B26F9EDCD68"></a>
<h2 id="JSMGM-GUID-656AF20D-E386-4F75-9079-9B26F9EDCD68" class="sect2">Using the Platform MBean Server</h2>
<div>
<p>An MBean server is a repository of MBeans that provides management applications access to MBeans. Applications do not access MBeans directly, but instead access them through the MBean server using their unique <code class="codeph">ObjectName</code> class. An MBean server implements the interface <code class="codeph">javax.management.MBeanServer</code>.&nbsp;</p>
<p>The <span class="variable">platform MBean server</span> was introduced in Java SE 5.0, and is an MBean server that is built into the Java Virtual Machine (Java VM). The platform MBean server can be shared by all managed components that are running in the Java VM. You access the platform MBean server using the <code class="codeph">java.lang.management.ManagementFactory</code> method <code class="codeph">getPlatformMBeanServer</code>. Of course, you can also create your own MBean server using the <code class="codeph">javax.management.MBeanServerFactory</code> class. However, there is generally no need for more than one MBean server, so using the platform MBean server is recommended.</p>
</div>
</div>
<div class="sect2"><a id="GUID-64A12637-275D-42C7-AB31-2170F424DA2E"></a>
<h2 id="JSMGM-GUID-64A12637-275D-42C7-AB31-2170F424DA2E" class="sect2">Accessing Platform MXBeans</h2>
<div>
<p>A <span class="variable">platform MXBean</span> is an MBean for monitoring and managing the Java VM. Each MXBean encapsulates a part of the VM functionality. A full list of the MXBeans that are provided with the platform is provided in <a href="overview-java-se-monitoring-and-management.htm#GUID-762C5224-0541-4A1B-A314-F3D55311C124__PLATFORMMXBEANS-4D30B595" title="Platform MXBeans">Table 1-1</a>.</p>
<p>A management application can access platform MXBeans in three different ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Direct access from the <code class="codeph">ManagementFactory</code> class</p>
</li>
<li>
<p>Direct access from an MXBean proxy</p>
</li>
<li>
<p>Indirect access from the <code class="codeph">MBeanServerConnection</code> class</p>
</li>
</ul>
</div>
<div class="sect3"><a id="GUID-96CEF00E-83E8-4505-B6E1-6E89213FB0CA"></a>
<h3 id="JSMGM-GUID-96CEF00E-83E8-4505-B6E1-6E89213FB0CA" class="sect3">Accessing Platform MXBeans Using the ManagementFactory Class</h3>
<div>
<p>An application can make direct calls to the methods of a platform MXBean that is running in the same Java VM as itself. To make direct calls, you can use the static methods of the <code class="codeph">ManagementFactory</code> class. The <code class="codeph">ManagementFactory</code> class has <code class="codeph">accessor</code> methods for each of the different platform MXBeans, such as, <code class="codeph">getClassLoadingMXBean()</code>, <code class="codeph">getGarbageCollectorMXBeans()</code>, <code class="codeph">getRuntimeMXBean()</code>, and so on. In case there are more than one platform MXBean, the method returns a list of the platform MXBeans found.</p>
<p>For example, <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-96CEF00E-83E8-4505-B6E1-6E89213FB0CA__EXAMPLE4-1ACCESSINGAPLATFORMMXBEANU-8F3B94EC">Example&nbsp;4-1</a> uses the static method of <code class="codeph">ManagementFactory</code> to get the platform MXBean <code class="codeph">RuntimeMXBean</code>, and then gets the vendor name from the platform MXBean.</p>
<p id="GUID-96CEF00E-83E8-4505-B6E1-6E89213FB0CA__EXAMPLE4-1ACCESSINGAPLATFORMMXBEANU-8F3B94EC">Example&nbsp;4-1 Accessing a Platform MXBean Using ManagementFactory Class</p>
<pre dir="ltr">
RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();
String vendor = mxbean.getVmVendor(); 
</pre></div>
</div>
<div class="sect3"><a id="GUID-4C287D90-7F37-41FC-9B73-D93B0C814A57"></a>
<h3 id="JSMGM-GUID-4C287D90-7F37-41FC-9B73-D93B0C814A57" class="sect3">Accessing Platform MXBeans Using an MXBean Proxy</h3>
<div>
<p>An application can also call platform MXBean methods using an MXBean proxy. To do so, you must construct an MXBean proxy instance that forwards the method calls to a given MBean server by calling the static method <code class="codeph">ManagementFactory.newPlatformMXBeanProxy()</code>. An application typically constructs a proxy to obtain remote access to a platform MXBean of another Java VM.</p>
<p>For example, <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-4C287D90-7F37-41FC-9B73-D93B0C814A57__EXAMPLE4-2ACCESSINGAPLATFORMMXBEANV-8F3C48A5">Example&nbsp;4-2</a> performs exactly the same operation as <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-96CEF00E-83E8-4505-B6E1-6E89213FB0CA__EXAMPLE4-1ACCESSINGAPLATFORMMXBEANU-8F3B94EC">Example&nbsp;4-1</a>, but this time it uses an MXBean proxy.</p>
<p id="GUID-4C287D90-7F37-41FC-9B73-D93B0C814A57__EXAMPLE4-2ACCESSINGAPLATFORMMXBEANV-8F3C48A5">Example&nbsp;4-2 Accessing a Platform MXBean Using an MXBean Proxy</p>
<pre dir="ltr">
MBeanServerConnection mbs;
...
// Get a MBean proxy for RuntimeMXBean interface
RuntimeMXBean proxy =
    ManagementFactory.newPlatformMXBeanProxy(mbs,
                                             ManagementFactory.RUNTIME_MXBEAN_NAME,
                                             RuntimeMXBean.class);
// Get standard attribute "VmVendor"
String vendor = proxy.getVmVendor();
</pre></div>
</div>
<div class="sect3"><a id="GUID-7D0C32D9-7317-42B5-8F39-301A977A3ED5"></a>
<h3 id="JSMGM-GUID-7D0C32D9-7317-42B5-8F39-301A977A3ED5" class="sect3">Accessing Platform MXBeans Using the MBeanServerConnection Class</h3>
<div>
<p>An application can indirectly call platform MXBean methods through an <code class="codeph">MBeanServerConnection</code> interface that connects to the platform MBean server of another running Java VM. You use the <code class="codeph">MBeanServerConnection</code> class <code class="codeph">getAttribute()</code> method to get an attribute of a platform MXBean by providing the MBean's <code class="codeph">ObjectName</code> and the attribute name as parameters.</p>
<p>For example, <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-7D0C32D9-7317-42B5-8F39-301A977A3ED5__EXAMPLE4-3ACCESSINGAPLATFORMMXBEANU-8F3CBD97">Example&nbsp;4-3</a> performs the same job as <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-96CEF00E-83E8-4505-B6E1-6E89213FB0CA__EXAMPLE4-1ACCESSINGAPLATFORMMXBEANU-8F3B94EC">Example&nbsp;4-1</a> and <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-4C287D90-7F37-41FC-9B73-D93B0C814A57__EXAMPLE4-2ACCESSINGAPLATFORMMXBEANV-8F3C48A5">Example&nbsp;4-2</a>, but it uses an indirect call through <code class="codeph">MBeanServerConnection</code>.</p>
<p id="GUID-7D0C32D9-7317-42B5-8F39-301A977A3ED5__EXAMPLE4-3ACCESSINGAPLATFORMMXBEANU-8F3CBD97">Example&nbsp;4-3 Accessing a Platform MXBean Using the MBeanServerConnection Class</p>
<pre dir="ltr">
MBeanServerConnection mbs;
...
try {
  ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);
  // Get standard attribute "VmVendor"
  String vendor = (String) mbs.getAttribute(oname, "VmVendor");
} catch (....) {
  // Catch the exceptions thrown by ObjectName constructor
  // and MBeanServer.getAttribute method
  ...
}
</pre></div>
</div>
</div>
<div class="sect2"><a id="GUID-89C9B849-87E0-499E-A3EF-DD772C21C978"></a>
<h2 id="JSMGM-GUID-89C9B849-87E0-499E-A3EF-DD772C21C978" class="sect2">Using Oracle JDK's Platform Extension</h2>
<div>
<p>Java VMs can extend the management interface by defining interfaces for platform-specific measurements and management operations. The static factory methods in the <code class="codeph">ManagementFactory</code> class will return the MBeans with the platform extension.</p>
<p>The <code class="codeph">com.sun.management</code> package contains Oracle JDK's platform extensions. The following sections provide examples of how to access a platform-specific attribute from Oracle JDK's implementation of the <code class="codeph">OperatingSystemMXBean</code> interface.</p>
</div>
<div class="sect3"><a id="GUID-DB0DFAD1-8BB2-4A9C-B3D4-3868856C4D76"></a>
<h3 id="JSMGM-GUID-DB0DFAD1-8BB2-4A9C-B3D4-3868856C4D76" class="sect3">Accessing MXBean Attributes Directly</h3>
<div>
<p><a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-DB0DFAD1-8BB2-4A9C-B3D4-3868856C4D76__EXAMPLE4-4ACCESSINGANMXBEANATTRIBUT-8F3D42EF">Example&nbsp;4-4</a> illustrates direct access to one of Oracle JDK's MXBean interfaces.</p>
<p id="GUID-DB0DFAD1-8BB2-4A9C-B3D4-3868856C4D76__EXAMPLE4-4ACCESSINGANMXBEANATTRIBUT-8F3D42EF">Example&nbsp;4-4 Accessing an MXBean Attribute Directly</p>
<pre dir="ltr">
com.sun.management.OperatingSystemMXBean mxbean =
  (com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();

// Get the number of processors
int numProcessors = mxbean.getAvailableProcessors();

// Get the Oracle JDK-specific attribute Process CPU time
long cpuTime = mxbean.getProcessCpuTime();
</pre></div>
</div>
<div class="sect3"><a id="GUID-F4A461C6-9BDD-4601-B247-8706DB2BF3DE"></a>
<h3 id="JSMGM-GUID-F4A461C6-9BDD-4601-B247-8706DB2BF3DE" class="sect3">Accessing MXBean Attributes Using MBeanServerConnection</h3>
<div>
<p><a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-F4A461C6-9BDD-4601-B247-8706DB2BF3DE__EXAMPLE4-5ACCESSINGANMXBEANATTRIBUT-8F3D7096">Example&nbsp;4-5</a> illustrates access to one of Oracle JDK's MXBean interfaces using the <code class="codeph">MBeanServerConnection</code> class.</p>
<p id="GUID-F4A461C6-9BDD-4601-B247-8706DB2BF3DE__EXAMPLE4-5ACCESSINGANMXBEANATTRIBUT-8F3D7096">Example&nbsp;4-5 Accessing an MXBean Attribute Using MBeanServerConnection</p>
<pre dir="ltr">
MBeanServerConnection mbs;

// Connect to a running Java VM (or itself) and get MBeanServerConnection
// that has the MXBeans registered in it
...

try {
    // Assuming the OperatingSystem MXBean has been registered in mbs
    ObjectName oname = new ObjectName(ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME);

    // Get standard attribute "Name"
    String vendor = (String) mbs.getAttribute(oname, "Name");

    // Check if this MXBean contains Oracle JDK's extension
    if (mbs.isInstanceOf(oname, "com.sun.management.OperatingSystemMXBean")) {
        // Get platform-specific attribute "ProcessCpuTime"
        long cpuTime = (Long) mbs.getAttribute(oname, "ProcessCpuTime");
    }
} catch (....) {
    // Catch the exceptions thrown by ObjectName constructor
    // and MBeanServer methods
    ...
}
</pre></div>
</div>
</div>
<div class="sect2"><a id="GUID-E954720D-0C11-491C-8784-4364738DDEE3"></a>
<h2 id="JSMGM-GUID-E954720D-0C11-491C-8784-4364738DDEE3" class="sect2">Monitoring Thread Contention and CPU Time</h2>
<div>
<p>The <code class="codeph">ThreadMXBean</code> platform MXBean provides support for monitoring thread contention and thread central processing unit (CPU) time.</p>
<p>The Oracle JDK's HotSpot VM supports thread contention monitoring. You use the <code class="codeph">ThreadMXBean.isThreadContentionMonitoringSupported()</code> method to determine if a Java VM supports thread contention monitoring. Thread contention monitoring is disabled by default. Use the <code class="codeph">setThreadContentionMonitoringEnabled()</code> method to enable it.</p>
<p>The Oracle JDK's HotSpot VM supports the measurement of thread CPU time on most platforms. The CPU time provided by this interface has nanosecond precision but not necessarily nanosecond accuracy.</p>
<p>You use the <code class="codeph">isThreadCpuTimeSupported()</code> method to determine if a Java VM supports the measurement of the CPU time for any thread. You use <code class="codeph">isCurrentThreadCpuTimeSupported()</code> to determine if a Java VM supports the measurement of the CPU time for the current thread. A Java VM that supports CPU time measurement for any thread will also support that for the current thread.</p>
<p>A Java VM can disable thread CPU time measurement. You use the <code class="codeph">isThreadCpuTimeEnabled()</code> method to determine if thread CPU time measurement is enabled. You use the <code class="codeph">setThreadCpuTimeEnabled()</code> method to enable or disable the measurement of thread CPU time.</p>
</div>
</div>
<div class="sect2"><a id="GUID-470524BF-8291-485F-95BD-C4185A0A4D2D"></a>
<h2 id="JSMGM-GUID-470524BF-8291-485F-95BD-C4185A0A4D2D" class="sect2">Managing the Operating System</h2>
<div>
<p>The <code class="codeph">OperatingSystem</code> platform MXBean allows you to access certain operating system resource information, such as the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Process CPU time</p>
</li>
<li>
<p>Amount of total and free physical memory</p>
</li>
<li>
<p>Amount of committed virtual memory (that is, the amount of virtual memory guaranteed to be available to the running process)</p>
</li>
<li>
<p>Amount of total and free swap space</p>
</li>
<li>
<p>Number of open file descriptors (only for Solaris, Linux, or macOS platforms).</p>
</li>
</ul>
<p>When the Operating System MXBean in the MBeans tab is selected in JConsole, you see all the attributes and operations including the platform extension. You can monitor the changes of a numerical attribute over time by double-clicking the value field of the attribute.</p>
</div>
</div>
<div class="sect2"><a id="GUID-E7CCD12F-00C4-4547-B3F4-E9D969768C9E"></a>
<h2 id="JSMGM-GUID-E7CCD12F-00C4-4547-B3F4-E9D969768C9E" class="sect2">Logging Management</h2>
<div>
<p>The Java SE platform provides a special MXBean for logging purposes, the <code class="codeph">LoggingMXBean</code> interface.</p>
<p>The <code class="codeph">LoggingMXBean</code> interface enables you to perform the following tasks:</p>
<ul style="list-style-type: disc;">
<li>
<p>Get the name of the log level associated with the specified logger</p>
</li>
<li>
<p>Get the list of currently registered loggers</p>
</li>
<li>
<p>Get the name of the parent for the specified logger</p>
</li>
<li>
<p>Set the specified logger to the specified new level</p>
</li>
</ul>
<p>The unique <code class="codeph">ObjectName</code> of the <code class="codeph">LoggingMXBean</code> is <code class="codeph">java.util.logging:type=Logging</code>. This object name is stored in the <code class="codeph">LogManager.LOGGING_MXBEAN_NAME</code> field.</p>
<p>There is a single global instance of the <code class="codeph">LoggingMXBean</code> interface, which you can get by calling <code class="codeph">LogManager.getLoggingMXBean()</code>.</p>
<p>The <code class="codeph">LoggingMXBean</code> interface defines a <code class="codeph">LoggerNames</code> attribute describing the list of logger names. To find the list of loggers in your application, you can select the <code class="codeph">Logging MXBean</code> interface under the <code class="codeph">java.util.logging</code> domain in the MBeans tab, and double-click the value field of the <code class="codeph">LoggerNames</code> attribute.</p>
<p>The <code class="codeph">Logging MXBean</code> interface also supports two operations:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">getLoggerLevel</code>: Returns the log level of a given logger</p>
</li>
<li>
<p><code class="codeph">setLoggerLevel</code>: Sets the log level of a given logger to a new level</p>
</li>
</ul>
<p>These operations take a logger name as the first parameter. To change the level of a logger, enter the logger name in the first parameter and the name of the level that it should be set to in the second parameter of the <code class="codeph">setLoggerLevel</code> operation.</p>
</div>
</div>
<div class="sect2"><a id="GUID-76F64803-CD1A-45E2-9C74-3A5E7792EC1A"></a>
<h2 id="JSMGM-GUID-76F64803-CD1A-45E2-9C74-3A5E7792EC1A" class="sect2">Detecting Low Memory</h2>
<div>
<p>Memory use is an important attribute of the memory system. It can be indicative of the following problems:</p>
<ul style="list-style-type: disc;">
<li>
<p>Excessive memory consumption by an application</p>
</li>
<li>
<p>An excessive workload imposed on the automatic memory management system</p>
</li>
<li>
<p>Potential memory leakages</p>
</li>
</ul>
<p>There are two kinds of memory thresholds that you can use to detect low memory conditions: a <span class="variable">usage threshold</span> and a <span class="variable">collection usage threshold</span>. You can detect low memory conditions using either of these thresholds with <span class="variable">polling</span> or <span class="variable">threshold notification</span>.</p>
</div>
<div class="sect3"><a id="GUID-0D16BF63-86E4-434B-B2A5-BFB0A3AA712D"></a>
<h3 id="JSMGM-GUID-0D16BF63-86E4-434B-B2A5-BFB0A3AA712D" class="sect3">Memory Thresholds</h3>
<div>
<p>A memory pool can have two kinds of memory thresholds: a usage threshold and a collection usage threshold. Either one of these thresholds may not be supported by a particular memory pool. The values for the usage threshold and collection usage threshold can both be set using the MBeans tab in JConsole.</p>
</div>
<div class="sect4"><a id="GUID-706EADC3-3447-49E2-9490-9DF95AE1CC78"></a>
<h4 id="JSMGM-GUID-706EADC3-3447-49E2-9490-9DF95AE1CC78" class="sect4">Usage Threshold</h4>
<div>
<p>The usage threshold is a manageable attribute of some memory pools. It enables you to monitor memory use with a low overhead. Setting the threshold to a positive value enables a memory pool to perform usage threshold checking. Setting the usage threshold to zero disables usage threshold checking. The default value is supplied by the Java VM.</p>
<p>A Java VM performs usage threshold checking on a memory pool at the most appropriate time, typically during garbage collection. Each memory pool increments a usage threshold count whenever the usage crosses the threshold.</p>
<p>You use the <code class="codeph">isUsageThresholdSupported()</code> method to determine whether a memory pool supports a usage threshold, because a usage threshold is not appropriate for some memory pools. For example, in a generational garbage collector (such as the one in the HotSpot VM; see <a href="using-jconsole.htm#GUID-A81AE10A-0693-462A-B129-5E292F46523E">Garbage Collection</a>), most of the objects are allocated in the young generation, from the Eden memory pool. The Eden pool is designed to be filled up. Garbage collecting the Eden memory pool will free most of its memory space because it is expected to contain mostly short-lived objects that are unreachable at garbage collection time. So, it is not appropriate for the Eden memory pool to support a usage threshold.</p>
</div>
</div>
<div class="sect4"><a id="GUID-2D3404CA-3458-4222-BE03-F8380909E994"></a>
<h4 id="JSMGM-GUID-2D3404CA-3458-4222-BE03-F8380909E994" class="sect4">Collection Usage Threshold</h4>
<div>
<p>The collection usage threshold is a manageable attribute of some garbage-collected memory pools. After a Java VM has performed garbage collection on a memory pool, some memory in the pool will still be in use. The collection usage threshold allows you to set a value for this memory. You use the <code class="codeph">isCollectionUsageThresholdSupported()</code> method of the <code class="codeph">MemoryPoolMXBean</code> interface to determine if the pool supports a collection usage threshold.</p>
<p>A Java VM may check the collection usage threshold on a memory pool when it performs garbage collection. Set the collection usage threshold to a positive value to enable checking. Set the collection usage threshold to zero (the default) to disable checking.</p>
<p>The usage threshold and collection usage threshold can be set in the MBeans tab of JConsole.</p>
</div>
</div>
<div class="sect4"><a id="GUID-86E4727D-E8AD-4F8E-87BE-49FBAB419684"></a>
<h4 id="JSMGM-GUID-86E4727D-E8AD-4F8E-87BE-49FBAB419684" class="sect4">Memory MXBean</h4>
<div>
<p>The various memory thresholds can be managed using the platform <code class="codeph">MemoryMXBean</code>. The <code class="codeph">MemoryMXBean</code> defines the following four attributes:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">HeapMemoryUsage</code>: A read-only attribute describing the current heap memory usage.</p>
</li>
<li>
<p><code class="codeph">NonHeapMemoryUsage</code>: A read-only attribute describing nonheap memory usage.</p>
</li>
<li>
<p><code class="codeph">ObjectPendingFinalizationCount</code>: A read-only attribute describing the number of objects pending for finalization.</p>
</li>
<li>
<p><code class="codeph">Verbose</code>: A Boolean attribute describing the Garbage Collection (GC) verbose tracing setting. This can be set dynamically. The GC verbose traces will be displayed at the location specified when you start the Java VM. The default location for GC verbose output of the Hotspot VM is <code class="codeph">stdout</code>.</p>
</li>
</ul>
<p>The Memory MXBean supports one operation, <code class="codeph">gc</code>, for explicit garbage collection requests.</p>
<p>Details of the Memory MXBean interface are defined in the <code class="codeph">java.lang.management.MemoryMXBean</code> specification.</p>
</div>
</div>
<div class="sect4"><a id="GUID-83A05689-B759-4CF2-BB82-7B82D8DA9F25"></a>
<h4 id="JSMGM-GUID-83A05689-B759-4CF2-BB82-7B82D8DA9F25" class="sect4">Memory Pool MXBean</h4>
<div>
<p>The <code class="codeph">MemoryPoolMXBean</code> platform MXBean defines a set of operations to manage memory thresholds.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">getUsageThreshold()</code></p>
</li>
<li>
<p><code class="codeph">setUsageThreshold(long threshold)</code></p>
</li>
<li>
<p><code class="codeph">isUsageThresholdExceeded()</code></p>
</li>
<li>
<p><code class="codeph">isUsageThresholdSupported()</code></p>
</li>
<li>
<p><code class="codeph">getCollectionUsageThreshold()</code></p>
</li>
<li>
<p><code class="codeph">setCollectionUsageThreshold(long threshold)</code></p>
</li>
<li>
<p><code class="codeph">isCollectionUsageThresholdSupported()</code></p>
</li>
<li>
<p><code class="codeph">isCollectionUsageThresholdExceeded()</code></p>
</li>
</ul>
<p>Each memory pool may have two kinds of memory thresholds for low memory detection support: a usage threshold and a collection usage threshold. Either one of these thresholds might not be supported by a particular memory pool. For more information, see the API reference documentation for the <code class="codeph">MemoryPoolMXBean</code> class.</p>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-8B19A349-4075-47F2-BC95-3CC88CA96BB1"></a>
<h3 id="JSMGM-GUID-8B19A349-4075-47F2-BC95-3CC88CA96BB1" class="sect3">Polling</h3>
<div>
<p>An application can continuously monitor its memory usage by calling either the <code class="codeph">getUsage()</code> method for all memory pools or the <code class="codeph">isUsageThresholdExceeded()</code> method for memory pools that support a usage threshold.</p>
<p><a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-8B19A349-4075-47F2-BC95-3CC88CA96BB1__EXAMPLE4-6USINGPOLLING-8F3EC957">Example&nbsp;4-6</a> has a thread dedicated to task distribution and processing. At every interval, it determines whether it should receive and process new tasks based on its memory usage. If the memory usage exceeds its usage threshold, then it redistributes outstanding tasks to other VMs and stops receiving new tasks until the memory usage returns below the threshold.</p>
<p id="GUID-8B19A349-4075-47F2-BC95-3CC88CA96BB1__EXAMPLE4-6USINGPOLLING-8F3EC957">Example&nbsp;4-6 Using Polling</p>
<pre dir="ltr">
pool.setUsageThreshold(myThreshold);
....
boolean lowMemory = false;
while (true) {
  if (pool.isUsageThresholdExceeded()) {
    lowMemory = true;
    redistributeTasks();  // redistribute tasks to other VMs
    stopReceivingTasks();  // stop receiving new tasks
  } else {
    if (lowMemory) { // resume receiving tasks
      lowMemory = false;
      resumeReceivingTasks();
    }
    // processing outstanding task
    ...
  }
  // sleep for sometime
  try {
    Thread.sleep(sometime);
  } catch (InterruptedException e) {
    ...
  }
}      
</pre>
<p><a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-8B19A349-4075-47F2-BC95-3CC88CA96BB1__EXAMPLE4-6USINGPOLLING-8F3EC957">Example&nbsp;4-6</a> does not differentiate the case in which the memory usage has temporarily dropped below the usage threshold from the case in which the memory usage remains above the threshold between two iterations. You can use the usage threshold count returned by the <code class="codeph">getUsageThresholdCount()</code> method to determine if the memory usage has returned below the threshold between two polls.</p>
<p>To test the collection usage threshold instead, you use the <code class="codeph">isCollectionUsageThresholdSupported()</code>, <code class="codeph">isCollectionThresholdExceeded()</code> and <code class="codeph">getCollectionUsageThreshold()</code> methods in the same way as shown in the <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-8B19A349-4075-47F2-BC95-3CC88CA96BB1__EXAMPLE4-6USINGPOLLING-8F3EC957">Example&nbsp;4-6</a>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-E2E075B3-9D4F-4F14-825C-99DA09B27812"></a>
<h3 id="JSMGM-GUID-E2E075B3-9D4F-4F14-825C-99DA09B27812" class="sect3">Threshold Notifications</h3>
<div>
<p>When the <code class="codeph">MemoryMXBean</code> interface detects that a memory pool has reached or exceeded its usage threshold, it emits a <span class="variable">usage threshold exceeded</span> notification. The <code class="codeph">MemoryMXBean</code> interface will not issue another usage threshold exceeded notification until the usage has fallen below the threshold and then exceeded it again. Similarly, when the memory usage after garbage collection exceeds the collection usage threshold, the <code class="codeph">MemoryMXBean</code> interface emits a collection usage threshold exceeded notification.</p>
<p><a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-E2E075B3-9D4F-4F14-825C-99DA09B27812__EXAMPLE4-7USINGTHRESHOLDNOTIFICATIO-8F41249C">Example&nbsp;4-7</a> implements the same logic as <a href="using-platform-mbean-server-and-platform-mxbeans.htm#GUID-8B19A349-4075-47F2-BC95-3CC88CA96BB1__EXAMPLE4-6USINGPOLLING-8F3EC957">Example&nbsp;4-6</a>, but uses usage threshold notification to detect low memory conditions. Upon receiving a notification, the listener notifies another thread to perform actions such as redistributing outstanding tasks, refusing to accept new tasks, or allowing new tasks to be accepted again.</p>
<p>In general, you should design the <code class="codeph">handleNotification</code> method to do a minimal amount of work, to avoid causing delay in delivering subsequent notifications. You should perform time-consuming actions in a separate thread. As multiple threads can concurrently call the notification listener, the listener should synchronize the tasks that it performs properly.</p>
<p id="GUID-E2E075B3-9D4F-4F14-825C-99DA09B27812__EXAMPLE4-7USINGTHRESHOLDNOTIFICATIO-8F41249C">Example&nbsp;4-7 Using Threshold Notifications</p>
<pre dir="ltr">
class MyListener implements javax.management.NotificationListener {
  public void handleNotification(Notification notification, Object handback)  {
    String notifType = notification.getType();
    if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED)) {
      // potential low memory, redistribute tasks to other VMs &amp; stop receiving new tasks.
      lowMemory = true;
      notifyAnotherThread(lowMemory);
    }
  }
}

// Register MyListener with MemoryMXBean
MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();
NotificationEmitter emitter = (NotificationEmitter) mbean;
MyListener listener = new MyListener();
emitter.addNotificationListener(listener, null, null);
</pre>
<p>Assuming this memory pool supports a usage threshold, you can set the threshold to some value (representing a number of bytes), above which the application will not accept new tasks.</p>
<pre dir="ltr">
pool.setUsageThreshold(myThreshold);
</pre>
<p>After this point, usage threshold detection is enabled and <code class="codeph">MyListener</code> class will handle notification.</p>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment120">
<tr>
<td class="cellalignment130">
<table class="cellalignment133">
<tr>
<td class="cellalignment124"><a href="using-jconsole.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment124"><a href="snmp-monitoring-and-management.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment132">
<table class="cellalignment123">
<tr>
<td class="cellalignment124"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment124"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment124"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
