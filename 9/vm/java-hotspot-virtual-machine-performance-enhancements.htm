<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Java HotSpot Virtual Machine Performance Enhancements</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This chapter describes the performance enhancements in the Java HotSpot Virtual Machine technology." />
<meta name="dcterms.created" content="2017-10-12T08:30:16Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Virtual Machine Guide" />
<meta name="dcterms.identifier" content="E68512-05" />
<meta name="dcterms.isVersionOf" content="JSJVM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="class-data-sharing.htm" title="Previous" type="text/html" />
<link rel="Next" href="support-non-java-languages.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSJVM.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSJVM.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSJVM.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-3BB4C26F-6DE7-4299-9329-A3E02620D50A"></a> <span id="PAGE" style="display:none;">11/17</span> <!-- End Header -->
<h1 id="JSJVM-GUID-3BB4C26F-6DE7-4299-9329-A3E02620D50A" class="sect1"><span class="enumeration_chapter">5</span> Java HotSpot Virtual Machine Performance Enhancements</h1>
<div>
<p>This chapter describes the performance enhancements in the Java HotSpot Virtual Machine technology.</p>
<div class="section">
<p class="subhead1">Topics:</p>
<ul style="list-style-type: disc;">
<li><a href="java-hotspot-virtual-machine-performance-enhancements.htm#GUID-D2E3DC58-D18B-4A6C-8167-4A1DFB4888E4" title="Compact strings is a feature that introduces a space-efficient internal representation for strings.">Compact Strings</a></li>
<li><a href="java-hotspot-virtual-machine-performance-enhancements.htm#GUID-85BA7DE7-4AF9-47D9-BFCF-379230C66412">Tiered Compilation</a></li>
<li><a href="java-hotspot-virtual-machine-performance-enhancements.htm#GUID-932AD393-1C8C-4E50-8074-F81AD6FB2444">Compressed Ordinary Object Pointer</a></li>
<li><a href="java-hotspot-virtual-machine-performance-enhancements.htm#GUID-E9E4603D-2B6B-44CA-A87E-FB14F0721745">Zero-Based Compressed Ordinary Object Pointers</a></li>
<li><a href="java-hotspot-virtual-machine-performance-enhancements.htm#GUID-6BD8FCB5-995B-4AE9-BFAA-B2C7DE2BA5CD">Escape Analysis</a></li>
</ul>
</div>
<!-- class="section" --></div>
<div class="sect2"><a id="GUID-D2E3DC58-D18B-4A6C-8167-4A1DFB4888E4"></a>
<h2 id="JSJVM-GUID-D2E3DC58-D18B-4A6C-8167-4A1DFB4888E4" class="sect2">Compact Strings</h2>
<div>
<p>Compact strings is a feature that introduces a space-efficient internal representation for strings.</p>
<p>Data from different applications suggests that strings are a major component of Java heap usage and that most <code class="codeph">java.lang.String</code> objects contain only Latin-1 characters. Such characters require only one byte of storage. As a result, half of the space in the internal character arrays of <code class="codeph">java.lang.String</code> objects are not used. The compact strings feature, introduced in Java SE 9 reduces the memory footprint, and also achieves reductions in garbage collection activity. The feature can be disabled if you observe performance regression issues in an application.</p>
<div class="section">
<p>The compact strings feature modifies the internal representation of the <code class="codeph">java.lang.String</code> class from a UTF-16 (two bytes) character array to a byte array with an additional field to identify character encoding. Other string-related classes, such as <code class="codeph">AbstractStringBuilder</code>, <code class="codeph">StringBuilder</code>, and <code class="codeph">StringBuffer</code> are updated to use a similar internal representation. The compact strings feature does not introduce new public APIs or interfaces, it purely modifies the internal representation of strings.</p>
<p>In Java SE 9, the compact strings feature is enabled by default. Therefore the <code class="codeph">java.lang.String</code> class stores characters as one byte per character, encoded as Latin-1. The additional character encoding field indicates which encoding is being used. The HotSpot VM string intrinsics are updated and optimized to support the internal representation.</p>
<p>The compact strings feature can be disabled by using the <code class="codeph">-XX:-CompactStrings</code> flag with the <code class="codeph">java</code> command line. When the feature is disabled, the <code class="codeph">java.lang.String</code> class stores characters as two bytes, encoded as UTF-16. This also reverts the HotSpot VM string intrinsics to use UTF-16 encoding.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-85BA7DE7-4AF9-47D9-BFCF-379230C66412"></a>
<h2 id="JSJVM-GUID-85BA7DE7-4AF9-47D9-BFCF-379230C66412" class="sect2">Tiered Compilation</h2>
<div>
<p>Tiered compilation, introduced in Java SE 7, brings client VM startup speeds to the server VM. Without tired compilation, a server VM uses the interpreter to collect profiling information about methods that is sent to the compiler. With tiered compilation, in addition to using the interpreter, the server VM uses the client compiler to generate compiled versions of methods that collect profiling information about themselves. The compiled code is substantially faster than the interpreter, and the program executes with greater performance during the profiling phase. In many cases, the startup is faster than the client VM startup speed because the final code produced by the server compiler might be available during the early stages of application initialization. The tiered compilation can also achieve better peak performance than a regular server VM because the faster profiling phase allows a longer period of profiling, which can yield better optimization.</p>
<p>Tiered compilation is enabled by default for the server VM. The 64-bit mode and <a href="java-hotspot-virtual-machine-performance-enhancements.htm#GUID-932AD393-1C8C-4E50-8074-F81AD6FB2444">Compressed Ordinary Object Pointer</a> are supported. You can disable tiered compilation by using the <code class="codeph">-XX:-TieredCompilation</code> flag with the <code class="codeph">java</code> command.</p>
</div>
</div>
<div class="sect2"><a id="GUID-932AD393-1C8C-4E50-8074-F81AD6FB2444"></a>
<h2 id="JSJVM-GUID-932AD393-1C8C-4E50-8074-F81AD6FB2444" class="sect2">Compressed Ordinary Object Pointer</h2>
<div>
<p>An ordinary object pointer (oop) in Java Hotspot parlance, is a managed pointer to an object. Typically, an oop is the same size as a native machine pointer, which is 64-bit on an LP64 system. On an ILP32 system, maximum heap size is less than 4 gigabytes, which is insufficient for many applications. On an LP64 system, the heap used by a given program might have to be around 1.5 times larger than when it is run on an ILP32 system. This requirement is due to the expanded size of managed pointers. Memory is inexpensive, but these days bandwidth and cache are in short supply, so significantly increasing the size of the heap and only getting just over the 4 gigabyte limit is undesirable.</p>
<p>Managed pointers in the Java heap point to objects that are aligned on 8-byte address boundaries. Compressed oops represent managed pointers (in many but not all places in the Java Virtual Machine (JVM) software) as 32-bit object offsets from the 64-bit Java heap base address. Because they're object offsets rather than byte offsets, oops can be used to address up to four billion <span class="italic">objects</span> (not bytes), or a heap size of up to about 32 gigabytes. To use them, they must be scaled by a factor of 8 and added to the Java heap base address to find the object to which they refer. Object sizes using compressed oops are comparable to those in ILP32 mode.</p>
<p>The term <span class="italic">decode</span> refer to the operation by which a 32-bit compressed oop is converted to a 64-bit native address and added into the managed heap. The term <span class="italic">encode</span> refers to that inverse operation.</p>
<p>Compressed oops is supported and enabled by default in Java SE 6u23 and later. In Java SE 7, compressed oops is enabled by default for 64-bit JVM processes when <code class="codeph">-Xmx</code> isn't specified and for values of <code class="codeph">-Xmx</code> less than 32 gigabytes. For JDK releases earlier than 6u23 release, use the <code class="codeph">-XX:+UseCompressedOops</code> flag with the <code class="codeph">java</code> command to enable the compressed oops.</p>
</div>
</div>
<div class="sect2"><a id="GUID-E9E4603D-2B6B-44CA-A87E-FB14F0721745"></a>
<h2 id="JSJVM-GUID-E9E4603D-2B6B-44CA-A87E-FB14F0721745" class="sect2">Zero-Based Compressed Ordinary Object Pointers</h2>
<div>
<p>When the JVM uses compressed ordinary object pointers (oops) in a 64-bit JVM process, the JVM software sends a request to the operating system to reserve memory for the Java heap starting at virtual address zero. If the operating system supports such a request and can reserve memory for the Java heap at virtual address zero, then zero-based compressed oops are used.</p>
<p>When zero-based compressed oops are used, a 64-bit pointer can be decoded from a 32-bit object offset without including the Java heap base address. For heap sizes less than 4 gigabytes, the JVM software can use a byte offset instead of an object offset and thus also avoid scaling the offset by 8. Encoding a 64-bit address into a 32-bit offset is correspondingly efficient.</p>
<p>For Java heap sizes up to 26 gigabytes, the Solaris, Linux, and Windows operating systems typically can allocate the Java heap at virtual address zero.</p>
</div>
</div>
<div class="sect2"><a id="GUID-6BD8FCB5-995B-4AE9-BFAA-B2C7DE2BA5CD"></a>
<h2 id="JSJVM-GUID-6BD8FCB5-995B-4AE9-BFAA-B2C7DE2BA5CD" class="sect2">Escape Analysis</h2>
<div>
<p>Escape analysis is a technique by which the Java HotSpot Server Compiler can analyze the scope of a new object's uses and decide whether to allocate the object on the Java heap.</p>
<p>Escape analysis is supported and enabled by default in Java SE 6u23 and later.</p>
<p>The Java HotSpot Server Compiler implements the flow-insensitive escape analysis algorithm described in:</p>
<pre dir="ltr">
 [Choi99] Jong-Deok Choi, Manish Gupta, Mauricio Seffano,
          Vugranam C. Sreedhar, Sam Midkiff,
          "Escape Analysis for Java", Procedings of ACM SIGPLAN
          OOPSLA  Conference, November 1, 1999
</pre>
<p>An object's escape state, based on escape analysis, can be one of the following states:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">GlobalEscape</code>: The object escapes the method and thread. For example, an object stored in a static field, stored in a field of an escaped object, or returned as the result of the current method.</li>
<li><code class="codeph">ArgEscape</code>: The object is passed as an argument or referenced by an argument but does not globally escape during a call. This state is determined by analyzing the bytecode of the called method.</li>
<li><code class="codeph">NoEscape</code>: The object is a scalar replaceable object, which means that its allocation could be removed from generated code.</li>
</ul>
<p>After escape analysis, the server compiler eliminates the scalar replaceable object allocations and the associated locks from generated code. The server compiler also eliminates locks for objects that do not globally escape. It does <span class="italic">not</span> replace a heap allocation with a stack allocation for objects that do not globally escape.</p>
<p>The following examples describe some scenarios for escape analysis:</p>
<ul style="list-style-type: disc;">
<li>
<p>The server compiler might eliminate certain object allocations. For example, a method makes a defensive copy of an object and returns the copy to the caller.</p>
<pre dir="ltr">
public class Person {
  private String name;
  private int age;
  public Person(String personName, int personAge) {
    name = personName;
                age = personAge;
  }
        
  public Person(Person p) { this(p.getName(), p.getAge()); }
  public int getName() { return name; }
  public int getAge() { return age; }
}

public class Employee {
  private Person person;
  
        // makes a defensive copy to protect against modifications by caller
        public Person getPerson() { return new Person(person) };
        
        public void printEmployeeDetail(Employee emp) {
          Person person = emp.getPerson();
          // this caller does not modify the object, so defensive copy was unnecessary
                System.out.println ("Employee's name: " + person.getName() + "; age: "  + person.getAge());     
        }
}       
        
</pre>
<p>The method makes a copy to prevent modification of the original object by the caller. If the compiler determines that the <code class="codeph">getPerson</code> method is being invoked in a loop, then the compiler inlines that method. By using escape analysis, when the compiler determines that the original object is never modified, the compiler can optimize and eliminate the call to make a copy.</p>
</li>
<li>
<p>The server compiler might eliminate synchronization blocks (<span class="italic">lock elision</span>) if it determines that an object is thread local. For example, methods of classes such as <code class="codeph">StringBuffer</code> and <code class="codeph">Vector</code> are synchronized because they can be accessed by different threads. However, in most scenarios, they are used in a thread local manner. In cases where the usage is thread local, the compiler can optimize and remove the synchronization blocks.</p>
</li>
</ul>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment81">
<tr>
<td class="cellalignment88">
<table class="cellalignment86">
<tr>
<td class="cellalignment85"><a href="class-data-sharing.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment85"><a href="support-non-java-languages.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment90">
<table class="cellalignment84">
<tr>
<td class="cellalignment85"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment85"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment85"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
