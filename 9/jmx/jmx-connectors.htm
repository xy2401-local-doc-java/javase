<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>JMX Connectors</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2017-09-14T12:05:30Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Management Extensions Guide" />
<meta name="dcterms.identifier" content="E79011-02" />
<meta name="dcterms.isVersionOf" content="JSJMX" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="essentials-jmx-api.htm" title="Previous" type="text/html" />
<link rel="Next" href="lookup-services.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSJMX.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSJMX.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSJMX.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-A4CA2A4D-49EE-4DA8-871F-DD633C28DAD9"></a> <span id="PAGE" style="display:none;">16/95</span> <!-- End Header -->
<h1 id="JSJMX-GUID-A4CA2A4D-49EE-4DA8-871F-DD633C28DAD9" class="sect1"><span class="enumeration_chapter">11</span> JMX Connectors</h1>
<div>
<p>This chapter introduces the concepts of standard and dynamic management beans (MBeans) and shows how to use Java Management Extensions (JMX) technology to perform operations on MBeans, locally and remotely.</p>
</div>
<div class="sect2"><a id="GUID-681F18DA-8B9B-4FC2-8164-5BE0864A239C"></a>
<h2 id="JSJMX-GUID-681F18DA-8B9B-4FC2-8164-5BE0864A239C" class="sect2">Accessing Standard and Dynamic MBeans By Using the RMI Connector</h2>
<div>
<p>This example demonstrates standard and dynamic MBeans .</p>
<p>As seen in <a href="essentials-jmx-api.htm#GUID-DED0E9DB-8ABE-41D1-A3A7-BA7EDB377AE5">Essentials of the JMX API</a>, a standard MBean statically defines its management interface through the names of the methods it contains. A dynamic MBean implements a specific Java interface and reveals its attributes and operations at run time.</p>
<p>The JMX technology defines a connector based on Remote Method Invocation (RMI). The RMI connector supports the Java Remote Method Protocol (JRMP) transport. This connector allows you to connect to an MBean in an MBean server from a remote location, and perform operations on it, exactly as if the operations were performed locally.</p>
<p>The purpose of this example is to demonstrate the implementation of a standard MBean and a dynamic MBean. It shows how to perform operations on them, both locally, and remotely through an RMI connection between a server and a remote client.</p>
<p>When you run this example:</p>
<ul style="list-style-type: disc;">
<li>
<p>The server:</p>
<ul style="list-style-type: disc;">
<li>
<p>Creates an MBean server</p>
</li>
<li>
<p>Registers a <code class="codeph">SimpleStandard</code> and a <code class="codeph">SimpleDynamic</code> MBean in the local MBean server</p>
</li>
<li>
<p>Performs local operations on the MBeans</p>
</li>
<li>
<p>Creates an RMI connector server</p>
</li>
</ul>
</li>
<li>
<p>The client:</p>
<ul style="list-style-type: disc;">
<li>
<p>Creates an RMI connector</p>
</li>
<li>
<p>Registers a <code class="codeph">SimpleStandard</code> and a <code class="codeph">SimpleDynamic</code> MBean on the remote MBean server</p>
</li>
<li>
<p>Performs remote operations on both MBeans</p>
</li>
</ul>
</li>
</ul>
<div class="section">
<p class="subhead2">Analyzing the Classes Used in the Basic MBean Example</p>
</div>
<!-- class="section" -->
<ol>
<li>
<p>Copy the source code from <a href="jmx-connectors-example.htm">JMX Connectors</a> to the <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Basic</code> directory. Inside this directory, you will create copies of:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Server.java</code></li>
<li><code class="codeph">SimpleStandardMBean.java</code></li>
<li><code class="codeph">SimpleStandard.java</code></li>
<li><code class="codeph">SimpleDynamic.java</code></li>
<li><code class="codeph">ClientListener.java</code></li>
<li><code class="codeph">Client.java</code></li>
<li><code class="codeph">README</code></li>
</ul>
</li>
<li>
<p>Open each <code class="codeph">*.java</code> file in your IDE or a text editor.</p>
</li>
</ol>
<p>The following sections analyze each of the classes used in the basic MBean example, and explain how the classes perform the operations described in the preceding section.</p>
</div>
<div class="sect3"><a id="GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1"></a>
<h3 id="JSJMX-GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1" class="sect3">Server.java in the MBean Example</h3>
<div>
<p>Due to its size, the <code class="codeph">Server.java</code> class is shown in the following code excerpts:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="jmx-connectors.htm#GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-1MBEANEXAMPLECLASSSERV-BE43758F">CODE&nbsp;EXAMPLE&nbsp;3-1 MBean Example Class Server.java (Excerpt 1)</a></p>
</li>
<li>
<p><a href="jmx-connectors.htm#GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-2MBEANEXAMPLECLASSSERV-BE437B38">CODE&nbsp;EXAMPLE&nbsp;3-2 MBean Example Class Server.java (Excerpt 2)</a></p>
</li>
<li>
<p><a href="jmx-connectors.htm#GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-3MBEANEXAMPLECLASSSERV-BE437FC9">CODE&nbsp;EXAMPLE&nbsp;3-3 MBean Example Class Server.java (Excerpt 3)</a></p>
</li>
<li>
<p><a href="jmx-connectors.htm#GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-4MBEANEXAMPLECLASSSERV-BE4384A1">CODE&nbsp;EXAMPLE&nbsp;3-4 MBean Example Class Server.java (Excerpt 4)</a></p>
</li>
<li>
<p><a href="jmx-connectors.htm#GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-5MBEANEXAMPLECLASSSERV-BE438E4D">CODE&nbsp;EXAMPLE&nbsp;3-5 MBean Example Class Server.java (Excerpt 5)</a></p>
</li>
</ul>
<div class="section" id="GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-1MBEANEXAMPLECLASSSERV-BE43758F">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-1 MBean Example Class Server.java (Excerpt 1)</p>
<pre dir="ltr">
 
public class Server { 
 
 public static void main(String[] args) { 
     try { 
          
         MBeanServer mbs = MBeanServerFactory.createMBeanServer(); 
         waitForEnterPressed(); 
 
         String domain = mbs.getDefaultDomain(); 
         waitForEnterPressed(); 
 
         String mbeanClassName = "SimpleStandard"; 
         String mbeanObjectNameStr = 
             domain + ":type=" + mbeanClassName + ",name=1"; 
         ObjectName mbeanObjectName = 
             createSimpleMBean(mbs, mbeanClassName, mbeanObjectNameStr); 
         waitForEnterPressed(); 
 
         printMBeanInfo(mbs, mbeanObjectName, mbeanClassName); 
         waitForEnterPressed(); 
 
         manageSimpleMBean(mbs, mbeanObjectName, mbeanClassName); 
         waitForEnterPressed(); 
 
         mbeanClassName = "SimpleDynamic"; 
         mbeanObjectNameStr = 
             domain + ":type=" + mbeanClassName + ",name=1"; 
         mbeanObjectName = 
             createSimpleMBean(mbs, mbeanClassName, mbeanObjectNameStr); 
         waitForEnterPressed(); 
 
         printMBeanInfo(mbs, mbeanObjectName, mbeanClassName); 
         waitForEnterPressed(); 
 
         manageSimpleMBean(mbs, mbeanObjectName, mbeanClassName); 
         waitForEnterPressed(); 
 
         [...] 
 
</pre>
<p>Examining this class, you can see that the following occurs:</p>
<p>First, the <code class="codeph">Server.java</code> class creates a new MBean server called <code class="codeph">mbs</code> by calling the <code class="codeph">createMBeanServer()</code> method of the <code class="codeph">MBeanServerFactory</code> class.</p>
<p>Then, the default domain in which the MBean server is registered is obtained with a call to the <code class="codeph">getDefaultDomain()</code> method of the <code class="codeph">MBeanServer</code> interface. The domain is identified by the string <code class="codeph">domain</code>.</p>
<p>The MBean class named <code class="codeph">SimpleStandard</code> is also identified by a variable, in this case the string <code class="codeph">mbeanClassName</code>. <code class="codeph">SimpleStandard</code> is the name of the Java class for the Java object of which this MBean is an instance. The <code class="codeph">SimpleStandard.java</code> object is examined in <a href="security.htm#GUID-EB298AF7-E702-4DFB-BCB3-3F60AA706192">SimpleStandard.java in the Fine-Grained Security Example</a>.</p>
<p>Another variable, the string <code class="codeph">mbeanObjectNameStr</code>, is defined as the combination of the domain, plus the following key=value pairs:</p>
<ul style="list-style-type: disc;">
<li>The <code class="codeph">type</code>, which in this case is the <code class="codeph">mbeanClassName</code>.</li>
<li>A <code class="codeph">name</code>, to differentiate this MBean from other MBeans of the same type that might be created subsequently. In this case the name number is <code class="codeph">1</code>.</li>
</ul>
<p>The purpose of <code class="codeph">mbeanObjectNameStr</code> is to give the MBean a human-readable identifier.</p>
<p>A call to createSimpleMBean() creates and registers the SimpleStandard MBean in the local MBean server, with the given object name.</p>
<p>The operations <code class="codeph">printMBeanInfo()</code>, and <code class="codeph">manageSimpleMBean()</code> are then performed on the <code class="codeph">SimpleStandard</code> MBean. Like <code class="codeph">createSimpleMBean()</code>, these methods are defined later in the <code class="codeph">Server.java</code> code, and are shown in <a href="jmx-connectors.htm#GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-4MBEANEXAMPLECLASSSERV-BE4384A1">CODE&nbsp;EXAMPLE&nbsp;3-4 MBean Example Class Server.java (Excerpt 4)</a> and <a href="jmx-connectors.htm#GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-5MBEANEXAMPLECLASSSERV-BE438E4D">CODE&nbsp;EXAMPLE&nbsp;3-5 MBean Example Class Server.java (Excerpt 5)</a>.</p>
<p>In code that is not shown here, a second MBean of the type <code class="codeph">SimpleDynamic</code> is created and registered in the MBean server in exactly the same way as the <code class="codeph">SimpleStandard</code> MBean. As the name suggests, this MBean is an instance of the <code class="codeph">SimpleDynamic</code> Java object, which is examined in <a href="jmx-connectors.htm#GUID-D17D3B4F-E305-4665-B7CB-45E72BA77606">SimpleDynamic.java in the MBean Example</a>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-2MBEANEXAMPLECLASSSERV-BE437B38">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-2 MBean Example Class Server.java (Excerpt 2)</p>
<pre dir="ltr">
 
[...] 
 
JMXServiceURL url = 
  new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9999/server"); 
JMXConnectorServer cs = 
  JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs); 
cs.start(); 
waitForEnterPressed(); 
cs.stop(); 
 
[...] 
 
</pre>
<p>In <span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-2 MBean Example Class Server.java (Excerpt 2)</span>, an RMI connector server is created so that operations can be performed on the MBeans remotely. A call to the class <code class="codeph">JMXServiceURL</code> creates a new service URL called <code class="codeph">url</code>, which serves as an address for the connector server. In this example, the service URL is given in <span class="italic">JNDI form</span>, rather than in <span class="italic">encoded form</span> (see the API documentation for the <code class="codeph">javax.management.remote.rmi</code> package for an explanation of JNDI form). This service URL defines the following:</p>
<ul style="list-style-type: disc;">
<li>The connector will use the default RMI transport, denoted by <code class="codeph">rmi</code>.</li>
<li>The RMI registry in which the RMI connector stub will be stored will be running on port <code class="codeph">9999</code> on the local host, and the server address will be registered under the name <code class="codeph">server</code>. The port <code class="codeph">9999</code> specified in the example is arbitrary; you can use any available port.</li>
</ul>
<p>An RMI connector server named <code class="codeph">cs</code> is created by calling the constructor <code class="codeph">JMXConnectorServerFactory</code>, with the service URL <code class="codeph">url</code>, a <code class="codeph">null</code> environment map, and the MBean server <code class="codeph">mbs</code> as parameters. The connector server <code class="codeph">cs</code> is launched by calling the <code class="codeph">start()</code> method of <code class="codeph">JMXConnectorServer</code>, whereupon <code class="codeph">RMIConnectorServer</code> exports the RMI object <code class="codeph">server</code> to the RMI registry. The connection will remain open until the Enter key is pressed, as instructed by the simple method <code class="codeph">waitForEnterPressed</code>, that is defined later in the <code class="codeph">Server</code> code.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-3MBEANEXAMPLECLASSSERV-BE437FC9">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-3 MBean Example Class Server.java (Excerpt 3)</p>
<pre dir="ltr">
 
[...] 
 
private static ObjectName createSimpleMBean(MBeanServer mbs, 
                                              String mbeanClassName, 
                                              String mbeanObjectNameStr) { 
     echo("\n&gt;&gt;&gt; Create the " + mbeanClassName + 
          " MBean within the MBeanServer"); 
     echo("ObjectName = " + mbeanObjectNameStr); 
     try { 
          ObjectName mbeanObjectName = 
             ObjectName.getInstance(mbeanObjectNameStr); 
          mbs.createMBean(mbeanClassName, mbeanObjectName); 
             return mbeanObjectName; 
          } catch (Exception e) { 
            echo(       "!!! Could not create the " +  
                  mbeanClassName + " MBean !!!"); 
            e.printStackTrace(); 
            echo("\nEXITING...\n"); 
            System.exit(1); 
        } 
        return null; 
     } 
 
[...] 
 
</pre>
<p><span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-3 MBean Example Class Server.java (Excerpt 3)</span> shows the definition of the <code class="codeph">createSimpleMBean()</code> method. In this method, the MBean instance with the object name <code class="codeph">mbeanObjectNameStr</code> is passed to the <code class="codeph">getInstance()</code> method of the <code class="codeph">ObjectName</code> interface to create a new object name for registering the MBean inside the MBean server. The resulting object name instance is named <code class="codeph">mbeanObjectName</code>. A call to the <code class="codeph">MBeanServer</code> method <code class="codeph">createMBean()</code> then instantiates an MBean defined by the combination of the Java object identified by <code class="codeph">mbeanClassName</code> and the MBean instance <code class="codeph">mbeanObjectName</code> and registers this MBean in the MBean server <code class="codeph">mbs</code>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-4MBEANEXAMPLECLASSSERV-BE4384A1">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-4 MBean Example Class Server.java (Excerpt 4)</p>
<pre dir="ltr">
[...] 
 
private static void printMBeanInfo(MBeanServer mbs, 
                                     ObjectName mbeanObjectName, 
                                     String mbeanClassName) { 
     MBeanInfo info = null; 
     try { 
         info = mbs.getMBeanInfo(mbeanObjectName); 
     } catch (Exception e) { 
         echo(  "!!! Could not get MBeanInfo object for " + 
         mbeanClassName +" !!!"); 
         e.printStackTrace(); 
         return; 
     } 
 
     MBeanAttributeInfo[] attrInfo = info.getAttributes(); 
     if (attrInfo.length &gt; 0) { 
         for (int i = 0; i &lt; attrInfo.length; i++) { 
        echo(" ** NAME:    " + attrInfo[i].getName()); 
        echo("    DESCR:   " + attrInfo[i].getDescription()); 
        echo("    TYPE:    " + attrInfo[i].getType() + 
                "READ: "+ attrInfo[i].isReadable() + 
                "WRITE: "+ attrInfo[i].isWritable()); 
        } 
     } else echo(" ** No attributes **"); 
 
[...] 
</pre>
<p>In <span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-4 MBean Example Class Server.java (Excerpt 4)</span> , we see the definition of the method <code class="codeph">printMBeanInfo()</code>. The <code class="codeph">printMBeanInfo()</code> method calls the <code class="codeph">MBeanServer</code> method <code class="codeph">getMBeanInfo()</code> to obtain details of the attributes and operations that are exposed by the MBean <code class="codeph">mbeanObjectName</code>. <code class="codeph">MBeanAttributeInfo</code> defines the following methods, each of which is called in turn to obtain information about the <code class="codeph">mbeanObjectName</code> MBean&rsquo;s attributes:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">getName</code>: Obtains the attribute&rsquo;s name.</li>
<li><code class="codeph">getDescription</code>: Obtains the human readable description of the attribute.</li>
<li><code class="codeph">getType</code>: Obtains the class name of the attribute.</li>
<li><code class="codeph">isReadable</code>: Determines whether or not the attribute is readable.</li>
<li><code class="codeph">isWritable</code>: Determines whether or not the attribute is writable.</li>
</ul>
<p>In code that is not shown here, calls are made to obtain information about the <code class="codeph">mbeanObjectName</code> MBean&rsquo;s constructors, operations and notifications:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">MBeanConstructorInfo</code>: Obtains information about the MBean&rsquo;s Java class.</li>
<li><code class="codeph">MBeanOperationInfo</code>: Learns what operations the MBean performs, and what parameters it takes.</li>
<li><code class="codeph">MBeanNotificationInfo</code>: Finds out what notifications the MBean sends when its operations are performed.</li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-89B47AE8-B4FA-44EA-BB90-8F8C9D0710E1__CODEEXAMPLE3-5MBEANEXAMPLECLASSSERV-BE438E4D">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-5 MBean Example Class Server.java (Excerpt 5)</p>
<pre dir="ltr">
[...] 
 
private static void manageSimpleMBean(MBeanServer mbs, 
                                        ObjectName mbeanObjectName, 
                                        String mbeanClassName) { 
        try { 
            printSimpleAttributes(mbs, mbeanObjectName); 
 
            Attribute stateAttribute = new Attribute("State", 
                                                     "new state"); 
            mbs.setAttribute(mbeanObjectName, stateAttribute); 
 
            printSimpleAttributes(mbs, mbeanObjectName); 
             
            echo("\n    Invoking reset operation..."); 
            mbs.invoke(mbeanObjectName, "reset", null, null); 
 
            printSimpleAttributes(mbs, mbeanObjectName); 
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 
    } 
 
    private static void printSimpleAttributes( 
                                        MBeanServer mbs, 
                                        ObjectName mbeanObjectName) { 
        try { 
            String State =  
               (String) mbs.getAttribute(mbeanObjectName, "State"); 
            Integer NbChanges = 
               (Integer) mbs.getAttribute(mbeanObjectName, 
                                          "NbChanges"); 
        } catch (Exception e) { 
            echo(       "!!! Could not read attributes !!!"); 
            e.printStackTrace(); 
        } 
   } 
 
[...]  
</pre>
<p><span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-5 MBean Example Class Server.java (Excerpt 5)</span> demonstrates a method for managing a simple MBean.</p>
<p>The <code class="codeph">manageSimpleMBean()</code> method first of all calls the <code class="codeph">printSimpleAttributes()</code> method that is also defined by <code class="codeph">Server</code>. The <code class="codeph">printSimpleAttributes()</code> method obtains an MBean attribute called <code class="codeph">state</code> from the MBean <code class="codeph">mbeanObjectName</code>, as well as another MBean attribute called <code class="codeph">NbChanges</code>. Both of these attributes are defined in the <code class="codeph">SimpleStandard</code> class, shown in <a href="security.htm#GUID-EB298AF7-E702-4DFB-BCB3-3F60AA706192">SimpleStandard.java in the Fine-Grained Security Example</a>.</p>
<p>The <code class="codeph">manageSimpleMBean()</code> method then defines an attribute called <code class="codeph">stateAttribute</code>, which is an instance of the <code class="codeph">Attribute</code> class. The <code class="codeph">stateAttribute</code> attribute associates a value of <code class="codeph">new state</code> with the existing attribute <code class="codeph">state</code>, defined by <code class="codeph">SimpleStandard</code>. A call to the <code class="codeph">MBeanServer</code> method <code class="codeph">setAttribute()</code> then sets the <code class="codeph">mbeanObjectName</code> MBean&rsquo;s state to the new state defined by <code class="codeph">stateAttribute</code>.</p>
<p>Finally, a call to the <code class="codeph">MBeanServer</code> method <code class="codeph">invoke()</code> invokes the <code class="codeph">mbeanObjectName</code> MBean&rsquo;s <code class="codeph">reset</code> operation. The <code class="codeph">reset</code> operation is defined in the <code class="codeph">SimpleStandard</code> class.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-4F4C3AAF-B3A5-4165-A30F-963A88DF01CA"></a>
<h3 id="JSJMX-GUID-4F4C3AAF-B3A5-4165-A30F-963A88DF01CA" class="sect3">SimpleStandardMBean.java in the MBean Example</h3>
<div>
<p>The <code class="codeph">SimpleStandardMBean.java</code> class is shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-6 MBean Example Class <code class="codeph">SimpleStandardMBean.java</code></span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-6 MBean Example Class SimpleStandardMBean.java</p>
<pre dir="ltr">
 
public interface SimpleStandardMBean { 
 
       public String getState(); 
       public void setState(String s); 
       public int getNbChanges(); 
       public void reset(); 
 
} 
 
</pre>
<p>The <code class="codeph">SimpleStandardMBean.java</code> class is a straightforward JMX specification management interface for the MBean <code class="codeph">SimpleStandard</code>. This interface exposes the four operations defined by <code class="codeph">SimpleStandard</code> for management through a JMX agent.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-3DF0EA75-3F2E-4218-8A6D-08DC4D3BC4CC"></a>
<h3 id="JSJMX-GUID-3DF0EA75-3F2E-4218-8A6D-08DC4D3BC4CC" class="sect3">SimpleStandard.java in the MBean Example</h3>
<div>
<p>The <code class="codeph">SimpleStandard.java</code> class is shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-7 MBean Example Class <code class="codeph">SimpleStandard.java</code></span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-7 MBean Example Class SimpleStandard.java</p>
<pre dir="ltr">
 
public class SimpleStandard 
    extends NotificationBroadcasterSupport 
    implements SimpleStandardMBean { 
    public String getState() { 
       return state; 
    } 
    public void setState(String s) { 
       state = s; 
       nbChanges++; 
    } 
     
    public int getNbChanges() { 
        return nbChanges; 
    } 
     
    public void reset() { 
       AttributeChangeNotification acn =  
           new AttributeChangeNotification(this, 
                                          0, 
                                          0, 
                                          "NbChanges reset", 
                                          "NbChanges", 
                                          "Integer", 
                                          new Integer(nbChanges), 
                                          new Integer(0)); 
       state = "initial state"; 
       nbChanges = 0; 
       nbResets++; 
       sendNotification(acn); 
    } 
     
    public int getNbResets() { 
       return nbResets; 
    } 
 
    public MBeanNotificationInfo[] getNotificationInfo() { 
        return new MBeanNotificationInfo[] { 
          new MBeanNotificationInfo( 
          new String[] { 
            AttributeChangeNotification.ATTRIBUTE_CHANGE }, 
            AttributeChangeNotification.class.getName(), 
            "This notification is emitted when the reset()  
             method is called.") 
        }; 
    } 
     
    private String state = "initial state"; 
    private int nbChanges = 0; 
    private int nbResets = 0; 
 
}         
 
</pre>
<p>The <code class="codeph">SimpleStandard</code> class defines a straightforward JMX specification standard MBean. The <code class="codeph">SimpleStandard</code> MBean exposes operations and attributes for management by implementing the corresponding <code class="codeph">SimpleStandardMBean</code> interface, shown in <a href="security.htm#GUID-BBEDE9C9-5C81-4845-A307-2B402DE2E122">SimpleStandardMBean.java in the Subject Delegation Example</a>.</p>
<p>The simple operations exposed by this MBean are:</p>
<ul style="list-style-type: disc;">
<li>
<p>To define a state</p>
</li>
<li>
<p>To update this state</p>
</li>
<li>
<p>To count the number of times the state is updated</p>
</li>
<li>
<p>To reset the values of the state and the number of changes to their original value of zero</p>
</li>
<li>
<p>To send a notification whenever the reset operation is invoked</p>
</li>
</ul>
<p>The notification emitted by the reset operation is an instance of the class <code class="codeph">AttributeChangeNotification</code>, which collects information about the number of changes carried out on the <code class="codeph">State</code> attribute before calling reset. The content of the notification sent is defined by the <code class="codeph">MBeanNotificationInfo</code> instance.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-D17D3B4F-E305-4665-B7CB-45E72BA77606"></a>
<h3 id="JSJMX-GUID-D17D3B4F-E305-4665-B7CB-45E72BA77606" class="sect3">SimpleDynamic.java in the MBean Example</h3>
<div>
<p>The <code class="codeph">SimpleDynamic</code> class is shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-8 MBean Example Class <code class="codeph">SimpleDynamic.java</code></span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-8 MBean Example Class SimpleDynamic.java</p>
<pre dir="ltr">
 
public class SimpleDynamic 
    extends NotificationBroadcasterSupport 
    implements DynamicMBean { 
 
    public SimpleDynamic() { 
        buildDynamicMBeanInfo(); 
    } 
 
[...] 
</pre>
<p>The <code class="codeph">SimpleDynamic</code> dynamic MBean shows how to expose attributes and operations for management at runtime, by implementing the <code class="codeph">DynamicMBean</code> interface. It starts by defining a method, <code class="codeph">buildDynamicMBeanInfo()</code>, for obtaining information for the MBean dynamically. The <code class="codeph">buildDynamicMBeanInfo()</code> method builds the <code class="codeph">MBeanInfo</code> for the dynamic MBean.</p>
<p>The rest of the code of <code class="codeph">SimpleDynamic</code> corresponds to the implementation of the <code class="codeph">DynamicMBean</code> interface. The attributes, operations and notifications exposed are identical to those exposed by the <code class="codeph">SimpleStandard</code> MBean.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-871B0138-49A6-462D-8CC0-981C595822D0"></a>
<h3 id="JSJMX-GUID-871B0138-49A6-462D-8CC0-981C595822D0" class="sect3">ClientListener.java in the MBean Example</h3>
<div>
<p>The <code class="codeph">ClientListener.java</code> class is shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-9 MBean Example Class <code class="codeph">ClientListener.java</code></span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-9 MBean Example Class ClientListener.java</p>
<pre dir="ltr">
 
 
public class ClientListener implements NotificationListener {  
 public void handleNotification(Notification notification, Object handback)  
     {  
         System.out.println("\nReceived notification: " + notification);  
     }  
} 
 
</pre>
<p>The <code class="codeph">ClientListener</code> class implements a straightforward JMX specification notification listener. The <code class="codeph">handleNotification()</code> method of the <code class="codeph">NotificationListener</code> interface is called upon reception of a notification, and prints out a message to confirm that a notification has been received.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-1F7EEC29-1A49-459E-B48A-3AD5878D3638"></a>
<h3 id="JSJMX-GUID-1F7EEC29-1A49-459E-B48A-3AD5878D3638" class="sect3">Client.java in the MBean Example</h3>
<div>
<p>The <code class="codeph">Client.java</code> class is shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;3-10 MBean Example Class <code class="codeph">Client.java</code></span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;3-10 MBean Example Class Client.java</p>
<pre dir="ltr">
 
public class Client { 
 
  public static void main(String[] args) { 
    try { 
      // Create an RMI connector client 
      // 
      JMXServiceURL url = new JMXServiceURL( 
         "service:jmx:rmi:///jndi/rmi://localhost:9999/server"); 
      JMXConnector jmxc = JMXConnectorFactory.connect(url, null); 
      ClientListener listener = new ClientListener(); 
      MBeanServerConnection mbsc = jmxc.getMBeanServerConnection(); 
      waitForEnterPressed();       
       
      // Get domains from MBeanServer 
      // 
      String domains[] = mbsc.getDomains(); 
      for (int i = 0; i &lt; domains.length; i++) { 
          System.out.println("Domain[" + i + "] = " + domains[i]); 
      } 
      waitForEnterPressed();       
 
      String domain = mbsc.getDefaultDomain();       
   
      // Create SimpleStandard MBean  
      ObjectName mbeanName =  
             new ObjectName(domain +":type=SimpleStandard,name=2"); 
      mbsc.createMBean("SimpleStandard", stdMBeanName, null, null); 
      waitForEnterPressed();       
             
      // Create SimpleDynamic MBean 
      ObjectName dynMBeanName = 
          new ObjectName(domain +":type=SimpleDynamic,name=2"); 
      echo("\nCreate SimpleDynamic MBean..."); 
      mbsc.createMBean("SimpleDynamic", dynMBeanName, null, null); 
      waitForEnterPressed(); 
       
      // Get MBean count 
      echo("\nMBean count = " + mbsc.getMBeanCount()); 
 
      // Query MBean names 
      echo("\nQuery MBeanServer MBeans:"); 
      Set names = mbsc.queryNames(null, null); 
      for (Iterator i = names.iterator(); i.hasNext(); ) { 
      echo(     "ObjectName = " + (ObjectName) i.next()); 
      } 
      waitForEnterPressed(); 
       
      mbsc.setAttribute(stdMBeanName, 
                        new Attribute("State", "changed state")); 
 
      SimpleStandardMBean proxy = JMX.newMBeanProxy( 
          mbsc, stdMBeanName, SimpleStandardMBean.class, true); 
      echo("\nState = " + proxy.getState()); 
 
      ClientListener listener = new ClientListener(); 
      mbsc.addNotificationListener(stdMBeanName, listener, null, null); 
 
      mbsc.invoke(stdMBeanName, "reset", null, null); 
 
      mbsc.removeNotificationListener(stdMBeanName, listener); 
      mbsc.unregisterMBean(stdMBeanName); 
       
      [...] 
       
      jmxc.close(); 
    } catch (Exception e) { 
      e.printStackTrace(); 
    } 
  } 
} 
[...] 
</pre>
<p>The <code class="codeph">Client.java</code> class creates an RMI connector client that is configured to connect to the RMI connector server created by <code class="codeph">Server.java</code>. <code class="codeph">Client.java</code> defines the same service URL <code class="codeph">url</code> as that defined by <code class="codeph">Server.java</code>. This allows the connector client to retrieve the RMI connector server stub named <code class="codeph">server</code> from the RMI registry running on port <code class="codeph">9999</code> of the local host, and to connect to the RMI connector server.</p>
<p>With the RMI registry identified, the connector client can be created. The connector client, <code class="codeph">jmxc</code>, is an instance of the interface <code class="codeph">JMXConnector</code>, created by the <code class="codeph">connect()</code> method of <code class="codeph">JMXConnectorFactory</code>. The <code class="codeph">connect()</code> method is passed the parameters <code class="codeph">url</code> and a <code class="codeph">null</code> environment map when it is called.</p>
<p>The Client also creates an instance of <code class="codeph">ClientListener</code>, to listen for notifications, as shown in <a href="jmx-connectors.htm#GUID-871B0138-49A6-462D-8CC0-981C595822D0">ClientListener.java in the MBean Example</a>.</p>
<p>An instance of a JMX specification <code class="codeph">MBeanServerConnection</code>, named <code class="codeph">mbsc</code>, is then created by calling the <code class="codeph">getMBeanServerConnection()</code> method of the <code class="codeph">JMXConnector</code> instance <code class="codeph">jmxc</code>.</p>
<p>The connector client is now connected to the MBean server created by <code class="codeph">Server.java</code>, and can register MBeans and perform operations on them with the connection remaining completely transparent to both ends.</p>
<p>The client creates and registers the <code class="codeph">SimpleStandard</code> MBean and the SimpleDynamic MBean in the MBean server with a call to the <code class="codeph">createMBean()</code> method of <code class="codeph">MBeanServerConnection</code>, and performs the operations defined by <code class="codeph">SimpleStandard</code> and <code class="codeph">SimpleDynamic</code> as if they were local JMX specification MBean operations.</p>
<p>MBean proxies allow you to access an MBean through a Java interface, allowing you to make calls on the proxy rather than having to write lengthy code to access a remote MBean. An MBean proxy for <code class="codeph">SimpleStandardMBean</code> is created here by calling the method <code class="codeph">newMBeanProxy()</code> in the <code class="codeph">javax.management.JMX</code> class, passing it the MBean&rsquo;s <code class="codeph">MBeanServerConnection</code>, object name, the class name of the MBean interface and true, to signify that the proxy must behave as a <code class="codeph">NotificationBroadcaster</code>. You can make proxies for MXBeans in exactly the same way as for standard MBeans, by simply calling <code class="codeph">newMXBeanProxy()</code> instead of <code class="codeph">newMBeanProxy()</code>.</p>
<p>The code for the different operations performed on <code class="codeph">SimpleDynamic</code> is not shown here, because the operations are the same as those performed on <code class="codeph">SimpleStandard</code>.</p>
<p>Finally, the client unregisters the <code class="codeph">SimpleStandard</code> MBean and closes the connection. The final <code class="codeph">removeNotificationListener</code> is optional, as listeners registered by a remote client are removed when that client is closed.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-2DC09ACD-39C8-4132-BA5D-5DAAD15D5916"></a>
<h2 id="JSJMX-GUID-2DC09ACD-39C8-4132-BA5D-5DAAD15D5916" class="sect2">Running the MBean Example</h2>
<div>
<p>Having examined the example classes, you can run the example. To run the example:</p>
<ol>
<li>Compile the Java classes.
<div class="p">
<pre dir="ltr">
$ javac *.java
</pre></div>
</li>
<li>Start an RMI registry on port <code class="codeph">9999</code> of the local host.
<p>The RMI registry is used by the <code class="codeph">Server</code> class to register the RMI connector stub.</p>
<div class="p">
<pre dir="ltr">
$ rmiregistry 9999 &amp;
</pre></div>
</li>
<li>Start the <code class="codeph">Server</code> class.
<div class="p">
<pre dir="ltr">
$ java -classpath . Server
</pre></div>
<p>You will see confirmation of the creation of the MBean server and the creation of the <code class="codeph">SimpleStandard</code> MBean in the MBean server. You will then be prompted to press the Enter key to obtain information about, and then to perform operations on, the <code class="codeph">SimpleStandard</code> MBean.</p>
<p>After the operations on the <code class="codeph">SimpleStandard</code> are completed, the process is repeated for the <code class="codeph">SimpleDynamic</code> MBean.</p>
<p>After both the MBeans are created and their operations performed, you see the creation of an RMI connector server, to allow operations to be performed on the MBeans from the remote <code class="codeph">Client</code>.</p>
</li>
<li>Start the <code class="codeph">Client</code> class in another terminal window.
<div class="p">
<pre dir="ltr">
$ java -classpath . Client
</pre></div>
<p>You will see confirmation of the creation of the RMI connector client and of the connection with the connector server. You will also be informed of the domain name, and the creation and registration of <code class="codeph">SimpleStandard</code> and SimpleDynamic MBeans. The client will perform operations on <code class="codeph">SimpleStandard</code> and SimpleDynamic MBeans, before unregistering them.</p>
</li>
</ol>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment256">
<tr>
<td class="cellalignment263">
<table class="cellalignment261">
<tr>
<td class="cellalignment260"><a href="essentials-jmx-api.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment260"><a href="lookup-services.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment265">
<table class="cellalignment259">
<tr>
<td class="cellalignment260"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment260"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment260"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
