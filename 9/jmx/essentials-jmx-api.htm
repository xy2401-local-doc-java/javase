<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Essentials of the JMX API</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2017-09-14T12:05:30Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Management Extensions Guide" />
<meta name="dcterms.identifier" content="E79011-02" />
<meta name="dcterms.isVersionOf" content="JSJMX" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="getting-started.htm" title="Previous" type="text/html" />
<link rel="Next" href="jmx-connectors.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSJMX.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSJMX.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSJMX.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-DED0E9DB-8ABE-41D1-A3A7-BA7EDB377AE5"></a> <span id="PAGE" style="display:none;">15/95</span> <!-- End Header -->
<h1 id="JSJMX-GUID-DED0E9DB-8ABE-41D1-A3A7-BA7EDB377AE5" class="sect1"><span class="enumeration_chapter">10</span> Essentials of the JMX API</h1>
<div>
<p>This chapter introduces managed beans (MBeans) which are a core component of the Java Management Extensions (JMX) API.</p>
<p>An <span class="italic">MBean</span> is a managed Java object, similar to a JavaBean<sup>TM</sup>, that follows the design patterns set forth in the instrumentation level of the JMX Specification. An MBean can represent a device, an application, or any resource that is managed. MBeans expose a management interface, which is a set of readable and/or writable attributes and a set of invokable operations, along with a self-description. The management interface does not change throughout the life of an MBean instance. MBeans can also emit notifications when certain defined events occur.</p>
<p>The JMX Specification defines four types of MBean: <span class="italic">standard MBeans</span>, <span class="italic">dynamic MBeans</span>, <span class="italic">open MBeans</span> and <span class="italic">model MBeans</span>. The examples in this tutorial demonstrate the simplest type of MBean, namely standard MBeans.</p>
</div>
<div class="sect2"><a id="GUID-A7621810-656C-46D2-B06E-029F2B8662A6"></a>
<h2 id="JSJMX-GUID-A7621810-656C-46D2-B06E-029F2B8662A6" class="sect2">Standard MBeans</h2>
<div>
<p>You can define a standard MBean by writing a Java interface called <code class="codeph">SomethingMBean</code> and a Java class called <code class="codeph">Something</code> that implements that interface. Every method in the interface defines either an attribute or an operation in the MBean. By default every method defines an operation. Attributes and operations are simply methods which follow certain design patterns. A standard MBean is composed of the MBean interface which lists the methods for all exposed attributes and operations, and the class which implements this interface and provides the functionality of the instrumented resource.</p>
<p>The following sections describe an example standard MBean, and a simple JMX agent that manages the MBean. The code samples are provided in <a href="jmx-essentials-example.htm">JMX Essentials</a>. You can run the examples from the directory <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Essential/com/example/mbeans.</code></p>
</div>
<div class="sect3"><a id="GUID-27D7C6DF-DFA2-49BF-AF5A-C1D8172CC32C"></a>
<h3 id="JSJMX-GUID-27D7C6DF-DFA2-49BF-AF5A-C1D8172CC32C" class="sect3">MBean Interface</h3>
<div>
<p>An example of a basic MBean interface, named <code class="codeph">HelloMBean</code>, is shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-1 Example MBean Interface, HelloMBean</span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-1 MBean Interface, HelloMBean</p>
<pre dir="ltr">
 
package com.example.mbeans; 
 
public interface HelloMBean { 
 
    public void sayHello(); 
    public int add(int x, int y); 
 
    public String getName(); 
 
    public int getCacheSize(); 
    public void setCacheSize(int size); 
} 
 
</pre>
<p>An MBean interface takes the name of the Java class that implements it, with the suffix <span class="italic">MBean</span> added. The interface is called <code class="codeph">HelloMBean</code>. The <code class="codeph">Hello</code> class that implements this interface is described in <a href="essentials-jmx-api.htm#GUID-215E9966-9BF6-4201-848A-FE860BDF3DAD">MBean Implementation</a>.</p>
<p>According to the JMX specification, an MBean interface consists of named and typed attributes that are readable and possibly writable, and named and typed operations that can be invoked by the applications that are managed by the MBean. The <code class="codeph">HelloMBean</code> interface shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-1 MBean Interface, HelloMBean</span>, declares two operations: the Java methods <code class="codeph">add()</code> and <code class="codeph">sayHello()</code>.</p>
<p>Of the two attributes that are declared by <code class="codeph">HelloMbean</code>, <code class="codeph">Name</code> is a read-only string, and <code class="codeph">CacheSize</code> is an integer that can be both read and written. <span class="italic">Getter</span> and <span class="italic">setter</span> methods are declared, to allow the managed application to access and possibly change the attribute values. As defined by the JMX Specification, a getter is any public method whose name begins with <span class="italic">get</span> and which does not return void. A getter enables a manager to read the value of the attribute, whose type is that of the returned object. A setter is any public method whose name begins with <span class="italic">set</span> and which takes a single parameter. A setter enables a manager to write a new value in the attribute, whose type is the same as that of the parameter.</p>
<p>The implementation of these operations and attributes is shown in the following section.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-215E9966-9BF6-4201-848A-FE860BDF3DAD"></a>
<h3 id="JSJMX-GUID-215E9966-9BF6-4201-848A-FE860BDF3DAD" class="sect3">MBean Implementation</h3>
<div>
<p>The <code class="codeph">Hello</code> class shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-2 MBean Implementation Class, Hello</span> implements <code class="codeph">HelloMBean</code>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-2 MBean Implementation Class, Hello</p>
<pre dir="ltr">
 
package com.example.mbeans; 
 
public class Hello implements HelloMBean { 
    public void sayHello() { 
        System.out.println("hello, world"); 
    } 
 
    public int add(int x, int y) { 
        return x + y; 
    } 
 
    public String getName() { 
        return this.name; 
    } 
 
 
    public int getCacheSize() { 
        return this.cacheSize; 
    } 
 
    public synchronized void setCacheSize(int size) { 
        this.cacheSize = size; 
 
        System.out.println("Cache size now " + this.cacheSize); 
    } 
 
    private final String name = "Reginald"; 
    private int cacheSize = DEFAULT_CACHE_SIZE; 
    private static final int DEFAULT_CACHE_SIZE = 200; 
} 
 
</pre>
<p>In Example 2-2, the Java class <code class="codeph">Hello</code> provides the definitions of the operations and attributes declared by <code class="codeph">HelloMBean</code>. As you can see, the example<code class="codeph">sayHello()</code> and <code class="codeph">add()</code> operations are extremely simple, but real-life operations can be as simple or as sophisticated as you like.</p>
<p>Methods to get the <code class="codeph">Name</code> attribute and to get and set the <code class="codeph">cacheSize</code> attribute are also defined. In this example, the <code class="codeph">Name</code> attribute value never changes, but in a real scenario it might change as the managed resource runs. For example, the attribute might represent statistics such as uptime or memory usage. Here, it is merely the name &ldquo;Reginald&rdquo;.</p>
<p>Calling the <code class="codeph">setCacheSize</code> method allows you to alter the <code class="codeph">cacheSize</code> attribute from its declared default value of 200. In reality, changing the <code class="codeph">cacheSize</code> attribute could require other operations to be performed, such as discarding entries or allocating new ones. This example merely prints a message to confirm that the cache size is changed, but you can define more sophisticated operations in the place of the call to <code class="codeph">println()</code>.</p>
<p>With the <code class="codeph">Hello</code> MBean and its interface defined, they can be used to manage the resource they represent, as shown in the following section.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-FA3724F5-9E67-4002-82BE-B05716E902C3"></a>
<h3 id="JSJMX-GUID-FA3724F5-9E67-4002-82BE-B05716E902C3" class="sect3">Managing a Resource</h3>
<div>
<p>As described in the <a href="java-management-extensions-jmx-user-guide.htm">Java Management Extensions Technology User&rsquo;s Guide</a>, after a resource is instrumented by MBeans, the management of that resource is performed by a <span class="italic">JMX agent</span>.</p>
<p>The core component of a JMX agent is the <span class="italic">MBean server</span>, a managed object server in which MBeans are registered. See the API documentation for the <code class="codeph">MBeanServer</code> interface for details of the MBean server implementation. A JMX agent also includes a set of services to manage MBeans. <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-3 Creating a JMX Agent</span> presents a basic JMX agent, named <code class="codeph">Main</code>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-3 Creating a JMX Agent</p>
<pre dir="ltr">
 
package com.example.mbeans; 
 
import java.lang.management.*; 
import javax.management.*; 
 
public class Main { 
 
   public static void main(String[] args) throws Exception { 
 
      MBeanServer mbs = ManagementFactory.getPlatformMBeanServer(); 
 
      ObjectName name = new ObjectName("com.example.mbeans:type=Hello"); 
 
      Hello mbean = new Hello(); 
 
      mbs.registerMBean(mbean, name); 
 
      System.out.println("Waiting forever..."); 
      Thread.sleep(Long.MAX_VALUE); 
   } 
} 
 
</pre>
<p>In Example 2-3, the JMX agent <code class="codeph">Main</code> begins by obtaining any MBean server that is running on the platform, by calling the <code class="codeph">getPlatformMBeanServer()</code> method of the <code class="codeph">java.lang.management.ManagementFactory</code> class. If no MBean server is already running on the platform, then <code class="codeph">getPlatformMBeanServer()</code> creates one automatically by calling the JMX method <code class="codeph">MBeanServerFactory.createMBeanServer()</code>. The <code class="codeph">MBeanServer</code> instance obtained by <code class="codeph">Main</code> is named <code class="codeph">mbs</code>.</p>
<p>Next, <code class="codeph">Main</code> defines an object name for the MBean instance it will create. Every JMX MBean must have an object name. The object name is an instance of the JMX class <code class="codeph">ObjectName</code>, and must conform to the syntax defined by the JMX Specification, namely it must comprise a <span class="italic">domain</span>, and a list of <span class="italic">key-properties</span>. See the API documentation for the <code class="codeph">ObjectName</code> class for details of this syntax. In the object name defined by <code class="codeph">Main</code>, <code class="codeph">name</code>, the domain is <code class="codeph">com.example.mbeans</code> (the package in which the example MBeans are contained) and the key-property declares that this object is of the type <code class="codeph">Hello</code>.</p>
<p>An instance of a <code class="codeph">Hello</code> object is created, named <code class="codeph">mbean</code>. This <code class="codeph">Hello</code> object is an instance of the MBean <code class="codeph">Hello</code> that was defined in <a href="essentials-jmx-api.htm#GUID-215E9966-9BF6-4201-848A-FE860BDF3DAD">MBean Implementation</a>.</p>
<p>The <code class="codeph">Hello</code> object named <code class="codeph">mbean</code> is registered as an MBean in the MBean server <code class="codeph">mbs</code> with the object name <code class="codeph">name</code>, by passing the object and the object name into a call to the JMX method <code class="codeph">MBeanServer.registerMBean()</code>.</p>
<p>With the <code class="codeph">Hello</code> MBean registered in the MBean server, <code class="codeph">Main</code> will simply wait for management operations to be performed on <code class="codeph">Hello</code>. In the scope of this example, these management operations are invoking <code class="codeph">sayHello()</code>, and <code class="codeph">add()</code>, and getting and setting the attribute values.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-2DC4C102-AC0C-4E00-9AF7-341BE0AA74D0"></a>
<h3 id="JSJMX-GUID-2DC4C102-AC0C-4E00-9AF7-341BE0AA74D0" class="sect3">Running the Standard MBean Example</h3>
<div>
<p>Having examined the example classes, you can run the example. The Java Platform, Standard Edition includes a management and monitoring console, named JConsole, that is used to interact with the MBean in this example. JConsole is located in <code class="codeph"><span class="variable">JavaSE_HOME</span>/bin/jconsole</code>, in which <code class="codeph"><span class="variable">JavaSE_HOME</span></code> is the installation directory of the Java Platform, Standard Edition (Java SE platform).</p>
<p>To run the example:</p>
<ol>
<li>
<p>Copy the source code in <a href="jmx-essentials-example.htm">JMX Essentials</a> to the <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Essential</code>.</p>
</li>
<li>Compile the example Java classes.
<p><code class="codeph">$ javac com/example/mbeans/*.java</code></p>
</li>
<li>Start the <code class="codeph">Main</code> application.
<p><code class="codeph">$ java com.example.mbeans.Main</code></p>
<p>You will see a confirmation that <code class="codeph">Main</code> is waiting for something to happen.</p>
</li>
<li>Start JConsole in a different terminal window on the same machine.
<p><code class="codeph">$ jconsole</code></p>
<p>You will see the JConsole tool open, presenting a list of running JMX agents that you can connect to.</p>
</li>
<li>Select <code class="codeph">com.example.mbeans.Main</code> from the list in the &ldquo;New Connection&rdquo; window, and click on <span class="bold">Connect</span>.
<p>You will see a summary of your platform&rsquo;s current activity.</p>
</li>
<li>Click on the <span class="bold">MBeans</span> tab.
<p>This panel shows you all the MBeans currently registered in the MBean server.</p>
</li>
<li>In the left-hand frame, expand the <code class="codeph">com.example.mbeans</code> node in the MBean tree.
<p>You will see the example MBean <code class="codeph">Hello</code>, that was created and registered by <code class="codeph">Main</code>. If you click <code class="codeph">Hello</code>, you will see its associated Attributes and Operations nodes in the MBean tree.</p>
</li>
<li>Click on the <code class="codeph">Hello</code> MBean node in the MBean tree to display the <code class="codeph">Hello</code> MBean&rsquo;s metadata and its associated Descriptor.</li>
<li>Click the <code class="codeph">Attributes</code> node of the <code class="codeph">Hello</code> MBean in the MBean tree.
<p>This displays the MBean attributes that were defined by the <code class="codeph">Hello</code> class.</p>
</li>
<li>Change the value of the <code class="codeph">CacheSize</code> attribute to 150.
<p>In the terminal window in which you started <code class="codeph">Main</code>, you will see confirmation of this change of attribute.</p>
</li>
<li>Click the <code class="codeph">Operations</code> node of the Hello MBean in the MBean tree.
<p>Here you will see the two operations declared by the <code class="codeph">Hello</code> MBean, <code class="codeph">sayHello()</code> and <code class="codeph">add()</code>.</p>
</li>
<li>Invoke the <code class="codeph">sayHello()</code> operation, by clicking on the <code class="codeph">sayHello</code> button.
<p>A JConsole dialogue box will inform you that the method was invoked successfully, and you will see the message &ldquo;<span class="italic">hello, world</span>&rdquo; in the terminal window in which <code class="codeph">Main</code> is running.</p>
</li>
<li>Provide two integers for the <code class="codeph">add()</code> operation to add , and click the <code class="codeph">add</code> button.
<p>You will be informed of the answer in a JConsole dialogue box.</p>
</li>
<li>Click <span class="bold">Connection</span> and then <span class="bold">Exit</span>, to exit JConsole.</li>
</ol>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-A2DD5808-2DBC-4A36-B9DB-A58E86CB2503"></a>
<h2 id="JSJMX-GUID-A2DD5808-2DBC-4A36-B9DB-A58E86CB2503" class="sect2">Sending Notifications</h2>
<div>
<p>MBeans can generate notifications, for example to signal a state change, a detected event, or a problem.</p>
<p>For an MBean to generate notifications, it must implement the interface <code class="codeph">NotificationBroadcaster</code>, or its subinterface <code class="codeph">NotificationEmitter</code>. All you need to do to send a notification is to construct an instance of the class <code class="codeph">javax.management.Notification</code> or a subclass (such as <code class="codeph">AttributeChangedNotification</code>), and pass it to <code class="codeph">NotificationBroadcasterSupport.sendNotification</code>.</p>
<p>Every notification has a source. The source is the object name of the MBean that emitted the notification.</p>
<p>Every notification has a sequence number. This number can be used to order notifications coming from the same source when order matters and there is a danger of the notifications being handled in the wrong order. It is all right for the sequence number to be zero, but it is better for it to increment for each notification from a given MBean.</p>
<p>There is an example of a standard MBean that emits notifications in the directory <span class="italic">work_dir</span><code class="codeph">/jmx_examples/Notification/com/example/mbeans</code>. This example is essentially the same as the example in <a href="essentials-jmx-api.htm#GUID-A7621810-656C-46D2-B06E-029F2B8662A6">Standard MBeans</a>, except that the <code class="codeph">Hello</code> MBean implements the <code class="codeph">NotificationBroadcaster</code> interface.</p>
</div>
<div class="sect3"><a id="GUID-B85BE5D8-6932-41B5-BDDA-514C57B846B5"></a>
<h3 id="JSJMX-GUID-B85BE5D8-6932-41B5-BDDA-514C57B846B5" class="sect3">NotificationBroadcaster Interface</h3>
<div>
<p>As stated above, the only difference between this example and the one presented in <a href="essentials-jmx-api.htm#GUID-A7621810-656C-46D2-B06E-029F2B8662A6">Standard MBeans</a> is the fact that the MBean implementation allows for the sending of notifications. Notifications are activated by implementing the <code class="codeph">NotificationBroadcaster</code> interface, as shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-4 Implementing MBean Notifications</span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-4 Implementing MBean Notifications</p>
<pre dir="ltr">
 
package com.example.mbeans; 
 
import javax.management.*; 
 
public class Hello 
        extends NotificationBroadcasterSupport implements HelloMBean { 
 
    public void sayHello() { 
        System.out.println("hello, world"); 
    } 
 
    public int add(int x, int y) { 
        return x + y; 
    } 
 
    public String getName() { 
        return this.name; 
    } 
 
    public int getCacheSize() { 
        return this.cacheSize; 
    } 
 
    public synchronized void setCacheSize(int size) { 
        int oldSize = this.cacheSize; 
        this.cacheSize = size; 
 
        System.out.println("Cache size now " + this.cacheSize); 
 
        Notification n = 
            new AttributeChangeNotification(this, 
                                            sequenceNumber++, 
                                            System.currentTimeMillis(), 
                                            "CacheSize changed", 
                                            "CacheSize", 
                                            "int", 
                                            oldSize, 
                                            this.cacheSize); 
 
        sendNotification(n); 
    } 
 
    @Override 
    public MBeanNotificationInfo[] getNotificationInfo() { 
        String[] types = new String[] { 
            AttributeChangeNotification.ATTRIBUTE_CHANGE 
        }; 
        String name = AttributeChangeNotification.class.getName(); 
        String description = "An attribute of this MBean has changed"; 
        MBeanNotificationInfo info = 
            new MBeanNotificationInfo(types, name, description); 
        return new MBeanNotificationInfo[] {info}; 
    } 
 
    private final String name = "Reginald"; 
    private int cacheSize = DEFAULT_CACHE_SIZE; 
    private static final int DEFAULT_CACHE_SIZE = 200; 
 
    private long sequenceNumber = 1; 
} 
 
</pre>
<p>As you can see in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-4 Implementing MBean Notifications</span>, this <code class="codeph">Hello</code> MBean implementation extends the <code class="codeph">NotificationBroadcasterSupport</code> class, that itself implements the <code class="codeph">NotificationEmitter</code> interface.</p>
<p>The operations and attributes are set in the same way as before, with the only exception that the <code class="codeph">cacheSize</code> attribute&rsquo;s setter method now defines a new value <code class="codeph">oldSize</code>, which records the <code class="codeph">cacheSize</code> attribute&rsquo;s value prior to the set operation.</p>
<p>The notification is constructed from an instance, <code class="codeph">n</code>, of the JMX class <code class="codeph">AttributeChangeNotification</code>, which extends <code class="codeph">javax.management.Notification</code>. The notification is constructed within the definition of the <code class="codeph">setCacheSize()</code> method, from the following information, that is passed to <code class="codeph">AttributeChangeNotification</code> as parameters:</p>
<ul style="list-style-type: disc;">
<li>The object name of the source of the notification, namely the <code class="codeph">Hello</code> MBean, represented simply by <code class="codeph">this</code></li>
<li>A sequence number, which in this example is a long named <code class="codeph">sequenceNumber</code>, that is set at 1 and that increases incrementally</li>
<li>A timestamp</li>
<li>The content of the notification message</li>
<li>The name of the attribute that has changed, in this case <code class="codeph">cacheSize</code></li>
<li>The type of attribute that has changed</li>
<li>The old attribute value, in this case <code class="codeph">oldSize</code></li>
<li>The new attribute value, in this case <code class="codeph">this.cacheSize</code></li>
</ul>
<p>The notification n is then passed to the <code class="codeph">NotificationBroadcasterSupport.sendNotification()</code> method.</p>
<p>Finally, the <code class="codeph">MBeanNotification</code> is defined to describe the characteristics of the different notification instances emitted by the MBean for a given Java class of notification, which in this case is <code class="codeph">AttributeChangeNotification</code> notifications.</p>
<p>The MBean interface, <code class="codeph">HelloMBean</code>, and the JMX agent <code class="codeph">Main</code> are identical to those used in the previous example.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-EFD430B2-D827-4EE6-A695-2F6F26744067"></a>
<h3 id="JSJMX-GUID-EFD430B2-D827-4EE6-A695-2F6F26744067" class="sect3">Running the MBean Notification Example</h3>
<div>
<p>Having examined the example classes, you can now run the example. This example uses JConsole to interact with the <code class="codeph">Hello</code> MBean.To run the example:</p>
<ol>
<li>
<p>Copy the source code from <a href="jmx-mbean-notifications-example.htm">JMX MBean Notifications</a> to <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Notification</code>.</p>
</li>
<li>
<p>Compile the example Java classes.</p>
<div class="p">
<pre dir="ltr">
$ javac com/example/mbeans/*.java
</pre></div>
</li>
<li>
<p>Start the <code class="codeph">Main</code> application.</p>
<div class="p">
<pre dir="ltr">
$ java com.example.mbeans.Main
</pre></div>
<p>You will see confirmation that <code class="codeph">Main</code> is waiting for something to happen.</p>
</li>
<li>
<p>Start JConsole in a different terminal window on the same machine.</p>
<div class="p">
<pre dir="ltr">
$ jconsole
</pre></div>
<p>You will see the JConsole tool open, presenting a list of running JMX agents that you can connect to.</p>
</li>
<li>
<p>Select <code class="codeph">com.example.mbeans.Main</code> from the list in the <span class="wintitle">New Connection</span> window, and click on <span class="bold">Connect</span>.</p>
<p>You will see a summary of your platform&rsquo;s current activity.</p>
</li>
<li>
<p>Click on the <span class="bold">MBeans</span> tab.</p>
<p>This panel shows you all the MBeans currently registered in the MBean server.</p>
</li>
<li>
<p>In the left-hand frame, expand the <code class="codeph">com.example.mbeans</code> node in the MBean tree.</p>
<p>You will see the example MBean <code class="codeph">Hello</code>, that was created and registered by <code class="codeph">Main</code>. If you click on <code class="codeph">Hello</code>, you will see its associated <code class="codeph">Attributes</code>, <code class="codeph">Operations</code> and <code class="codeph">Notifications</code> nodes in the MBean tree.</p>
</li>
<li>
<p>Click on the <code class="codeph">Hello</code> MBean node in the MBean tree.</p>
<p>This displays the MBean&rsquo;s metadata and its associated Descriptor.</p>
</li>
<li>
<p>Click on the <code class="codeph">Notifications</code> node of the Hello MBean in the MBean tree.</p>
<p>You will see that the panel is blank.</p>
</li>
<li>
<p>Click on the &ldquo;Subscribe&rdquo; button.</p>
<p>The current number of notifications received (0), will be displayed in the Notifications node label.</p>
</li>
<li>
<p>Click on the <code class="codeph">Attributes</code> node of the <code class="codeph">Hello</code> MBean in the MBean tree, and change the value of the <code class="codeph">CacheSize</code> attribute to 150.</p>
<p>In the terminal window in which you started <code class="codeph">Main</code>, you will see confirmation of this change of attribute. You will also see that the number of notifications received displayed in the Notifications node has changed to 1.</p>
</li>
<li>
<p>Click on the <code class="codeph">Notifications</code> node of the <code class="codeph">Hello</code> MBean in the MBean tree again.</p>
<p>You will see the details of the notification that was sent.</p>
</li>
<li>Click on <span class="bold">Connection</span> and then <span class="bold">Exit</span>, to exit JConsole.</li>
</ol>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-41CDE7AB-FEAD-42E0-BCE6-933501B654E2"></a>
<h2 id="JSJMX-GUID-41CDE7AB-FEAD-42E0-BCE6-933501B654E2" class="sect2">Introducing MXBeans</h2>
<div>
<p>An MXBean is a new type of MBean that provides a simple way to code an MBean that only references a pre-defined set of types. In this way, you can be sure that your MBean will be usable by any client, including remote clients, without any requirement that the client have access to model-specific classes representing the types of your MBeans. MXBeans provide a convenient way to bundle related values together without requiring clients to be specially configured to handle the bundles.</p>
<p>In the same way as for standard MBeans, an MXBean is defined by writing a Java interface called <span class="italic">Something</span><code class="codeph">MXBean</code> and a Java class that implements that interface. However, unlike standard MBeans, MXBeans do not require the Java class to be called <code class="codeph">Something</code>. Every method in the interface defines either an attribute or an operation in the MXBean. The annotation <code class="codeph">@MXBean</code> can be also used to annotate the Java interface instead of requiring the interface&rsquo;s name to be followed by the MXBean suffix.</p>
<p>MXBeans provide a convenient way to bundle related values together in an MBean without requiring clients to be specially configured to handle the bundles when interacting with that MBean. MXBeans already existed in the Java 2 Platform, Standard Edition (J2SE) 5.0, in the package <code class="codeph">java.lang.management</code>. With the Java SE 6 platform, users can now define their own MXBeans, in addition to the standard set defined in <code class="codeph">java.lang.management</code>.</p>
<p>The key idea behind MXBeans is that types such as <code class="codeph">java.lang.management.MemoryUsage</code> that are referenced in the MXBean interface, <code class="codeph">java.lang.management.MemoryMXBean</code> in this case, are mapped into a standard set of types, the so-called Open Types that are defined in the package <code class="codeph">javax.management.openmbean</code>. The exact mapping rules appear in the MXBean specification, but to oversimplify we could say that simple types like <code class="codeph">int</code> or <code class="codeph">String</code> are unchanged, while complex types like <code class="codeph">MemoryUsage</code> get mapped to the standard type <code class="codeph">CompositeDataSupport</code>.</p>
<p>The operation of MXBeans is demonstrated by example programs that you will find in the directory <span class="italic">work_dir</span><code class="codeph">/jmx_examples/MXBean/com/example/mxbeans</code> after you have downloaded and unzipped the <code class="codeph">jmx_examples.zip</code> file. The MXBean example contains the following files:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">QueueSamplerMXBean</code> interface.</li>
<li><code class="codeph">QueueSampler</code> class that implements the MXBean interface.</li>
<li><code class="codeph">QueueSample</code> Java type returned by the <code class="codeph">getQueueSample()</code> method in the MXBean interface.</li>
<li><code class="codeph">Main</code>, the program that sets up and runs the example.</li>
</ul>
<p>The MXBean example performs the following actions.</p>
<ul style="list-style-type: disc;">
<li>Defines a simple MXBean that manages a resource of <code class="codeph">type Queue&lt;String&gt;</code>.</li>
<li>Declares a getter, <code class="codeph">getQueueSample</code>, in the MXBean that takes a snapshot of the queue when invoked and returns a Java class <code class="codeph">QueueSample</code> that bundles the following values together:</li>
<li>The time the snapshot was taken.</li>
<li>The queue size.</li>
<li>The head of the queue at that given time.</li>
<li>Registers the MXBean in an MBean server.</li>
</ul>
</div>
<div class="sect3"><a id="GUID-1BB36D3F-9ABA-4481-83E3-7E2A48983C93"></a>
<h3 id="JSJMX-GUID-1BB36D3F-9ABA-4481-83E3-7E2A48983C93" class="sect3">QueueSamplerMXBean Interface</h3>
<div>
<p><span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-5 QueueSamplerMXBean interface</span> shows the code of the sample <code class="codeph">QueueSamplerMXBean</code> interface.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-5 QueueSamplerMXBean interface</p>
<pre dir="ltr">
 
package com.example.mxbeans; 
 
public interface QueueSamplerMXBean { 
    public QueueSample getQueueSample(); 
    public void clearQueue(); 
} 
 
</pre>
<p>As you can see, you declare an MXBean interface in exactly the same way as you declare a standard MBean. The <code class="codeph">QueueSamplerMXBean</code> interface declares two operations, <code class="codeph">getQueueSample</code> and <code class="codeph">clearQueue</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-FF5986D4-6980-4773-BAE3-B596A1E1BDEC"></a>
<h3 id="JSJMX-GUID-FF5986D4-6980-4773-BAE3-B596A1E1BDEC" class="sect3">QueueSampler Class</h3>
<div>
<p>The <code class="codeph">QueueSampler</code> class implements the <code class="codeph">QueueSamplerMXBean</code> interface shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-6 QueueSampler Class</span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-6 QueueSampler Class</p>
<pre dir="ltr">
package com.example.mxbeans; 
 
import java.util.Date; 
import java.util.Queue; 
 
public class QueueSampler implements QueueSamplerMXBean { 
     
    private Queue&lt;String&gt; queue; 
     
    public QueueSampler(Queue&lt;String&gt; queue) { 
       this.queue = queue; 
    } 
     
    public QueueSample getQueueSample() { 
        synchronized (queue) { 
            return new QueueSample(new Date(), queue.size(), queue.peek()); 
        } 
    } 
     
    public void clearQueue() { 
        synchronized (queue) { 
            queue.clear(); 
        } 
    } 
} 
 
</pre>
<p>The MXBean operations <code class="codeph">getQueueSample()</code> and <code class="codeph">clearQueue()</code> declared by the MXBean interface are defined in <code class="codeph">QueueSampler</code>. The <code class="codeph">getQueueSample()</code> operation simply returns an instance of the <code class="codeph">QueueSample</code> Java type, created with the values returned by the <code class="codeph">java.util</code>.<code class="codeph">Queue</code> methods <code class="codeph">peek()</code> and <code class="codeph">size()</code> and an instance of <code class="codeph">java.util.Date</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-0526AEF2-5ED1-4499-BB62-DC09AFF290D8"></a>
<h3 id="JSJMX-GUID-0526AEF2-5ED1-4499-BB62-DC09AFF290D8" class="sect3">QueueSample Class</h3>
<div>
<p>The <code class="codeph">QueueSample</code> instance returned by <code class="codeph">QueueSampler</code> is defined in the <code class="codeph">QueueSample</code> class shown in <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-7 QueueSample Class</span>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-7 QueueSample Class</p>
<pre dir="ltr">
package com.example.mxbeans; 
 
import java.beans.ConstructorProperties; 
import java.util.Date; 
 
public class QueueSample { 
     
    private final Date date; 
    private final int size; 
    private final String head; 
     
    @ConstructorProperties({"date", "size", "head"}) 
    public QueueSample(Date date, int size, String head) { 
        this.date = date; 
        this.size = size; 
        this.head = head; 
    } 
     
    public Date getDate() { 
        return date; 
    } 
     
    public int getSize() { 
        return size; 
    } 
     
    public String getHead() { 
        return head; 
    } 
} 
 
</pre>
<p>In <code class="codeph">QueueSample</code> class, the MXBean framework calls all the getters in <code class="codeph">QueueSample</code> to convert the given instance into a <code class="codeph">CompositeData</code> and uses the <code class="codeph">@ConstructorProperties</code> annotation to reconstruct a <code class="codeph">QueueSample</code> instance from a <code class="codeph">CompositeData</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-7E8AF654-047B-4597-94DA-AA1FDE995EF6"></a>
<h3 id="JSJMX-GUID-7E8AF654-047B-4597-94DA-AA1FDE995EF6" class="sect3">Creating and Registering the MXBean in the MBean Server</h3>
<div>
<p>Having defined an MXBean interface and the class that implements it, as well as the Java type that is returned, the MXBean must now be created and registered in an MBean server. These actions are performed by the example class <code class="codeph">Main</code>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-8 MXBean example Main class</p>
<pre dir="ltr">
package com.example.mxbeans; 
 
import java.lang.management.ManagementFactory; 
import java.util.Queue; 
import java.util.concurrent.ArrayBlockingQueue; 
import javax.management.MBeanServer; 
import javax.management.ObjectName; 
 
public class Main { 
 
    public static void main(String[] args) throws Exception { 
        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer(); 
         
        ObjectName name = 
                new ObjectName("com.example.mxbeans:type=QueueSampler"); 
         
        Queue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(10); 
        queue.add("Request-1"); 
        queue.add("Request-2"); 
        queue.add("Request-3"); 
        QueueSampler mxbean = new QueueSampler(queue); 
         
        mbs.registerMBean(mxbean, name); 
         
        System.out.println("Waiting..."); 
        Thread.sleep(Long.MAX_VALUE); 
    } 
} 
 
</pre>
<p>The <code class="codeph">Main</code> class gets the platform MBean server, creates an object name for the MXBean <code class="codeph">QueueSampler</code>, creates a <code class="codeph">Queue</code> instance for the <code class="codeph">QueueSampler</code> MXBean to process, and feeds this Queue instance to a newly created <code class="codeph">QueueSampler</code> MXBean. The MXBean is then registered in the MBean server in exactly the same way as a standard MBean.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-592808D7-3734-4834-9650-455D25A5084B"></a>
<h3 id="JSJMX-GUID-592808D7-3734-4834-9650-455D25A5084B" class="sect3">Running the MXBean Example</h3>
<div>
<p>To run the MXBean example:</p>
<ol>
<li>
<p>Copy the source from <a href="mxbeans-example.htm">MXBeans</a> to <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/MXBean</code>.</p>
</li>
<li>
<p>Compile the example Java classes.</p>
<div class="p">
<pre dir="ltr">
$ javac com/example/mxbeans/*.java
</pre></div>
</li>
<li>
<p>Start the <code class="codeph">Main</code> application.</p>
<div class="p">
<pre dir="ltr">
$ java com.example.mxbeans.Main
</pre></div>
<p>You will see confirmation that <code class="codeph">Main</code> is waiting for something to happen.</p>
</li>
<li>
<p>Start JConsole in a different terminal window on the same machine.</p>
<div class="p">
<pre dir="ltr">
$ jconsole
</pre></div>
<p>You will see the JConsole tool open, presenting a list of running JMX agents that you can connect to.</p>
</li>
<li>
<p>Select <code class="codeph">com.example.mxbeans.Main</code> from the list in the <span class="wintitle">New Connection</span> window, and click on <span class="bold">Connect</span>.</p>
<p>You will see a summary of your platform&rsquo;s current activity.</p>
</li>
<li>
<p>Click on the <span class="bold">MBeans</span> tab.</p>
<p>This panel shows you all the MBeans currently registered in the MBean server.</p>
</li>
<li>
<p>In the left-hand frame, expand the <code class="codeph">com.example.mxbeans</code> node in the MBean tree.</p>
<p>You will see the example MBean <code class="codeph">QueueSampler</code>, that was created and registered by Main. If you click on <code class="codeph">QueueSampler</code>, then you will see its associated Attributes and Operations nodes in the MBean tree.</p>
</li>
<li>
<p>Select the <code class="codeph">Attributes</code> node.</p>
<p>You will see the <code class="codeph">QueueSample</code> attribute appear in the right-hand pane, with its value of <code class="codeph">javax.management.openmbean.CompositeDataSupport</code>.</p>
</li>
<li>
<p>Double-click on the <code class="codeph">CompositeDataSupport</code> value.</p>
<p>You can see the <code class="codeph">QueueSample</code> values <code class="codeph">date</code>, <code class="codeph">head</code> and <code class="codeph">size</code> because the MXBean framework has converted the <code class="codeph">QueueSample</code> instance into <code class="codeph">CompositeData</code>. If you had defined <code class="codeph">QueueSampler</code> as a Standard MBean rather than as an MXBean, JConsole would not have found the <code class="codeph">QueueSample</code> class because it would not be in its class path. If <code class="codeph">QueueSampler</code> had been a standard MBean, you would have received a <code class="codeph">ClassNotFoundException</code> when retrieving the <code class="codeph">QueueSample</code> attribute value. This demonstrates the usefulness of using MXBeans when connecting to JMX agents through generic JMX clients, like JConsole.</p>
</li>
<li>
<p>Select the <span class="bold">Operations</span> node.</p>
<p>You will see a button to invoke the <code class="codeph">clearQueue</code> operation.</p>
</li>
<li>
<p>Click on the <span class="bold">clearQueue</span> button.</p>
<p>You will be informed that the method was invoked successfully.</p>
</li>
<li>
<p>Select the <span class="bold">Attributes</span> node again and double click on the <code class="codeph">CompositeDataSupport</code> value.</p>
<p>The queue has been reset now.</p>
</li>
<li>
<p>Click on <span class="bold">Connection</span> and then <span class="bold">Exit</span>, to exit JConsole.</p>
</li>
</ol>
<p>In this example JConsole has been used as the JMX client but if you were to access your MXBean programmatically in a JMX client you write yourself, then you could do so in one of two ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Generically, using the following code:</p>
<pre dir="ltr">
MBeanServer mbs = <span class="italic">...whatever...</span>; 
ObjectName name = new ObjectName("com.example.mxbeans:type=QueueSampler"); 
CompositeData queueSample = (CompositeData) mbs.getAttribute(name,  
                             "QueueSample"); 
int size = (Integer) queueSample.get("size"); 
</pre></li>
<li>
<p>Via a proxy, using the following code:</p>
<pre dir="ltr">
MBeanServer mbs = <span class="italic">...whatever...</span>; 
ObjectName name = new ObjectName("com.example.mxbeans:type=QueueSampler"); 
QueueSamplerMXBean proxy = JMX.newMXBeanProxy(mbs, name,  
                                              QueueSamplerMXBean.class); 
QueueSample queueSample = proxy.getQueueSample(); 
int size = queueSample.getSize(); 
</pre>
<p>This code uses the newMXBeanProxy method to create the MXBean proxy. An equivalent method, <code class="codeph">newMBeanProxy</code>, exists to create proxies for other types of MBeans. The <code class="codeph">newMBeanProxy</code> and <code class="codeph">newMXBeanProxy</code> methods are used in exactly the same way.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-393ED70C-29FA-4869-8D26-57ECC3E14B45"></a>
<h2 id="JSJMX-GUID-393ED70C-29FA-4869-8D26-57ECC3E14B45" class="sect2">MBean Descriptors</h2>
<div>
<p>Descriptors allow you to give additional information about MBeans to management clients. For example, a Descriptor on an MBean attribute might say what units it is measured in, or what its minimum and maximum possible values are. As of Java SE 6, Descriptors are an integrated part of the JMX API and are available in all types of MBeans.</p>
<p>Descriptors give you a convenient way to attach arbitrary extra metadata to your MBeans. Descriptors have always existed in the JMX API, but until Java SE 6 they were only available in conjunction with Model MBeans.</p>
<p>For most constructors in the classes <code class="codeph">MBean*Info</code> (<code class="codeph">MBeanInfo</code>, <code class="codeph">MBeanAttributeInfo</code>, and so on), a parallel constructor exists with the same parameters plus an additional <code class="codeph">javax.management.Descriptor</code> parameter. The same is true for <code class="codeph">OpenMBean*InfoSupport</code>. The <code class="codeph">MBean*Info</code> and <code class="codeph">OpenMBean*InfoSupport</code> classes contain a <code class="codeph">getDescriptor()</code> method.</p>
<p>Open MBeans return information about default and legal values from the <code class="codeph">getDefaultValue()</code>, <code class="codeph">getLegalValues()</code>, <code class="codeph">getMaxValue()</code>, <code class="codeph">getMinValue()</code> methods of <code class="codeph">OpenMBeanParameterInfo</code> and <code class="codeph">OpenMBeanAttributeInfo</code>. This information is now also present in the corresponding Descriptors, and other types of MBean can also return the information in their Descriptors.</p>
<p>MBean Descriptors are demonstrated in the example classes you will find in the directory <span class="italic">work_dir</span><code class="codeph">/jmx_examples/Descriptors/com/example/mxbeans</code> after you have downloaded and unzipped the <code class="codeph">jmx_examples.zip</code> file. The MBean Descriptor example contains the following files.</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Author</code>, an annotation the supplies the name of the author of the MBean interface.</li>
<li><code class="codeph">DisplayName</code>, an annotation that supplies a display name for methods in the MBean interface.</li>
<li><code class="codeph">Main</code>, the program that sets up and runs the example.</li>
<li><code class="codeph">QueueSamplerMXBean</code> interface.</li>
<li><code class="codeph">QueueSampler</code> class that implements the MXBean interface.</li>
<li><code class="codeph">QueueSample</code> Java type returned by the <code class="codeph">getQueueSample()</code> method in the MXBean interface.</li>
<li><code class="codeph">Version</code>, an annotation that supplies the current version of the MBean interface.</li>
</ul>
<p>The <code class="codeph">QueueSampler</code> MXBean in this example basically performs the same actions as the MXBean example presented in <a href="essentials-jmx-api.htm#GUID-41CDE7AB-FEAD-42E0-BCE6-933501B654E2">Introducing MXBeans</a> , except with the addition of MBean Descriptors. This example shows how the <code class="codeph">DescriptorKey</code> meta-annotation can be used to add new descriptor items to the Descriptors for a standard MBean (or an MXBean) via annotations in the standard MBean (or MXBean) interface.</p>
</div>
<div class="sect3"><a id="GUID-C0B6FA45-CA92-4B13-B32A-08CE2A1E823B"></a>
<h3 id="JSJMX-GUID-C0B6FA45-CA92-4B13-B32A-08CE2A1E823B" class="sect3">DescriptorKey Annotations</h3>
<div>
<p>A new annotation, <code class="codeph">DescriptorKey</code>, can be used to add information to the Descriptors for a standard MBean or a MXBean via annotations in the Standard MBean or MXBean interface. This makes it possible for a tool that generates standard MBeans from an existing management model to include information from the model in the generated MBean interfaces, rather than in separate files. <span class="bold">CODE&nbsp;EXAMPLE&nbsp;2-9 Author Annotation</span> demonstrates the definition of the annotation <code class="codeph">Author</code>.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-9 Author Annotation</p>
<pre dir="ltr">
 
package com.example.mxbeans; 
 
import java.lang.annotation.Documented; 
import java.lang.annotation.ElementType; 
import java.lang.annotation.Retention; 
import java.lang.annotation.RetentionPolicy; 
import java.lang.annotation.Target; 
import javax.management.DescriptorKey; 
 
@Documented 
@Target(ElementType.TYPE) 
@Retention(RetentionPolicy.RUNTIME) 
public @interface Author { 
    @DescriptorKey("author") 
    String value(); 
} 
</pre>
<p>This annotation supplies the name of the creator of the MBean interface. A new field <code class="codeph">author</code> will be added to the <code class="codeph">MBeanInfo</code> Descriptor with the value defined by the <code class="codeph">@Author</code> annotation. The files <code class="codeph">Version</code> and <code class="codeph">DisplayName</code> define annotations of those names in exactly the same way as for <code class="codeph">Author</code> above. In each of <code class="codeph">Version</code> and <code class="codeph">DisplayName</code>, the <code class="codeph">@DescriptorKey</code> value is <code class="codeph">&ldquo;version&rdquo;</code> and <code class="codeph">&ldquo;displayname&rdquo;</code> respectively.</p>
<p>In the case of Version, a new field <code class="codeph">version</code> will be added to the <code class="codeph">MBeanInfo</code> Descriptor with the value defined by the <code class="codeph">@Version</code> annotation.</p>
<p>For <code class="codeph">DisplayName</code>, new field <code class="codeph">displayName</code> will be added to the <code class="codeph">MBeanAttributeInfo</code> Descriptor or the <code class="codeph">MBeanOperationInfo</code> Descriptor with the value defined by the <code class="codeph">@DisplayName</code> annotation depending on whether the annotated method is a getter/setter or an operation, respectively.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-919C3274-B791-4A6C-A075-9746928DCBE3"></a>
<h3 id="JSJMX-GUID-919C3274-B791-4A6C-A075-9746928DCBE3" class="sect3">Using MBean Descriptors</h3>
<div>
<p>The <code class="codeph">QueueSamplerMXBean</code> interface used in this example is slightly different from the one used in the MXBeans example, in as much as it implements MBean Descriptors to publish some of its information.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;2-10 QueueSamplerMXBean with Descriptors</p>
<pre dir="ltr">
 
package com.example.mxbeans; 
 
@Author("Mr Bean") 
@Version("1.0") 
public interface QueueSamplerMXBean { 
    @DisplayName("GETTER: QueueSample") 
    public QueueSample getQueueSample(); 
    @DisplayName("OPERATION: clearQueue") 
    public void clearQueue(); 
} 
 
</pre>
<p>Here, the <code class="codeph">@Author</code> annotation is set to <code class="codeph">Mr. Bean</code>, the <code class="codeph">@Version</code> annotation is set to <code class="codeph">1.0</code>, and the <code class="codeph">@DisplayName</code> is set to the names either of the attribute <code class="codeph">QueueSample</code> or the operation <code class="codeph">clearQueue</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-35866F70-15B7-423C-80D8-0D2DEF88E757"></a>
<h3 id="JSJMX-GUID-35866F70-15B7-423C-80D8-0D2DEF88E757" class="sect3">Running the MBean Descriptors Example</h3>
<div>
<p>To run the example:</p>
<ol>
<li>
<p>Copy the source code in <a href="mbean-descriptors-example.htm">MBean Descriptors</a> to <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Descriptors</code>.</p>
</li>
<li>
<p>Compile the example Java classes.</p>
<div class="p">
<pre dir="ltr">
$ javac com/example/mxbeans/*.java
</pre></div>
</li>
<li>
<p>Start the <code class="codeph">Main</code> application.</p>
<div class="p">
<pre dir="ltr">
$ java com.example.mxbeans.Main
</pre></div>
<p>You will see confirmation that <code class="codeph">Main</code> is waiting for something to happen.</p>
</li>
<li>
<p>Start JConsole in a different terminal window on the same machine.</p>
<div class="p">
<pre dir="ltr">
$ jconsole
</pre></div>
<p>You will see the JConsole tool open, presenting a list of running JMX agents that you can connect to.</p>
</li>
<li>
<p>Select <code class="codeph">com.example.mxbeans.Main</code> from the list in the <span class="wintitle">New Connection</span> window, and click on <span class="bold">Connect</span>.</p>
<p>You will see a summary of your platform&rsquo;s current activity.</p>
</li>
<li>
<p>Click on the <span class="bold">MBeans</span> tab.</p>
<p>This panel shows you all the MBeans currently registered in the MBean server.</p>
</li>
<li>
<p>In the left-hand frame, expand the <code class="codeph">com.example.mxbeans</code> node in the MBean tree.</p>
<p>You will see the example MBean <code class="codeph">QueueSampler</code>, that was created and registered by Main. If you click on <code class="codeph">QueueSampler</code>, you will see its associated Attributes and Operations nodes in the MBean tree. You will also see the fields <code class="codeph">author</code> and <code class="codeph">version</code> in the <code class="codeph">MBeanInfo</code> Descriptor table.</p>
</li>
<li>
<p>Expand the <code class="codeph">Attributes</code> and <code class="codeph">Operations</code> nodes under the <code class="codeph">QueueSampler</code> MBean node.</p>
<p>You will see the individual Attributes and Operations.</p>
</li>
<li>
<p>Select the <code class="codeph">QueueSample</code> node.</p>
<p>You will see the field <code class="codeph">displayName</code> in the <code class="codeph">MBeanAttributeInfo</code> Descriptor table.</p>
</li>
<li>
<p>Select the <code class="codeph">clearQueue</code> node.</p>
<p>You will see the field <code class="codeph">displayName</code> in the <code class="codeph">MBeanOperationInfo</code> Descriptor table.</p>
</li>
<li>
<p>Click on <span class="bold">Connection</span> and then <span class="bold">Exit</span> , to exit JConsole.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment256">
<tr>
<td class="cellalignment263">
<table class="cellalignment261">
<tr>
<td class="cellalignment260"><a href="getting-started.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment260"><a href="jmx-connectors.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment265">
<table class="cellalignment259">
<tr>
<td class="cellalignment260"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment260"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment260"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
