<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>tnameserv</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="You use the tnameserv command as a substitute for Object Request Broker Daemon (ORBD)." />
<meta name="dcterms.created" content="2017-10-12T08:04:07Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Tools Reference" />
<meta name="dcterms.identifier" content="E61612-05" />
<meta name="dcterms.isVersionOf" content="JSWOR" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="java-idl-and-rmi-iiop-tools-and-commands.htm" title="Previous" type="text/html" />
<link rel="Next" href="idlj.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSWOR.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSWOR.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSWOR.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-2A540297-6E1A-485B-B5E7-4E0067631522"></a> <span id="PAGE" style="display:none;">32/65</span> <!-- End Header -->
<a id="JSWOR710"></a>
<h1 id="JSWOR-GUID-2A540297-6E1A-485B-B5E7-4E0067631522" class="sect1">tnameserv</h1>
<div>
<p><span>You use the <code class="codeph">tnameserv</code> command as a substitute for Object Request Broker Daemon (ORBD).</span></p>
<div class="section">
<p class="subhead1">Synopsis</p>
<pre dir="ltr">
tnameserve -ORBInitialPort [ <span class="variable">nameserverport</span> ]
</pre>
<dl>
<dt class="dlterm"><a id="GUID-2A540297-6E1A-485B-B5E7-4E0067631522__GUID-DAB317D3-5644-4320-98F3-8DCCD3F956CE"><!-- --></a><code class="codeph">-ORBInitialPort <span class="variable">nameserverport</span></code></dt>
<dd>
<p>The initial port where the naming service listens for the bootstrap protocol used to implement the ORB <code class="codeph">resolve_initial_references</code> and <code class="codeph">list_initial_references</code> methods.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Description</p>
<p>Java Interface Definition Language (IDL) includes the Object Request Broker Daemon (ORBD). ORBD is a daemon process that contains a Bootstrap Service, a Transient Naming Service, a Persistent Naming Service, and a Server Manager. The Java IDL tutorials all use ORBD, but you can substitute the <code class="codeph">tnameserv</code> command for the <code class="codeph">orbd</code> command in any of the examples that use a Transient Naming Service.</p>
<p>The CORBA Common Object Services (COS) Naming Service provides a tree-structure directory for object references similar to a file system that provides a directory structure for files. The Transient Naming Service provided with Java IDL, <code class="codeph">tnameserv</code>, is a simple implementation of the COS Naming Service specification.</p>
<p>Object references are stored in the name space by name and each object reference-name pair is called a name binding. Name bindings can be organized under naming contexts. Naming contexts are name bindings and serve the same organizational function as a file system subdirectory. All bindings are stored under the initial naming context. The initial naming context is the only persistent binding in the name space. The rest of the name space is lost when the Java IDL naming service process stops and restarts.</p>
<p>For an applet or application to use COS naming, its ORBD must know the port of a host running a naming service or have access to an initial naming context string for that naming service. The naming service can be either the Java IDL naming service or another COS-compliant naming service.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-2A540297-6E1A-485B-B5E7-4E0067631522__CACICGFE">
<p class="subhead1">Start the Naming Service</p>
<p>You must start the Java IDL naming service before an application or applet that uses its naming service. Installation of the Java IDL product creates a script (<span>Oracle Solaris, Linux, and OS X</span>: <code class="codeph">tnameserv</code>) or executable file (Windows: <code class="codeph">tnameserv.exe</code>) that starts the Java IDL naming service. Start the naming service so that it runs in the background.</p>
<p>If you specify otherwise, then the Java IDL naming service listens on port 900 for the bootstrap protocol used to implement the Object Request Broker (ORB) <code class="codeph">resolve_initial_references</code> and <code class="codeph">list_initial_references methods</code>, as follows:</p>
<pre dir="ltr">
tnameserv -ORBInitialPort nameserverport&amp;
</pre>
<p>If you don&rsquo;t specify the name server port, then port 900 is used by default. When running Oracle Solaris software, you must become the root user to start a process on a port below 1024. For this reason, it&rsquo;s recommended that you use a port number greater than or equal to 1024. To specify a different port, for example, 1050, and to run the naming service in the background, from an Oracle Solaris, Linux, or OS X command shell, enter:</p>
<pre dir="ltr">
tnameserv -ORBInitialPort 1050&amp;
</pre>
<p>From an MS-DOS system prompt (Windows), enter:</p>
<pre dir="ltr">
start tnameserv -ORBInitialPort 1050
</pre>
<p>Clients of the name server must be made aware of the new port number. Do this by setting the <code class="codeph">org.omg.CORBA.ORBInitialPort</code> property to the new port number when you create the ORB object.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Run the Server and Client on Different Hosts</p>
<p>In most of the Java IDL and RMI-IIOP tutorials, the naming service, server, and client are all running on the development machine. In real-world deployment, the client and server probably run on different host machines from the Naming Service.</p>
<p>For the client and server to find the Naming Service, they must be made aware of the port number and host on which the naming service is running. Do this by setting the <code class="codeph">org.omg.CORBA.ORBInitialPort</code> and <code class="codeph">org.omg.CORBA.ORBInitialHost</code> properties in the client and server files to the machine name and port number on which the Naming Service is running.</p>
<p>You could also use the command-line options <code class="codeph">-ORBInitialPort nameserverport#</code> and <code class="codeph">-ORBInitialHost nameserverhostname</code> to tell the client and server where to find the naming service.</p>
<p>For example, suppose the Transient Naming Service, <code class="codeph">tnameserv</code> is running on port 1050 on host <code class="codeph">nameserverhost</code>. The client is running on host <code class="codeph">clienthost,</code> and the server is running on host <code class="codeph">serverhost</code>.</p>
<p>Start <code class="codeph">tnameserv</code> on the host <code class="codeph">nameserverhost</code>:</p>
<pre dir="ltr">
tnameserv -ORBInitialPort 1050
</pre>
<p>Start the server on the <code class="codeph">serverhost</code>:</p>
<pre dir="ltr">
java Server -ORBInitialPort 1050 -ORBInitialHost nameserverhost
</pre>
<p>Start the client on the <code class="codeph">clienthost</code>:</p>
<pre dir="ltr">
java Client -ORBInitialPort 1050 -ORBInitialHost nameserverhost
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Stop the Naming Service</p>
<p>To stop the Java IDL naming service, use the relevant operating system command, such as <code class="codeph">kill</code> for an Oracle Solaris, Linux, or OS X process or <kbd class="userinput">Ctrl+C</kbd> for a Windows process. The naming service continues to wait for invocations until it&rsquo;s explicitly shut down. Note that names registered with the Java IDL naming service disappear when the service is terminated.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Options</p>
<dl>
<dt class="dlterm"><a id="GUID-2A540297-6E1A-485B-B5E7-4E0067631522__GUID-93B09EA0-67AB-4D6B-9F57-EF49A80C17F4"><!-- --></a><code class="codeph">-J<span class="variable">option</span></code></dt>
<dd>
<p>Passes <code class="codeph">option</code> to the JVM, where <code class="codeph">option</code> is one of the options described on the reference page for the Java application launcher. For example, <code class="codeph">-J-Xms48m</code> sets the startup memory to 48 MB. See <a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__CBBIJCHG">Overview of Java Options</a>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example of Adding Objects to the Name Space</p>
<p>This example shows how to add names to the following simple tree:</p>
<pre dir="ltr">
Initial Naming Context
     plans
     Personal
          calendar
          schedule
</pre>
<p>In the tree, <code class="codeph">plans</code> is an object reference and <code class="codeph">Personal</code> is a naming context that contains two object references: <code class="codeph">calendar</code> and <code class="codeph">schedule</code>.</p>
<p>The following sample program is a self-contained Transient Naming Service client that creates the tree:</p>
<pre dir="ltr">
import java.util.Properties;
import org.omg.CORBA.*;
import org.omg.CosNaming.*;
 
public class NameClient {

    public static void main(String args[]) {

        try {
</pre>
<p>In <a href="tnameserv.htm#GUID-2A540297-6E1A-485B-B5E7-4E0067631522__CACICGFE">Start the Naming Service</a>, the <code class="codeph">nameserver</code> was started on port 1050. The following code example ensures that the client program is aware of this port number.</p>
<pre dir="ltr">
            Properties props = new Properties();
            props.put("org.omg.CORBA.ORBInitialPort", "1050");
            ORB orb = ORB.init(args, props);
</pre>
<p>The following code example obtains the initial naming context and assigns it to <code class="codeph">ctx</code>. The second line copies <code class="codeph">ctx</code> into a dummy object reference <code class="codeph">objref</code> that is attached to various names and added into the name space.</p>
<pre dir="ltr">
            NamingContext ctx =
                NamingContextHelper.narrow(
                    orb.resolve_initial_references("NameService"));
             NamingContext objref = ctx;
</pre>
<p>The following code example creates a name <code class="codeph">plans</code> of type <code class="codeph">text</code> and binds it to the dummy object reference. The <code class="codeph">plans</code> is then added under the initial naming context using the <code class="codeph">rebind</code> method. The <code class="codeph">rebind</code> method enables you to run this program over and over again without getting the exceptions from using the <code class="codeph">bind</code> method.</p>
<pre dir="ltr">
            NameComponent nc1 = new NameComponent("plans", "text");
            NameComponent[] name1 = {nc1};
            ctx.rebind(name1, objref);
            System.out.println("plans rebind successful!");
</pre>
<p>The following code example creates a naming context called <code class="codeph">Personal</code> of type <code class="codeph">directory</code>. The resulting object reference, <code class="codeph">ctx2</code>, is bound to the <code class="codeph">name</code> and added under the initial naming context.</p>
<pre dir="ltr">
            NameComponent nc2 = new NameComponent("Personal", "directory");
            NameComponent[] name2 = {nc2};
            NamingContext ctx2 = ctx.bind_new_context(name2);
            System.out.println("new naming context added..");
</pre>
<p>The remainder of the code binds the dummy object reference using the names <code class="codeph">schedule</code> and <code class="codeph">calendar</code> under the <code class="codeph">Personal</code> naming context (<code class="codeph">ctx2</code>).</p>
<pre dir="ltr">
            NameComponent nc3 = new NameComponent("schedule", "text");
            NameComponent[] name3 = {nc3};
            ctx2.rebind(name3, objref);
            System.out.println("schedule rebind successful!");
 
            NameComponent nc4 = new NameComponent("calendar", "text");
            NameComponent[] name4 = {nc4};
            ctx2.rebind(name4, objref);
            System.out.println("calendar rebind successful!");
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
}
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example of Browsing the Name Space</p>
<p>The following sample program shows how to browse the name space:</p>
<pre dir="ltr">
import java.util.Properties;
import org.omg.CORBA.*;
import org.omg.CosNaming.*;
 
public class NameClientList {

    public static void main(String args[]) {

        try {
</pre>
<p>In <a href="tnameserv.htm#GUID-2A540297-6E1A-485B-B5E7-4E0067631522__CACICGFE">Start the Naming Service</a>, the <code class="codeph">nameserver</code> was started on port 1050. The following code example ensures that the client program is aware of this port number:</p>
<pre dir="ltr">
            Properties props = new Properties();
            props.put("org.omg.CORBA.ORBInitialPort", "1050");
            ORB orb = ORB.init(args, props);
</pre>
<p>The following code example obtains the initial naming context:</p>
<pre dir="ltr">
            NamingContext nc =
            NamingContextHelper.narrow(
                orb.resolve_initial_references("NameService"));
</pre>
<p>The <code class="codeph">list</code> method lists the bindings in the naming context. In this case, up to 1000 bindings from the initial naming context will be returned in the <code class="codeph">BindingListHolder</code>; any remaining bindings are returned in the <code class="codeph">BindingIteratorHolder</code>.</p>
<pre dir="ltr">
            BindingListHolder bl = new BindingListHolder();
            BindingIteratorHolder blIt= new BindingIteratorHolder();
            nc.list(1000, bl, blIt);
</pre>
<p>The following code example gets the array of bindings out of the returned <code class="codeph">BindingListHolder</code>. If there are no bindings, then the program ends.</p>
<pre dir="ltr">
            Binding bindings[] = bl.value;
            if (bindings.length == 0) return;
</pre>
<p>The remainder of the code loops through the bindings and prints the names.</p>
<pre dir="ltr">
            for (int i=0; i &lt; bindings.length; i++) {
 
                // get the object reference for each binding
                org.omg.CORBA.Object obj = nc.resolve(bindings[i].binding_name);
                String objStr = orb.object_to_string(obj);
                int lastIx = bindings[i].binding_name.length-1;
 
                // check to see if this is a naming context
                if (bindings[i].binding_type == BindingType.ncontext) {
                    System.out.println("Context: " +
                        bindings[i].binding_name[lastIx].id);
                } else {
                    System.out.println("Object: " +
                        bindings[i].binding_name[lastIx].id);
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err)
        }
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment179">
<tr>
<td class="cellalignment191">
<table class="cellalignment184">
<tr>
<td class="cellalignment183"><a href="java-idl-and-rmi-iiop-tools-and-commands.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment183"><a href="idlj.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment193">
<table class="cellalignment182">
<tr>
<td class="cellalignment183"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment183"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment183"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
