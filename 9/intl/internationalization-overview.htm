<!DOCTYPE html>
<html lang="en-US">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Internationalization Overview</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2017-09-14T15:36:46Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Internationalization Guide" />
<meta name="dcterms.identifier" content="E76505-03" />
<meta name="dcterms.isVersionOf" content="JSINT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="internationalization-enhancements-jdk-9.htm" title="Previous" type="text/html" />
<link rel="Next" href="supported-encodings.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSINT.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="JSINT.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="JSINT.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-1CB4B574-44E2-49E3-ACB4-AE6EF83A7F86"></a> <span id="PAGE" style="display:none;">5/9</span> <!-- End Header -->
<h1 id="JSINT-GUID-1CB4B574-44E2-49E3-ACB4-AE6EF83A7F86" class="sect1"><span class="enumeration_chapter">2</span> Internationalization Overview</h1>
<div>
<p>Internationalization is the process of designing an application so that it can be adapted to various languages and regions without engineering changes. Sometimes the term internationalization is abbreviated as i18n, because there are 18 letters between the first "i" and the last "n."</p>
<p>An internationalized program has the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>With the addition of localization data, the same executable can run worldwide.</li>
<li>Textual elements, such as status messages and the GUI component labels, are not hardcoded in the program. Instead they are stored outside the source code and retrieved dynamically.</li>
<li>Support for new languages does not require recompilation.</li>
<li>Culturally-dependent data, such as dates and currencies, appear in formats that conform to the end user's region and language.</li>
<li>It can be localized quickly.</li>
</ul>
<p>The global Internet demands global software - that is, software that can be developed independently of the countries or languages of its users, and then localized for multiple countries or regions. The Java Platform provides a rich set of APIs for developing global applications. These internationalization APIs are based on the Unicode standard and include the ability to adapt text, numbers, dates, currency, and user-defined objects to any country's conventions.</p>
<p>This guide summarizes the internationalization APIs and features of the Java Platform, Standard Edition. For coding examples and step-by-step instructions, see the <a href="http://docs.oracle.com/javase/tutorial/i18n/index.html" target="_blank">Internationalization Trail</a> in the Java Tutorials.</p>
</div>
<div class="sect2"><a id="GUID-FE3C48C4-170C-45F0-B11A-197CD43D3B10"></a>
<h2 id="JSINT-GUID-FE3C48C4-170C-45F0-B11A-197CD43D3B10" class="sect2">Text Representation</h2>
<div>
<p>The Java programming language is based on the <a href="http://unicode.org/standard/standard.html" target="_blank">Unicode</a> character set, and several libraries implement the Unicode standard. Unicode is an international character set standard which supports all of the major scripts of the world, as well as common technical symbols. The original Unicode specification defined characters as fixed-width 16-bit entities, but the Unicode standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal code points is now U+0000 to U+10FFFF. An encoding defined by the standard, UTF-16, allows to represent all Unicode code points using one or two 16-bit units.</p>
<p>The primitive data type char in the Java programming language is an unsigned 16-bit integer that can represent a Unicode code point in the range U+0000 to U+FFFF, or the code units of UTF-16. The various types and classes in the Java platform that represent character sequences - <span class="apiname">char[]</span>, implementations of <span class="apiname">java.lang.CharSequence</span> (such as the <span class="apiname">String</span> class), and implementations of <span class="apiname">java.text.CharacterIterator</span> - are UTF-16 sequences. Most Java source code is written in ASCII, a 7-bit character encoding, or ISO-8859-1, an 8-bit character encoding, but is translated into UTF-16 before processing.</p>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/lang/Character.html" target="_blank"><span class="apiname">Character</span></a> class is an object wrapper for the <span class="apiname">char</span> primitive type. The <span class="apiname">Character</span> class also contains static methods such as <span class="apiname">isLowerCase()</span> and <span class="apiname">isDigit()</span> for determining the properties of a character. These methods have overloads that accept either a char (which allows representation of Unicode code points in the range U+0000 to U+FFFF) or an int (which allows representation of all Unicode code points).</p>
</div>
</div>
<div class="sect2"><a id="GUID-990EDA31-7DB8-4292-A64F-21D9506CD02D"></a>
<h2 id="JSINT-GUID-990EDA31-7DB8-4292-A64F-21D9506CD02D" class="sect2">Locale Identification and Localization</h2>
<div>
<p>A <span class="apiname">Locale</span> object is an identifier for a particular combination of language and region. Localization is the process of adapting software for a specific region or language by adding locale-specific components and translating text.</p>
</div>
<div class="sect3"><a id="GUID-09634214-1374-482F-962C-87B8ECE8A46F"></a>
<h3 id="JSINT-GUID-09634214-1374-482F-962C-87B8ECE8A46F" class="sect3">Locales</h3>
<div>
<p>On the Java platform, a locale is simply an identifier for a particular combination of language and region. It is not a collection of locale-specific attributes. Instead, each locale-sensitive class maintains its own locale-specific information. With this design, there is no difference in how user and system objects maintain their locale-specific resources. Both use the standard localization mechanism.</p>
<p>Java programs are <span class="italic">not</span> assigned a single global locale. All locale-sensitive operations may be explicitly given a locale as an argument. This greatly simplifies multilingual programs. While a global locale is not enforced, a default locale is available for programs that do not wish to manage locales explicitly. A default locale also makes it possible to affect the behavior of the entire presentation with a single choice.</p>
<p>Java locales act as requests for certain behavior from another object. For example, a French Canadian locale passed to a <span class="apiname">Calendar</span> object asks that the <span class="apiname">Calendar</span> behave correctly for the customs of Quebec. It is up to the object accepting the locale to do the right thing. If the object has not been localized for a particular locale, it will try to find a "close" match with a locale for which it has been localized. Thus if a <span class="apiname">Calendar</span> object was not localized for French Canada, but was localized for the French language in general, it would use the French localization instead.</p>
</div>
<div class="sect4"><a id="GUID-3A6A5F2B-95FA-4A34-8F3E-8F8A222483F7"></a>
<h4 id="JSINT-GUID-3A6A5F2B-95FA-4A34-8F3E-8F8A222483F7" class="sect4">Locale Class</h4>
<div>
<p>A <a href="http://docs.oracle.com/javase/9/docs/api/java/util/Locale.html" target="_blank"><span class="apiname">Locale</span></a> object represents a specific geographical, political, or cultural region. An operation that requires a locale to perform its task is called locale-sensitive and uses the <code class="codeph">Locale</code> object to tailor information for the user. For example, displaying a number is a locale-sensitive operation - the number should be formatted according to the customs and conventions of the user's native country, region, or culture.</p>
</div>
</div>
<div class="sect4"><a id="GUID-C6A74F4F-EB70-40AD-97DA-8BCC6CF8D25E"></a>
<h4 id="JSINT-GUID-C6A74F4F-EB70-40AD-97DA-8BCC6CF8D25E" class="sect4">Supported Locales</h4>
<div>
<p>On the Java platform, there does not have to be a single set of supported locales, since each class maintains its own localizations. Nevertheless, there is a consistent set of localizations supported by the classes of the Java Platform. Other implementations of the Java platform may support different locales. Those supported by the JRE are summarized in the <a href="http://www.oracle.com/technetwork/java/javase/documentation/java9locales-3559485.html" target="_blank">JDK 9 and JRE 9 Supported Locales</a> page.</p>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-7ADAD352-BD6D-4EDF-B0C5-986445830512"></a>
<h3 id="JSINT-GUID-7ADAD352-BD6D-4EDF-B0C5-986445830512" class="sect3">Localized Resources</h3>
<div>
<p>All locale-sensitive classes must be able to access resources customized for the locales they support. To aid in the process of localization, it helps to have these resources grouped together by locale and separated from the locale-neutral parts of the program.</p>
</div>
<div class="sect4"><a id="GUID-08372C60-3935-4EB7-B0CA-504EAFE7E24D"></a>
<h4 id="JSINT-GUID-08372C60-3935-4EB7-B0CA-504EAFE7E24D" class="sect4">ResourceBundle Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/util/ResourceBundle.html" target="_blank"><span class="apiname">ResourceBundle</span></a> is an abstract base class representing containers of resources. Programmers create subclasses of <span class="apiname">ResourceBundle</span> that contain resources for a particular locale. New resources can be added to an instance of <span class="apiname">ResourceBundle</span>, or new instances of ResourceBundle can be added to a system without affecting the code that uses them. Packaging resources as classes allows developers to take advantage of Java's class loading mechanism to find resources.</p>
<p>Resource bundles contain locale-specific objects. When a program needs a locale-specific resource, such as a <span class="apiname">String</span> object, the program can load it from the resource bundle that is appropriate for the current user's locale. In this way, the programmer can write code that is largely independent of the user's locale, isolating most, if not all, of the locale-specific information in resource bundles.</p>
<p>This allows Java programmers to write code that can:</p>
<ul style="list-style-type: disc;">
<li>be easily localized, or translated, into different languages</li>
<li>handle multiple locales at once</li>
<li>be easily modified later to support even more locales</li>
</ul>
</div>
<div class="sect5"><a id="GUID-FD5251F5-6E2F-41AD-93D2-20223BA3D371"></a>
<h5 id="JSINT-GUID-FD5251F5-6E2F-41AD-93D2-20223BA3D371" class="sect5">ResourceBundle.Control Class</h5>
<div>
<p><a href="http://docs.oracle.com/javase/9/docs/api/java/util/ResourceBundle.Control.html" target="_blank"><span class="apiname">ResourceBundle.Control</span></a> is a nested class of ResourceBundle. It defines methods to be called by the <a href="http://docs.oracle.com/javase/9/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-java.util.Locale-java.lang.ClassLoader-java.util.ResourceBundle.Control-" target="_blank"><span class="apiname">ResourceBundle.getBundle</span></a> factory methods so that the resource bundle loading behavior may be changed. For example, application specific resource bundle formats, such as XML, could be supported by overriding the methods.</p>
<p>Since Java SE 9, <span class="apiname">ResourceBundle.Control</span> is not supported in named modules. Existing code using <code class="codeph">Control</code> is expected to work, but for new code in a named module, implement <code class="codeph"><span class="variable">basename</span>Provider</code> and load the resource bundle from there. See <a href="https://docs.oracle.com/javase/9/docs/api/java/util/ResourceBundle.html#bundleprovider" target="_blank">Resource Bundles in Named Modules</a>.</p>
</div>
</div>
</div>
<div class="sect4"><a id="GUID-69FAAC20-748D-48B3-A23F-888CC3E29FA6"></a>
<h4 id="JSINT-GUID-69FAAC20-748D-48B3-A23F-888CC3E29FA6" class="sect4">ListResourceBundle Class</h4>
<div>
<p><a href="http://docs.oracle.com/javase/9/docs/api/java/util/ListResourceBundle.html" target="_blank"><span class="apiname">ListResourceBundle</span></a> is an abstract subclass of <span class="apiname">ResourceBundle</span> that manages resources for a locale in a convenient and easy to use list.</p>
</div>
</div>
<div class="sect4"><a id="GUID-83B665AF-3F60-42B6-8461-CAE160FDB401"></a>
<h4 id="JSINT-GUID-83B665AF-3F60-42B6-8461-CAE160FDB401" class="sect4">PropertyResourceBundle Class</h4>
<div>
<p><a href="http://docs.oracle.com/javase/9/docs/api/java/util/PropertyResourceBundle.html" target="_blank"><span class="apiname">PropertyResourceBundle</span></a> is a concrete subclass of <span class="apiname">ResourceBundle</span> that manages resources for a locale using a set of static strings from a property file.</p>
</div>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-F0019CED-A4EE-4CDC-8D86-E5639AE3270E"></a>
<h2 id="JSINT-GUID-F0019CED-A4EE-4CDC-8D86-E5639AE3270E" class="sect2">Date and Time Handling</h2>
<div>
<p>The Date-Time package, <a href="https://docs.oracle.com/javase/9/docs/api/java/time/package-summary.html" target="_blank"><span class="bold">java.time</span></a>, introduced in Java SE 8, provides a comprehensive model for date and time. Although java.time is based on the International Organization for Standardization (ISO) calendar system, commonly used global calendars are also supported.</p>
<p>See <a href="https://docs.oracle.com/javase/tutorial/datetime/overview/packages.html" target="_blank">The Date-Time Packages</a> lesson in <span>The Java Tutorials (Java SE 8 and earlier)</span>.</p>
</div>
</div>
<div class="sect2"><a id="GUID-D6353B19-C8F6-40DC-9C5B-725B200EE685"></a>
<h2 id="JSINT-GUID-D6353B19-C8F6-40DC-9C5B-725B200EE685" class="sect2">Text Processing</h2>
<div>
<p>Text processing involves formatting locale-sensitive information such as, currencies, dates, times, and text messages. It also includes manipulating text in a locale-sensitive manner, meaning that string operations, such as searching and sorting, are properly performed regardless of locale.</p>
</div>
<div class="sect3"><a id="GUID-D8619137-A630-4746-9C09-81185585F2AC"></a>
<h3 id="JSINT-GUID-D8619137-A630-4746-9C09-81185585F2AC" class="sect3">Formatting</h3>
<div>
<p>It is in formatting data for output that many cultural conventions are applied. Numbers, dates, times, and messages may all require formatting before they can be displayed. The Java platform provides a set of flexible formatting classes that can handle both the standard locale formats and programmer defined custom formats. These formatting classes are also able to parse formatted strings back into their constituent objects.</p>
</div>
<div class="sect4"><a id="GUID-D82B61E2-52C0-4E61-87AA-F38ACDFD232D"></a>
<h4 id="JSINT-GUID-D82B61E2-52C0-4E61-87AA-F38ACDFD232D" class="sect4">Format Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/Format.html" target="_blank"><span class="apiname">Format</span></a> is an abstract base class for formatting locale-sensitive information such as dates, times, messages, and numbers. Three main subclasses are provided: <code class="codeph">DateFormat</code>, <code class="codeph">NumberFormat</code>, and <code class="codeph">MessageFormat</code>. These three also provide subclasses of their own.</p>
</div>
</div>
<div class="sect4"><a id="GUID-A23A872E-A8A5-4530-B288-0F58CC4B9799"></a>
<h4 id="JSINT-GUID-A23A872E-A8A5-4530-B288-0F58CC4B9799" class="sect4">DateFormat Class</h4>
<div>
<p>Dates and times are stored internally in a locale-independent way, but should be formatted so that they can be displayed in a locale-sensitive manner. For example, the same date might be formatted as:</p>
<ul style="list-style-type: disc;">
<li>November 3, 1997 (English)</li>
<li><span lang="fr">3 novembre 1997</span> (French)</li>
</ul>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/DateFormat.html" target="_blank"><span class="apiname">DateFormat</span></a> is an abstract base class for formatting and parsing date and time values in a locale-independent manner. It has a number of static factory methods for getting standard time formats for a given locale.</p>
<p>The <span class="apiname">DateFormat</span> object uses <span class="apiname">Calendar</span> and <span class="apiname">TimeZone</span> objects in order to interpret time values. By default, a <span class="apiname">DateFormat</span> object for a given locale will use the appropriate <span class="apiname">Calendar</span> object for that locale and the system's default <span class="apiname">TimeZone</span> object. The programmer can override these choices if desired.</p>
</div>
</div>
<div class="sect4"><a id="GUID-49580189-E6BF-4B5C-B3BC-84E2A0256AEC"></a>
<h4 id="JSINT-GUID-49580189-E6BF-4B5C-B3BC-84E2A0256AEC" class="sect4">SimpleDateFormat Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/SimpleDateFormat.html" target="_blank"><span class="apiname">SimpleDateFormat</span></a> is a concrete class for formatting and parsing dates and times in a locale-sensitive manner. It allows for formatting (milliseconds to text), parsing (text to milliseconds), and normalization.</p>
</div>
</div>
<div class="sect4"><a id="GUID-F95385BA-E78D-435D-9273-D6F36EDE726E"></a>
<h4 id="JSINT-GUID-F95385BA-E78D-435D-9273-D6F36EDE726E" class="sect4">DateFormatSymbols Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/DateFormatSymbols.html" target="_blank"><span class="apiname">DateFormatSymbols</span></a> is used to encapsulate localizable date-time formatting data, such as the names of the months, the names of the days of the week, time of day, and the time zone data. The <span class="apiname">DateFormat</span> and <span class="apiname">SimpleDateFormat</span> classes both use the <span class="apiname">DateFormatSymbols</span> class to encapsulate this information.</p>
<p>Usually, programmers will not use the <span class="apiname">DateFormatSymbols</span> directly. Rather, they will implement formatting with the <span class="apiname">DateFormat</span> class's factory methods.</p>
</div>
</div>
<div class="sect4"><a id="GUID-FB6A6E98-B25A-47B9-B109-779EFF0F74AB"></a>
<h4 id="JSINT-GUID-FB6A6E98-B25A-47B9-B109-779EFF0F74AB" class="sect4">NumberFormat Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/NumberFormat.html" target="_blank"><span class="apiname">NumberFormat</span></a> is an abstract base class for formatting and parsing numeric data. It contains a number of static factory methods for getting different kinds of locale-specific number formats.</p>
<p>The <span class="apiname">NumberFormat</span> class helps programmers to format and parse numbers for any locale. Code using this class can be completely independent of the locale conventions for decimal points, thousands-separators, the particular decimal digits used, or whether the number format is even decimal. The application can also display a number as a normal decimal number, currency, or percentage:</p>
<ul style="list-style-type: disc;">
<li>1,234.5 (decimal number in U.S. format)</li>
<li>$1,234.50 (U.S. currency in U.S. format)</li>
<li>1.234,50 &euro; (European currency in German format)</li>
<li>123.450% (percent in German format)</li>
</ul>
</div>
</div>
<div class="sect4"><a id="GUID-05CB4BAB-5052-4E69-BF05-0FC5A5E2181F"></a>
<h4 id="JSINT-GUID-05CB4BAB-5052-4E69-BF05-0FC5A5E2181F" class="sect4">DecimalFormat Class</h4>
<div>
<p>Numbers are stored internally in a locale-independent way, but should be formatted so that they can be displayed in a locale-sensitive manner. For example, when using "#,###.00" as a pattern, the same number might be formatted as:</p>
<ul style="list-style-type: disc;">
<li><span id="GUID-05CB4BAB-5052-4E69-BF05-0FC5A5E2181F__DE">1.234,56</span> (German)</li>
<li>1,234.56 (English)</li>
</ul>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/DecimalFormat.html" target="_blank"><span class="apiname">DecimalFormat</span></a>, which is a concrete subclass of the <span class="apiname">NumberFormat</span> class, can format decimal numbers. Programmers generally will not instantiate this class directly but will use the factory methods provided.</p>
<p>The <span class="apiname">DecimalFormat</span> class has the ability to take a pattern string to specify how a number should be formatted. The pattern specifies attributes such as the precision of the number, whether leading zeros should be printed, and what currency symbols are used. The pattern string can be altered if a program needs to create a custom format.</p>
</div>
</div>
<div class="sect4"><a id="GUID-7E901ED0-C818-4772-ACBB-2FC8335FF69E"></a>
<h4 id="JSINT-GUID-7E901ED0-C818-4772-ACBB-2FC8335FF69E" class="sect4">DecimalFormatSymbols Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/DecimalFormatSymbols.html" target="_blank"><span class="apiname">DecimalFormatSymbols</span></a> represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by <span class="apiname">DecimalFormat</span> to format numbers. <span class="apiname">DecimalFormat</span> creates for itself an instance of <span class="apiname">DecimalFormatSymbols</span> from its locale data. A programmer needing to change any of these symbols can get the <span class="apiname">DecimalFormatSymbols</span> object from the <span class="apiname">DecimalFormat</span> object and then modify it.</p>
</div>
</div>
<div class="sect4"><a id="GUID-066929CA-45D7-4034-A06B-73791E8C9620"></a>
<h4 id="JSINT-GUID-066929CA-45D7-4034-A06B-73791E8C9620" class="sect4">ChoiceFormat Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/ChoiceFormat.html" target="_blank"><span class="apiname">ChoiceFormat</span></a> is a concrete subclass of the <span class="apiname">NumberFormat</span> class. The <span class="apiname">ChoiceFormat</span> class allows the programmer to attach a format to a range of numbers. It is generally used in a <span class="apiname">MessageFormat</span> object for handling plurals.</p>
</div>
</div>
<div class="sect4"><a id="GUID-555001F4-F09D-4B53-ACD6-23FA58AA8F90"></a>
<h4 id="JSINT-GUID-555001F4-F09D-4B53-ACD6-23FA58AA8F90" class="sect4">MessageFormat Class</h4>
<div>
<p>Programs often need to build messages from sequences of strings, numbers and other data. For example, the text of a message displaying the number of files on a disk drive will vary:</p>
<ul style="list-style-type: disc;">
<li>The disk C contains 100 files.</li>
<li>The disk D contains 1 file.</li>
<li>The disk F contains 0 files.</li>
</ul>
<p>If a message built from sequences of strings and numbers is hard-coded, it cannot be translated into other languages. For example, note the different positions of the parameters "3" and "G" in the following translations:</p>
<ul style="list-style-type: disc;">
<li>The disk G contains 3 files. (English)</li>
<li><span lang="fr">Il y a 3 fichiers sur le disque G.</span> (French)</li>
</ul>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/MessageFormat.html" target="_blank"><span class="apiname">MessageFormat</span></a> provides a means to produce concatenated messages in language-neutral way. The MessageFormat object takes a set of objects, formats them, and then inserts the formatted strings into the pattern at the appropriate places.</p>
</div>
</div>
<div class="sect4"><a id="GUID-A22D7533-0123-4829-92F2-20081CFE6902"></a>
<h4 id="JSINT-GUID-A22D7533-0123-4829-92F2-20081CFE6902" class="sect4">ParsePosition Class</h4>
<div>
<p>The class <a href="http://docs.oracle.com/javase/9/docs/api/java/text/ParsePosition.html" target="_blank"><span class="apiname">ParsePosition</span></a> is used by the Format class and its subclasses to keep track of the current position during parsing. The <span class="apiname">parseObject()</span> method in the <span class="apiname">Format</span> class requires a <span class="apiname">ParsePosition</span> object as an argument.</p>
</div>
</div>
<div class="sect4"><a id="GUID-17ACC54C-CE0C-44E3-A060-7E5808E77603"></a>
<h4 id="JSINT-GUID-17ACC54C-CE0C-44E3-A060-7E5808E77603" class="sect4">FieldPosition Class</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/FieldPosition.html" target="_blank"><span class="apiname">FieldPosition</span></a> class is used by the <span class="apiname">Format</span> class and its subclasses to identify fields in formatted output. One version of the <span class="apiname">format()</span> method in the <span class="apiname">Format</span> class requires a <span class="apiname">FieldPosition</span> object as an argument.</p>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-9FCC9853-9996-4CD8-B190-273FEEEC0E3D"></a>
<h3 id="JSINT-GUID-9FCC9853-9996-4CD8-B190-273FEEEC0E3D" class="sect3">Locale-Sensitive String Operations</h3>
<div>
<p>Programs frequently need to manipulate strings. Common operations on strings include searching and sorting. Some tasks, such as collating strings or finding various boundaries in text, are surprisingly difficult to get right and are even more difficult when multiple languages must be considered. The Java Platform provides classes for handling many of these common string manipulations in a locale-sensitive manner.</p>
</div>
<div class="sect4"><a id="GUID-47B745EF-BE1F-4BF1-B64A-246459BC33A3"></a>
<h4 id="JSINT-GUID-47B745EF-BE1F-4BF1-B64A-246459BC33A3" class="sect4">Collator Class</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/Collator.html" target="_blank"><span class="apiname">Collator</span></a> class performs locale-sensitive string comparison. Programmers use this class to build searching and alphabetical sorting routines for natural language text. <span class="apiname">Collator</span> is an abstract base class. Its subclasses implement specific collation strategies. One subclass, <span class="apiname">RuleBasedCollator</span>, is applicable to a wide set of languages. Other subclasses may be created to handle more specialized needs.</p>
</div>
</div>
<div class="sect4"><a id="GUID-5D5ABB65-60C1-4568-A92F-6B31838059E7"></a>
<h4 id="JSINT-GUID-5D5ABB65-60C1-4568-A92F-6B31838059E7" class="sect4">RuleBasedCollator Class</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/RuleBasedCollator.html" target="_blank"><span class="apiname">RuleBasedCollator</span></a> class, which is a concrete subclass of the <span class="apiname">Collator</span> class, provides a simple, data-driven, table collator. Using <span class="apiname">RuleBasedCollator</span>, a programmer can create a customized table-based collator. For example, a programmer can build a collator that will ignore (or notice) uppercase letters, accents, and Unicode combining characters.</p>
</div>
</div>
<div class="sect4"><a id="GUID-6D533990-98B0-4B04-944A-DF5A25EEE9AF"></a>
<h4 id="JSINT-GUID-6D533990-98B0-4B04-944A-DF5A25EEE9AF" class="sect4">CollationElementIterator Class</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/CollationElementIterator.html" target="_blank"><span class="apiname">CollationElementIterator</span></a> class is used as an iterator to walk through each character of an international string. Programmers use the iterator to return the ordering priority of the positioned character. The ordering priority of a character, or key, defines how a character is collated in the given <span class="apiname">Collator</span> object. The <span class="apiname">CollationElementIterator</span> class is used by the <span class="apiname">compare()</span> method of the <code class="codeph">RuleBasedCollator</code> class.</p>
</div>
</div>
<div class="sect4"><a id="GUID-4B2B3551-3CA7-482B-A1AA-255F54CEADB7"></a>
<h4 id="JSINT-GUID-4B2B3551-3CA7-482B-A1AA-255F54CEADB7" class="sect4">CollationKey Class</h4>
<div>
<p>A <a href="http://docs.oracle.com/javase/9/docs/api/java/text/CollationKey.html" target="_blank"><span class="apiname">CollationKey</span></a> object represents a string under the rules of a specific <span class="apiname">Collator</span> object. Comparing two <span class="apiname">CollationKey</span> objects returns the relative order of the strings they represent. Using <span class="apiname">CollationKey</span> objects to compare strings is generally faster than using the <span class="apiname">Collator.compare()</span> method. Thus, when the strings must be compared multiple times, for example when sorting a list of strings, it is more efficient to use <span class="apiname">CollationKey</span> objects.</p>
</div>
</div>
<div class="sect4"><a id="GUID-75FA808F-CA61-4C31-87C5-BD5C12DA5945"></a>
<h4 id="JSINT-GUID-75FA808F-CA61-4C31-87C5-BD5C12DA5945" class="sect4">BreakIterator Class</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/BreakIterator.html" target="_blank"><span class="apiname">BreakIterator</span></a> class indirectly implements methods for finding the position of the following types of boundaries in a string of text:</p>
<ul style="list-style-type: disc;">
<li>potential line break</li>
<li>sentence</li>
<li>word</li>
<li>character</li>
</ul>
<p>The conventions on where to break lines, sentences, words, and characters vary from one language to another. Since the BreakIterator class is locale-sensitive, it can be used by programs that perform text operations. For example, consider a a word processing program that can highlight a character, cut a word, move the cursor to the next sentence, or word-wrap at a line ending. This word processing program would use break iterators to determine the logical boundaries in text, enabling it to perform text operations in a locale-sensitive manner.</p>
</div>
</div>
<div class="sect4"><a id="GUID-AB78B923-9A2E-4988-9390-DADA293CF125"></a>
<h4 id="JSINT-GUID-AB78B923-9A2E-4988-9390-DADA293CF125" class="sect4">StringCharacterIterator Class</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/StringCharacterIterator.html" target="_blank"><span class="apiname">StringCharacterIterator</span></a> class provides the ability to iterate over a string of Unicode characters in a bidirectional manner. This class uses a cursor to move within a range of text, and can return individual characters or their index values. The <span class="apiname">StringCharacterIterator</span> class implements the character iterator functionality of the <span class="apiname">CharacterIterator</span> interface.</p>
</div>
</div>
<div class="sect4"><a id="GUID-93A609F3-0874-4C27-9F51-B92045FBE448"></a>
<h4 id="JSINT-GUID-93A609F3-0874-4C27-9F51-B92045FBE448" class="sect4">CharacterIterator Interface</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/CharacterIterator.html" target="_blank"><span class="apiname">CharacterIterator</span></a> interface defines a protocol for bidirectional iteration over Unicode characters. Classes should implement this interface if they want to move about within a range of text and return individual Unicode characters or their index values. <span class="apiname">CharacterIterator</span>is for searching is useful when performing character searches.</p>
</div>
</div>
<div class="sect4"><a id="GUID-D730EE79-FBC3-426E-A099-CDDC3890C23F"></a>
<h4 id="JSINT-GUID-D730EE79-FBC3-426E-A099-CDDC3890C23F" class="sect4">Normalizer Class</h4>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/text/Normalizer.html" target="_blank"><span class="apiname">Normalizer</span></a> class provides methods to transform Unicode text into an equivalent composed or decomposed form. The class supports the <span class="variable">Unicode Normalization Forms</span> defined by the Unicode standard.</p>
</div>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-6D825328-23AB-4E55-B02D-14BEF8666BD2"></a>
<h2 id="JSINT-GUID-6D825328-23AB-4E55-B02D-14BEF8666BD2" class="sect2">Locale-Sensitive Services SPIs</h2>
<div>
<p>Locale sensitive services provided by classes in the java.text and java.util packages can be extended by implementing locale-sensitive services SPIs for locales the Java runtime has not yet supported.</p>
<p>Although JDK 9 no longer supports the extension mechanism, SPI implementations for internationalization functions in the <span class="apiname">java.text.spi</span>, <span class="apiname">java.util.spi</span>, and <span class="apiname">java.awt.im.spi</span> packages will be loaded from the application's classpath.</p>
<p>In addition to localized symbols or names for the <a href="http://docs.oracle.com/javase/9/docs/api/java/util/Currency.html" target="_blank"><span class="apiname">Currency</span></a>, <a href="http://docs.oracle.com/javase/9/docs/api/java/util/Locale.html" target="_blank"><span class="apiname">Locale</span></a>, and <a href="http://docs.oracle.com/javase/9/docs/api/java/util/TimeZone.html" target="_blank"><span class="apiname">TimeZone</span></a> classes in the <span class="apiname">java.util</span> package, implementations of the following classes in the <span class="apiname">java.text</span> package can be plugged in with the SPIs.</p>
<ul style="list-style-type: disc;">
<li><a href="http://docs.oracle.com/javase/9/docs/api/java/text/BreakIterator.html" target="_blank"><span class="apiname">BreakIterator</span></a></li>
<li><a href="http://docs.oracle.com/javase/9/docs/api/java/text/Collator.html" target="_blank"><span class="apiname">Collator</span></a></li>
<li><a href="http://docs.oracle.com/javase/9/docs/api/java/text/DateFormat.html" target="_blank"><span class="apiname">DateFormat</span></a></li>
<li><a href="http://docs.oracle.com/javase/9/docs/api/java/text/DateFormatSymbols.html" target="_blank"><span class="apiname">DateFormatSymbols</span></a></li>
<li><a href="http://docs.oracle.com/javase/9/docs/api/java/text/DecimalFormatSymbols.html" target="_blank"><span class="apiname">DecimalFormatSymbols</span></a></li>
<li><a href="http://docs.oracle.com/javase/9/docs/api/java/text/NumberFormat.html" target="_blank"><span class="apiname">NumberFormat</span></a></li>
</ul>
</div>
</div>
<div class="sect2"><a id="GUID-A8B7A670-418D-49D5-8EF3-07D1F92FD0EA"></a>
<h2 id="JSINT-GUID-A8B7A670-418D-49D5-8EF3-07D1F92FD0EA" class="sect2">Character Encoding Conversion</h2>
<div>
<p>The Java platform uses Unicode as its native character encoding; however, many Java programs still need to handle text data in other encodings. Java therefore provides a set of classes that convert many standard character encodings to and from Unicode. Java programs that need to deal with non-Unicode text data convert that data into Unicode, process the data as Unicode, then convert the result back to the external character encoding. The <a href="http://docs.oracle.com/javase/9/docs/api/java/io/InputStreamReader.html" target="_blank"><span class="apiname">InputStreamReader</span></a> and <a href="http://docs.oracle.com/javase/9/docs/api/java/io/OutputStreamWriter.html" target="_blank"><span class="apiname">OutputStreamWriter</span></a> classes provide methods that can convert between other character encodings and Unicode.</p>
</div>
<div class="sect3"><a id="GUID-EA75CFC7-E53E-40E0-B1A8-2D1469FA38A1"></a>
<h3 id="JSINT-GUID-EA75CFC7-E53E-40E0-B1A8-2D1469FA38A1" class="sect3">Supported Encodings</h3>
<div>
<p>The <span class="apiname">InputStreamReader</span>, <span class="apiname">OutputStreamWriter</span>, and String classes can convert between Unicode and the set of character encodings listed in <a href="supported-encodings.htm#GUID-187BA718-195F-4C39-B0D5-F3FDF02C7205">Supported Encodings</a>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-59E8EC54-60EE-4503-9904-5ABFD0467DBA"></a>
<h3 id="JSINT-GUID-59E8EC54-60EE-4503-9904-5ABFD0467DBA" class="sect3">Stream I/O</h3>
<div>
<p>The Java Platform provides features in the <span class="apiname">java.io</span> package to improve the handling of character data: the <span class="apiname">Reader</span> and <span class="apiname">Writer</span> classes, and an enhancement to the <span class="apiname">PrintStream</span> class.</p>
</div>
</div>
<div class="sect3"><a id="GUID-F66F68FA-00C2-45ED-8660-B7CBA7D56051"></a>
<h3 id="JSINT-GUID-F66F68FA-00C2-45ED-8660-B7CBA7D56051" class="sect3">Reader and Writer Classes</h3>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/io/Reader.html" target="_blank"><span class="apiname">Reader</span></a> and <a href="http://docs.oracle.com/javase/9/docs/api/java/io/Writer.html" target="_blank"><span class="apiname">Writer</span></a> class hierarchies provide the ability to perform I/O operations on character streams. These hierarchies parallel the <span class="apiname">InputStream</span> and <span class="apiname">OutputStream</span> class hierarchies, but operate on streams of characters rather than streams of bytes. Character streams make it easy to write programs that are not dependent upon a specific character encoding, and are therefore easier to internationalize. The <span class="apiname">Reader</span> and <span class="apiname">Writer</span> classes also have the ability to convert between Unicode and other character encodings.</p>
</div>
</div>
<div class="sect3"><a id="GUID-38E75246-094D-48E3-B033-29D6B52B9B3A"></a>
<h3 id="JSINT-GUID-38E75246-094D-48E3-B033-29D6B52B9B3A" class="sect3">PrintStream Class</h3>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/io/PrintStream.html" target="_blank"><span class="apiname">PrintStream</span></a> class produces output using the system's default character encoding and line terminator. This change allows methods such as <span class="apiname">System.out.println()</span> to act more reasonably with non-ASCII data.</p>
</div>
</div>
<div class="sect3"><a id="GUID-9B97F27D-91E7-4143-AF05-1B8FFA2A696F"></a>
<h3 id="JSINT-GUID-9B97F27D-91E7-4143-AF05-1B8FFA2A696F" class="sect3">Charset Package</h3>
<div>
<p>The <a href="http://docs.oracle.com/javase/9/docs/api/java/nio/charset/package-summary.html" target="_blank"><span class="apiname">java.nio.charset</span></a> package provides the underpinnings for character encoding conversion. Applications can use its classes to fine-tune the behavior of built-in character converters. Developers can also create custom converters for character encodings that are not supported by built-in character converters, using the <span class="apiname">java.nio.charset.spi</span> package.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-9103447B-4299-402F-8065-055C61774D9D"></a>
<h2 id="JSINT-GUID-9103447B-4299-402F-8065-055C61774D9D" class="sect2">Input Methods</h2>
<div>
<p>Input methods are software components that let the user enter text in ways other than simple typing on a keyboard. They are commonly used to enter Japanese, Chinese, or Korean - languages using thousands of different characters - on keyboards with far fewer keys. However, the Java platform also supports input methods for other languages and the use of entirely different input mechanisms, such as handwriting or speech recognition.</p>
<p>The Java platform enables the use of native input methods provided by the host operating system, such as Windows or Solaris, as well as the implementation and use of input methods written in the Java programming language.</p>
<p>The term input methods does not refer to class methods of the Java programming language.</p>
</div>
<div class="sect3"><a id="GUID-50654178-256B-4593-B0A1-968042C0B265"></a>
<h3 id="JSINT-GUID-50654178-256B-4593-B0A1-968042C0B265" class="sect3">Input Method Support in Swing</h3>
<div>
<p>The Swing text components provide an integrated user interface for text input using input methods. Depending on the locale, one of two input styles is used. With on-the-spot (inline) input, the style used for most locales, the input methods insert the text directly into the text component while the text is being composed. With below-the-spot input, the style used for Chinese locales, a separate composition window is used, which is positioned automatically to be near the point where the text is to be inserted after being committed.</p>
<p>An application using Swing text components does not have to coordinate the interaction between the text components and input methods. However, it should call <a href="http://docs.oracle.com/javase/9/docs/api/java/awt/im/InputContext.html#endComposition--" target="_blank"><span class="apiname">InputContext.endComposition</span></a> when all text must be committed, such as when a document is saved or printed.</p>
</div>
</div>
<div class="sect3"><a id="GUID-A63AEE8D-0D8B-4D3B-AF07-5CC9F7EF081C"></a>
<h3 id="JSINT-GUID-A63AEE8D-0D8B-4D3B-AF07-5CC9F7EF081C" class="sect3">Input Method Framework</h3>
<div>
<p>The input method framework enables the collaboration between text editing components and input methods in entering text. Programmers who develop text editing components or input methods use this framework. Other application developers generally make only minimal use of it. For example, they should call <a href="http://docs.oracle.com/javase/9/docs/api/java/awt/im/InputContext.html#endComposition--" target="_blank"><span class="apiname">InputContext.endComposition</span></a> when all text must be committed, such as when a document is saved or printed.</p>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment211">
<tr>
<td class="cellalignment220">
<table class="cellalignment216">
<tr>
<td class="cellalignment215"><a href="internationalization-enhancements-jdk-9.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment215"><a href="supported-encodings.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment222">
<table class="cellalignment214">
<tr>
<td class="cellalignment215"><a href="../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment215"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment215"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
