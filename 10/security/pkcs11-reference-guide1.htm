<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>PKCS#11 Reference Guide</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="oracle-providers.htm" title="Previous" type="text/html" />
<link rel="Next" href="java-authentication-and-authorization-service-jaas1.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>

                    <script>var w=window;if(w.performance||w.mozPerformance||w.msPerformance||w.webkitPerformance){var d=document;AKSB=w.AKSB||{},AKSB.q=AKSB.q||[],AKSB.mark=AKSB.mark||function(e,_){AKSB.q.push(["mark",e,_||(new Date).getTime()])},AKSB.measure=AKSB.measure||function(e,_,t){AKSB.q.push(["measure",e,_,t||(new Date).getTime()])},AKSB.done=AKSB.done||function(e){AKSB.q.push(["done",e])},AKSB.mark("firstbyte",(new Date).getTime()),AKSB.prof={custid:"322179",ustr:"",originlat:"0",clientrtt:"1",ghostip:"23.212.3.15",ipv6:false,pct:"10",clientip:"45.78.37.67",requestid:"2af535fe",region:"32996",protocol:"",blver:14,akM:"dsca",akN:"ae",akTT:"O",akTX:"1",akTI:"2af535fe",ai:"206465",ra:"false",pmgn:"",pmgi:"",pmp:"",qc:""},function(e){var _=d.createElement("script");_.async="async",_.src=e;var t=d.getElementsByTagName("script"),t=t[t.length-1];t.parentNode.insertBefore(_,t)}(("https:"===d.location.protocol?"https:":"http:")+"//ds-aksb-a.akamaihd.net/aksb.min.js")}</script>
                    <script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-30E98B63-4910-40A1-A6DD-663EAF466991"></a> <span id="PAGE" style="display:none;">13/59</span> <!-- End Header -->
<h1 id="JSSEC-GUID-30E98B63-4910-40A1-A6DD-663EAF466991" class="sect1"><span class="enumeration_chapter">5</span> PKCS#11 Reference Guide</h1>
<div>
<p>The Java platform defines a set of programming interfaces for performing cryptographic operations. These interfaces are collectively known as the Java Cryptography Architecture (JCA) and the Java Cryptography Extension (JCE). See <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-2BCFDD85-D533-4E6C-8CE9-29990DEB0190" title='The Java Cryptography Architecture (JCA) is a major piece of the platform, and contains a "provider" architecture and a set of APIs for digital signatures, message digests (hashes), certificates and certificate validation, encryption (symmetric/asymmetric block/stream ciphers), key generation and management, and secure random number generation, to name a few.'>Java Cryptography Architecture (JCA) Reference Guide</a>.</p>
<p>The cryptographic interfaces are provider-based. Specifically, applications talk to Application Programming Interfaces (APIs), and the actual cryptographic operations are performed in configured providers which adhere to a set of Service Provider Interfaces (SPIs). This architecture supports different provider implementations. Some providers may perform cryptographic operations in software; others may perform the operations on a hardware token (for example, on a smartcard device or on a hardware cryptographic accelerator).</p>
<p>The Cryptographic Token Interface Standard, PKCS#11, is produced by RSA Security and defines native programming interfaces to cryptographic tokens, such as hardware cryptographic accelerators and smartcards. Existing applications that use the JCA and JCE APIs can access native PKCS#11 tokens with the PKCS#11 provider. No modifications to the application are required. The only requirement is to properly configure the provider.</p>
<p>Although an application can make use of most PKCS#11 features using existing APIs, some applications might need more flexibility and capabilities. For example, an application might want to deal with smartcards being removed and inserted dynamically more easily. Or, a PKCS#11 token might require authentication for some non-key-related operations and therefore, the application must be able to log into the token without using keystore. The JCA gives applications greater flexibility in dealing with different providers.</p>
<p>This document describes how native PKCS#11 tokens can be configured into the Java platform for use by Java applications. It also describes how the JCA makes it easier for applications to deal with different types of providers, including PKCS#11 providers.</p>
</div>
<div class="sect2"><a id="GUID-6DA72F34-6C6A-4F7D-ADBA-5811576A9331"></a>
<h2 id="JSSEC-GUID-6DA72F34-6C6A-4F7D-ADBA-5811576A9331" class="sect2">SunPKCS11 Provider</h2>
<div>
<p>The SunPKCS11 provider, in contrast to most other providers, does not implement cryptographic algorithms itself. Instead, it acts as a bridge between the Java JCA and JCE APIs and the native PKCS#11 cryptographic API, translating the calls and conventions between the two.</p>
<p>This means that Java applications calling standard JCA and JCE APIs can, without modification, take advantage of algorithms offered by the underlying PKCS#11 implementations, such as, for example,</p>
<ul style="list-style-type: disc;">
<li>Cryptographic smartcards,</li>
<li>Hardware cryptographic accelerators, and</li>
<li>High performance software implementations.</li>
</ul>
<div class="infobox-note" id="GUID-6DA72F34-6C6A-4F7D-ADBA-5811576A9331__GUID-1DBACA0C-33DE-436F-B9B1-18D9AD105863">
<p class="notep1">Note:</p>
Java SE only facilitates accessing native PKCS#11 implementations, it does not itself include a native PKCS#11 implementation. However, cryptographic devices such as Smartcards and hardware accelerators often come with software that includes a PKCS#11 implementation, which you need to install and configure according to manufacturer's instructions.</div>
</div>
</div>
<div class="sect2"><a id="GUID-97F1E537-CB59-4C7F-AB6B-05D4DBD69AC0"></a>
<h2 id="JSSEC-GUID-97F1E537-CB59-4C7F-AB6B-05D4DBD69AC0" class="sect2">SunPKCS11 Requirements</h2>
<div>
<p>The SunPKCS11 provider requires an implementation of PKCS#11 v2.20 or later to be installed on the system. This implementation must take the form of a shared-object library (<code>.so</code> on Solaris and Linux) or dynamic-link library (<code>.dll</code> on Windows). Please consult your vendor documentation to find out if your cryptographic device includes such a PKCS#11 implementation, how to configure it, and what the name of the library file is.</p>
<p>The SunPKCS11 provider supports a number of algorithms, provided that the underlying PKCS#11 implementation offers them. The algorithms and their corresponding PKCS#11 mechanisms are listed in the table in <a href="pkcs11-reference-guide1.htm#GUID-D3EF9023-7DDC-435D-9186-D2FD05674777">SunPKCS11 Provider Supported Algorithms</a>.</p>
</div>
</div>
<div class="sect2"><a id="GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9"></a>
<h2 id="JSSEC-GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9" class="sect2">SunPKCS11 Configuration</h2>
<div>
<div class="section">
<p>The SunPKCS11 provider is in the module <span class="apiname">jdk.crypto.cryptoki</span>. To use the provider, you must first install it statically or programmatically.</p>
<p>To install the provider statically, add the provider to the Java security properties file (<code class="codeph"><span class="variable">java-home</span>/conf/security/java.security</code>).</p>
<p>For example, here's a fragment of the <code class="codeph">java.security</code> file that installs the SunPKCS11 provider with the configuration file <code class="codeph">/opt/bar/cfg/pkcs11.cfg</code>.</p>
<pre dir="ltr">
# configuration for security providers 1-12 omitted
security.provider.13=SunPKCS11 /opt/bar/cfg/pkcs11.cfg
</pre>
<p>To install the provider dynamically, create an instance of the provider with the appropriate configuration filename and then install it. Here is an example.</p>
<pre dir="ltr">
    String configName = "/opt/bar/cfg/pkcs11.cfg";
    Provider p = Security.getProvider("SunPKCS11");
    p = p.configure(configName);
    Security.addProvider(p);
</pre>
<div class="infobox-note" id="GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9__GUID-160774D2-1740-4A7B-9C74-E82383614A0E">
<p class="notep1">Note:</p>
<p>Save the returned <span class="apiname">Provider</span> object from the <span class="apiname">configure</span> method, then add that object, as demonstrated in this example:</p>
<pre dir="ltr">
    p = p.configure(configName);
    Security.addProvider(p);
</pre>
<p>Don't add the provider from which you called the <span class="apiname">configure</span> method:</p>
<pre dir="ltr">
    p.configure(configName);
    Security.addProvider(p);
</pre>
<p>If this provider cannot be configured in-place, then a new provider is created and returned. Therefore, always use the provider returned from the <span class="apiname">configure</span> method.</p>
</div>
<p>To use more than one slot per PKCS#11 implementation, or to use more than one PKCS#11 implementation, simply repeat the installation for each with the appropriate configuration file. This will result in a SunPKCS11 provider instance for each slot of each PKCS#11 implementation.</p>
<p>The configuration file is a text file that contains entries in the following format:</p>
<code class="codeph"><span class="variable">attribute</span>=<span class="variable">value</span></code>
<p>The valid values for <span class="variable">attribute</span> and <span class="variable">value</span> are described in the table in this section:</p>
The two mandatory attributes are <code class="codeph">name</code> and <code class="codeph">library</code>.
<p>Here is a sample configuration file:</p>
<pre dir="ltr">
name = FooAccelerator
library = /opt/foo/lib/libpkcs11.so
</pre>
<p>Comments are denoted by lines starting with the <code class="codeph">#</code> (number) symbol.</p>
<div class="tblformal" id="GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9__GUID-8ADD17FD-3320-4D8F-A1ED-319DFEABA338">
<p class="titleintable">Table 5-1 Attributes in the PKCS#11 Provider Configuration File</p>
<table class="cellalignment468" title="Attributes in the PKCS#11 Provider Configuration File" summary="PKCS#11 provider configuration file attributes.">
<thead>
<tr class="cellalignment456">
<th class="cellalignment467" rowspan="1" colspan="1" id="d76041e166">Attribute</th>
<th class="cellalignment467" rowspan="1" colspan="1" id="d76041e168">Value</th>
<th class="cellalignment467" rowspan="1" colspan="1" id="d76041e170">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e174" headers="d76041e166">library</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e174 d76041e168">Pathname of PKCS#11 implementation</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e174 d76041e170">This is the full pathname (including extension) of the PKCS#11 implementation; the format of the pathname is platform dependent. For example, <code class="codeph">/opt/foo/lib/libpkcs11.so</code> might be the pathname of a PKCS#11 implementation on Solaris and Linux while <code class="codeph">C:\foo\mypkcs11.dll</code> might be the pathname on Windows.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e187" headers="d76041e166">name</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e187 d76041e168">Name suffix of this provider instance</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e187 d76041e170">This string is concatenated with the prefix <code class="codeph">SunPKCS11-</code> to produce this provider instance's name (that is, the string returned by its <code class="codeph">Provider.getName()</code> method). For example, if the <code class="codeph">name</code> attribute is <code class="codeph">"FooAccelerator"</code>, then the provider instance's name will be <code class="codeph">"SunPKCS11-FooAccelerator"</code>.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e209" headers="d76041e166">description</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e209 d76041e168">Description of this provider instance</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e209 d76041e170">This string will be returned by the provider instance's <code class="codeph">Provider.getInfo()</code> method. If none is specified, a default description will be returned.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e219" headers="d76041e166">slot</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e219 d76041e168">Slot id</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e219 d76041e170">This is the id of the slot that this provider instance is to be associated with. For example, you would use <code class="codeph">1</code> for the slot with the id <code class="codeph">1</code> under PKCS#11. At most one of <code class="codeph">slot</code> or <code class="codeph">slotListIndex</code> may be specified. If neither is specified, the default is a <code class="codeph">slotListIndex</code> of <code class="codeph">0</code>.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e245" headers="d76041e166">slotListIndex</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e245 d76041e168">Slot index</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e245 d76041e170">This is the slot index that this provider instance is to be associated with. It is the index into the list of all slots returned by the PKCS#11 function <code class="codeph">C_GetSlotList</code>. For example, <code class="codeph">0</code> indicates the first slot in the list. At most one of <code class="codeph">slot</code> or <code class="codeph">slotListIndex</code> may be specified. If neither is specified, the default is a <code class="codeph">slotListIndex</code> of <code class="codeph">0</code>.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e271" headers="d76041e166">enabledMechanisms</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e271 d76041e168">Brace enclosed, whitespace-separated list of PKCS#11 mechanisms to enable</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e271 d76041e170">This is the list PKCS#11 mechanisms that this provider instance should use, provided that they are supported by both the SunPKCS11 provider and PKCS#11 token. All other mechanisms will be ignored. Each entry in the list is the name of a PKCS#11 mechanism. Here is an example that lists two PKCS#11 mechanisms.
<pre dir="ltr">
enabledMechanisms = {
  CKM_RSA_PKCS
  CKM_RSA_PKCS_KEY_PAIR_GEN
}
</pre>
At most one of <code class="codeph">enabledMechanisms</code> or <code class="codeph">disabledMechanisms</code> may be specified. If neither is specified, the mechanisms enabled are those that are supported by both the SunPKCS11 provider (see <a href="pkcs11-reference-guide1.htm#GUID-D3EF9023-7DDC-435D-9186-D2FD05674777">SunPKCS11 Provider Supported Algorithms</a>) and the PKCS#11 token.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e290" headers="d76041e166">disabledMechanisms</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e290 d76041e168">Brace enclosed, whitespace-separated list of PKCS#11 mechanisms to disable</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e290 d76041e170">This is the list of PKCS#11 mechanisms that this provider instance should ignore. Any mechanism listed will be ignored by the provider, even if they are supported by the token and the SunPKCS11 provider. The strings <code class="codeph">SecureRandom</code> and <code class="codeph">KeyStore</code> may be specified to disable those services.
<p>At most one of <code class="codeph">enabledMechanisms</code> or <code class="codeph">disabledMechanisms</code> may be specified. If neither is specified, the mechanisms enabled are those that are supported by both the SunPKCS11 provider (see <a href="pkcs11-reference-guide1.htm#GUID-D3EF9023-7DDC-435D-9186-D2FD05674777">SunPKCS11 Provider Supported Algorithms</a>) and the PKCS#11 token.</p>
</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e315" headers="d76041e166">attributes</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e315 d76041e168">See below</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e315 d76041e170">The <code class="codeph">attributes</code> option can be used to specify additional PKCS#11 that should be set when creating PKCS#11 key objects. This makes it possible to accommodate tokens that require particular attributes. For details, see the section below.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes Configuration</p>
<p>The attributes option allows you to specify additional PKCS#11 attributes that should be set when creating PKCS#11 key objects. By default, the SunPKCS11 provider only specifies mandatory PKCS#11 attributes when creating objects. For example, for RSA public keys it specifies the key type and algorithm (CKA_CLASS and CKA_KEY_TYPE) and the key values for RSA public keys (CKA_MODULUS and CKA_PUBLIC_EXPONENT). The PKCS#11 library you are using will assign implementation specific default values to the other attributes of an RSA public key, for example that the key can be used to encrypt and verify messages (CKA_ENCRYPT and CKA_VERIFY = true).</p>
<p>The <code class="codeph">attributes</code> option can be used if you do not like the default values your PKCS#11 implementation assigns or if your PKCS#11 implementation does not support defaults and requires a value to be specified explicitly. Note that specifying attributes that your PKCS#11 implementation does not support or that are invalid for the type of key in question may cause the operation to fail at runtime.</p>
<p>The option can be specified zero or more times, the options are processed in the order specified in the configuration file as described below. The <code class="codeph">attributes</code> option has the format:</p>
<pre dir="ltr">
attributes(operation, keytype, keyalgorithm) = {
  name1 = value1
  [...]
}
</pre>
<p>Valid values for <code class="codeph">operation</code> are:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">generate</code>, for keys generated via a <span class="apiname">KeyPairGenerator</span> or <span class="apiname">KeyGenerator</span></li>
<li><code class="codeph">import</code>, for keys created via a <span class="apiname">KeyFactory</span> or <span class="apiname">SecretKeyFactory</span>. This also applies to Java software keys automatically converted to PKCS#11 key objects when they are passed to the initialization method of a cryptographic operation, for example <code class="codeph">Signature.initSign()</code>.</li>
<li><code class="codeph">*</code>, for keys created using either a generate or a create operation.</li>
</ul>
<p>Valid values for <code class="codeph">keytype</code> are <code class="codeph">CKO_PUBLIC_KEY</code>, <code class="codeph">CKO_PRIVATE_KEY</code>, and <code class="codeph">CKO_SECRET_KEY</code>, for public, private, and secret keys, respectively, and <code class="codeph">*</code> to match any type of key.</p>
<p>Valid values for <code class="codeph">keyalgorithm</code> are one of the <code class="codeph">CKK_xxx</code> constants from the PKCS#11 specification, or <code class="codeph">*</code> to match keys of any algorithm. The algorithms currently supported by the SunPKCS11 provider include CKK_RSA, CKK_DSA, CKK_DH, CKK_AES, CKK_DES, CKK_DES3, CKK_RC4, CKK_BLOWFISH, CKK_GENERIC_SECRET, and CKK_EC.</p>
<p>The attribute names and values are specified as a list of one or more name-value pairs. <code class="codeph">name</code> must be a <code class="codeph">CKA_xxx</code> constant from the PKCS#11 specification, for example <code class="codeph">CKA_SENSITIVE</code>. <code class="codeph">value</code> can be one of the following:</p>
<ul style="list-style-type: disc;">
<li>A boolean value, <code class="codeph">true</code> or <code class="codeph">false</code></li>
<li>An integer, in decimal form (default) or in hexadecimal form if it begins with <code class="codeph">0x</code>.</li>
<li><code class="codeph">null</code>, indicating that this attribute should <span class="italic">not</span> be specified when creating objects.</li>
</ul>
<p>If the <code class="codeph">attributes</code> option is specified multiple times, the entries are processed in the order specified with the attributes aggregated and later attributes overriding earlier ones. For example, consider the following configuration file excerpt:</p>
<pre dir="ltr">
attributes(*,CKO_PRIVATE_KEY,*) = {
  CKA_SIGN = true
}

attributes(*,CKO_PRIVATE_KEY,CKK_DH) = {
  CKA_SIGN = null
}

attributes(*,CKO_PRIVATE_KEY,CKK_RSA) = {
  CKA_DECRYPT = true
}
</pre>
<p>The first entry says to specify <code class="codeph">CKA_SIGN = true</code> for all private keys. The second option overrides that with <code class="codeph">null</code> for Diffie-Hellman private keys, so the <code class="codeph">CKA_SIGN</code> attribute will not specified for them at all. Finally, the third option says to also specify <code class="codeph">CKA_DECRYPT = true</code> for RSA private keys. That means RSA private keys will have both <code class="codeph">CKA_SIGN = true</code> and <code class="codeph">CKA_DECRYPT = true</code> set.</p>
<p>There is also a special form of the <code class="codeph">attributes</code> option. You can write <code class="codeph">attributes = compatibility</code> in the configuration file. That is a shortcut for a whole set of attribute statements. They are designed to provider maximum compatibility with existing Java applications, which may expect, for example, all key components to be accessible and secret keys to be usable for both encryption and decryption. The <code class="codeph">compatibility</code> attributes line can be used together with other <code class="codeph">attributes</code> lines, in which case the same aggregation and overriding rules apply as described earlier.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-85EA1017-E59C-49B9-9207-65B7B2BF171E"></a>
<h2 id="JSSEC-GUID-85EA1017-E59C-49B9-9207-65B7B2BF171E" class="sect2">Accessing Network Security Services (NSS)</h2>
<div>
<div class="section">
<p><a href="http://www.mozilla.org/projects/security/pki/nss/" target="_blank">Network Security Services (NSS)</a> is a set of open source security libraries whose crypto APIs are based on PKCS#11 but it includes special features that are outside of the PKCS#11 standard. The SunPKCS11 provider includes code to interact with these NSS specific features, including several NSS specific configuration directives, which are described below.</p>
<p>For best results, we recommend that you use the latest version of NSS available. It should be at least version 3.12.</p>
<p>The SunPKCS11 provider uses NSS specific code when any of the <code class="codeph">nss</code> configuration directives described below are used. In that case, the regular configuration commands <code class="codeph">library</code>, <code class="codeph">slot</code>, and <code class="codeph">slotListIndex</code> cannot be used.</p>
<div class="tblformal" id="GUID-85EA1017-E59C-49B9-9207-65B7B2BF171E__GUID-D7866EA0-8645-4F13-A702-7502BCDFC51F">
<p class="titleintable">Table 5-2 NSS Attributes and Values</p>
<table class="cellalignment468" title="NSS Attributes and Values" summary="List of NSS attributes and values.">
<thead>
<tr class="cellalignment456">
<th class="cellalignment467" rowspan="1" colspan="1" id="d76041e519">Attribute</th>
<th class="cellalignment467" rowspan="1" colspan="1" id="d76041e521">Value</th>
<th class="cellalignment467" rowspan="1" colspan="1" id="d76041e523">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e527" headers="d76041e519">nssLibraryDirectory</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e527 d76041e521">directory containing the NSS and NSPR libraries</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e527 d76041e523">This is the full pathname of the directory containing the NSS and <a href="http://www.mozilla.org/projects/nspr/" target="_blank">NSPR</a> libraries. It must be specified unless NSS has already been loaded and initialized by another component running in the same process as the Java VM.
<p>Depending on your platform, you may have to set <code class="codeph">LD_LIBRARY_PATH</code> or <code class="codeph">PATH</code> (on Windows) to include this directory in order to allow the operating system to locate the dependent libraries.</p>
</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e547" headers="d76041e519">nssSecmodDirectory</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e547 d76041e521">directory containing the NSS DB files</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e547 d76041e523">The full pathname of the directory containing the NSS configuration and key information (<code class="codeph">secmod.db</code>, <code class="codeph">key3.db</code>, and <code class="codeph">cert8.db</code>). This directive must be specified unless NSS has already been initialized by another component (see above) or NSS is used without database files as described below.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e563" headers="d76041e519">nssDbMode</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e563 d76041e521">one of <code class="codeph">readWrite</code>, <code class="codeph">readOnly</code>, and <code class="codeph">noDb</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e563 d76041e523">This directives determines how the NSS database is accessed. In read-write mode, full access is possible but only one process at a time should be accessing the databases. Read-only mode disallows modifications to the files.
<p>The noDb mode allows NSS to be used without database files purely as a cryptographic provider. It is not possible to create persistent keys using the PKCS11 KeyStore.</p>
</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e581" headers="d76041e519">nssModule</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e581 d76041e521">one of <code class="codeph">keystore</code>, <code class="codeph">crypto</code>, <code class="codeph">fips</code>, and <code class="codeph">trustanchors</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e581 d76041e523">
<p>NSS makes its functionality available using several different libraries and slots. This directive determines which of these modules is accessed by this instance of SunPKCS11.</p>
<p>The <code class="codeph">crypto</code> module is the default in <code class="codeph">noDb</code> mode. It supports crypto operations without login but no persistent keys.</p>
<p>The <code class="codeph">fips</code> module is the default if the NSS <code class="codeph">secmod.db</code> has been set to FIPS-140 compliant mode. In this mode, NSS restricts the available algorithms and the PKCS#11 attributes with which keys can be created.</p>
<p>The <code class="codeph">keystore</code> module is the default in other configurations. It supports persistent keys using the PKCS11 KeyStore, which are stored in the NSS DB files. This module requires login.</p>
<p>The <code class="codeph">trustanchors</code> module enables access to NSS trust anchor certificates via the PKCS11 KeyStore, if <code class="codeph">secmod.db</code> has been configured to include the trust anchor library.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="example" id="GUID-85EA1017-E59C-49B9-9207-65B7B2BF171E__GUID-98F50D8E-A21A-4749-A540-DEDA7DD5ED9E">
<p class="titleinexample">Example 5-1 SunPKCS11 Configuration Files for NSS</p>
<p>NSS as a pure cryptography provider</p>
<pre dir="ltr">
name = NSScrypto
nssLibraryDirectory = /opt/tests/nss/lib
nssDbMode = noDb
attributes = compatibility
</pre>
<p>NSS as a FIPS 140 compliant crypto token</p>
<pre dir="ltr">
name = NSSfips
nssLibraryDirectory = /opt/tests/nss/lib
nssSecmodDirectory = /opt/tests/nss/fipsdb
nssModule = fips
</pre></div>
<!-- class="example" --></div>
</div>
<div class="sect2"><a id="GUID-7989F8B4-7260-4908-8203-99056B2D060E"></a>
<h2 id="JSSEC-GUID-7989F8B4-7260-4908-8203-99056B2D060E" class="sect2">Troubleshooting PKCS#11</h2>
<div>
<div class="section">
<p>There could be issues with PKCS#11 which requires debugging. To show debug info about Library, Slots, Token, and Mechanism, add <code class="codeph">showInfo=true</code> in the SunPKCS11 provider configuration file, which is <code><span class="variable">&lt;java-home&gt;</span>/conf/security/sunpkcs11-solaris.cfg</code> or the configuration file that you specified statically or dynamically as described in <a href="pkcs11-reference-guide1.htm#GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9">SunPKCS11 Configuration</a>.</p>
<p>For additional debugging info, users can start or restart the Java processes with one of the following options:</p>
<ul style="list-style-type: disc;">
<li>
<p>For general SunPKCS11 provider debugging info:</p>
<p><code class="codeph">-Djava.security.debug=sunpkcs11</code></p>
</li>
<li>
<p>For PKCS#11 keystore specific debugging info:</p>
<p><code class="codeph">-Djava.security.debug=pkcs11keystore</code></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-F068B4E6-8FAD-4443-9269-7DF13573C8DF"></a>
<h2 id="JSSEC-GUID-F068B4E6-8FAD-4443-9269-7DF13573C8DF" class="sect2">Disabling PKCS#11 Providers and/or Individual PKCS#11 Mechanisms</h2>
<div>
<p>As part of the troubleshooting process, it could be helpful to temporarily disable a PKCS#11 provider or the specific mechanism of a given provider.</p>
<div class="section">Please note that disabling a PKCS#11 provider, is only a temporary measure. By disabling the PKCS#11 provider, the provider is no longer available which can cause applications to break or have a performance impact. Once the issue has been identified, only that specific mechanism should remain disabled.</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Disabling PKCS#11 Providers</p>
<p>A PKCS#11 provider can be disabled by using one of the following methods:</p>
<ol>
<li>
<p>Disable PKCS#11 for a single Java process. Start or restart the Java process with the following Java command line flag:</p>
<p><code class="codeph">-Dsun.security.pkcs11.enable-solaris=false</code></p>
<div class="infobox-note" id="GUID-F068B4E6-8FAD-4443-9269-7DF13573C8DF__GUID-2A2DD2C2-41EC-44C6-A37F-9D52ED1BF951">
<p class="notep1">Note:</p>
This step is only applicable to the SunPKCS11 provider when backed by the default Solaris PKCS#11 provider file (<code><span class="variable">&lt;java_home&gt;</span>/conf/security/sunpkcs11-solaris.cfg</code>).</div>
</li>
<li>
<p>Disable PKCS#11 for all Java processes run with a particular Java installation: This can be done dynamically by using the API (not shown in this section) or statically by editing the <code class="codeph"><span class="variable">&lt;java_home&gt;</span>/conf/security/java.security</code> file and commenting out the SunPKCS11 security provider (do not forget to re-number the order of providers, if necessary) as shown below.</p>
<div class="p">
<pre dir="ltr">
#
# List of providers and their preference orders (see above):
#
security.provider.1=SUN
security.provider.2=SunRsaSign
security.provider.3=SunEC
security.provider.4=SunJSSE
security.provider.5=SunJCE
security.provider.6=SunJGSS
security.provider.7=SunSASL
security.provider.8=XMLDSig
security.provider.9=SunPCSC
security.provider.10=JdkLDAP
security.provider.11=JdkSASL
security.provider.12=SunMSCAPI
<span class="bold">#security.provider.13=SunPKCS11</span>
</pre></div>
<p>Start or restart the Java processes being run on this installation of Java.</p>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section" id="GUID-F068B4E6-8FAD-4443-9269-7DF13573C8DF__GUID-6D397DE0-3339-426C-ABA8-A0B079DB8A5A">
<p class="subhead2">Disabling Specific Mechanisms</p>
<p>When an issue occurs in one of the mechanisms of PKCS#11, it can be resolved by disabling only that particular mechanism, rather than the entire PKCS#11 provider (do not forget to re-enable the PKCS#11 provider if it was disabled earlier).</p>
<div class="infobox-note" id="GUID-F068B4E6-8FAD-4443-9269-7DF13573C8DF__GUID-2DFCFB11-76BD-46E8-9FE1-0033BBF66714">
<p class="notep1">Note:</p>
<p>To disable the PKCS#11 SecureRandom implementation only, you can add <span class="apiname">SecureRandom</span> to the list of disabled mechanisms in the <code><span class="variable">&lt;java-home&gt;</span>/conf/security/sunpkcs11-solaris.cfg</code> file:</p>
<pre dir="ltr">
name = Solaris

description = SunPKCS11 accessing Solaris Cryptographic Framework

library = /usr/lib/$ISA/libpkcs11.so

handleStartupErrors = ignoreAll

# Use the X9.63 encoding for EC points (do not wrap in an ASN.1 OctetString).
useEcX963Encoding = true

attributes = compatibility

disabledMechanisms = {
  CKM_DSA_KEY_PAIR_GEN
  <span class="bold">SecureRandom</span>
}
</pre></div>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-4C366313-33B9-458C-A845-33D0C8A9C367"></a>
<h2 id="JSSEC-GUID-4C366313-33B9-458C-A845-33D0C8A9C367" class="sect2">Application Developers</h2>
<div>
<p>Java applications can use the existing JCA and JCE APIs to access PKCS#11 tokens through the SunPKCS11 provider.</p>
</div>
<div class="sect3"><a id="GUID-6E8B2F3C-792F-4512-9BB3-234C440ADC46"></a>
<h3 id="JSSEC-GUID-6E8B2F3C-792F-4512-9BB3-234C440ADC46" class="sect3">Token Login</h3>
<div>
<p>You can login to the keystore using a Personal Identification Number and perform PKCS#11 operations.</p>
<p>Certain PKCS#11 operations, such as accessing private keys, require a login using a Personal Identification Number, or PIN, before the operations can proceed. The most common type of operations that require login are those that deal with keys on the token. In a Java application, such operations often involve first loading the keystore. When accessing the PKCS#11 token as a keystore via the <code class="codeph">java.security.KeyStore</code> class, you can supply the PIN in the password input parameter to the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/KeyStore.html#load-java.io.InputStream-char:A-" target="_blank"><code class="codeph">load</code></a> method. The PIN will then be used by the SunPKCS11 provider for logging into the token. Here is an example.</p>
<pre dir="ltr">
    char[] pin = ...; 
    KeyStore ks = KeyStore.getInstance("PKCS11");
    ks.load(null, pin); 
</pre>
<p>This is fine for an application that treats PKCS#11 tokens as static keystores. For an application that wants to accommodate PKCS#11 tokens more dynamically, such as smartcards being inserted and removed, you can use the new <code class="codeph">KeyStore.Builder</code> class. Here is an example of how to initialize the builder for a PKCS#11 keystore with a callback handler.</p>
<pre dir="ltr">
    KeyStore.CallbackHandlerProtection chp =
        new KeyStore.CallbackHandlerProtection(new MyGuiCallbackHandler());
    KeyStore.Builder builder =
        KeyStore.Builder.newInstance("PKCS11", null, chp);
</pre>
<p>For the SunPKCS11 provider, the callback handler must be able to satisfy a <code class="codeph">PasswordCallback</code>, which is used to prompt the user for the PIN. Whenever the application needs access to the keystore, it uses the builder as follows.</p>
<pre dir="ltr">
    KeyStore ks = builder.getKeyStore();
    Key key = ks.getKey(alias, null);
</pre>
<p>The builder will prompt for a password as needed using the previously configured callback handler. The builder will prompt for a password only for the initial access. If the user of the application continues using the same Smartcard, the user will not be prompted again. If the user removes and inserts a different smartcard, the builder will prompt for a password for the new card.</p>
<p>Depending on the PKCS#11 token, there may be non-key-related operations that also require token login. Applications that use such operations can use the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/AuthProvider.html" target="_blank"><span class="apiname">java.security.AuthProvider</span></a> class. The <code class="codeph">AuthProvider</code> class extends from <code class="codeph">java.security.Provider</code> and defines methods to perform login and logout operations on a provider, as well as to set a callback handler for the provider to use.</p>
<p>For the SunPKCS11 provider, the callback handler must be able to satisfy a <code class="codeph">PasswordCallback</code>, which is used to prompt the user for the PIN.</p>
<p>Here is an example of how an application might use an <code class="codeph">AuthProvider</code> to log into the token. (Note that you must configure the SunPKCS11 provider before using it.)</p>
<pre dir="ltr">
    Provider p = Security.getProvider("SunPKCS11");
    AuthProvider aprov = (AuthProvider)p.configure(<span class="variable">&lt;provider configuration file&gt;</span>);
    aprov.login(subject, new MyGuiCallbackHandler());
</pre></div>
</div>
<div class="sect3"><a id="GUID-508B5E3B-BF39-4E02-A1BD-523352D3AA12"></a>
<h3 id="JSSEC-GUID-508B5E3B-BF39-4E02-A1BD-523352D3AA12" class="sect3">Token Keys</h3>
<div>
<p>Java <code class="codeph">Key</code> objects may or may not contain actual key material.</p>
<ul style="list-style-type: disc;">
<li>A software <span class="apiname">Key</span> object does contain the actual key material and allows access to that material.</li>
<li>An unextractable key on a secure token (such as a smartcard) is represented by a Java <span class="apiname">Key</span> object that does not contain the actual key material. The <span class="apiname">Key</span> object only contains a reference to the actual key.</li>
</ul>
<p>Applications and providers must use the correct interfaces to represent these different types of <span class="apiname">Key</span> objects. Software <span class="apiname">Key</span> objects (or any <span class="apiname">Key</span> object that has access to the actual key material) should implement the interfaces in the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/interfaces/package-summary.html" target="_blank"><span class="apiname">java.security.interfaces</span></a> and <a href="https://docs.oracle.com/javase/10/docs/api/javax/crypto/interfaces/package-summary.html" target="_blank"><span class="apiname">javax.crypto.interfaces</span></a> packages (such as <code class="codeph">DSAPrivateKey</code>). Key objects representing unextractable token keys should only implement the relevant generic interfaces in the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/package-summary.html" target="_blank"><span class="apiname">java.security</span></a> and <a href="https://docs.oracle.com/javase/10/docs/api/javax/crypto/package-summary.html" target="_blank"><span class="apiname">javax.crypto</span></a> packages (<code class="codeph">PrivateKey</code>, <code class="codeph">PublicKey</code>, or <code class="codeph">SecretKey</code>). Identification of the algorithm of a key should be performed using the <code class="codeph">Key.getAlgorithm()</code> method.</p>
<p>Note that a <span class="apiname">Key</span> object for an unextractable token key can only be used by the provider associated with that token.</p>
</div>
</div>
<div class="sect3"><a id="GUID-99785B51-50D8-458E-AA2C-755749F1E39E"></a>
<h3 id="JSSEC-GUID-99785B51-50D8-458E-AA2C-755749F1E39E" class="sect3">Delayed Provider Selection</h3>
<div>
<p>Java cryptography <code class="codeph">getInstance()</code> methods, such as <code class="codeph">Cipher.getInstance("AES")</code>, return the implementation from the first provider that implemented the requested algorithm. However, the JDK delays the selection of the provider until the relevant initialization method is called. The initialization method accepts a <code class="codeph">Key</code> object and can determine at that point which provider can accept the specified <code class="codeph">Key</code> object. This ensures that the selected provider can use the specified <code class="codeph">Key</code> object. (If an application attempts to use a <code class="codeph">Key</code> object for an unextractable token key with a provider that only accepts software key objects, then the provider throws an <code class="codeph">InvalidKeyException</code>. This is an issue for the <code class="codeph">Cipher</code>, <code class="codeph">KeyAgreement</code>, <code class="codeph">Mac</code>, and <code class="codeph">Signature</code> classes.) The following represents the affected initialization methods.</p>
<ul style="list-style-type: disc;">
<li><code class="codeph"><a href="https://docs.oracle.com/javase/10/docs/api/javax/crypto/Cipher.html" target="_blank"><code class="codeph">Cipher</code></a>.init(..., Key key, ...)</code></li>
<li><code class="codeph"><a href="https://docs.oracle.com/javase/10/docs/api/javax/crypto/KeyAgreement.html" target="_blank"><code class="codeph">KeyAgreement</code></a>.init(Key key, ...)</code></li>
<li><code class="codeph"><a href="https://docs.oracle.com/javase/10/docs/api/javax/crypto/Mac.html" target="_blank"><code class="codeph">Mac</code></a>.init(Key key, ...)</code></li>
<li><code class="codeph"><a href="https://docs.oracle.com/javase/10/docs/api/java/security/Signature.html" target="_blank"><code class="codeph">Signature</code></a>.initSign(PrivateKey privateKey)</code></li>
</ul>
<p>Furthermore, if an application calls the initialization method multiple times (each time with a different key, for example), the proper provider for the given key is selected each time. In other words, a different provider may be selected for each initialization call.</p>
<p>Although this delayed provider selection is hidden from the application, it does affect the behavior of the <code class="codeph">getProvider()</code> method for <code class="codeph">Cipher</code>, <code class="codeph">KeyAgreement</code>, <code class="codeph">Mac</code>, and <code class="codeph">Signature</code>. If <code class="codeph">getProvider()</code> is called <span class="variable">before</span> the initialization operation has occurred (and therefore before provider selection has occurred), then the first provider that supports the requested algorithm is returned. This may not be the same provider as the one selected <span class="italic">after</span> the initialization method is called. If <code class="codeph">getProvider()</code> is called <span class="variable">after</span> the initialization operation has occurred, then the actual selected provider is returned. It is recommended that applications only call <code class="codeph">getProvider()</code> after they have called the relevant initialization method.</p>
<p>In addition to <code class="codeph">getProvider()</code>, the following additional methods are similarly affected.</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Cipher.getBlockSize</code></li>
<li><code class="codeph">Cipher.getExcemptionMechanism</code></li>
<li><code class="codeph">Cipher.getIV</code></li>
<li><code class="codeph">Cipher.getOutputSize</code></li>
<li><code class="codeph">Cipher.getParameters</code></li>
<li><code class="codeph">Mac.getMacLength</code></li>
<li><code class="codeph">Signature.getParameters</code></li>
<li><code class="codeph">Signature.setParameter</code></li>
</ul>
</div>
</div>
<div class="sect3"><a id="GUID-60672551-8FF7-4BE1-AF28-CA0C81706B1C"></a>
<h3 id="JSSEC-GUID-60672551-8FF7-4BE1-AF28-CA0C81706B1C" class="sect3">JAAS KeyStoreLoginModule</h3>
<div>
<p>The JDK comes with a JAAS keystore login module, <a href="https://docs.oracle.com/javase/10/docs/api/com/sun/security/auth/module/KeyStoreLoginModule.html" target="_blank"><span class="apiname">KeyStoreLoginModule</span></a>, that allows an application to authenticate using its identity in a specified keystore. After authentication, the application would acquire its principal and credentials information (certificate and private key) from the keystore. By using this login module and configuring it to use a PKCS#11 token as a keystore, the application can acquire this information from a PKCS#11 token.</p>
<p>Use the following options to configure the <code class="codeph">KeyStoreLoginModule</code> to use a PKCS#11 token as the keystore.</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">keyStoreURL="NONE"</code></li>
<li><code class="codeph">keyStoreType="PKCS11"</code></li>
<li><code class="codeph">keyStorePasswordURL=<span class="variable">some_pin_url</span></code></li>
</ul>
<p>where</p>
<dl>
<dt class="dlterm"><a id="GUID-60672551-8FF7-4BE1-AF28-CA0C81706B1C__GUID-D778A65D-C000-44CD-B164-2B4745AA4289"><!-- --></a><span class="variable">some_pin_url</span></dt>
<dd>The location of the PIN. If the <code class="codeph">keyStorePasswordURL</code> option is omitted, then the login module will get the PIN via the application's callback handler, supplying it with a <code class="codeph">PasswordCallback</code> . Here is an example of a configuration file that uses a PKCS#11 token as a keystore.
<pre dir="ltr">
other {
    com.sun.security.auth.module.KeyStoreLoginModule required
        keyStoreURL="NONE"
  keyStoreType="PKCS11"
  keyStorePasswordURL="file:/home/joe/scpin";
};
</pre></dd>
</dl>
<p>If more than one SunPKCS11 provider has been configured dynamically or in the <code class="codeph">java.security</code> security properties file, you can use the <code class="codeph">keyStoreProvider</code> option to target a specific provider instance. The argument to this option is the name of the provider. For the SunPKCS11 provider, the provider name is of the form <code class="codeph">SunPKCS11-<span class="variable">TokenName</span></code>, where <code class="codeph"><span class="variable">TokenName</span></code> is the name suffix that the provider instance has been configured with, as detailed in the <a href="pkcs11-reference-guide1.htm#GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9__GUID-8ADD17FD-3320-4D8F-A1ED-319DFEABA338" title="PKCS#11 provider configuration file attributes.">Table 5-1</a>. For example, the following configuration file names the PKCS#11 provider instance with name suffix <code class="codeph">SmartCard</code>.</p>
<pre dir="ltr">
other {
    com.sun.security.auth.module.KeyStoreLoginModule required
        keyStoreURL="NONE"
  keyStoreType="PKCS11"
  keyStorePasswordURL="file:/home/joe/scpin"
  keyStoreProvider="SunPKCS11-SmartCard";
};
</pre>
<p>Some PKCS#11 tokens support login via a protected authentication path. For example, a smartcard may have a dedicated PIN-pad to enter the pin. Biometric devices will also have their own means to obtain authentication information. If the PKCS#11 token has a protected authentication path, then use the <code class="codeph">protected=true</code> option and omit the <code class="codeph">keyStorePasswordURL</code> option. Here is an example of a configuration file for such a token.</p>
<pre dir="ltr">
other {
    com.sun.security.auth.module.KeyStoreLoginModule required
        keyStoreURL="NONE"
  keyStoreType="PKCS11"
  protected=true;
};
</pre></div>
</div>
<div class="sect3"><a id="GUID-CE29BCBA-4C87-4DA0-B170-328E579200BD"></a>
<h3 id="JSSEC-GUID-CE29BCBA-4C87-4DA0-B170-328E579200BD" class="sect3">Tokens as JSSE Keystore and Trust Stores</h3>
<div>
<p>To use PKCS#11 tokens as JSSE keystores or trust stores, the JSSE application can use the APIs described in <a href="pkcs11-reference-guide1.htm#GUID-6E8B2F3C-792F-4512-9BB3-234C440ADC46" title="You can login to the keystore using a Personal Identification Number and perform PKCS#11 operations.">Token Login</a> to instantiate a <span class="apiname">KeyStore</span> that is backed by a PKCS#11 token and pass it to its key manager and trust manager. The JSSE application will then have access to the keys on the token.</p>
<p>JSSE also supports configuring the use of keystores and trust stores via system properties, as described in the <a href="java-secure-socket-extension-jsse-reference-guide.htm#GUID-93DEEE16-0B70-40E5-BBE7-55C3FD432345" title="The Java Secure Socket Extension (JSSE) enables secure Internet communications. It provides a framework and an implementation for a Java version of the SSL, TLS, and DTLS protocols and includes functionality for data encryption, server authentication, message integrity, and optional client authentication.">Java Secure Socket Extension (JSSE) Reference Guide</a>. To use a PKCS#11 token as a keystore or trust store, set the <code class="codeph">javax.net.ssl.keyStoreType</code> and <code class="codeph">javax.net.ssl.trustStoreType</code> system properties, respectively, to "PKCS11", and set the <code class="codeph">javax.net.ssl.keyStore</code> and <code class="codeph">javax.net.ssl.trustStore</code> system properties, respectively, to <code class="codeph">NONE</code>. To specify the use of a specific provider instance, use the <code class="codeph">javax.net.ssl.keyStoreProvider</code> and <code class="codeph">javax.net.ssl.trustStoreProvider</code> system properties (for example, "SunPKCS11-SmartCard").</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-05DE5039-C62A-42B9-8F8E-DB6DB1B0CD44"></a>
<h2 id="JSSEC-GUID-05DE5039-C62A-42B9-8F8E-DB6DB1B0CD44" class="sect2">Using keytool and jarsigner with PKCS#11 Tokens</h2>
<div>
<p>If the SunPKCS11 provider has been configured in the <code class="codeph">java.security</code> security properties file (located in the <code class="codeph">$JAVA_HOME/conf/security</code> directory of the Java runtime), then keytool and jarsigner can be used to operate on the PKCS#11 token by specifying the following options.</p>
<div class="p">
<ul style="list-style-type: disc;">
<li><code class="codeph">-keystore NONE</code></li>
<li><code class="codeph">-storetype PKCS11</code></li>
</ul>
Here an example of a command to list the contents of the configured PKCS#11 token.</div>
<div class="p">
<pre dir="ltr">
keytool -keystore NONE -storetype PKCS11 -list
</pre>
The PIN can be specified using the <code class="codeph">-storepass</code> option. If none has been specified, then <code class="codeph">keytool</code> and <code class="codeph">jarsigner</code> will prompt for the token PIN. If the token has a protected authentication path (such as a dedicated PIN-pad or a biometric reader), then the <code class="codeph">-protected</code> option must be specified, and no password options can be specified.</div>
<p>If more than one SunPKCS11 provider has been configured in the <code class="codeph">java.security</code> security properties file, you can use the <code class="codeph">-providerName</code> option to target a specific provider instance. The argument to this option is the name of the provider.</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">-providerName <span class="variable">providerName</span></code></li>
</ul>
<p>For the SunPKCS11 provider, <code class="codeph"><span class="variable">providerName</span></code> is of the form <code class="codeph">SunPKCS11-<span class="variable">TokenName</span></code> where:</p>
<dl>
<dt class="dlterm"><a id="GUID-05DE5039-C62A-42B9-8F8E-DB6DB1B0CD44__GUID-486DE0FD-CA9D-401F-96D2-44FDB25B6FC3"><!-- --></a><span class="variable">TokenName</span></dt>
<dd>The name suffix that the provider instance has been configured with, as detailed in <a href="pkcs11-reference-guide1.htm#GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9__GUID-8ADD17FD-3320-4D8F-A1ED-319DFEABA338" title="PKCS#11 provider configuration file attributes.">Table 5-1</a>. For example, the following command lists the contents of the PKCS#11 keystore provider instance with name suffix <code class="codeph">SmartCard</code>.
<pre dir="ltr">
keytool -keystore NONE -storetype PKCS11 \
        -providerName SunPKCS11-SmartCard \
        -list
</pre>
<p>If the SunPKCS11 provider has not been configured in the <code class="codeph">java.security</code> security properties file, you can use the following options to instruct <code class="codeph">keytool</code> and <code class="codeph">jarsigner</code> to install the provider dynamically.</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">-providerClass sun.security.pkcs11.SunPKCS11</code></li>
<li><code class="codeph">-providerArg <span class="variable">ConfigFilePath</span></code></li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-05DE5039-C62A-42B9-8F8E-DB6DB1B0CD44__GUID-BA567174-BE55-43B8-AE0B-F5564824E458"><!-- --></a><span class="variable">ConfigFilePath</span></dt>
<dd>
<div class="p">The path to the token configuration file. Here is an example of a command to list a PKCS#11 keystore when the SunPKCS11 provider has not been configured in the <code class="codeph">java.security</code> file.
<pre dir="ltr">
keytool -keystore NONE -storetype PKCS11 \
        -providerClass sun.security.pkcs11.SunPKCS11 \
        -providerArg /foo/bar/token.config \
        -list
</pre></div>
</dd>
</dl>
</div>
</div>
<div class="sect2"><a id="GUID-F8D31D74-8D4D-4981-BC63-05ABED100AB8"></a>
<h2 id="JSSEC-GUID-F8D31D74-8D4D-4981-BC63-05ABED100AB8" class="sect2">Policy Tool</h2>
<div>
<div class="infobox-note" id="GUID-F8D31D74-8D4D-4981-BC63-05ABED100AB8__GUID-73BDA382-76B1-4F3C-8A13-CEB4B86B48F7">
<p class="notep1">Note:</p>
<p>The Policy Tool is deprecated in JDK 9.</p>
</div>
<p>The <code class="codeph">keystore</code> entry in the default policy implementation has the following syntax, which accommodates a PIN and multiple PKCS#11 provider instances:</p>
<pre dir="ltr">
keystore "<span class="italic">some_keystore_url</span>", "<span class="italic">keystore_type</span>", "<span class="italic">keystore_provider</span>";
keystorePasswordURL "<span class="italic">some_password_url</span>";
</pre>
<p>Where</p>
<dl>
<dt class="dlterm"><a id="GUID-F8D31D74-8D4D-4981-BC63-05ABED100AB8__GUID-DCD1833C-101D-4568-A7DC-4E8F1F18ED67"><!-- --></a><span class="variable">keystore_provider</span></dt>
<dd>The keystore provider name (for example, <code class="codeph">"SunPKCS11-SmartCard"</code>).</dd>
<dt class="dlterm"><a id="GUID-F8D31D74-8D4D-4981-BC63-05ABED100AB8__GUID-8F5B3FF4-863B-4EA5-B16B-4454B035C54E"><!-- --></a><span class="variable">some_password_url</span></dt>
<dd>A URL pointing to the location of the token PIN. Both <span class="variable">keystore_provider</span> and the <span class="variable">keystorePasswordURL</span> line are optional. If <span class="variable">keystore_provider</span> has not been specified, then the first configured provider that supports the specified keystore type is used. If the <code class="codeph">keystorePasswordURL</code> line has not been specified, then no password is used.</dd>
</dl>
<div class="example" id="GUID-F8D31D74-8D4D-4981-BC63-05ABED100AB8__GUID-466262E0-C186-4808-828D-FB8CEFDE1076">
<p class="titleinexample">Example 5-2 Keystore Policy Entry for a PKCS#11 Token</p>
<p>The following is an example keystore policy entry for a PKCS#11 token:</p>
<pre dir="ltr">
keystore "NONE", "PKCS11", "SunPKCS11-SmartCard";
keystorePasswordURL "file:/foo/bar/passwordFile";
</pre></div>
<!-- class="example" --></div>
</div>
<div class="sect2"><a id="GUID-2216C9EC-5F64-424C-BA35-E7DDEDC61C53"></a>
<h2 id="JSSEC-GUID-2216C9EC-5F64-424C-BA35-E7DDEDC61C53" class="sect2">Provider Developers</h2>
<div>
<p>The <code class="codeph">java.security.Provider</code> class enables provider developers to more easily support PKCS#11 tokens and cryptographic services through provider services and parameter support.</p>
<p>See <a href="pkcs11-reference-guide1.htm#GUID-50C137F1-F23B-434D-AA90-5A744ABA2F5B" title="The following is an example of a simple provider that demonstrates features of the Provider class.">Example Provider</a> for an example of a simple provider designed to demonstrate provider services and parameter support.</p>
</div>
<div class="sect3"><a id="GUID-BDF21F95-43FA-462F-A89C-5DF20760440E"></a>
<h3 id="JSSEC-GUID-BDF21F95-43FA-462F-A89C-5DF20760440E" class="sect3">Provider Services</h3>
<div>
<div class="section">
<p>For each service implemented by the provider, there must be a property whose name is the type of service (<code class="codeph">Cipher</code>, <code class="codeph">Signature</code>, etc), followed by a period and the name of the algorithm to which the service applies. The property value must specify the fully qualified name of the class implementing the service. Here is an example of a provider setting <code class="codeph">KeyAgreement.DiffieHellman</code> property to have the value <code class="codeph">com.sun.crypto.provider.DHKeyAgreement</code>.</p>
<pre dir="ltr">
put("KeyAgreement.DiffieHellman", "com.sun.crypto.provider.DHKeyAgreement")
</pre>
<p>The public static nested class <a href="https://docs.oracle.com/javase/10/docs/api/java/security/Provider.Service.html" target="_blank"><span class="apiname">Provider.Service</span></a> encapsulates the properties of a provider service (including its type, attributes, algorithm name, and algorithm aliases). Providers can instantiate <code class="codeph">Provider.Service</code> objects and register them by calling the <code class="codeph">Provider.putService()</code> method. This is equivalent to creating a <code class="codeph">Property</code> entry and calling the <code class="codeph">Provider.put()</code> method. Note that legacy <code class="codeph">Property</code> entries registered via <code class="codeph">Provider.put</code> are still supported.</p>
<p>Here is an example of a provider creating a <code class="codeph">Service</code> object with the <code class="codeph">KeyAgreement</code> type, for the <code class="codeph">DiffieHellman</code> algorithm, implemented by the class <code class="codeph">com.sun.crypto.provider.DHKeyAgreement</code>.</p>
<pre dir="ltr">
Service s = new Service(this, "KeyAgreement", "DiffieHellman",
    "com.sun.crypto.provider.DHKeyAgreement", null, null);
putService(s);
</pre>
<p>Using <code class="codeph">Provider.Service</code> objects instead of legacy <code class="codeph">Property</code> entries has a couple of major benefits. One benefit is that it allows the provider to have greater flexibility when <a href="pkcs11-reference-guide1.htm#GUID-BDF21F95-43FA-462F-A89C-5DF20760440E__INSTANTIATINGENGINECLASSES-F41C69E1">Instantiating Engine Classes</a>. Another benefit is that it allows the provider to test <a href="pkcs11-reference-guide1.htm#GUID-BDF21F95-43FA-462F-A89C-5DF20760440E__PARAMETERSUPPORT-57310DC1">Parameter Support</a>. These features are discussed in detail next.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BDF21F95-43FA-462F-A89C-5DF20760440E__INSTANTIATINGENGINECLASSES-F41C69E1">
<p class="subhead3">Instantiating Engine Classes</p>
<p>By default, the Java Cryptography framework looks up the provider property for a particular service and directly instantiates the engine class registered for that property. A provider can to override this behavior and instantiate the engine class for the requested service itself.</p>
<p>To override the default behavior, the provider overrides the <code class="codeph">Provider.Service.newInstance()</code> method to add its custom behavior. For example, the provider might call a custom constructor, or might perform initialization using information not accessible outside the provider (or that are only known by the provider).</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BDF21F95-43FA-462F-A89C-5DF20760440E__PARAMETERSUPPORT-57310DC1">
<p class="subhead3">Parameter Support</p>
<p>The Java Cryptography framework may attempt a fast check to determine whether a provider's service implementation can use an application-specified parameter. To perform this fast check, the framework calls <code class="codeph">Provider.Service.supportsParameter()</code>.</p>
<p>The framework relies on this fast test during delayed provider selection (see <a href="pkcs11-reference-guide1.htm#GUID-99785B51-50D8-458E-AA2C-755749F1E39E">Delayed Provider Selection</a>). When an application invokes an initialization method and passes it a <code class="codeph">Key</code> object, the framework asks an underlying provider whether it supports the object by calling its <code class="codeph">Service.supportsParameter()</code> method. If <code class="codeph">supportsParameter()</code> returns <code class="codeph">false</code>, the framework can immediately remove that provider from consideration. If <code class="codeph">supportsParameter()</code> returns <code class="codeph">true</code>, the framework passes the <code class="codeph">Key</code> object to that provider's initialization engine class implementation. A provider that requires software <code class="codeph">Key</code> objects should override this method to return <code class="codeph">false</code> when it is passed non-software keys. Likewise, a provider for a PKCS#11 token that contains unextractable keys should only return <code class="codeph">true</code> for <code class="codeph">Key</code> objects that it created, and which therefore correspond to the keys on its respective token.</p>
<div class="infobox-note" id="GUID-BDF21F95-43FA-462F-A89C-5DF20760440E__THEDEFAULTIMPLEMENTATIONOFSUPPORTSP-1E7A1649">
<p class="notep1">Note:</p>
The default implementation of <code class="codeph">supportsParameter()</code> returns <code class="codeph">true</code>. This allows existing providers to work without modification. However, because of this lenient default implementation, the framework must be prepared to catch exceptions thrown by providers that reject the <code class="codeph">Key</code> object inside their initialization engine class implementations. The framework treats these cases the same as when <code class="codeph">supportsParameter()</code> returns <code class="codeph">false</code>.</div>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-AD009675-E028-4A86-BE87-8DBD03B538DC"></a>
<h3 id="JSSEC-GUID-AD009675-E028-4A86-BE87-8DBD03B538DC" class="sect3">Parameter Support</h3>
<div>
<p>The Java Cryptography framework may attempt a fast check to determine whether a provider's service implementation can use an application-specified parameter. To perform this fast check, the framework calls <code class="codeph">Provider.Service.supportsParameter()</code>.</p>
<p>The framework relies on this fast test during delayed provider selection (see <a href="pkcs11-reference-guide1.htm#GUID-99785B51-50D8-458E-AA2C-755749F1E39E">Delayed Provider Selection</a>). When an application invokes an initialization method and passes it a <code class="codeph">Key</code> object, the framework asks an underlying provider whether it supports the object by calling its <code class="codeph">Service.supportsParameter()</code> method. If <code class="codeph">supportsParameter()</code> returns <code class="codeph">false</code>, the framework can immediately remove that provider from consideration. If <code class="codeph">supportsParameter()</code> returns <code class="codeph">true</code>, the framework passes the <code class="codeph">Key</code> object to that provider's initialization engine class implementation. A provider that requires software <code class="codeph">Key</code> objects should override this method to return <code class="codeph">false</code> when it is passed non-software keys. Likewise, a provider for a PKCS#11 token that contains unextractable keys should only return <code class="codeph">true</code> for <code class="codeph">Key</code> objects that it created, and which therefore correspond to the keys on its respective token.</p>
<div class="infobox-note" id="GUID-AD009675-E028-4A86-BE87-8DBD03B538DC__GUID-019F1138-29BE-43FA-91DC-42CAED7D7ACF">
<p class="notep1">Note:</p>
The default implementation of <code class="codeph">supportsParameter()</code> returns <code class="codeph">true</code>. This allows existing providers to work without modification. However, because of this lenient default implementation, the framework must be prepared to catch exceptions thrown by providers that reject the <code class="codeph">Key</code> object inside their initialization engine class implementations. The framework treats these cases the same as when <code class="codeph">supportsParameter()</code> returns <code class="codeph">false</code>.</div>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-D3EF9023-7DDC-435D-9186-D2FD05674777"></a>
<h2 id="JSSEC-GUID-D3EF9023-7DDC-435D-9186-D2FD05674777" class="sect2">SunPKCS11 Provider Supported Algorithms</h2>
<div>
<div class="section"><a href="pkcs11-reference-guide1.htm#GUID-D3EF9023-7DDC-435D-9186-D2FD05674777__GUID-21B92E76-EE33-47EA-BC0C-F428AF662C02" title="List of Java Algorithms supported by the Sun PKCS#11 Provider.">Table 5-3</a> lists the Java algorithms supported by the SunPKCS11 provider and corresponding PKCS#11 mechanisms needed to support them. When multiple mechanisms are listed, they are given in the order of preference and any one of them is sufficient.
<div class="infobox-note" id="GUID-D3EF9023-7DDC-435D-9186-D2FD05674777__GUID-E2C635BE-FFB1-4E12-90F3-5679264E9219">
<p class="notep1">Note:</p>
SunPKCS11 can be instructed to ignore mechanisms by using the <code class="codeph">disabledMechanisms</code> and <code class="codeph">enabledMechanisms</code> configuration directives (see <a href="pkcs11-reference-guide1.htm#GUID-C4ABFACB-B2C9-4E71-A313-79F881488BB9">SunPKCS11 Configuration</a>).</div>
<p>For Elliptic Curve mechanisms, the SunPKCS11 provider will only use keys that use the <code class="codeph">namedCurve</code> choice as encoding for the parameters and only allow the uncompressed point format. The SunPKCS11 provider assumes that a token supports all standard named domain parameters.</p>
<div class="tblformal" id="GUID-D3EF9023-7DDC-435D-9186-D2FD05674777__GUID-21B92E76-EE33-47EA-BC0C-F428AF662C02">
<p class="titleintable">Table 5-3 Java Algorithms Supported by the SunPKCS11 Provider</p>
<table class="cellalignment468" title="Java Algorithms Supported by the SunPKCS11 Provider" summary="List of Java Algorithms supported by the Sun PKCS#11 Provider.">
<thead>
<tr class="cellalignment456">
<th class="cellalignment467" id="d76041e1642">Java Algorithm</th>
<th class="cellalignment467" id="d76041e1644">PKCS#11 Mechanisms</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1648" headers="d76041e1642">Signature.MD2withRSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1648 d76041e1644">CKM_MD2_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1653" headers="d76041e1642">Signature.MD5withRSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1653 d76041e1644">CKM_MD5_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1658" headers="d76041e1642">Signature.SHA1withRSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1658 d76041e1644">CKM_SHA1_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1663" headers="d76041e1642">Signature.SHA224withRSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1663 d76041e1644">CKM_SHA224_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1668" headers="d76041e1642">Signature.SHA256withRSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1668 d76041e1644">CKM_SHA256_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1673" headers="d76041e1642">Signature.SHA384withRSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1673 d76041e1644">CKM_SHA384_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1678" headers="d76041e1642">Signature.SHA512withRSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1678 d76041e1644">CKM_SHA512_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1683" headers="d76041e1642">Signature.SHA1withDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1683 d76041e1644">CKM_DSA_SHA1, CKM_DSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1688" headers="d76041e1642">Signature.NONEwithDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1688 d76041e1644">CKM_DSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1693" headers="d76041e1642">Signature.SHA1withECDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1693 d76041e1644">CKM_ECDSA_SHA1, CKM_ECDSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1698" headers="d76041e1642">Signature.SHA224withECDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1698 d76041e1644">CKM_ECDSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1704" headers="d76041e1642">Signature.SHA256withECDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1704 d76041e1644">CKM_ECDSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1709" headers="d76041e1642">Signature.SHA384withECDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1709 d76041e1644">CKM_ECDSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1714" headers="d76041e1642">Signature.SHA512withECDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1714 d76041e1644">CKM_ECDSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1719" headers="d76041e1642">Signature.NONEwithECDSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1719 d76041e1644">CKM_ECDSA</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1724" headers="d76041e1642">Cipher.RSA/ECB/NoPadding</td>
<td class="cellalignment456" headers="d76041e1724 d76041e1644">CKM_RSA_X_509</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1729" headers="d76041e1642">Cipher.RSA/ECB/PKCS1Padding</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1729 d76041e1644">CKM_RSA_PKCS</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1734" headers="d76041e1642">Cipher.ARCFOUR</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1734 d76041e1644">CKM_RC4</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1739" headers="d76041e1642">Cipher.DES/CBC/NoPadding</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1739 d76041e1644">CKM_DES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1744" headers="d76041e1642">Cipher.DES/CBC/PKCS5Padding</td>
<td class="cellalignment456" headers="d76041e1744 d76041e1644">CKM_DES_CBC_PAD, CKM_DES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1749" headers="d76041e1642">Cipher.DES/ECB/NoPadding</td>
<td class="cellalignment456" headers="d76041e1749 d76041e1644">CKM_DES_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1754" headers="d76041e1642">Cipher.DES/ECB/PKCS5Padding</td>
<td class="cellalignment456" headers="d76041e1754 d76041e1644">CKM_DES_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1760" headers="d76041e1642">Cipher.DESede/CBC/NoPadding</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1760 d76041e1644">CKM_DES3_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1765" headers="d76041e1642">Cipher.DESede/CBC/PKCS5Padding</td>
<td class="cellalignment456" headers="d76041e1765 d76041e1644">CKM_DES3_CBC_PAD, CKM_DES3_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1770" headers="d76041e1642">Cipher.DESede/ECB/NoPadding</td>
<td class="cellalignment456" headers="d76041e1770 d76041e1644">CKM_DES3_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1775" headers="d76041e1642">Cipher.DESede/ECB/PKCS5Padding</td>
<td class="cellalignment456" headers="d76041e1775 d76041e1644">CKM_DES3_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1780" headers="d76041e1642">Cipher.AES/CBC/NoPadding</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1780 d76041e1644">CKM_AES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1785" headers="d76041e1642">Cipher.AES/CBC/PKCS5Padding</td>
<td class="cellalignment456" headers="d76041e1785 d76041e1644">CKM_AES_CBC_PAD, CKM_AES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1790" headers="d76041e1642">Cipher.Blowfish/CBC/NoPadding</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1790 d76041e1644">CKM_BLOWFISH_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1795" headers="d76041e1642">Cipher.Blowfish/CBC/PKCS5Padding</td>
<td class="cellalignment456" headers="d76041e1795 d76041e1644">CKM_BLOWFISH_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1800" headers="d76041e1642">Cipher.AES/CTR/NoPadding</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1800 d76041e1644">CKM_AES_CTR</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1805" headers="d76041e1642">Cipher.AES/ECB/NoPadding</td>
<td class="cellalignment456" headers="d76041e1805 d76041e1644">CKM_AES_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1810" headers="d76041e1642">Cipher.AES/ECB/PKCS5Padding</td>
<td class="cellalignment456" headers="d76041e1810 d76041e1644">CKM_AES_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1816" headers="d76041e1642">Cipher.AES_128/CBC/NoPadding</td>
<td class="cellalignment456" headers="d76041e1816 d76041e1644">CKM_AES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1821" headers="d76041e1642">Cipher.AES_128/ECB/NoPadding</td>
<td class="cellalignment456" headers="d76041e1821 d76041e1644">CKM_AES_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1826" headers="d76041e1642">Cipher.AES_192/CBC/NoPadding</td>
<td class="cellalignment456" headers="d76041e1826 d76041e1644">CKM_AES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1831" headers="d76041e1642">Cipher.AES_192/ECB/NoPadding</td>
<td class="cellalignment456" headers="d76041e1831 d76041e1644">CKM_AES_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1836" headers="d76041e1642">Cipher.AES_256/CBC/NoPadding</td>
<td class="cellalignment456" headers="d76041e1836 d76041e1644">CKM_AES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d76041e1841" headers="d76041e1642">Cipher.AES_256/ECB/NoPadding</td>
<td class="cellalignment456" headers="d76041e1841 d76041e1644">CKM_AES_ECB</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1846" headers="d76041e1642">KeyAgreement.ECDH</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1846 d76041e1644">CKM_ECDH1_DERIVE</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1851" headers="d76041e1642">KeyAgreement.DiffieHellman</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1851 d76041e1644">CKM_DH_PKCS_DERIVE</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1856" headers="d76041e1642">KeyPairGenerator.RSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1856 d76041e1644">CKM_RSA_PKCS_KEY_PAIR_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1861" headers="d76041e1642">KeyPairGenerator.DSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1861 d76041e1644">CKM_DSA_KEY_PAIR_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1866" headers="d76041e1642">KeyPairGenerator.EC</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1866 d76041e1644">CKM_EC_KEY_PAIR_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1872" headers="d76041e1642">KeyPairGenerator.DiffieHellman</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1872 d76041e1644">CKM_DH_PKCS_KEY_PAIR_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1877" headers="d76041e1642">KeyGenerator.ARCFOUR</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1877 d76041e1644">CKM_RC4_KEY_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1882" headers="d76041e1642">KeyGenerator.DES</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1882 d76041e1644">CKM_DES_KEY_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1887" headers="d76041e1642">KeyGenerator.DESede</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1887 d76041e1644">CKM_DES3_KEY_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1892" headers="d76041e1642">KeyGenerator.AES</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1892 d76041e1644">CKM_AES_KEY_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1897" headers="d76041e1642">KeyGenerator.Blowfish</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1897 d76041e1644">CKM_BLOWFISH_KEY_GEN</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1902" headers="d76041e1642">Mac.HmacMD5</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1902 d76041e1644">CKM_MD5_HMAC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1907" headers="d76041e1642">Mac.HmacSHA1</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1907 d76041e1644">CKM_SHA_1_HMAC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1912" headers="d76041e1642">Mac.HmacSHA224</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1912 d76041e1644">CKM_SHA224_HMAC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1917" headers="d76041e1642">Mac.HmacSHA256</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1917 d76041e1644">CKM_SHA256_HMAC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1922" headers="d76041e1642">Mac.HmacSHA384</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1922 d76041e1644">CKM_SHA384_HMAC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1928" headers="d76041e1642">Mac.HmacSHA512</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1928 d76041e1644">CKM_SHA512_HMAC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1933" headers="d76041e1642">MessageDigest.MD2</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1933 d76041e1644">CKM_MD2</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1938" headers="d76041e1642">MessageDigest.MD5</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1938 d76041e1644">CKM_MD5</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1943" headers="d76041e1642">MessageDigest.SHA1</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1943 d76041e1644">CKM_SHA_1</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1948" headers="d76041e1642">MessageDigest.SHA-224</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1948 d76041e1644">CKM_SHA224</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1953" headers="d76041e1642">MessageDigest.SHA-256</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1953 d76041e1644">CKM_SHA256</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1958" headers="d76041e1642">MessageDigest.SHA-384</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1958 d76041e1644">CKM_SHA384</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1963" headers="d76041e1642">MessageDigest.SHA-512</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1963 d76041e1644">CKM_SHA512</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1968" headers="d76041e1642">KeyFactory.RSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1968 d76041e1644">Any supported RSA mechanism</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1973" headers="d76041e1642">KeyFactory.DSA</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1973 d76041e1644">Any supported DSA mechanism</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1978" headers="d76041e1642">KeyFactory.EC</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1978 d76041e1644">Any supported EC mechanism</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1984" headers="d76041e1642">KeyFactory.DiffieHellman</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1984 d76041e1644">Any supported Diffie-Hellman mechanism</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1989" headers="d76041e1642">SecretKeyFactory.ARCFOUR</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1989 d76041e1644">CKM_RC4</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1994" headers="d76041e1642">SecretKeyFactory.DES</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1994 d76041e1644">CKM_DES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e1999" headers="d76041e1642">SecretKeyFactory.DESede</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e1999 d76041e1644">CKM_DES3_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e2004" headers="d76041e1642">SecretKeyFactory.AES</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e2004 d76041e1644">CKM_AES_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e2009" headers="d76041e1642">SecretKeyFactory.Blowfish</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e2009 d76041e1644">CKM_BLOWFISH_CBC</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e2014" headers="d76041e1642">SecureRandom.PKCS11</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e2014 d76041e1644">CK_TOKEN_INFO has the CKF_RNG bit set</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d76041e2019" headers="d76041e1642">KeyStore.PKCS11</td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d76041e2019 d76041e1644">Always available</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-F068390B-EB41-48A0-A713-B4CBCC72285D"></a>
<h2 id="JSSEC-GUID-F068390B-EB41-48A0-A713-B4CBCC72285D" class="sect2">SunPKCS11 Provider KeyStore Requirements</h2>
<div>
<p>The following describes the requirements placed by the SunPKCS11 provider's KeyStore implementation on the underlying native PKCS#11 library.</p>
<div class="section">
<div class="infobox-note" id="GUID-F068390B-EB41-48A0-A713-B4CBCC72285D__GUID-D235AC91-F2D1-4F7A-83D5-5604508A9578">
<p class="notep1">Note:</p>
Changes may be made in future releases to maximize interoperability with as many existing PKCS#11 libraries as possible.</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Read-Only Access</p>
<p>To map existing objects stored on a PKCS#11 token to KeyStore entries, the SunPKCS11 provider's KeyStore implementation performs the following operations.</p>
<ol>
<li>A search for all private key objects on the token is performed by calling <code class="codeph">C_FindObjects[Init|Final]</code>. The search template includes the following attributes:
<ul style="list-style-type: disc;">
<li>CKA_TOKEN = true</li>
<li>CKA_CLASS = CKO_PRIVATE_KEY</li>
</ul>
</li>
<li>A search for all certificate objects on the token is performed by calling <code class="codeph">C_FindObjects[Init|Final]</code>. The search template includes the following attributes:
<ul style="list-style-type: disc;">
<li>CKA_TOKEN = true</li>
<li>CKA_CLASS = CKO_CERTIFICATE</li>
</ul>
</li>
<li>Each private key object is matched with its corresponding certificate by retrieving their respective CKA_ID attributes. A matching pair must share the same unique CKA_ID.
<p>For each matching pair, the certificate chain is built by following the issuer-&gt;subject path. From the end entity certificate, a call for <code class="codeph">C_FindObjects[Init|Final]</code> is made with a search template that includes the following attributes:</p>
<ul style="list-style-type: disc;">
<li>CKA_TOKEN = true</li>
<li>CKA_CLASS = CKO_CERTIFICATE</li>
<li>CKA_SUBJECT = [DN of certificate issuer]</li>
</ul>
<p>This search is continued until either no certificate for the issuer is found, or until a self-signed certificate is found. If more than one certificate is found the first one is used.</p>
<p>Once a private key and certificate have been matched (and its certificate chain built), the information is stored in a private key entry with the CKA_LABEL value from end entity certificate as the KeyStore alias.</p>
<p>If the end entity certificate has no CKA_LABEL, then the alias is derived from the CKA_ID. If the CKA_ID can be determined to consist exclusively of printable characters, then a String alias is created by decoding the CKA_ID bytes using the UTF-8 charset. Otherwise, a hex String alias is created from the CKA_ID bytes ("0xFFFF...", for example).</p>
<p>If multiple certificates share the same CKA_LABEL, then the alias is derived from the CKA_LABEL plus the end entity certificate issuer and serial number (<code>"MyCert/CN=foobar/1234"</code>, for example).</p>
</li>
<li>Each certificate not part of a private key entry (as the end entity certificate) is checked whether it is trusted. If the CKA_TRUSTED attribute is true, then a KeyStore trusted certificate entry is created with the CKA_LABEL value as the KeyStore alias. If the certificate has no CKA_LABEL, or if multiple certificates share the same CKA_LABEL, then the alias is derived as described above.
<p>If the CKA_TRUSTED attribute is not supported then no trusted certificate entries are created.</p>
</li>
<li>Any private key or certificate object not part of a private key entry or trusted certificate entry is ignored.</li>
<li>A search for all secret key objects on the token is performed by calling <code class="codeph">C_FindObjects[Init|Final]</code>. The search template includes the following attributes:
<ul style="list-style-type: disc;">
<li>CKA_TOKEN = true</li>
<li>CKA_CLASS = CKO_SECRET_KEY</li>
</ul>
<p>A KeyStore secret key entry is created for each secret key object, with the CKA_LABEL value as the KeyStore alias. Each secret key object must have a unique CKA_LABEL.</p>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Write Access</p>
<p>To create new KeyStore entries on a PKCS#11 token to KeyStore entries, the SunPKCS11 provider's KeyStore implementation performs the following operations.</p>
<ol>
<li>When creating a KeyStore entry (during KeyStore.setEntry, for example), C_CreateObject is called with <code class="codeph">CKA_TOKEN=true</code> to create token objects for the respective entry contents.
<p>Private key objects are stored with <code class="codeph">CKA_PRIVATE=true</code>. The KeyStore alias (UTF8-encoded) is set as the CKA_ID for both the private key and the corresponding end entity certificate. The KeyStore alias is also set as the CKA_LABEL for the end entity certificate object.</p>
<p>Each certificate in a private key entry's chain is also stored. The CKA_LABEL is not set for CA certificates. If a CA certificate is already in the token, a duplicate is not stored.</p>
<p>Secret key objects are stored with <code class="codeph">CKA_PRIVATE=true</code>. The KeyStore alias is set as the CKA_LABEL.</p>
</li>
<li>If an attempt is made to convert a session object to a token object (for example, if KeyStore.setEntry is called and the private key object in the specified entry is a session object), then C_CopyObject is called with <code class="codeph">CKA_TOKEN=true</code>.</li>
<li>If multiple certificates in the token are found to share the same CKA_LABEL, then the write capabilities to the token are disabled.</li>
<li>Since the PKCS#11 specification does not allow regular applications to set <code class="codeph">CKA_TRUSTED=true</code> (only token initialization applications may do so), trusted certificate entries can not be created.</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Miscellaneous</p>
<p>In addition to the searches listed above, the following searches may be used by the SunPKCS11 provider's KeyStore implementation to perform internal functions. Specifically, <code class="codeph">C_FindObjects[Init|Final]</code> may be called with any of the following attribute templates:</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
    CKA_TOKEN    true
    CKA_CLASS    CKO_CERTIFICATE
    CKA_SUBJECT  [subject DN]
</pre></li>
<li>
<pre dir="ltr">
    CKA_TOKEN    true
    CKA_CLASS    CKO_SECRET_KEY
    CKA_LABEL    [label]
</pre></li>
<li>
<pre dir="ltr">
    CKA_TOKEN    true
    CKA_CLASS    CKO_CERTIFICATE or CKO_PRIVATE_KEY
    CKA_ID       [cka_id]
</pre></li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-50C137F1-F23B-434D-AA90-5A744ABA2F5B"></a>
<h2 id="JSSEC-GUID-50C137F1-F23B-434D-AA90-5A744ABA2F5B" class="sect2">Example Provider</h2>
<div>
<p>The following is an example of a simple provider that demonstrates features of the <span class="apiname">Provider</span> class.</p>
<div class="section">
<pre dir="ltr">
package com.foo;

import java.io.*;
import java.lang.reflect.*;
import java.security.*;
import javax.crypto.*;

/**
 * Example provider that demonstrates some Provider class features.
 *
 *  . implement multiple different algorithms in a single class.
 *    Previously each algorithm needed to be implemented in a separate class
 *    (e.g. one for SHA-256, one for SHA-384, etc.)
 *
 *  . multiple concurrent instances of the provider frontend class each
 *    associated with a different backend.
 *
 *  . it uses "unextractable" keys and lets the framework know which key
 *    objects it can and cannot support
 *
 * Note that this is only a simple example provider designed to demonstrate
 * several of the new features.  It is not explicitly designed for efficiency.
 */
public final class ExampleProvider extends Provider {

    // reference to the crypto backend that implements all the algorithms
    final CryptoBackend cryptoBackend;

    public ExampleProvider(String name, CryptoBackend cryptoBackend) {
        super(name, 1.0, "JCA/JCE provider for " + name);
        this.cryptoBackend = cryptoBackend;
        // register the algorithms we support (SHA-256, SHA-384, DESede, and AES)
        putService(new MyService
            (this, "MessageDigest", "SHA-256", "com.foo.ExampleProvider$MyMessageDigest"));
        putService(new MyService
            (this, "MessageDigest", "SHA-384", "com.foo.ExampleProvider$MyMessageDigest"));
        putService(new MyCipherService
            (this, "Cipher", "DES", "com.foo.ExampleProvider$MyCipher"));
        putService(new MyCipherService
            (this, "Cipher", "AES", "com.foo.ExampleProvider$MyCipher"));
    }

    // the API of our fictitious crypto backend
    static abstract class CryptoBackend {
        abstract byte[] digest(String algorithm, byte[] data);
        abstract byte[] encrypt(String algorithm, KeyHandle key, byte[] data);
        abstract byte[] decrypt(String algorithm, KeyHandle key, byte[] data);
        abstract KeyHandle createKey(String algorithm, byte[] keyData);
    }

    // the shell of the representation the crypto backend uses for keys
    private static final class KeyHandle {
        // fill in code
    }

    // we have our own ServiceDescription implementation that overrides newInstance()
    // that calls the (Provider, String) constructor instead of the no-args constructor
    private static class MyService extends Service {

        private static final Class[] paramTypes = {Provider.class, String.class};

        MyService(Provider provider, String type, String algorithm,
                String className) {
            super(provider, type, algorithm, className, null, null);
        }

        public Object newInstance(Object param) throws NoSuchAlgorithmException {
            try {
                // get the Class object for the implementation class
                Class clazz;
                Provider provider = getProvider();
                ClassLoader loader = provider.getClass().getClassLoader();
                if (loader == null) {
                    clazz = Class.forName(getClassName());
                } else {
                    clazz = loader.loadClass(getClassName());
                }
                // fetch the (Provider, String) constructor
                Constructor cons = clazz.getConstructor(paramTypes);
                // invoke constructor and return the SPI object
                Object obj = cons.newInstance(new Object[] {provider, getAlgorithm()});
                return obj;
            } catch (Exception e) {
                throw new NoSuchAlgorithmException("Could not instantiate service", e);
            }
        }
    }

    // custom ServiceDescription class for Cipher objects. See supportsParameter() below
    private static class MyCipherService extends MyService {
        MyCipherService(Provider provider, String type, String algorithm,
                String className) {
            super(provider, type, algorithm, className);
        }
        // we override supportsParameter() to let the framework know which
        // keys we can support. We support instances of MySecretKey, if they
        // are stored in our provider backend, plus SecretKeys with a RAW encoding.
        public boolean supportsParameter(Object obj) {
            if (obj instanceof SecretKey == false) {
                return false;
            }
            SecretKey key = (SecretKey)obj;
            if (key.getAlgorithm().equals(getAlgorithm()) == false) {
                return false;
            }
            if (key instanceof MySecretKey) {
                MySecretKey myKey = (MySecretKey)key;
                return myKey.provider == getProvider();
            } else {
                return "RAW".equals(key.getFormat());
            }
        }
    }

    // our generic MessageDigest implementation. It implements all digest
    // algorithms in a single class. We only implement the bare minimum
    // of MessageDigestSpi methods
    private static final class MyMessageDigest extends MessageDigestSpi {
        private final ExampleProvider provider;
        private final String algorithm;
        private ByteArrayOutputStream buffer;
        MyMessageDigest(Provider provider, String algorithm) {
            super();
            this.provider = (ExampleProvider)provider;
            this.algorithm = algorithm;
            engineReset();
        }
        protected void engineReset() {
            buffer = new ByteArrayOutputStream();
        }
        protected void engineUpdate(byte b) {
            buffer.write(b);
        }
        protected void engineUpdate(byte[] b, int ofs, int len) {
            buffer.write(b, ofs, len);
        }
        protected byte[] engineDigest() {
            byte[] data = buffer.toByteArray();
            byte[] digest = provider.cryptoBackend.digest(algorithm, data);
            engineReset();
            return digest;
        }
    }

    // our generic Cipher implementation, only partially complete. It implements
    // all cipher algorithms in a single class. We implement only as many of the
    // CipherSpi methods as required to show how it could work
    private static abstract class MyCipher extends CipherSpi {
        private final ExampleProvider provider;
        private final String algorithm;
        private int opmode;
        private MySecretKey myKey;
        private ByteArrayOutputStream buffer;
        MyCipher(Provider provider, String algorithm) {
            super();
            this.provider = (ExampleProvider)provider;
            this.algorithm = algorithm;
        }
        protected void engineInit(int opmode, Key key, SecureRandom random)
                throws InvalidKeyException {
            this.opmode = opmode;
            myKey = MySecretKey.getKey(provider, algorithm, key);
            if (myKey == null) {
                throw new InvalidKeyException();
            }
            buffer = new ByteArrayOutputStream();
        }
        protected byte[] engineUpdate(byte[] b, int ofs, int len) {
            buffer.write(b, ofs, len);
            return new byte[0];
        }
        protected int engineUpdate(byte[] b, int ofs, int len, byte[] out, int outOfs) {
            buffer.write(b, ofs, len);
            return 0;
        }
        protected byte[] engineDoFinal(byte[] b, int ofs, int len) {
            buffer.write(b, ofs, len);
            byte[] in = buffer.toByteArray();
            byte[] out;
            if (opmode == Cipher.ENCRYPT_MODE) {
                out = provider.cryptoBackend.encrypt(algorithm, myKey.handle, in);
            } else {
                out = provider.cryptoBackend.decrypt(algorithm, myKey.handle, in);
            }
            buffer = new ByteArrayOutputStream();
            return out;
        }
        // code for remaining CipherSpi methods goes here
    }

    // our SecretKey implementation. All our keys are stored in our crypto
    // backend, we only have an opaque handle available. There is no
    // encoded form of these keys.
    private static final class MySecretKey implements SecretKey {

        final String algorithm;
        final Provider provider;
        final KeyHandle handle;

        MySecretKey(Provider provider, String algorithm, KeyHandle handle) {
            super();
            this.provider = provider;
            this.algorithm = algorithm;
            this.handle = handle;
        }
        public String getAlgorithm() {
            return algorithm;
        }
        public String getFormat() {
            return null; // this key has no encoded form
        }
        public byte[] getEncoded() {
            return null; // this key has no encoded form
        }
        // Convert the given key to a key of the specified provider, if possible
        static MySecretKey getKey(ExampleProvider provider, String algorithm, Key key) {
            if (key instanceof SecretKey == false) {
                return null;
            }
            // algorithm name must match
            if (!key.getAlgorithm().equals(algorithm)) {
                return null;
            }
            // if key is already an instance of MySecretKey and is stored
            // on this provider, return it right away
            if (key instanceof MySecretKey) {
                MySecretKey myKey = (MySecretKey)key;
                if (myKey.provider == provider) {
                    return myKey;
                }
            }
            // otherwise, if the input key has a RAW encoding, convert it
            if (!"RAW".equals(key.getFormat())) {
                return null;
            }
            byte[] encoded = key.getEncoded();
            KeyHandle handle = provider.cryptoBackend.createKey(algorithm, encoded);
            return new MySecretKey(provider, algorithm, handle);
        }
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="oracle-providers.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="java-authentication-and-authorization-service-jaas1.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
