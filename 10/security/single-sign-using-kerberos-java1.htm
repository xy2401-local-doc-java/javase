<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Single Sign-on Using Kerberos in Java</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="related-documentation1.htm" title="Previous" type="text/html" />
<link rel="Next" href="advanced-security-programming-java-se-authentication-secure-communication-and-single-sign1.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-D4230975-A28B-4532-B1DD-3C7219A4867F"></a> <span id="PAGE" style="display:none;">34/59</span> <!-- End Header -->
<script  >
//<![CDATA[
window.name='single-sign-using-kerberos-java1'
//]]>
</script> <script  >
    function footdisplay(footnum,footnote) {
    var msg = window.open('about:blank', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');
    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'); 
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" ><head><title>');
   
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<h1 id="JSSEC-GUID-D4230975-A28B-4532-B1DD-3C7219A4867F" class="sect1">Single Sign-on Using Kerberos in Java</h1>
<div class="sect2"><a id="GUID-E8171823-258A-45DF-A420-661EAC84CCDD"></a>
<h2 id="JSSEC-GUID-E8171823-258A-45DF-A420-661EAC84CCDD" class="sect2">Abstract</h2>
<div>
<p>A significant enhancement to the Java SE security architecture is the capability to achieve single sign-on using Kerberos Version 5. A single sign-on solution lets users authenticate themselves just once to access information on any of several systems. This is done using JAAS for authentication and authorization and Java GSS-API to establish a secure context for communication with a peer application. Our focus is on Kerberos V5 as the underlying security mechanism for single sign-on, although other security mechanisms may be added in the future.</p>
</div>
</div>
<div class="sect2"><a id="GUID-7147244C-E7D5-4D70-92C6-069EB7C651A3"></a>
<h2 id="JSSEC-GUID-7147244C-E7D5-4D70-92C6-069EB7C651A3" class="sect2">Introduction</h2>
<div>
<p>With the increasing use of distributed systems users need to access resources that are often remote. Traditionally users have had to sign-on to multiple systems, each of which may involve different user names and authentication techniques. In contrast, with single sign-on, the user needs to authenticate only once and the authenticated identity is securely carried across the network to access resources on behalf of the user.</p>
<p>In this paper we discuss how to use single sign-on based on the Kerberos V5 protocol. We use the Java Authentication and Authorization Service (JAAS) to authenticate a principal to Kerberos and obtain credentials that prove its identity. We show how Oracle's implementation of a Kerberos login module can be made to read credentials from an existing cache on platforms that contain native Kerberos support. We then use the Java Generic Security Service API (Java GSS-API) to authenticate to a remote peer using the previously obtained Kerberos credentials. We also show how to delegate Kerberos credentials for single sign-on in a multi-tier environment.</p>
</div>
</div>
<div class="sect2"><a id="GUID-6F8CAB6F-7DA8-4DED-8369-92BBB95C8A9E"></a>
<h2 id="JSSEC-GUID-6F8CAB6F-7DA8-4DED-8369-92BBB95C8A9E" class="sect2">Kerberos V5</h2>
<div>
<p>Kerberos V5 is a trusted third party network authentication protocol designed to provide strong authentication using secret key cryptography. When using Kerberos V5, the user's password is never sent across the network, not even in encrypted form, except during Kerberos V5 administration. Kerberos was developed in the mid-1980's as part of MIT's Project Athena. A full description of the Kerberos V5 protocol is beyond the scope of this paper. For more information on the Kerberos V5 protocol please refer to <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-01">[1]</a> and <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-02">[2]</a>.</p>
<p>Kerberos V5 is a mature protocol and has been widely deployed. A free reference implementation in C is available from MIT. For these reasons we have selected Kerberos V5 as the underlying technology for single sign-on in Java SE.</p>
</div>
</div>
<div class="sect2"><a id="GUID-38C14739-0A86-46EA-B0E9-44A7CD6AA9E4"></a>
<h2 id="JSSEC-GUID-38C14739-0A86-46EA-B0E9-44A7CD6AA9E4" class="sect2">Java Authentication and Authorization Service (JAAS)</h2>
<div>
<p>The Java SE security architecture used to solely determine privileges by the origin of the code and the public key certificates matching the code signers. However, in a multi-user environment it is desirable to further specify privileges based on the authenticated identity of the user running the code.</p>
<p>JAAS supplies such a capability. JAAS is a pluggable framework and programming interface specifically targeted for authentication and access control based on the authenticated identities.</p>
</div>
<div class="sect3"><a id="GUID-B4D7E22E-459E-4909-ABF7-647733847E75"></a>
<h3 id="JSSEC-GUID-B4D7E22E-459E-4909-ABF7-647733847E75" class="sect3">Pluggable and Stackable Framework</h3>
<div>
<p>JAAS authentication framework is based on Pluggable Authentication Module (PAM); see <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-03">[3]</a> and <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-04">[4]</a>. JAAS authentication is performed in a pluggable fashion allowing system administrators to add appropriate authentication modules. This permits Java applications to remain independent of underlying authentication technologies, and new or updated authentication technologies can be seamlessly configured without requiring modifications to the application itself.</p>
<p>JAAS authentication framework also supports the stacking of authentication modules. Multiple modules can be specified and they are invoked by the JAAS framework in the order they were specified. The success of the overall authentication depends on the results of the individual authentication modules.</p>
</div>
</div>
<div class="sect3"><a id="GUID-2FFC7B8E-C8FC-492B-8D57-0BC14EA4D033"></a>
<h3 id="JSSEC-GUID-2FFC7B8E-C8FC-492B-8D57-0BC14EA4D033" class="sect3">Authentication and Authorization</h3>
<div>
<p>The JAAS framework can be divided into two components: an authentication component and an authorization component.</p>
<p>The JAAS authentication component provides the ability to reliably and securely determine who is currently executing Java code, regardless of whether the code is running as an application, an applet, a bean, or a servlet.</p>
<p>The JAAS authorization component supplements the existing Java security framework by providing the means to restrict the executing Java code from performing sensitive tasks, depending on its codesource and depending on who is executing the code.</p>
</div>
</div>
<div class="sect3"><a id="GUID-AA7F81DA-583A-4275-8D2E-0C1FD2919ED2"></a>
<h3 id="JSSEC-GUID-AA7F81DA-583A-4275-8D2E-0C1FD2919ED2" class="sect3">Subject</h3>
<div>
<p>JAAS uses the term Subject to refer to any entity that is the source of a request to access resources. A Subject may be a user or a service. Since an entity may have many names or principals JAAS uses Subject as an extra layer of abstraction that handles multiple names per entity. Thus a Subject is comprised of a set of principals. There are no restrictions on principal names.</p>
<p>A Subject is only populated with authenticated principals. Authentication typically involves the user providing proof of identity, such as a password.</p>
<p>A Subject may also have security related attributes, which are referred to as credentials. The credentials can be public or private. Sensitive credentials such as private cryptographic keys are stored in the private credentials set of the Subject.</p>
<p>The <span class="apiname">Subject</span> class has methods to retrieve the principals, public credentials and private credentials associated with it.</p>
<p>Please note that different permissions may be required for operations on these classes. For example <span class="apiname">AuthPermission("modifyPrincipals")</span> may be required to modify the principal set of the Subject. Similar permissions are required to modify the public credentials, private credentials and to get the current Subject.</p>
</div>
</div>
<div class="sect3"><a id="GUID-6F5671ED-C6FC-4842-A1FA-DB08E61C369A"></a>
<h3 id="JSSEC-GUID-6F5671ED-C6FC-4842-A1FA-DB08E61C369A" class="sect3">doAs and doAsPrivileged</h3>
<div>
<p>Java SE enforces runtime access controls via <span class="apiname">java.lang.SecurityManager</span>. The <span class="apiname">SecurityManager</span> is consulted anytime sensitive operations are attempted. The <span class="apiname">SecurityManager</span> delegates this responsibility to <span class="apiname">java.security.AccessController</span>. The <span class="apiname">AccessController</span> obtains a current image of the <span class="apiname">AccessControlContext</span> and verifies that it has sufficient permission to do the operation requested.</p>
<p>JAAS provides two methods, <span class="apiname">doAs</span> and <span class="apiname">doAsPrivileged</span>, that can be used to associate an authenticated Subject with the <span class="apiname">AccessControlContext</span> dynamically.</p>
<p>The <span class="apiname">doAs</span> method associates the Subject with the current thread's access control context and subsequent access control checks are made on the basis of the code being executed and the Subject executing it.</p>
<pre dir="ltr">
public static Object doAs(final Subject subject,
                          final PrivilegedAction action)

public static Object doAs(final Subject subject,
                          final PrivilegedExceptionAction action)
    throws  PrivilegedActionException;
</pre>
<p>Both forms of the <span class="apiname">doAs</span> method first associate the specified subject with the current Thread's <span class="apiname">AccessControlContext</span>, and then execute the action. This achieves the effect of having the action run as the Subject. The first method can throw runtime exceptions but normal execution has it returning an <span class="apiname">Object</span> from the <span class="apiname">run()</span> method of its action argument. The second method behaves similarly except that it can throw a checked <span class="apiname">PrivilegedActionException</span> from its <span class="apiname">run()</span> method. An <span class="apiname">AuthPermission("doAs")</span> is required to call the <span class="apiname">doAs</span> methods.</p>
<p>The following methods also execute code as a particular Subject:</p>
<pre dir="ltr">
public static Object doAsPrivileged(final Subject subject,
                                    final PrivilegedAction action,
                                    final AccessControlContext  acc);

public static Object doAsPrivileged(final Subject subject,
                                    final PrivilegedExceptionAction action,
                                    final AccessControlContext acc)
    throws PrivilegedActionException;
</pre>
<p>The <span class="apiname">doAsPrivileged</span> method behaves exactly as <span class="apiname">doAs</span>, except that it allows the caller to specify an access control context. Thus it effectively throws away the current <span class="apiname">AccessControlContext</span> and authorization decisions will be based on the <span class="apiname">AccessControlContext</span> passed in.</p>
<p>Since the <span class="apiname">AccessControlContext</span> is set on a per thread basis, different threads within the JVM can assume different identities. The Subject associated with a specific <span class="apiname">AccessControlContext</span> can be retrieved by using the following method:</p>
<pre dir="ltr">
public static Subject getSubject(final AccessControlContext acc);
</pre></div>
</div>
<div class="sect3"><a id="GUID-DBF4F859-01ED-4E47-B842-EE128B146E8D"></a>
<h3 id="JSSEC-GUID-DBF4F859-01ED-4E47-B842-EE128B146E8D" class="sect3">LoginContext</h3>
<div>
<p>The <span class="apiname">LoginContext</span> class provides the basic methods used to authenticate Subjects. It also allows an application to be independent of the underlying authentication technologies. The <span class="apiname">LoginContext</span> consults a configuration that determines the authentication services or <span class="apiname">LoginModules</span> configured for a particular application. If the application does not have a specific entry, it defaults to the entry identified as "other".</p>
<p>To support the stackable nature of <span class="apiname">LoginModules</span>, <span class="apiname">LoginContext</span> performs authentication in two phases. In the first phase or login phase, it invokes each configured LoginModule to attempt the authentication. If all the necessary <span class="apiname">LoginModules</span> succeed, then <span class="apiname">LoginContext</span> enters the second phase where it invokes each LoginModule again to formally commit the authentication process. During this phase the Subject is populated with the authenticated principals and their credentials. If either of the phase fails, then the <span class="apiname">LoginContext</span> invokes each configured module to abort the entire authentication attempt. Each <span class="apiname">LoginModule</span> then cleans up any relevant state associated with the authentication attempt.</p>
<p><span class="apiname">LoginContext</span> has four constructors that can be used to instantiate it. All of them require the configuration entry name to be passed. In addition the Subject and/or a <span class="apiname">CallbackHandler</span> can also be passed to the constructors.</p>
</div>
</div>
<div class="sect3"><a id="GUID-20572EC0-B790-4C69-B168-6129F9B42C26"></a>
<h3 id="JSSEC-GUID-20572EC0-B790-4C69-B168-6129F9B42C26" class="sect3">Callbacks</h3>
<div>
<p>The login modules invoked by JAAS must be able to garner information from the caller for authentication. For example the Kerberos login module may require users to enter their Kerberos password for authentication.</p>
<p>The <span class="apiname">LoginContext</span> allows the application to specify a callback handler that the underlying login modules use to interact with users. There are two callback handlers - one based on the command line and another based on a GUI.</p>
</div>
</div>
<div class="sect3"><a id="GUID-8AFBA819-AE63-4879-B83F-0E64FB880939"></a>
<h3 id="JSSEC-GUID-8AFBA819-AE63-4879-B83F-0E64FB880939" class="sect3">LoginModules</h3>
<div>
<p>Oracle provides an implementation of the <span class="apiname">UnixLoginModule</span>, <span class="apiname">NTLoginModule</span>, <span class="apiname">JNDILoginModule</span>, <span class="apiname">KeyStoreLoginModule</span> and <span class="apiname">Krb5LoginModule</span>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E"></a>
<h3 id="JSSEC-GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E" class="sect3">The Kerberos Login Module</h3>
<div>
<p>The class <span class="apiname">com.sun.security.auth.module.Krb5LoginModule</span> is Oracle's implementation of a login module for the Kerberos version 5 protocol. Upon successful authentication the Ticket Granting Ticket (TGT) is stored in the Subject's private credentials set and the Kerberos principal is stored in the Subject's principal set.</p>
<p>Based on certain configurable options, <span class="apiname">Krb5LoginModule</span> can also use an existing credentials cache, such as a native cache in the operating system, to acquire the TGT and/or use a <code>keytab</code> file containing the secret key to implicitly authenticate a principal. Both Solaris and Windows contain a credentials cache that <span class="apiname">Krb5LoginModule</span> can use for fetching the TGT. Solaris also contains a system-wide <code>keytab</code> file that <span class="apiname">Krb5LoginModule</span> can use for fetching the secret key. On all platforms, <span class="apiname">Krb5LoginModule</span> supports options to set the file path to a ticket cache or <code>keytab</code> file of choice. This is useful when third-party Kerberos support is installed and Java integration is desired. Please consult the documentation for <span class="apiname">Krb5LoginModule</span> to learn about these options. In the absence of a native cache or <code>keytab</code>, the user will be prompted for the password and the TGT obtained from the key distribution center (KDC).</p>
<p>The following is a sample JAAS login configuration entry for a client application. In this example, <span class="apiname">Krb5LoginModule</span> will use the native ticket cache to get the TGT available in it. The authenticated identity will be the identity of the Kerberos principal that the TGT belongs to.</p>
<pre id="GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLECLIENTCOM.SUN.SECURITY.AUTH.M-37F332E5" dir="ltr">
// Sample client configuration entry

SampleClient {
    com.sun.security.auth.module.Krb5LoginModule required <span class="bold">useTicketCache=true</span>
};
</pre>
<p>The following is a sample login configuration entry for a server application. With this configuration, the secret key from the keytab is used to authenticate the principal <code class="codeph">nfs/bar.example.com</code> and both the TGT obtained from the Kerberos KDC and the secret key are stored in the Subject's private credentials set. The stored key may be used later to validate a service ticket sent by a client (See the section on Java GSS-API.)</p>
<pre id="GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLESERVERCONFIGURATIONENTRYSAMPL-37F37F85" dir="ltr">
// Sample server configuration entry

SampleServer {
     com.sun.security.auth.module.Krb5LoginModule
         required <span class="bold">useKeyTab=true storeKey=true principal="nfs/bar.example.com"</span>
};
</pre>
<p>In the following client code example, the configuration entry <code class="codeph">SampleClient</code> will be used by the <span class="apiname">LoginContext</span>. The <span class="apiname">TextCallbackHandler</span> class will be used to prompt the user for the Kerberos password. Once the user has logged in, the Subject will be populated with the Kerberos Principal name and the TGT. Thereafter the user can execute code using <span class="apiname">Subject.doAs</span> passing in the Subject obtained from the <span class="apiname">LoginContext</span>.</p>
<pre id="GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLECLIENTCODELOGINCONTEXTLCNULLT-37F389A2" dir="ltr">
// Sample client code

LoginContext lc = null;

try {
        lc = new LoginContext(<span class="bold">"SampleClient"</span>, new TextCallbackHandler());
        // attempt authentication
        lc.login();
} catch (LoginException le) {
    ...
}

// Now try to execute ClientAction as the authenticated Subject

Subject mySubject = lc.getSubject();
PrivilegedAction action = new <span class="bold">ClientAction</span>();
Subject.doAs(mySubject, action);
</pre>
<p><span class="apiname">ClientAction</span> could be an action that is allowed only for authenticated Kerberos client Principals with a specific value.</p>
<p>The following shows server side sample code. It is similar to the <a href="single-sign-using-kerberos-java1.htm#GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLECLIENTCODELOGINCONTEXTLCNULLT-37F389A2">sample client code</a> except for the application entry name and the <span class="apiname">PrivilegedAction</span>.</p>
<pre id="GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLESERVERCODELOGINCONTEXTLCNULLT-37F4D999" dir="ltr">
// Sample server code

LoginContext lc = null;

try {
        lc = new LoginContext(<span class="bold">"SampleServer"</span>, new TextCallbackHandler());
        // attempt authentication
        lc.login();
} catch (LoginException le) {
   ...
}

// Now try to execute ServerAction as the authenticated Subject

Subject mySubject = lc.getSubject();
PrivilegedAction action = new <span class="bold">ServerAction</span>();
Subject.doAs(mySubject, action);
</pre></div>
</div>
<div class="sect3"><a id="GUID-A82CE65B-0730-42EC-973B-51D1CDA7D382"></a>
<h3 id="JSSEC-GUID-A82CE65B-0730-42EC-973B-51D1CDA7D382" class="sect3">Kerberos Classes</h3>
<div>
<p>To enable other vendors to provide their own Kerberos login module implementation that can be used with Java GSS-API, three standard Kerberos classes have been introduced in the <span class="apiname">javax.security.auth.kerberos</span> package. These are <span class="apiname">KerberosPrincipal</span> for Kerberos principals, <span class="apiname">KerberosKey</span> for the long-term Kerberos secret key and <span class="apiname">KerberosTicket</span> for Kerberos tickets. All implementations of the Kerberos login module must use these classes to store principals, keys and tickets in the Subject.</p>
</div>
</div>
<div class="sect3"><a id="GUID-BB48DD97-7BC5-487D-AE9C-E469917DFE73"></a>
<h3 id="JSSEC-GUID-BB48DD97-7BC5-487D-AE9C-E469917DFE73" class="sect3">Authorization</h3>
<div>
<p>Upon successful authentication of a Subject, access controls can be enforced based upon the principals associated with the authenticated Subject. The JAAS principal based access controls augment the <span class="apiname">CodeSource</span> access controls of Java SE. Permissions granted to a Subject are configured in <span class="apiname">Policy</span>, which is an abstract class for representing the system wide access control policy. Oracle provides a file based implementation of the <span class="apiname">Policy</span> class. The <span class="apiname">Policy</span> class is provider based so that others can provide their own policy implementation.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-3336BC5D-90CA-4646-B96A-FE79EA2D1AD6"></a>
<h2 id="JSSEC-GUID-3336BC5D-90CA-4646-B96A-FE79EA2D1AD6" class="sect2">Java Generic Security Service Application Program Interface (Java GSS-API)</h2>
<div class="sect3"><a id="GUID-A92F4222-4C58-49AA-AF94-E7BB12D3C3C5"></a>
<h3 id="JSSEC-GUID-A92F4222-4C58-49AA-AF94-E7BB12D3C3C5" class="sect3">Generic Security Service API (GSS-API)</h3>
<div>
<p>Enterprise applications often have varying security requirements and deploy a range of underlying technologies to achieve this. In such a scenario how do we develop a client-server application so that it can easily migrate from one technology to another? The GSS-API was designed in the Common Authentication Technology working group of the IETF to solve this problem by providing a uniform application programming interface for peer to peer authentication and secure communication that insulates the caller from the details of the underlying technology.</p>
<p>The API, described in a language independent form in RFC 2743 <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-06">[6]</a>, accommodates the following security services: authentication, message confidentiality and integrity, sequencing of protected messages, replay detection, and credential delegation. The underlying security technology or "security mechanism" being used, has a choice of supporting one or more of these features beyond the essential one way authentication.<a id="fn_1" href="#fn_1" onclick='footdisplay(1," The GSS-API Kerberos mechanism performs client authentication at the minimum.")'><sup>Foot&nbsp;1</sup></a></p>
<p>There are mainly two standard security mechanisms that the IETF has defined: Kerberos V5 <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-06">[6]</a> and the Simple Public Key Mechanism (SPKM) <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-08">[8]</a>.</p>
<p>The API is designed such that an implementation may support multiple mechanisms simultaneously, giving the application the ability to choose one at runtime. However, a client application and a server application that communicate with each other must use the same security mechanism. <a href="single-sign-using-kerberos-java1.htm#GUID-A92F4222-4C58-49AA-AF94-E7BB12D3C3C5__AMULTI-MECHANISMGSS-APIIMPLEMENTATI-37F451B6">Figure 7-1</a> illustrates this. It shows a client-server application that uses the GSS-API for secure communication. The GSS framework enables this application to support multiple security mechanisms (in this example, Kerberos V5 and SPKM). Once the GSS-API negotiates a security mechanism for the client or server application (in this example, Kerberos V5) the other must use the same.</p>
<div class="figure" id="GUID-A92F4222-4C58-49AA-AF94-E7BB12D3C3C5__AMULTI-MECHANISMGSS-APIIMPLEMENTATI-37F451B6">
<p class="titleinfigure">Figure 7-1 A Multi-Mechanism GSS-API Implementation</p>
<img width="299" height="219" src="img/jgss_pb_001b.png" alt="The surrounding text describes this figure." title="The surrounding text describes this figure." /></div>
<!-- class="figure" -->
<p>Mechanisms are identified by means of unique object identifier's (OID's) that are registered with the IANA. For instance, the Kerberos V5 mechanism is identified by the OID <code class="codeph">{iso(1) member-body(2) United States(840) mit(113554) infosys(1) gssapi(2) krb5(2)}</code></p>
<p>Another important feature of the API is that it is token based. i.e., Calls to the API generate opaque octets that the application must transport to its peer. This enables the API to be transport independent.</p>
</div>
</div>
<div class="sect3"><a id="GUID-D73F1DE2-D003-429F-B918-2CDC6897E9C7"></a>
<h3 id="JSSEC-GUID-D73F1DE2-D003-429F-B918-2CDC6897E9C7" class="sect3">Java GSS-API</h3>
<div>
<p>The Java API for the Generic Security Service was also defined at the IETF and is documented in RFC 2853 <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-10">[10]</a>. Oracle is pursuing the standardization of this API under the Java Community Process (JCP) <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-11">[11]</a> and plans to deliver a reference implementation with Merlin. Because the JCP is merely endorsing this externally defined API, the IETF assigned package namespace <code class="codeph">org.ietf.jgss</code> will be retained in Merlin.</p>
<p>Oracle's implementation of Java GSS-API, will initially ship with support for the Kerberos V5 mechanism only. Kerberos V5 mechanism support is mandatory for all Java GSS-API implementations in Java SE, although they are free to support additional mechanisms. In a future release, a Service Provider Interface (SPI) will be added so that new mechanisms can be configured statically or even at runtime. Even now the reference implementation in Merlin will be modular and support a private provider SPI that will be converted to public when standardized.</p>
<p>The Java GSS-API framework itself is quite thin, and all security related functionality is delegated to components obtained from the underlying mechanisms. The <span class="apiname">GSSManager</span> class is aware of all mechanism providers installed and is responsible for invoking them to obtain these components.</p>
<p>The implementation of the default <span class="apiname">GSSManager</span> that will ship with Java SE is obtained as follows:</p>
<pre dir="ltr">
GSSManager manager = GSSManager.getInstance();
</pre>
<p>The <span class="apiname">GSSManager</span> can be used to configure new providers and to list all mechanisms already present. The <span class="apiname">GSSManager</span> also serves as a factory class for three important interfaces: <span class="apiname">GSSName</span>, <span class="apiname">GSSCredential</span>, and <span class="apiname">GSSContext</span>. These interfaces are described below with the methods to instantiate their implementations. For a complete API specification, readers are referred to <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-09">[9]</a> and <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-11">[11]</a>.</p>
<p>Most calls to Java GSS-API throw a <span class="apiname">GSSException</span> that encapsulate problems that occur both within the GSS-API framework, and within the mechanism providers.</p>
</div>
</div>
<div class="sect3"><a id="GUID-AB5BB523-052A-4ACA-B0D5-BF5A3C220093"></a>
<h3 id="JSSEC-GUID-AB5BB523-052A-4ACA-B0D5-BF5A3C220093" class="sect3">The GSSName Interface</h3>
<div>
<p>This interface represents an entity for the purposes of Java GSS-API. An implementation of this interface is instantiated as follows:</p>
<pre dir="ltr">
GSSName GSSManager.createName(String name, Oid nameType)
    throws GSSException
</pre>
<p>For example:</p>
<pre dir="ltr">
GSSName clientName = manager.createName("duke", GSSName.NT_USER_NAME);
</pre>
<p>This call returns a <span class="apiname">GSSName</span> that represents the user principal <code class="codeph">duke</code> at a mechanism independent level. Internally, it is assumed that each supported mechanism will map the generic representation of the user to a more mechanism specific form. For instance a Kerberos V5 mechanism provider might map this name to <code class="codeph">duke@EXAMPLE.COM</code> where <code class="codeph">EXAMPLE.COM</code> is the local Kerberos realm. Similarly, a public key based mechanism provider might map this name to an X.509 Distinguished Name.</p>
<p>If we were referring to a principal that was not a user, but some sort of service, we would indicate that to the Java GSS-API call so that the mechanism knows to interpret it differently.</p>
<p>Example:</p>
<pre dir="ltr">
GSSName serverName = manager.createName("nfs@bar.example.com",
                                         GSSName.NT_HOSTBASED_SERVICE);
</pre>
<p>The Kerberos V5 mechanism would map this name to the Kerberos specific form <code class="codeph">nfs/bar.example.com@EXAMPLE.COM</code> where <code class="codeph">EXAMPLE.COM</code> is the realm of the principal. This principal represents the service <code class="codeph">nfs</code> running on the host machine <code class="codeph">bar.example.com</code>.</p>
<p>Oracle's implementation of the <code class="codeph">GSSName</code> interface is a container class. The container class lazily asks the individual providers to perform their mapping when their mechanism is used and then stores each mapped element in a set of principals. In this respect an implementation of <code class="codeph">GSSName</code> is similar to the principal set stored in a Subject. It may even contain the same elements that are in a Subject's principal set, but its use is restricted to the context of Java GSS-API.</p>
<p>The name element stored by the Oracle Kerberos V5 provider is an instance of a subclass of <code class="codeph">javax.security.auth.kerberos.KerberosPrincipal</code>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-01637F56-125B-469E-8C4A-D642417DE870"></a>
<h3 id="JSSEC-GUID-01637F56-125B-469E-8C4A-D642417DE870" class="sect3">The GSSCredential Interface</h3>
<div>
<p>This interface encapsulates the credentials owned by one entity. Like the <span class="apiname">GSSName</span>, this interface too is a multi-mechanism container.</p>
<p>Its implementation is instantiated as follows:</p>
<pre dir="ltr">
GSSCredential createCredential(GSSName name,
                               int lifetime,
                               Oid[] desiredMechs,
                               int usage)
    throws GSSException
</pre>
<p>Here is an example of this call on the client side:</p>
<pre dir="ltr">
GSSCredential clientCreds =
    manager.createCredential(clientName,
                             8*3600,
                             desiredMechs,
                             GSSCredential.INITIATE_ONLY);
</pre>
<p>The <span class="apiname">GSSManager</span> invokes the providers of the mechanisms listed in the <span class="apiname">desiredMechs</span> for credentials that belong to the <span class="apiname">GSSName</span> <span class="apiname">clientName</span>. Additionally, it imposes the restriction that the credential must be the kind that can initiate outbound requests (i.e., a client credential), and requests a lifetime of 8 hours for it. The returned object contains elements from a subset of <span class="apiname">desiredMechs</span> that had some credential available to satisfy this criteria. The element stored by the Kerberos V5 mechanism is an instance of a subclass of <span class="apiname">javax.security.auth.kerberos.KerberosTicket</span> containing a TGT that belongs to the user.</p>
<p>Credential acquisition on the server side occurs as follows:</p>
<pre dir="ltr">
GSSCredential serverCreds =
    manager.createCredential(serverName,
                             GSSCredential.INDEFINITE_LIFETIME,
                             desiredMechs,
                             GSSCredential.ACCEPT_ONLY);
</pre>
<p>The behavior is similar to the client case, except that the kind of credential requested is one that can accept incoming requests (i.e., a server credential). Moreover, servers are typically long lived and like to request a longer lifetime for the credentials such as the <span class="apiname">INDEFINITE_LIFETIME</span> shown here. The Kerberos V5 mechanism element stored is an instance of a subclass of <span class="apiname">javax.security.auth.kerberos.KerberosKey</span> containing the secret key of the server.</p>
<p>This step can be an expensive one, and applications generally acquire a reference at initialization time to all the credentials they expect to use during their lifetime.</p>
</div>
</div>
<div class="sect3"><a id="GUID-D552C782-1820-444B-85EA-A4AED3DE3757"></a>
<h3 id="JSSEC-GUID-D552C782-1820-444B-85EA-A4AED3DE3757" class="sect3">The GSSContext Interface</h3>
<div>
<p>The <span class="apiname">GSSContext</span> is an interface whose implementation provides security services to the two peers.</p>
<p>On the client side a <span class="apiname">GSSContext</span> implementation is obtained with the following API call:</p>
<pre dir="ltr">
GSSContext GSSManager.createContext(GSSName peer,
                                    Oid mech,
                                    GSSCredential clientCreds,
                                    int lifetime)
    throws GSSException
</pre>
<p>This returns an initialized security context that is aware of the peer that it must communicate with and the mechanism that it must use to do so. The client's credentials are necessary to authenticate to the peer.</p>
<p>On the server side the <span class="apiname">GSSContext</span> is obtained as follows:</p>
<pre dir="ltr">
GSSContext GSSManager.createContext(GSSCredential serverCreds)
    throws GSSException
</pre>
<p>This returns an initialized security context on the acceptor's side. At this point it does not know the name of the peer (client) that will send a context establishment request or even the underlying mechanism that will be used. However, if the incoming request is not for service principal represented by the credentials <span class="apiname">serverCreds</span>, or the underlying mechanism requested by the client side does not have a credential element in <span class="apiname">serverCreds</span>, then the request will fail.</p>
<p>Before the <span class="apiname">GSSContext</span> can be used for its security services it has to be established with an exchange of tokens between the two peers. Each call to the context establishment methods will generate an opaque token that the application must somehow send to its peer using a communication channel of its choice.</p>
<p>The client uses the following API call to establish the context:</p>
<pre dir="ltr">
byte[] GSSContext.initSecContext(byte[] inToken,
                                 int offset,
                                 int len)

   throws GSSException
</pre>
<p>The server uses the following call:</p>
<pre dir="ltr">
byte[] acceptSecContext(byte[] inToken,
                        int offset,
                        int len)

   throws GSSException
</pre>
<p>These two methods are complementary and the input accepted by one is the output generated by the other. The first token is generated when the client calls <span class="apiname">initSecContext</span> for the first time. The arguments to this method are ignored during that call. The last token generated depends on the particulars of the security mechanism being used and the properties of the context being established.</p>
<p>The number of round trips of GSS-API tokens required to authenticate the peers varies from mechanism to mechanism and also varies with characteristics such as whether mutual authentication or one-way authentication is desired. Thus each side of the application must continue to call the context establishment methods in a loop until the process is complete.</p>
<p>In the case of the Kerberos V5 mechanism, there is no more than one round trip of tokens during context establishment. The client first sends a token generated by its <span class="apiname">initSecContext()</span> containing the Kerberos AP-REQ message <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-02">[2]</a>. In order to generate the AP-REQ message, the Kerberos provider obtains a service ticket for the target server using the client's TGT. The service ticket is encrypted with the server's long-term secret key and is encapsulated as part of the AP-REQ message. After the server receives this token, it is passed to the <span class="apiname">acceptSecContext()</span> method which decrypts the service ticket and authenticates the client. If mutual authentication was not requested, both the client and server side contexts would be established, and the server side <span class="apiname">acceptSecContext()</span> would generate no output.</p>
<p>However, if mutual authentication were enabled, then the server's <span class="apiname">acceptSecContext()</span> would generate an output token containing the Kerberos AP-REP <a href="single-sign-using-kerberos-java1.htm#GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-02">[2]</a> message. This token would need to be sent back to the client for processing by its <span class="apiname">initSecContext()</span>, before the client side context is established.</p>
<p>Note that when a <span class="apiname">GSSContext</span> is initialized on the client side, it is clear what underlying mechanism needs to be used. The Java GSS-API framework can obtain a context implementation from the appropriate mechanism provider. Thereafter, all calls made to the <span class="apiname">GSSContext</span> object are delegated to the mechanism's context implementation. On the server side, the mechanism to use is not decided until the first token from the client side arrives.</p>
<p>Here is a class showing how the client side of an application would be coded. This is the <code class="codeph">ClientAction</code> class that was executed using the <span class="apiname">doAs</span> method in the <a href="single-sign-using-kerberos-java1.htm#GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLECLIENTCODELOGINCONTEXTLCNULLT-37F389A2">sample client code</a> in the section <a href="single-sign-using-kerberos-java1.htm#GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E">The Kerberos Login Module</a>:</p>
<pre dir="ltr">
// Sample client using Java GSS-API

class ClientAction implements PrivilegedAction {

    public Object run() {
        ...
        ...
        try {
            GSSManager manager = GSSManager.getInstance();
            GSSName clientName =
                manager.createName("duke", GSSName.NT_USER_NAME);
            GSSCredential clientCreds =
                manager.createCredential(clientName,
                                          8*3600,
                                          desiredMechs,
                                          GSSCredential.INITIATE_ONLY);
            GSSName peerName =
                manager.createName("nfs@bar.example.com",
                                    GSSName.NT_HOSTBASED_SERVICE);
            GSSContext secContext =
                manager.createContext(peerName,
                                      krb5Oid,
                                      clientCreds,
                                      GSSContext.DEFAULT_LIFETIME);
            secContext.requestMutualAuth(true);

            // The first input token is ignored
            byte[] inToken = new byte[0];

            byte[] outToken = null;

            boolean established = false;

           // Loop while the context is still not established
           while (!established) {
               outToken =
                   secContext.initSecContext(inToken, 0, inToken.length);

               // Send a token to the peer if one was generated
               if (outToken != null)
                  sendToken(outToken);

               if (!secContext.isEstablished()) {
                  inToken = readToken();
               else
                  established = true;
            }
        } catch (GSSException e) {
             ....
        }
        ...
        ...
    }
}
</pre>
<p>The corresponding section of code on the server side running the <code class="codeph">ServerAction</code> class from the <a href="single-sign-using-kerberos-java1.htm#GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLESERVERCODELOGINCONTEXTLCNULLT-37F4D999">sample server code</a> in the section <a href="single-sign-using-kerberos-java1.htm#GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E">The Kerberos Login Module</a>:</p>
<pre dir="ltr">
// Sample server using Java GSS-API

class ServerAction implelemts PrivilegedAction {

    public Object run() {
        ...
        ...
        try {
            GSSManager manager = GSSManager.getInstance();
            GSSName serverName =
                manager.createName("nfs@bar.example.com",
                                    GSSName.NT_HOSTBASED_SERVICE);
            GSSCredential serverCreds =
             manager.createCredential(serverName,
                                       GSSCredential.INDEFINITE_LIFETIME,
                                       desiredMechs,
                                       GSSCredential.ACCEPT_ONLY);
            GSSContext secContext = manager.createContext(serverCreds);

            byte[] inToken = null;
            byte[] outToken = null;

            // Loop while the context is still not established
            while (!secContext.isEstablished()) {
                 inToken = readToken();
                 outToken =
                     secContext.acceptSecContext(inToken, 0, inToken.length);

                  // Send a token to the peer if one was generated
                  if (outToken != null)
                      sendToken(outToken);
            }
        } catch (GSSException e) {
          ...
        }
        ...
        ...
   }
}
</pre></div>
</div>
<div class="sect3"><a id="GUID-627867F1-0787-4D20-A971-01F2B5EA3FF3"></a>
<h3 id="JSSEC-GUID-627867F1-0787-4D20-A971-01F2B5EA3FF3" class="sect3">Message Protection</h3>
<div>
<p>Once the security context is established, it can be used for message protection. Java GSS-API provides both message integrity and message confidentiality. The two calls that enable this are as follows:</p>
<pre dir="ltr">
byte[] GSSContext.wrap(byte[] clearText,
                       int offset,
                       int len,
                       MessageProp properties)
    throws GSSException
</pre>
<p>and</p>
<pre dir="ltr">
byte[] unwrap(byte[] inToken,
              int offset,
              int len,
              MessageProp properties)
    throws GSSException
</pre>
<p>The <span class="apiname">wrap</span> method is used to encapsulate a cleartext message in a token such that it is integrity protected. Optionally, the message can also be encrypted by requesting this through a <span class="apiname">MessageProp</span> object. The <span class="apiname">wrap</span> method returns an opaque token that the caller sends to its peer. The original cleartext is returned by the peer's <span class="apiname">unwrap</span> method when the token is passed to it. The <span class="apiname">MessageProp</span> object on the <span class="apiname">unwrap</span> side returns information about whether the message was simply integrity protected or whether it was encrypted as well. It also contains sequencing and duplicate token warnings.</p>
</div>
</div>
<div class="sect3"><a id="GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B"></a>
<h3 id="JSSEC-GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B" class="sect3">Credential Delegation</h3>
<div>
<p>Java GSS-API allows the client to securely delegate its credentials to the server, such that the server can initiate other security contexts on behalf of the client. This feature is useful for single sign-on in a multi-tier environment. <a href="single-sign-using-kerberos-java1.htm#GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B__GUID-BDE6C438-A115-4935-BF04-A06CAC888B99">Figure 7-2</a> illustrates this.</p>
<div class="figure" id="GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B__GUID-BDE6C438-A115-4935-BF04-A06CAC888B99">
<p class="titleinfigure">Figure 7-2 Traditional Credential Delegation</p>
<img width="396" height="155" src="img/jgss_pb_002c.png" alt="Description of Figure 7-2 follows" title="Description of Figure 7-2 follows" /><br />
<a href="img_text/jgss_pb_002c.htm">Description of "Figure 7-2 Traditional Credential Delegation"</a></div>
<!-- class="figure" -->
<p>The client requests credential delegation prior to making the first call to <span class="apiname">initSecContext()</span>:</p>
<pre dir="ltr">
void GSSContext.requestCredDeleg(boolean state)
    throws GSSException
</pre>
<p>by setting state to true.</p>
<p>The server receives the delegated credential after context establishment:</p>
<pre dir="ltr">
GSSCredential GSSContext.getDelegCred() throws GSSException
</pre>
<p>The server can then pass this <span class="apiname">GSSCredential</span> to <span class="apiname">GSSManager.createContext()</span> pretending to be the client.</p>
<p>In the case of the Kerberos V5 mechanism, the delegated credential is a forwarded TGT that is encapsulated as part of the first token sent from the client to the server. Using this TGT, the server can obtain a service ticket on behalf of the client for any other service.</p>
<div class="section">
<p class="subhead3">MS-SFU Kerberos Extensions</p>
<p><a href="http://msdn.microsoft.com/en-us/library/cc246071.aspx" target="_blank">MS-SFU</a> refers to Microsoft Kerberos 5 extensions that allow a service to obtain a Kerberos service ticket on behalf of a client. Microsoft calls this feature constrained delegation. This is useful when the authentication between the client and this service is not established through Kerberos (thus the standard Kerberos delegation cannot be used) but the service needs to access a Kerberos-secured back-end server in the name of the client.</p>
<p>MS-SFU adds two extensions to that protocol: Service for User to Self (S4U2self), which allows a front-end service to obtain a Kerberos service ticket to itself on behalf of a user, and Service for User to Proxy (S4U2proxy), which enables it to obtain a service ticket on behalf of the user to a second, back-end service. Together, these two extensions enable the front-end service to obtain a Kerberos service ticket on behalf of a user. The resulting service ticket can be used to access other services on the local or remote machines. The public method <a href="https://docs.oracle.com/javase/10/docs/api/com/sun/security/jgss/ExtendedGSSCredential.html#impersonate-org.ietf.jgss.GSSName-" target="_blank"><span class="apiname">ExtendedGSSCredential::impersonate</span></a> in the <span class="apiname">com.sun.security.jgss</span> package implements these extensions.</p>
<p>This feature is very useful in secure enterprise deployments. For example, in a typical network service, the front end (such as a web server) often needs to access the back end (such as a database server) on behalf of a client. Normal Kerberos 5 supports delegation, but demands that all layers in this chain explicitly use Kerberos authentication at each step, which is not always possible or desirable.</p>
<p>For example, if a client logs in to a web server using digest authentication, then there are no Kerberos credentials to be delegated, and normal step-by-step Kerberos 5 authentication cannot occur. However, because MS-SFU defines the Service for User (S4U2self) extension so that the front end can access the back end on behalf of the client without presenting the client's Kerberos credentials, MS-SFU could provide authentication in this situation. <a href="single-sign-using-kerberos-java1.htm#GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B__CONSTRAINEDDELEGATIONWITHS4U2SELF-47300961">Figure 7-3</a> illustrates this.</p>
<div class="figure" id="GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B__CONSTRAINEDDELEGATIONWITHS4U2SELF-47300961">
<p class="titleinfigure">Figure 7-3 Constrained Delegation with S4U2self</p>
<img width="389" height="155" src="img/jgss_pb_004c.png" alt="Description of Figure 7-3 follows" title="Description of Figure 7-3 follows" /><br />
<a href="img_text/jgss_pb_004c.htm">Description of "Figure 7-3 Constrained Delegation with S4U2self"</a></div>
<!-- class="figure" -->
<p>In addition, there are potential security gaps in the standard Kerberos 5 delegation mechanism (which Microsoft calls open delegation). In this mechanism, once the service account has the client's delegated credentials, it has access to any service. Thus, great care is needed with open delegation.</p>
<p>In contrast, with MS-SFU delegation (implemented in S4U2proxy), the administrator can precisely control the services to which a particular service can access on behalf a client.<a href="single-sign-using-kerberos-java1.htm#GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B__CONSTRAINEDDELEGATIONWITHS4U2PROXY-47300C1F">Figure 7-4</a> illustrates this.</p>
<div class="figure" id="GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B__CONSTRAINEDDELEGATIONWITHS4U2PROXY-47300C1F">
<p class="titleinfigure">Figure 7-4 Constrained Delegation with S4U2proxy</p>
<img width="420" height="155" src="img/jgss_pb_003c.png" alt="Description of Figure 7-4 follows" title="Description of Figure 7-4 follows" /><br />
<a href="img_text/jgss_pb_003c.htm">Description of "Figure 7-4 Constrained Delegation with S4U2proxy"</a></div>
<!-- class="figure" -->
<div class="infobox-note" id="GUID-363496FF-1E54-4A63-8B3B-89D7D23C2C4B__GUID-E3BFE2DB-1022-4C40-A5E6-9A7CA8223CD0">
<p class="notep1">Note:</p>
<p>To delegate credentials as specified in the RFCs in this document, you must use traditional delegation. With constrained delegation, the client is unable to determine if its own credentials can be delegated because this is determined by the KDC.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-B54B88B4-087F-4B0D-A28B-C0980D762D5C"></a>
<h2 id="JSSEC-GUID-B54B88B4-087F-4B0D-A28B-C0980D762D5C" class="sect2">Default Credential Acquisition Model</h2>
<div>
<p>Previously we discussed how an application uses the <span class="apiname">GSSManager.createCredential()</span> method to populate a <span class="apiname">GSSCredential</span> object with mechanism specific credentials. The next two sub-sections will focus on how Java GSS-API mechanisms obtain these credentials. The mechanisms do not themselves perform a user login. Instead, the login is performed prior to using Java GSS-API and the credentials are assumed to be stored in some cache that the mechanism provider is aware of. The <span class="apiname">GSSManager.createCredential()</span> method merely obtains references to those credentials and returns them in a GSS-centric container, the <span class="apiname">GSSCredential</span>.</p>
<p>In Java SE, we impose the restriction that the credentials cache that Java GSS-API mechanism providers use to obtain these elements must exclusively be the public and private credential sets in the Subject that is on the current access control context.</p>
<p>This model has the advantage that credential management is simple and predictable from the application's point of view. An application, given the right permissions, can purge the credentials in the Subject or renew them using standard Java API's. If it purged the credentials, it would be sure that the Java GSS-API mechanism would fail, or if it renewed a time based credential it would be sure that the mechanism would succeed.</p>
<p>Here is the sequence of events relevant to credential acquisition when the Kerberos V5 mechanism is used by the client application in Figures 3 and 6:</p>
<ol>
<li>The application invokes a JAAS login, which in turn invokes the configured <span class="apiname">Krb5LoginModule</span></li>
<li><span class="apiname">Krb5LoginModule</span> obtains a TGT (<span class="apiname">KerberosTicket</span>) for the user either from the KDC or from an existing ticket cache, and stores this TGT in the private credentials set of a Subject</li>
<li>The application retrieves the populated Subject, then calls <span class="apiname">Subject.doAs</span>/<span class="apiname">doAsPrivileged</span> which places this Subject on the access control context of the thread executing <span class="apiname">ClientAction</span></li>
<li><span class="apiname">ClientAction</span> calls the <span class="apiname">GSSManager.createCredential</span> method, passing it the Kerberos V5 OID in <span class="apiname">desiredMechs</span>.</li>
<li>GSSManager.createCredential invokes the Kerberos V5 GSS-API provider, asking for a Kerberos credential for initiating security contexts.</li>
<li>The Kerberos provider obtains the Subject from the current access control context, and searches through its private credential set for a valid KerberosTicket that represents the TGT for the user.</li>
<li>The KerberosTicket is returned to the GSSManager which stores it in a GSSCredential container instance to be returned to the caller.</li>
</ol>
<p>On the server side, when the Kerberos login is successful in step 2, Krb5LoginModule stores the KerberosKey for the server in the Subject in addition to the KerberosTicket. Later on the KerberosKey is retrieved in steps 5 through 7 and used to decrypt the service ticket that the client sends.</p>
</div>
</div>
<div class="sect2"><a id="GUID-7F63948A-0FF3-4818-89E8-B39A1CF4DBB3"></a>
<h2 id="JSSEC-GUID-7F63948A-0FF3-4818-89E8-B39A1CF4DBB3" class="sect2">Exceptions to the Model</h2>
<div>
<p>The default credential acquisition model for Java GSS-API requires credentials to be present in the current Subject. Typically, the credentials are placed there after a JAAS login by the application.</p>
<p>There might be cases where an application wishes to use Kerberos credentials from outside the Subject. It is recommended that such credentials be read as part of the initial JAAS login, either by configuring <span class="apiname">Krb5LoginModule</span> to read them, or by writing a custom login module that reads them. However, some applications might have constrains that either prevent them from using JAAS prior to calling Java GSS-API, or force them to use some Kerberos mechanism provider that does not retrieve credentials from the current Subject.</p>
<p>The system property <code class="codeph">javax.security.auth.useSubjectCredsOnly</code> accommodates such cases while still retaining the standard model for others. This system property serves as a boolean where a value of true requires that the standard credential acquisition model be followed, and a value of false permits the provider to use any cache of it choice. The default value of this property (when it is not set) will be assumed to be true.</p>
<p>If there is no valid Kerberos credential in the current Subject, and this property is true, then the Kerberos mechanism throws a <span class="apiname">GSSException</span>. Setting this property to false does not necessarily mean that the provider has to use a cache other than the current Subject, it only gives the provider the latitude to do so if it wishes.</p>
<p>The Oracle provider for the Kerberos V5 GSS-API mechanism always obtains credentials from a Subject. If there are no valid credentials in the current Subject, and this property is set to false, then the provider attempts to obtain new credentials from a temporary Subject by invoking a JAAS login itself. It uses the text callback handler for input/output with the user, and the JAAS configuration entry identified by "other" for the list of modules and options to use.<a id="fn_2" href="#fn_2" onclick='footdisplay(2," Actually it first tries to use the JAAS configuration entry com.sun.security.jgss.initiate for the client and com.sun.security.jgss.accept for the server and falls back on the entry for \"other\", if these entries are missing. This gives system administrators some additional control over its behavior.")'><sup>Foot&nbsp;2</sup></a></p>
<p>The Oracle provider for the Kerberos V5 GSS-API mechanism assumes that one of these modules will be a Kerberos login module. It is possible to configure the modules listed under "other" to read a pre-existing cache so that the user is not unexpectedly prompted for a password in the middle of a Java GSS-API call. The new Subject that is populated by this login is discarded by the Kerberos GSS-API mechanism just as soon as the required credentials are retrieved from it.</p>
</div>
</div>
<div class="sect2"><a id="GUID-E478197F-C0D8-4D35-82D8-E52E2B307B9B"></a>
<h2 id="JSSEC-GUID-E478197F-C0D8-4D35-82D8-E52E2B307B9B" class="sect2">Web Browser Integration</h2>
<div>
<p>An important class of applications that should be able to capitalize on Java Single Sign-on are applets. For this discussion we assume that the browser JRE has all the required packages.</p>
<p>One complication in using applets arises mostly out of the fact that before an applet can use Java GSS-API, it must perform a JAAS login. The main problems with this are (a) an increase in the effort required on the part of the applet developer and (b) unnecessary repeated login by the same user each time he or she starts an applet.</p>
<p>A good model to solve this problem would be to have the browser (or the Java Plug-in) perform a JAAS login once at startup. This would provide a Subject that could always be associated with the access control context whenever any Java code was run. As a result, the applet code would not need to perform a JAAS login prior to using Java GSS-API, and the user login would occur just once.</p>
<p>In the absence of this login functionality in the browser (or Java Plug-in), applets can still avoid having to perform a JAAS login themselves. To do so, the applets would have to set the <code class="codeph">javax.security.auth.useSubjectCredsOnly</code> system property to false and use a GSS-API mechanism provider that is capable of obtaining credentials from sources other than current Subject. When using an Oracle JRE with an Oracle Kerberos GSS-API provider, expect the mechanism to perform a JAAS login to obtain new credentials as explained in the previous section. The applet deployer would only need to ensure that the appropriate modules and options are listed in the entry "other" in the JAAS configuration used by the JRE. This saves the applet developer from calling into JAAS API's directly, but it does not stop the repeated JAAS login that might happen with each applet the user runs. However, by configuring the login modules to read a pre-existing native cache, the deployer can both hide the login from the user, and minimize the overhead in the multiple logins. (See how this is done for the JAAS configuration entry <code class="codeph">SampleClient</code> in the <a href="single-sign-using-kerberos-java1.htm#GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E__SAMPLECLIENTCOM.SUN.SECURITY.AUTH.M-37F332E5">sample client configuration entry</a> in the section <a href="single-sign-using-kerberos-java1.htm#GUID-45DD4879-CD1B-4E02-8B20-572C95C8386E">The Kerberos Login Module</a>.)</p>
</div>
</div>
<div class="sect2"><a id="GUID-1793ADE8-8B78-4680-A871-063ED761CFF5"></a>
<h2 id="JSSEC-GUID-1793ADE8-8B78-4680-A871-063ED761CFF5" class="sect2">Security Risks</h2>
<div>
<p>The convenience of single sign-on also introduces new risks. What happens if a malicious user gains access to your unattended desktop from where he or she can start applets as you? What happens if malicious applets sign on as you to services that they are not supposed to?</p>
<p>For the former, we have no solution but to caution you against leaving your workstation unlocked! For the latter, we have many authorizations checks in place.</p>
<p>To illustrate some details of the permissions model consider an example where your browser has performed a JAAS login at startup time and associated a Subject with all applets that run in it.</p>
<p>The Subject is protected from rogue applets by means of the <span class="apiname">javax.security.auth.AuthPermission</span> class. This permission is checked whenever code tries to obtain a reference to the Subject associated with any access control context.</p>
<p>Even if an applet were given access to a Subject, it needs a <span class="apiname">javax.security.auth.PrivateCredentialPermission</span> to actually read the sensitive private credentials stored in it.</p>
<p>Other kinds of checks are to be done by Java GSS-API mechanism providers as they read credentials and establish security contexts on behalf of the credential's owner. In order to support the Kerberos V5 mechanism, two new permission classes have been added with the package <span class="apiname">javax.security.auth.kerberos</span>:</p>
<pre dir="ltr">
ServicePermission(String servicePrinicipal, String action)
DelegationPermission(String principals)
</pre>
<p>As new GSS-API mechanisms are standardized for Java SE, more packages will be added that contain relevant permission classes for providers of those mechanisms.</p>
<p>The Kerberos GSS-API mechanism permission checks take place at the following points in the program's execution:</p>
</div>
<div class="sect3"><a id="GUID-23E25BFC-E77A-495C-8406-897E9D124395"></a>
<h3 id="JSSEC-GUID-23E25BFC-E77A-495C-8406-897E9D124395" class="sect3">Credential Acquisition</h3>
<div>
<p>The <span class="apiname">GSSManager.createCredential()</span> method obtains mechanism specific credential elements from a cache such as the current Subject and stores them in a <span class="apiname">GSSCredential</span> container. Allowing applets to acquire <span class="apiname">GSSCredential</span> freely, even if they cannot use them to do much, is undesirable. Doing so leaks information about the existence of user and service principals. Thus, before an application can acquire a <span class="apiname">GSSCredential</span> with any Kerberos credential elements in it, a <span class="apiname">ServicePermission</span> check is made.</p>
<p>On the client side, a successful <span class="apiname">GSSCredential</span> acquisition implies that a TGT has been accessed from a cache. Thus the following <span class="apiname">ServicePermission</span> is checked:</p>
<pre dir="ltr">
ServicePermission("krbtgt/EXAMPLE.COM@EXAMPLE.COM", "initiate");
</pre>
<p>The service principal <code class="codeph">krbtgt/EXAMPLE.COM@EXAMPLE.COM</code> represents the ticket granting service (TGS) in the Kerberos realm <code class="codeph">EXAMPLE.COM</code>, and the action "initiate" suggests that a ticket to this service is being accessed. The TGS service principal will always be used in this permission check at the time of client side credential acquisition.</p>
<p>On the server side, a successful <span class="apiname">GSSCredential</span> acquisition implies that a secret key has been accessed from a cache. Thus the following <span class="apiname">ServicePermission</span> is checked:</p>
<pre dir="ltr">
ServicePermission("nfs/bar.example.com@EXAMPLE.COM", "accept");
</pre>
<p>Here the service principal <code class="codeph">nfs/bar.example.com</code> represents the Kerberos service principal and the action "accept" suggests that the secret key for this service is being requested.</p>
</div>
</div>
<div class="sect3"><a id="GUID-5BB1D535-B4A3-403A-91CF-8A5B98B6DB0E"></a>
<h3 id="JSSEC-GUID-5BB1D535-B4A3-403A-91CF-8A5B98B6DB0E" class="sect3">Context Establishment</h3>
<div>
<p>An applet that has permissions to contact a particular server, say the LDAP server, must not instead contact a different server such as the FTP server. Of course, the applet might be restricted from doing so with the help of <span class="apiname">SocketPermission</span>. However, it is possible to use <span class="apiname">ServicePermission</span> to restrict it from authenticating using your identity, even if the network connection was permitted.</p>
<p>When the Kerberos mechanism provider is about to initiate context establishment it checks the <span class="apiname">ServicePermission</span>:</p>
<pre dir="ltr">
ServicePermission("ftp@EXAMPLE.COM", "initiate");
</pre>
<p>This check prevents unauthorized code from obtaining and using a Kerberos service ticket for the principal <code class="codeph">ftp@EXAMPLE.COM</code>.</p>
<p>Providing limited access to specific service principals using this permission is still dangerous. Downloaded code is allowed to communicate back with the host it originated from. A malicious applet could send back the initial GSS-API output token that contains a <span class="apiname">KerberosTicket</span> encrypted in the target service principal's long-term secret key, thus exposing it to an offline dictionary attack. For this reason it is not advisable to grant any "initiate" <span class="apiname">ServicePermission</span> to code downloaded from untrusted sites.</p>
<p>On the server side, the permission to use the secret key to accept incoming security context establishment requests is already checked during credential acquisition. Hence, no checks are made in the context establishment stage.</p>
</div>
</div>
<div class="sect3"><a id="GUID-3D1AFF31-323B-4DD6-829A-B7205FA11161"></a>
<h3 id="JSSEC-GUID-3D1AFF31-323B-4DD6-829A-B7205FA11161" class="sect3">Credential Delegation</h3>
<div>
<p>An applet that has permission to establish a security context with a server on your behalf also has the ability to request that your credentials be delegated to that server. But not all servers are trusted to the extent that your credentials can be delegated to them. Thus, before a Kerberos provider obtains a delegated credential to send to the peer, it checks the following permission:</p>
<pre dir="ltr">
DelegationPermission(" \"ftp@EXAMPLE.COM\" \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ");
</pre>
<p>This permission allows the Kerberos service principal ftp@EXAMPLE.COM to receive a forwarded TGT (represented by the ticket granting service krbtgt/EXAMPLE.COM@EXAMPLE.COM).<a id="fn_3" href="#fn_3" onclick='footdisplay(3," The use of two principal names in this permission allows for finer grained delegation such as proxy tickets for specific services unlike a carte blanche forwarded TGT. Even though the GSS-API does not allow for proxy tickets, another API such as JSSE might support this idea at some point in the future.")'><sup>Foot&nbsp;3</sup></a></p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-4A2151A0-B23A-4B2E-BFEE-A17545262B48"></a>
<h2 id="JSSEC-GUID-4A2151A0-B23A-4B2E-BFEE-A17545262B48" class="sect2">Conclusions</h2>
<div>
<p>In this paper we have presented a framework to enable single sign-on in Java. This requires sharing of credentials between JAAS which does the initial authentication to obtain credentials, and Java GSS-API which uses those credentials to communicate securely over the wire. We have focused on Kerberos V5 as the underlying security mechanism, but JAAS's stackable architecture and Java GSS-API's multi-mechanism nature allow us to use any number of different mechanisms simultaneously.</p>
<p>The Kerberos login module for JAAS is capable of reading native caches so that users do not have to authenticate themselves beyond desktop login on platforms that support Kerberos. Moreover, the Kerberos V5 mechanism for Java GSS-API allows credentials to be delegated which enables single sign-on in multi-tier environments.</p>
<p>Finally, a number of permissions checks are shown to prevent the unauthorized use of the single-sign on features provided by Kerberos.</p>
</div>
</div>
<div class="sect2"><a id="GUID-D65B3B0F-2689-4B4E-BAAD-A9E0D3571A84"></a>
<h2 id="JSSEC-GUID-D65B3B0F-2689-4B4E-BAAD-A9E0D3571A84" class="sect2">Acknowledgements</h2>
<div>
<p>We thank Gary Ellison, Charlie Lai, and Jeff Nisewanger for their contribution at each stage of the Kerberos single sign-on project. JAAS 1.0 was implemented by Charlie as an optional package for Kestrel (J2SE 1.3). Gary has been instrumental in designing the permissions model for the Kerberos Java GSS-API mechanism. We are grateful to Bob Scheifler for his feedback on integrating JAAS 1.0 into Merlin and to Tim Blackman for the KeyStoreLoginModule and CallbackHandler implementations. We also thank Bruce Rich, Tony Nadalin, Thomas Owusu and Yanni Zhang for their comments and suggestions. We thank Mary Dageforde for the documentation and tutorials. Sriramulu Lakkaraju, Stuart Ke and Shital Shisode contributed tests for the projects. Maxine Erlund provided management support for the project.</p>
</div>
</div>
<div class="sect2"><a id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B"></a>
<h2 id="JSSEC-GUID-67712665-922E-4947-8103-0AAE9C2AAC2B" class="sect2">References</h2>
<div>
<ol>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-01">Neuman, Clifford and Tso, Theodore (1994). Kerberos: An Authentication Service for Computer Networks, IEEE Communications, volume 39 pages 33-38</li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-02">J.Kohl and C.Neuman. The Kerberos Network Authentication Service (V5) Internet Engineering Task Force, September 1993 <a href="http://www.ietf.org/rfc/rfc1510.txt" target="_blank">Request for Comments 1510</a></li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-03">V. Samar and C. Lai. Making Login Services Independent from Authentication Technologies. In Proceedings of the SunSoft Developer's Conference, March 1996.</li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-04">X/Open Single Sign-On Service (XSSO) - Pluggable Authentication. Preliminary Specification P702, The Open Group, June 1997. <a href="http://www3.opengroup.org/" target="_blank">http://www.opengroup.org</a></li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-05">A Smart Card Login Module for Java Authentication and Authorization Service. <a href="http://www.gemalto.com/gemplus/index.html" target="_blank">http://www.gemplus.com/techno/smartjaas/index.html</a></li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-06">J. Linn. Generic Security Service Application Program Interface,Version 2. Internet Engineering Task Force, January 2000 <a href="http://www.ietf.org/rfc/rfc2743.txt" target="_blank">Request for Comments 2743</a></li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-07">J. Linn. The Kerberos Version 5 GSS-API Mechanism. Internet Engineering Task Force, June 1996 <a href="http://www.ietf.org/rfc/rfc1964.txt" target="_blank">Request for Comments 1964</a></li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-08">C.Adams. The Simple Public-Key GSS-API Mechanism (SPKM). Internet Engineering Task Force, October 1996 <a href="http://www.ietf.org/rfc/rfc2025.txt" target="_blank">Request for Comments 2025</a></li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-09">J. Kabat and M.Upadhyay. Generic Security Service API Version 2: Java Bindings. Internet Engineering Task Force, January 1997 <a href="http://www.ietf.org/rfc/rfc2853.txt" target="_blank">Request for Comments 2853</a></li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-10">JSR 000072 Generic Security Services API</li>
<li id="GUID-67712665-922E-4947-8103-0AAE9C2AAC2B__SSO-KERBEROS-11"><a href="https://docs.oracle.com/javase/10/docs/api/overview-summary.html" target="_blank">Java Platform, Standard Edition API Specification</a></li>
</ol>
</div>
</div>
<hr />
<br />
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1: The GSS-API Kerberos mechanism performs client authentication at the minimum.<br />
Footnote&nbsp;2: Actually it first tries to use the JAAS configuration entry <code class="codeph">com.sun.security.jgss.initiate</code> for the client and <code class="codeph">com.sun.security.jgss.accept</code> for the server and falls back on the entry for "other", if these entries are missing. This gives system administrators some additional control over its behavior.<br />
Footnote&nbsp;3: The use of two principal names in this permission allows for finer grained delegation such as proxy tickets for specific services unlike a carte blanche forwarded TGT. Even though the GSS-API does not allow for proxy tickets, another API such as JSSE might support this idea at some point in the future.<br /></div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="related-documentation1.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="advanced-security-programming-java-se-authentication-secure-communication-and-single-sign1.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
