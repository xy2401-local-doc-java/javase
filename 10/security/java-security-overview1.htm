<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Java Security Overview</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="Java security includes a large set of APIs, tools, and implementations of commonly-used security algorithms, mechanisms, and protocols. The Java security APIs span a wide range of areas, including cryptography, public key infrastructure, secure communication, authentication, and access control. Java security technology provides the developer with a comprehensive security framework for writing applications, and also provides the user or administrator with a set of tools to securely manage applications." />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="general-security1.htm" title="Previous" type="text/html" />
<link rel="Next" href="java-se-platform-security-architecture.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-2EF91196-D468-4D0F-8FDC-DA2BEA165D10"></a> <span id="PAGE" style="display:none;">5/59</span> <!-- End Header -->
<h1 id="JSSEC-GUID-2EF91196-D468-4D0F-8FDC-DA2BEA165D10" class="sect1">Java Security Overview</h1>
<div>
<p>Java security includes a large set of APIs, tools, and implementations of commonly-used security algorithms, mechanisms, and protocols. The Java security APIs span a wide range of areas, including cryptography, public key infrastructure, secure communication, authentication, and access control. Java security technology provides the developer with a comprehensive security framework for writing applications, and also provides the user or administrator with a set of tools to securely manage applications.</p>
</div>
<div class="sect2"><a id="GUID-69EE84E6-E0BD-48B2-B3F2-200D9A5FCF93"></a>
<h2 id="JSSEC-GUID-69EE84E6-E0BD-48B2-B3F2-200D9A5FCF93" class="sect2">Introduction to Java Security</h2>
<div>
<p>The JDK is designed with a strong emphasis on security. At its core, the Java language itself is type-safe and provides automatic garbage collection, enhancing the robustness of application code. A secure class loading and verification mechanism ensures that only legitimate Java code is executed. The Java security architecture includes a large set of application programming interfaces (APIs), tools, and implementations of commonly-used security algorithms, mechanisms, and protocols.</p>
<p>The Java security APIs span a wide range of areas. Cryptographic and public key infrastructure (PKI) interfaces provide the underlying basis for developing secure applications. Interfaces for performing authentication and access control enable applications to guard against unauthorized access to protected resources.</p>
<p>The APIs allow for multiple interoperable implementations of algorithms and other security services. Services are implemented in <span class="variable">providers</span>, which are plugged into the JDK through a standard interface that makes it easy for applications to obtain security services without having to know anything about their implementations. This allows developers to focus on how to integrate security into their applications, rather than on how to actually implement complex security mechanisms.</p>
<p>The JDK includes a number of providers that implement a core set of security services. It also allows for additional custom providers to be installed. This enables developers to extend the platform with new security mechanisms.</p>
<p>The JDK is divided into modules. Modules that contain security APIs include the following:</p>
<div class="tblformal" id="GUID-69EE84E6-E0BD-48B2-B3F2-200D9A5FCF93__GUID-F0CDE653-E96D-4643-A7D5-4858F75CA2E5">
<p class="titleintable">Table 1-1 Modules That Contain Security APIs</p>
<table class="cellalignment468" title="Modules That Contain Security APIs" summary="Modules that contain security APIs">
<thead>
<tr class="cellalignment456">
<th class="cellalignment467" id="d5332e37">Module</th>
<th class="cellalignment467" id="d5332e39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e43" headers="d5332e37"><a href="https://docs.oracle.com/javase/10/docs/api/java.base-summary.html" target="_blank"><span class="apiname">java.base</span></a></td>
<td class="cellalignment456" headers="d5332e43 d5332e39">Defines the foundational APIs of <span>Java SE</span>. Contained packages include <a href="https://docs.oracle.com/javase/10/docs/api/java/security/package-summary.html" target="_blank"><span class="apiname">java.security</span></a>, <a href="https://docs.oracle.com/javase/10/docs/api/javax/crypto/package-summary.html" target="_blank"><span class="apiname">javax.crypto</span></a>, <a href="https://docs.oracle.com/javase/10/docs/api/javax/net/ssl/package-summary.html" target="_blank"><span class="apiname">javax.net.ssl</span></a>, and <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/package-summary.html" target="_blank"><span class="apiname">javax.security.auth</span></a>.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e74" headers="d5332e37"><a href="https://docs.oracle.com/javase/10/docs/api/java.security.jgss-summary.html" target="_blank"><span class="apiname">java.security.jgss</span></a></td>
<td class="cellalignment456" headers="d5332e74 d5332e39">Defines the Java binding of the IETF Generic Security Services API (GSS-API). This module also contains GSS-API mechanisms including Kerberos v5 and SPNEGO.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e82" headers="d5332e37"><a href="https://docs.oracle.com/javase/10/docs/api/java.security.sasl-summary.html" target="_blank"><span class="apiname">java.security.sasl</span></a></td>
<td class="cellalignment456" headers="d5332e82 d5332e39">Defines Java support for the IETF Simple Authentication and Security Layer (SASL). This module also contains SASL mechanisms including DIGEST-MD5, CRAM-MD5, and NTLM.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e90" headers="d5332e37"><a href="https://docs.oracle.com/javase/10/docs/api/java.smartcardio-summary.html" target="_blank"><span class="apiname">java.smartcardio</span></a></td>
<td class="cellalignment456" headers="d5332e90 d5332e39">Defines the Java Smart Card I/O API.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e98" headers="d5332e37"><a href="https://docs.oracle.com/javase/10/docs/api/java.xml.crypto-summary.html" target="_blank"><span class="apiname">java.xml.crypto</span></a></td>
<td class="cellalignment456" headers="d5332e98 d5332e39">Defines the API for XML cryptography.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e106" headers="d5332e37"><a href="https://docs.oracle.com/javase/10/docs/api/jdk.security.auth-summary.html" target="_blank"><span class="apiname">jdk.security.auth</span></a></td>
<td class="cellalignment456" headers="d5332e106 d5332e39">Provides implementations of the <span class="apiname">javax.security.auth.*</span> interfaces and various authentication modules.</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e117" headers="d5332e37"><a href="https://docs.oracle.com/javase/10/docs/api/jdk.security.jgss-summary.html" target="_blank"><span class="apiname">jdk.security.jgss</span></a></td>
<td class="cellalignment456" headers="d5332e117 d5332e39">Defines Java extensions to the GSS-API and an implementation of the SASL GSS-API mechanism.</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="sect2"><a id="GUID-65C96219-B2AB-4205-808E-5B41CB2AD694"></a>
<h2 id="JSSEC-GUID-65C96219-B2AB-4205-808E-5B41CB2AD694" class="sect2">Java Language Security and Bytecode Verification</h2>
<div>
<p>The Java language is designed to be type-safe and easy to use. It provides automatic memory management, garbage collection, and range-checking on arrays. This reduces the overall programming burden placed on developers, leading to fewer subtle programming errors and to safer, more robust code.</p>
<p>A compiler translates Java programs into a machine-independent bytecode representation. A bytecode verifier is invoked to ensure that only legitimate bytecodes are executed in the Java runtime. It checks that the bytecodes conform to the Java Language Specification and do not violate Java language rules or namespace restrictions. The verifier also checks for memory management violations, stack underflows or overflows, and illegal data typecasts. Once bytecodes have been verified, the Java runtime prepares them for execution.</p>
<div class="p">In addition, the Java language defines different access modifiers that can be assigned to Java classes, methods, and fields, enabling developers to restrict access to their class implementations as appropriate. The language defines four distinct access levels:
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">private</code>: Most restrictive modifier; access is not allowed outside the particular class in which the private member (a method, for example) is defined.</p>
</li>
<li>
<p><code class="codeph">protected</code>: Allows access to any subclass or to other classes within the same package.</p>
</li>
<li>
<p>Package-private: If not specified, then this is the default access level; allows access to classes within the same package.</p>
</li>
<li>
<p><code class="codeph">public</code>: No longer guarantees that the element is accessible everywhere; accessibility depends upon whether the package containing that element is exported by its defining module and whether that module is readable by the module containing the code that is attempting to access it.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-0C458D46-BA4F-4091-817B-9902B6E18240"></a>
<h2 id="JSSEC-GUID-0C458D46-BA4F-4091-817B-9902B6E18240" class="sect2">Basic Security Architecture</h2>
<div>
<p>The JDK defines a set of APIs spanning major security areas, including cryptography, public key infrastructure, authentication, secure communication, and access control. The APIs allow developers to easily integrate security into their application code.</p>
<p id="GUID-0C458D46-BA4F-4091-817B-9902B6E18240__THESEAPISALLOWDEVELOPERSTOEASILYINT-468A8650">The APIs are designed around the following principles:</p>
<dl>
<dt class="dlterm"><a id="GUID-0C458D46-BA4F-4091-817B-9902B6E18240__GUID-E3E05B58-32DE-4017-A5C8-4A97E0D050F5"><!-- --></a><span class="variable">Implementation independence</span></dt>
<dd>Applications do not need to implement security themselves. Rather, they can request security services from the JDK. Security services are implemented in providers (see the section <a href="java-security-overview1.htm#GUID-74E1EFEA-F1DD-466C-B61A-CB5E89FA50DE" title="The java.security.Provider class encapsulates the notion of a security provider in the Java platform. It specifies the provider's name and lists the security services it implements. Multiple providers may be configured at the same time and are listed in order of preference. When a security service is requested, the highest priority provider that implements that service is selected.">Security Providers</a>), which are plugged into the JDK via a standard interface. An application may rely on multiple independent providers for security functionality.</dd>
<dt class="dlterm"><a id="GUID-0C458D46-BA4F-4091-817B-9902B6E18240__GUID-755A8E77-2D9C-4C46-B0AE-562957014B3D"><!-- --></a><span class="variable">Implementation interoperability</span></dt>
<dd>
<p>Providers are interoperable across applications. Specifically, an application is not bound to a specific provider if it does not rely on default values from the provider.</p>
</dd>
<dt class="dlterm"><a id="GUID-0C458D46-BA4F-4091-817B-9902B6E18240__GUID-194E3FEB-06EE-4E3D-9473-206E99B76414"><!-- --></a><span class="variable">Algorithm extensibility</span></dt>
<dd>The JDK includes a number of built-in providers that implement a basic set of security services that are widely used today. However, some applications may rely on emerging standards not yet implemented, or on proprietary services. The JDK supports the installation of custom providers that implement such services.</dd>
</dl>
</div>
<div class="sect3"><a id="GUID-74E1EFEA-F1DD-466C-B61A-CB5E89FA50DE"></a>
<h3 id="JSSEC-GUID-74E1EFEA-F1DD-466C-B61A-CB5E89FA50DE" class="sect3">Security Providers</h3>
<div>
<p>The <code class="codeph">java.security.Provider</code> class encapsulates the notion of a security provider in the Java platform. It specifies the provider's name and lists the security services it implements. Multiple providers may be configured at the same time and are listed in order of preference. When a security service is requested, the highest priority provider that implements that service is selected.</p>
<p>Applications rely on the relevant <code class="codeph">getInstance</code> method to request a security service from an underlying provider.</p>
<p>For example, message digest creation represents one type of service available from providers. To request an implementation of a specific message digest algorithm, call the method <span class="apiname">java.security.MessageDigest.getInstance</span>. The following statement requests a SHA-256 message digest implementation without specifying a provider name:</p>
<pre class="codeblock" dir="ltr">
    MessageDigest md = MessageDigest.getInstance("SHA-256");
</pre>
<p>The following figure illustrates how this statement obtains a SHA-256 message digest implementation. The providers are searched in preference order, and the implementation from the first provider supplying that particular algorithm, <code class="codeph">ProviderB</code>, is returned.</p>
<div class="figure" id="GUID-74E1EFEA-F1DD-466C-B61A-CB5E89FA50DE__SHA-256MESSAGEDIGESTWITHOUTPROVIDER-1D43C810">
<p class="titleinfigure">Figure 1-1 Request SHA-256 Message Digest Implementation Without Specifying Provider</p>
<br />
<img width="369" height="386" src="img/security-overview-message-digest-wo-provider.png" alt="Description of Figure 1-1 follows" title="Description of Figure 1-1 follows" /><br />
<a href="img_text/security-overview-message-digest-wo-provider.htm">Description of "Figure 1-1 Request SHA-256 Message Digest Implementation Without Specifying Provider"</a><br /></div>
<!-- class="figure" -->
<p>You can optionally request an implementation from a specific provider by specifying the provider's name. The following statement requests a SHA-256 message digest implementation from a specific provider, <code class="codeph">ProviderC</code>:</p>
<pre class="codeblock" dir="ltr">
    MessageDigest md = MessageDigest.getInstance("SHA-256", "ProviderC");
</pre>
<p>The following figure illustrates how this statement requests a SHA-256 message digest implementation from a specific provider, <code class="codeph">ProviderC</code>. In this case, the implementation from that provider is returned, even though a provider with a higher preference order, <code class="codeph">ProviderB</code>, also supplies a SHA-256 implementation.</p>
<div class="figure" id="GUID-74E1EFEA-F1DD-466C-B61A-CB5E89FA50DE__REQUESTSHA-256MESSAGEDIGESTIMPLEMEN-1D37A87C">
<p class="titleinfigure">Figure 1-2 Request SHA-256 Message Digest Implementation from Specific Provider</p>
<br />
<img width="413" height="386" src="img/security-overview-message-digest-providerc.png" alt="Description of Figure 1-2 follows" title="Description of Figure 1-2 follows" /><br />
<a href="img_text/security-overview-message-digest-providerc.htm">Description of "Figure 1-2 Request SHA-256 Message Digest Implementation from Specific Provider"</a><br /></div>
<!-- class="figure" -->
<p>For more information about cryptographic services, such as message digest algorithms, see the section <a href="java-security-overview1.htm#GUID-C6D250FC-F147-4284-A6BF-8384DFD39DA6" title="The Java cryptography architecture is a framework for accessing and developing cryptographic functionality for the Java platform.">Java Cryptography</a>.</p>
<p>Oracle's implementation of the Java platform includes a number of built-in default providers that implement a basic set of security services that can be used by applications. Note that other vendor implementations of the Java platform may include different sets of providers that encapsulate vendor-specific sets of security services. The term built-in default providers refers to the providers available in Oracle's implementation.</p>
</div>
</div>
<div class="sect3"><a id="GUID-25BF3893-E577-4C96-9A4A-BEA39555CA72"></a>
<h3 id="JSSEC-GUID-25BF3893-E577-4C96-9A4A-BEA39555CA72" class="sect3">File Locations</h3>
<div>
<p>The following table lists locations of some security-related files and tools.</p>
<div class="section">
<div class="tblformal" id="GUID-25BF3893-E577-4C96-9A4A-BEA39555CA72__GUID-5DE08858-9C50-4879-8050-9C419F7A92DA">
<p class="titleintable">Table 1-2 Java security files and tools</p>
<table class="cellalignment466" title="Java security files and tools" summary="List of security files, tools, and their locations are described in the table.">
<thead>
<tr class="cellalignment456">
<th class="cellalignment480" id="d5332e284">File Name or Tool Name</th>
<th class="cellalignment480" id="d5332e286">Location</th>
<th class="cellalignment480" id="d5332e288">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e292" headers="d5332e284">
<p><code>java.security</code></p>
</td>
<td class="cellalignment456" headers="d5332e292 d5332e286">
<p><code class="codeph"><span class="variable">&lt;java-home&gt;</span>/conf/security</code></p>
</td>
<td class="cellalignment456" headers="d5332e292 d5332e288">
<p>Certain aspects of Java security, such as configuring the providers, may be customized by setting Security Properties. You may set Security Properties statically in the <code class="codeph">java.security</code> file. Security Properties may also be set dynamically by calling appropriate methods of the <code class="codeph">Security</code> class (in the <code class="codeph">java.security</code> package).</p>
</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e315" headers="d5332e284">
<p><code>java.policy</code></p>
</td>
<td class="cellalignment456" headers="d5332e315 d5332e286">
<p><code class="codeph"><span class="variable">&lt;java-home&gt;</span>/conf/security</code></p>
</td>
<td class="cellalignment456" headers="d5332e315 d5332e288">
<p>This is the default system policy file; see <a href="java-security-overview1.htm#GUID-5FB6B917-DDFE-42F5-9233-8E6250C1EA93" title="A limited set of default permissions are granted to code by class loaders. Administrators have the ability to flexibly manage additional code permissions via a security policy.">Security Policy</a>.</p>
</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e335" headers="d5332e284">Cryptographic policy directory</td>
<td class="cellalignment456" headers="d5332e335 d5332e286">
<p><code class="codeph"><span class="variable">&lt;java-home&gt;</span>/conf/security/policy</code></p>
</td>
<td class="cellalignment456" headers="d5332e335 d5332e288">
<p>This directory contains sets of jurisdiction policy files; see <a href="java-cryptography-architecture-jca-reference-guide.htm#GUID-EFA5AC2D-644E-4CD9-8523-C6D3936D5FB1">Cryptographic Strength Configuration</a>.</p>
</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e352" headers="d5332e284">
<p><code>cacerts</code></p>
</td>
<td class="cellalignment456" headers="d5332e352 d5332e286">
<p><code class="codeph"><span class="variable">&lt;java-home&gt;</span>/lib/security</code></p>
</td>
<td class="cellalignment456" headers="d5332e352 d5332e288">
<p>The <code>cacerts</code> file represents a system-wide keystore with Certificate Authority (CA) and other trusted certificates. For information about configuring and managing this file, see <a class="olink JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549" target="_blank" href="../tools/keytool.htm#JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549">keytool</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e378" headers="d5332e284">
<p><code class="codeph">keytool</code>, <code class="codeph">jarsigner</code>, <code class="codeph">policytool</code></p>
<p>Windows only: <code class="codeph">kinit</code>, <code class="codeph">klist</code>, <code class="codeph">ktab</code></p>
</td>
<td class="cellalignment456" headers="d5332e378 d5332e286">
<p><code class="codeph"><span class="variable">&lt;java-home&gt;</span>/bin</code></p>
</td>
<td class="cellalignment456" headers="d5332e378 d5332e288">
<p>For more information about security-related tools, see <a class="olink JSWOR-GUID-F73EC9CE-C422-4EDB-B3E6-AA3A3A1DDB8E" target="_blank" href="../tools/security-tools-and-commands.htm#JSWOR-GUID-F73EC9CE-C422-4EDB-B3E6-AA3A3A1DDB8E">Security Tools and Commands</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-C6D250FC-F147-4284-A6BF-8384DFD39DA6"></a>
<h2 id="JSSEC-GUID-C6D250FC-F147-4284-A6BF-8384DFD39DA6" class="sect2">Java Cryptography</h2>
<div>
<p>The Java cryptography architecture is a framework for accessing and developing cryptographic functionality for the Java platform.</p>
<p>It includes APIs for a large variety of cryptographic services, including the following:</p>
<ul style="list-style-type: disc;">
<li>Message digest algorithms</li>
<li>Digital signature algorithms</li>
<li>Symmetric bulk and stream encryption</li>
<li>Asymmetric encryption</li>
<li>Password-based encryption (PBE)</li>
<li>Elliptic Curve Cryptography (ECC)</li>
<li>Key agreement algorithms</li>
<li>Key generators</li>
<li>Message Authentication Codes (MACs)</li>
<li>Secure Random Number Generators</li>
</ul>
<div class="p">For historical (export control) reasons, the cryptography APIs are organized into two distinct packages:
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">java.security</code> and <code class="codeph">java.security.*</code> packages contains classes that are <span class="variable">not</span> subject to export controls (like <code class="codeph">Signature</code> and <code class="codeph">MessageDigest</code>)</p>
</li>
<li>
<p>The <code class="codeph">javax.crypto</code> package contains classes that are subject to export controls (like <code class="codeph">Cipher</code> and <code class="codeph">KeyAgreement</code>)</p>
</li>
</ul>
</div>
<p>The cryptographic interfaces are provider-based, allowing for multiple and interoperable cryptography implementations. Some providers may perform cryptographic operations in software; others may perform the operations on a hardware token (for example, on a smart card device or on a hardware cryptographic accelerator). Providers that implement export-controlled services must be digitally signed by a certificate issued by the Oracle JCE Certificate Authority.</p>
<p>The Java platform includes built-in providers for many of the most commonly used cryptographic algorithms, including the RSA, DSA, and ECDSA signature algorithms, the AES encryption algorithm, the SHA-2 message digest algorithms, and the Diffie-Hellman (DH) and Elliptic Curve Diffie-Hellman (ECDH) key agreement algorithms. Most of the built-in providers implement cryptographic algorithms in Java code.</p>
<p>The Java platform also includes a built-in provider that acts as a bridge to a native PKCS#11 (v2.x) token. This provider, named <code class="codeph">SunPKCS11</code>, allows Java applications to seamlessly access cryptographic services located on PKCS#11-compliant tokens.</p>
<p>On Windows, the Java platform includes a built-in provider that acts as a bridge to the native Microsoft CryptoAPI. This provider, named <code class="codeph">SunMSCAPI</code>, allows Java applications to seamlessly access cryptographic services on Windows through the CryptoAPI.</p>
</div>
</div>
<div class="sect2"><a id="GUID-054AD71D-D449-47FF-B6F7-F416DA821D46"></a>
<h2 id="JSSEC-GUID-054AD71D-D449-47FF-B6F7-F416DA821D46" class="sect2">Public Key Infrastructure</h2>
<div>
<p>Public Key Infrastructure (PKI) is a term used for a framework that enables secure exchange of information based on public key cryptography. It allows identities (of people, organizations, etc.) to be bound to digital certificates and provides a means of verifying the authenticity of certificates. PKI encompasses keys, certificates, public key encryption, and trusted Certification Authorities (CAs) who generate and digitally sign certificates.</p>
<p>The Java platform includes APIs and provider support for X.509 digital certificates and Certificate Revocation Lists (CRLs), as well as PKIX-compliant certification path building and validation. The classes related to PKI are located in the <code class="codeph">java.security</code> and <code class="codeph">java.security.cert</code> packages.</p>
</div>
<div class="sect3"><a id="GUID-EB29B931-D1DE-420B-849C-D731A8DF9CDC"></a>
<h3 id="JSSEC-GUID-EB29B931-D1DE-420B-849C-D731A8DF9CDC" class="sect3">Key and Certificate Storage</h3>
<div>
<p>The Java platform provides for long-term persistent storage of cryptographic keys and certificates via key and certificate stores. Specifically, the <code class="codeph">java.security.KeyStore</code> class represents a <span class="italic">key store</span>, a secure repository of cryptographic keys and/or trusted certificates (to be used, for example, during certification path validation), and the <code class="codeph">java.security.cert.CertStore</code> class represents a <span class="italic">certificate store</span>, a public and potentially vast repository of unrelated and typically untrusted certificates. A <code class="codeph">CertStore</code> may also store CRLs.</p>
<p><code class="codeph">KeyStore</code> and <code class="codeph">CertStore</code> implementations are distinguished by types. The Java platform includes the standard PKCS11 and PKCS12 key store types (whose implementations are compliant with the corresponding PKCS specifications from RSA Security). It also contains a proprietary file-based key store type called JKS (which stands for Java Key Store), and a type called DKS (Domain Key Store) which is a collection of keystores that are presented as a single logical keystore.</p>
<p>The Java platform includes a special built-in key store, <code>cacerts</code>, that contains a number of certificates for well-known, trusted CAs. The keytool utility is able to list the certificates included in <code>cacerts</code>. See <a class="olink JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549" target="_blank" href="../tools/keytool.htm#JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549">keytool</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
<p>The SunPKCS11 provider mentioned in the section <a href="java-security-overview1.htm#GUID-C6D250FC-F147-4284-A6BF-8384DFD39DA6" title="The Java cryptography architecture is a framework for accessing and developing cryptographic functionality for the Java platform.">Java Cryptography</a> includes a PKCS11 <code class="codeph">KeyStore</code> implementation. This means that keys and certificates residing in secure hardware (such as a smart card) can be accessed and used by Java applications via the <code class="codeph">KeyStore</code> API. Note that smart card keys may not be permitted to leave the device. In such cases, the <code class="codeph">java.security.Key</code> object returned by the <code class="codeph">KeyStore</code> API may simply be a reference to the key (that is, it would not contain the actual key material). Such a <code class="codeph">Key</code> object can only be used to perform cryptographic operations on the device where the actual key resides.</p>
<p>The Java platform also includes an LDAP certificate store type (for accessing certificates stored in an LDAP directory), as well as an in-memory Collection certificate store type (for accessing certificates managed in a <code class="codeph">java.util.Collection</code> object).</p>
</div>
</div>
<div class="sect3"><a id="GUID-BC9A5E59-953A-4EBC-9F03-BEF099B64F5B"></a>
<h3 id="JSSEC-GUID-BC9A5E59-953A-4EBC-9F03-BEF099B64F5B" class="sect3">Public Key Infrastructure Tools</h3>
<div>
<p>There are two built-in tools for working with keys, certificates, and key stores:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">keytool</code> creates and manages key stores. Use it to perform the following tasks:</p>
<ul style="list-style-type: disc;">
<li>Create public/private key pairs</li>
<li>Display, import, and export X.509 v1, v2, and v3 certificates stored as files</li>
<li>Create X.509 certificates</li>
<li>Issue certificate (PKCS#10) requests to be sent to CAs</li>
<li>Create certificates based on certificate requests</li>
<li>Import certificate replies (obtained from the CAs sent certificate requests)</li>
<li>Designate public key certificates as trusted</li>
<li>Accept a password and store it securely as a secret key</li>
</ul>
</li>
<li>
<p><code class="codeph">jarsigner</code> signs JAR files and verifies signatures on signed JAR files. The Java ARchive (JAR) file format enables the bundling of multiple files into a single file. Typically, a JAR file contains the class files and auxiliary resources associated with applets and applications.</p>
</li>
</ul>
<div class="p">To digitally sign code, perform the following:
<ol>
<li>
<p>Use <code class="codeph">keytool</code> to generate or import appropriate keys and certificates into your key store (if they are not there already).</p>
</li>
<li>
<p>Use the <code class="codeph">jar</code> tool to package the code in a JAR file.</p>
</li>
<li>
<div class="p">Use the <code class="codeph">jarsigner</code> tool to sign the JAR file. The <code class="codeph">jarsigner</code> tool accesses a key store to find any keys and certificates needed to sign a JAR file or to verify the signature of a signed JAR file.
<div class="infobox-note" id="GUID-BC9A5E59-953A-4EBC-9F03-BEF099B64F5B__GUID-5B222233-498E-4C87-94A9-D8FC5BAFD8E3">
<p class="notep1">Note:</p>
<code class="codeph">jarsigner</code> can optionally generate signatures that include a timestamp. Systems (such as Java Plug-in) that verify JAR file signatures can check the timestamp and accept a JAR file that was signed while the signing certificate was valid rather than requiring the certificate to be current. (Certificates typically expire annually, and it is not reasonable to expect JAR file creators to re-sign deployed JAR files annually.)</div>
</div>
</li>
</ol>
</div>
<p>See <a class="olink JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549" target="_blank" href="../tools/keytool.htm#JSWOR-GUID-5990A2E4-78E3-47B7-AE75-6D1826259549">keytool</a> and <a class="olink JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864" target="_blank" href="../tools/jarsigner.htm#JSWOR-GUID-925E7A1B-B3F3-44D2-8B49-0B3FA2C54864">jarsigner</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-F8BE6C49-3506-4D1A-8E4E-053CA439D1E2"></a>
<h2 id="JSSEC-GUID-F8BE6C49-3506-4D1A-8E4E-053CA439D1E2" class="sect2">Authentication</h2>
<div>
<p>Authentication is the process of determining the identity of a user. In the context of the Java runtime environment, it is the process of identifying the user of an executing Java program. In certain cases, this process may rely on the services described in the section <a href="java-security-overview1.htm#GUID-C6D250FC-F147-4284-A6BF-8384DFD39DA6" title="The Java cryptography architecture is a framework for accessing and developing cryptographic functionality for the Java platform.">Java Cryptography</a>.</p>
<p>The Java platform provides APIs that enable an application to perform user authentication via pluggable login modules. Applications call into the <code class="codeph">LoginContext</code> class (in the <code class="codeph">javax.security.auth.login</code> package), which in turn references a configuration. The configuration specifies which login module (an implementation of the <code class="codeph">javax.security.auth.spi.LoginModule</code> interface) is to be used to perform the actual authentication.</p>
<p>Since applications solely talk to the standard <code class="codeph">LoginContext</code> API, they can remain independent from the underlying plug-in modules. New or updated modules can be plugged in for an application without having to modify the application itself. The following figure illustrates the independence between applications and underlying login modules:</p>
<div class="figure" id="GUID-F8BE6C49-3506-4D1A-8E4E-053CA439D1E2__GUID-99060EF8-D731-4093-BFAB-B715A085DA49">
<p class="titleinfigure">Figure 1-3 Authentication Login Modules Plugging into the Authentication Framework</p>
<img width="386" height="309" src="img/security-overview-authentication-login-modules.png" alt="Description of Figure 1-3 follows" title="Description of Figure 1-3 follows" /><br />
<a href="img_text/security-overview-authentication-login-modules.htm">Description of "Figure 1-3 Authentication Login Modules Plugging into the Authentication Framework"</a></div>
<!-- class="figure" -->
<p>It is important to note that although login modules are pluggable components that can be configured into the Java platform, they are not plugged in via security providers. Therefore, they do not follow the provider searching model as described in the section <a href="java-security-overview1.htm#GUID-74E1EFEA-F1DD-466C-B61A-CB5E89FA50DE" title="The java.security.Provider class encapsulates the notion of a security provider in the Java platform. It specifies the provider's name and lists the security services it implements. Multiple providers may be configured at the same time and are listed in order of preference. When a security service is requested, the highest priority provider that implements that service is selected.">Security Providers</a>. Instead, as is shown in <a href="java-security-overview1.htm#GUID-F8BE6C49-3506-4D1A-8E4E-053CA439D1E2__GUID-99060EF8-D731-4093-BFAB-B715A085DA49">Figure 1-3</a>, login modules are administered by their own unique configuration.</p>
<p>The Java platform provides the following built-in login modules, all in the <code class="codeph">com.sun.security.auth.module</code> package:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">Krb5LoginModule</code> for authentication using Kerberos protocols</li>
<li><code class="codeph">JndiLoginModule</code> for username/password authentication using LDAP or NIS databases</li>
<li><code class="codeph">KeyStoreLoginModule</code> for logging into any type of key store, including a PKCS#11 token key store</li>
</ul>
<p>Authentication can also be achieved during the process of establishing a secure communication channel between two peers. The Java platform provides implementations of a number of standard communication protocols, which are discussed in the section <a href="java-security-overview1.htm#GUID-4E5FEEF5-A541-4222-AD18-31AE184F38E4" title="The data that travels across a network can be accessed by someone who is not the intended recipient. When the data includes private information, such as passwords and credit card numbers, steps must be taken to make the data unintelligible to unauthorized parties. It is also important to ensure that you are sending the data to the appropriate party, and that the data has not been modified, either intentionally or unintentionally, during transport.">Secure Communication</a>.</p>
</div>
</div>
<div class="sect2"><a id="GUID-4E5FEEF5-A541-4222-AD18-31AE184F38E4"></a>
<h2 id="JSSEC-GUID-4E5FEEF5-A541-4222-AD18-31AE184F38E4" class="sect2">Secure Communication</h2>
<div>
<p>The data that travels across a network can be accessed by someone who is not the intended recipient. When the data includes private information, such as passwords and credit card numbers, steps must be taken to make the data unintelligible to unauthorized parties. It is also important to ensure that you are sending the data to the appropriate party, and that the data has not been modified, either intentionally or unintentionally, during transport.</p>
<p>Cryptography forms the basis required for secure communication; see the section <a href="java-security-overview1.htm#GUID-C6D250FC-F147-4284-A6BF-8384DFD39DA6" title="The Java cryptography architecture is a framework for accessing and developing cryptographic functionality for the Java platform.">Java Cryptography</a>. The Java platform also provides API support and provider implementations for a number of standard secure communication protocols.</p>
</div>
<div class="sect3"><a id="GUID-FCF419A7-B856-46DD-A36F-C6F88F9AF37F"></a>
<h3 id="JSSEC-GUID-FCF419A7-B856-46DD-A36F-C6F88F9AF37F" class="sect3">SSL, TLS, and DTLS Protocols</h3>
<div>
<p>The JDK provides APIs and an implementation of the SSL, TLS, and DTLS protocols that includes functionality for data encryption, message integrity, and server and client authentication. Applications can use SSL/TLS/DTLS to provide for the secure passage of data between two peers over any application protocol, such as HTTP on top of TCP/IP.</p>
<p>The <code class="codeph">javax.net.ssl.SSLSocket</code> class represents a network socket that encapsulates SSL/TLS support on top of a normal stream socket (<code class="codeph">java.net.Socket</code>). Some applications might want to use alternate data transport abstractions (for example, New-I/O); the <code class="codeph">javax.net.ssl.SSLEngine</code> class is available to produce and consume SSL/TLS/DTLS packets.</p>
<p>The JDK also includes APIs that support the notion of pluggable (provider-based) key managers and trust managers. <span class="variable">A key manager</span> is encapsulated by the <code class="codeph">javax.net.ssl.KeyManager</code> class, and manages the keys used to perform authentication. A <span class="variable">trust manager</span> is encapsulated by the <code class="codeph">TrustManager</code> class (in the same package), and makes decisions about who to trust based on certificates in the key store it manages.</p>
<p>The JDK includes a built-in provider that implements the SSL/TLS/DTLS protocols:</p>
<ul style="list-style-type: disc;">
<li>SSLv3</li>
<li>TLSv1</li>
<li>TLSv1.1</li>
<li>TLSv1.2</li>
<li>DTLSv1.0</li>
<li>DTLSv1.2</li>
</ul>
</div>
</div>
<div class="sect3"><a id="GUID-7C74ECA4-3645-4756-B8FB-63D84480F4AD"></a>
<h3 id="JSSEC-GUID-7C74ECA4-3645-4756-B8FB-63D84480F4AD" class="sect3">Simple Authentication and Security Layer (SASL)</h3>
<div>
<p>Simple Authentication and Security Layer (SASL) is an Internet standard that specifies a protocol for authentication and optional establishment of a security layer between client and server applications. SASL defines how authentication data is to be exchanged, but does not itself specify the contents of that data. It is a framework into which specific authentication mechanisms that specify the contents and semantics of the authentication data can fit. There are a number of standard SASL mechanisms defined by the Internet community for various security levels and deployment scenarios.</p>
<p>The Java SASL API, which is in the <a href="https://docs.oracle.com/javase/10/docs/api/java.security.sasl-summary.html" target="_blank"><span class="apiname">java.security.sasl</span></a> module, defines classes and interfaces for applications that use SASL mechanisms. It is defined to be mechanism-neutral; an application that uses the API need not be hardwired into using any particular SASL mechanism. Applications can select the mechanism to use based on desired security features. The API supports both client and server applications. The <code class="codeph">javax.security.sasl.Sasl</code> class is used to create <code class="codeph">SaslClient</code> and <code class="codeph">SaslServer</code> objects.</p>
<p>SASL mechanism implementations are supplied in provider packages. Each provider may support one or more SASL mechanisms and is registered and invoked via the standard provider architecture.</p>
<p>The Java platform includes a built-in provider that implements the following SASL mechanisms:</p>
<ul style="list-style-type: disc;">
<li>CRAM-MD5, DIGEST-MD5, EXTERNAL, GSSAPI, NTLM, and PLAIN client mechanisms</li>
<li>CRAM-MD5, DIGEST-MD5, GSSAPI, and NTLM server mechanisms</li>
</ul>
</div>
</div>
<div class="sect3"><a id="GUID-40739A87-4E28-4195-A156-AFA008CF3B2A"></a>
<h3 id="JSSEC-GUID-40739A87-4E28-4195-A156-AFA008CF3B2A" class="sect3">Generic Security Service API and Kerberos</h3>
<div>
<p>The Java platform contains an API with the Java language bindings for the Generic Security Service Application Programming Interface (GSS-API), which is in the <code class="codeph"><a href="https://docs.oracle.com/javase/10/docs/api/java.security.jgss-summary.html" target="_blank">java.security.jgss</a></code> module. GSS-API offers application programmers uniform access to security services atop a variety of underlying security mechanisms. The Java GSS-API currently requires use of a Kerberos v5 mechanism, and the Java platform includes a built-in implementation of this mechanism. At this time, it is not possible to plug in additional mechanisms.</p>
<div class="p">
<div class="infobox-note" id="GUID-40739A87-4E28-4195-A156-AFA008CF3B2A__GUID-45ABD440-FDD0-47DB-AD11-CB3BDB67A92C">
<p class="notep1">Note:</p>
The <code class="codeph">Krb5LoginModule</code> mentioned in the section <a href="java-security-overview1.htm#GUID-F8BE6C49-3506-4D1A-8E4E-053CA439D1E2">Authentication</a> can be used in conjunction with the GSS Kerberos mechanism.</div>
</div>
<p>The Java platform also includes a built-in implementation of the Simple and Protected GSS-API Negotiation Mechanism (SPNEGO) GSS-API mechanism.</p>
<p>Before two applications can use GSS-API to securely exchange messages between them, they must establish a joint security context. The context encapsulates shared state information that might include, for example, cryptographic keys. Both applications create and use an <code class="codeph">org.ietf.jgss.GSSContext</code> object to establish and maintain the shared information that makes up the security context. Once a security context has been established, it can be used to prepare secure messages for exchange.</p>
<p>The Java GSS APIs are in the <code class="codeph">org.ietf.jgss</code> package. The Java platform also defines basic Kerberos classes, like <code class="codeph">KerberosPrincipal</code>, <code class="codeph">KerberosTicket</code>, <code class="codeph">KerberosKey</code>, and <code class="codeph">KeyTab</code>, which are located in the <code class="codeph">javax.security.auth.kerberos</code> package.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-BBEC2DC8-BA00-42B1-B52A-A49488FCF8FE"></a>
<h2 id="JSSEC-GUID-BBEC2DC8-BA00-42B1-B52A-A49488FCF8FE" class="sect2">Access Control</h2>
<div>
<p>The access control architecture in the Java platform protects access to sensitive resources (for example, local files) or sensitive application code (for example, methods in a class). All access control decisions are mediated by a security manager, represented by the <code class="codeph">java.lang.SecurityManager</code> class. A <code class="codeph">SecurityManager</code> must be installed into the Java runtime in order to activate the access control checks.</p>
<p>Java applets and Java Web Start applications are automatically run with a <code class="codeph">SecurityManager</code> installed. However, local applications executed via the <code class="codeph">java</code> command are by default not run with a <code class="codeph">SecurityManager</code> installed. In order to run local applications with a <code class="codeph">SecurityManager</code>, either the application itself must programmatically set one via the <code class="codeph">setSecurityManager</code> method (in the <code class="codeph">java.lang.System</code> class), or <code class="codeph">java</code> must be invoked with a <code class="codeph">-Djava.security.manager</code> argument on the command line.</p>
</div>
<div class="sect3"><a id="GUID-7A49C00B-BEA6-4050-9E32-6168211585F7"></a>
<h3 id="JSSEC-GUID-7A49C00B-BEA6-4050-9E32-6168211585F7" class="sect3">Permissions</h3>
<div>
<p>A permission represents access to a system resource. In order for a resource access to be allowed for an applet (or an application running with a security manager), the corresponding permission must be explicitly granted to the code attempting the access.</p>
<p>When Java code is loaded by a class loader into the Java runtime, the class loader automatically associates the following information with that code:</p>
<ul style="list-style-type: disc;">
<li>Where the code was loaded from</li>
<li>Who signed the code (if anyone)</li>
<li>Default permissions granted to the code</li>
</ul>
<p>This information is associated with the code regardless of whether the code is downloaded over an untrusted network (e.g., an applet) or loaded from the filesystem (e.g., a local application). The location from which the code was loaded is represented by a URL, the code signer is represented by the signer's certificate chain, and default permissions are represented by <code class="codeph">java.security.Permission</code> objects.</p>
<p>The default permissions automatically granted to downloaded code include the ability to make network connections back to the host from which it originated. The default permissions automatically granted to code loaded from the local filesystem include the ability to read files from the directory it came from, and also from subdirectories of that directory.</p>
<p>Note that the identity of the user executing the code is not available at class loading time. It is the responsibility of application code to authenticate the end user if necessary (see the section <a href="java-security-overview1.htm#GUID-F8BE6C49-3506-4D1A-8E4E-053CA439D1E2">Authentication</a>). Once the user has been authenticated, the application can dynamically associate that user with executing code by invoking the <code class="codeph">doAs</code> method in the <code class="codeph">javax.security.auth.Subject</code> class.</p>
</div>
</div>
<div class="sect3"><a id="GUID-5FB6B917-DDFE-42F5-9233-8E6250C1EA93"></a>
<h3 id="JSSEC-GUID-5FB6B917-DDFE-42F5-9233-8E6250C1EA93" class="sect3">Security Policy</h3>
<div>
<p>A limited set of default permissions are granted to code by class loaders. Administrators have the ability to flexibly manage additional code permissions via a security policy.</p>
<p><span>Java SE</span> encapsulates the notion of a security policy in the <code class="codeph">java.security.Policy</code> class. There is only one <code class="codeph">Policy</code> object installed into the Java runtime at any given time. The basic responsibility of the <code class="codeph">Policy</code> object is to determine whether access to a protected resource is permitted to code (characterized by where it was loaded from, who signed it, and who is executing it). How a <code class="codeph">Policy</code> object makes this determination is implementation-dependent. For example, it may consult a database containing authorization data, or it may contact another service.</p>
<p><span>Java SE</span> includes a default <code class="codeph">Policy</code> implementation that reads its authorization data from one or more ASCII (UTF-8) files configured in the security properties file. These policy files contain the exact sets of permissions granted to code: specifically, the exact sets of permissions granted to code loaded from particular locations, signed by particular entities, and executing as particular users. The policy entries in each file must conform to a documented proprietary syntax, and may be composed via a simple text editor or the graphical <code class="codeph">policytool</code> utility.</p>
<div class="infobox-note" id="GUID-5FB6B917-DDFE-42F5-9233-8E6250C1EA93__GUID-D3875F06-72F8-4E32-976D-4F0CA67889C2">
<p class="notep1">Note:</p>
The <code class="codeph">policytool</code> is deprecated and marked for removal in the next major JDK release.</div>
</div>
</div>
<div class="sect3"><a id="GUID-2779612B-8DE1-49D3-8EC3-C678C3A9FC35"></a>
<h3 id="JSSEC-GUID-2779612B-8DE1-49D3-8EC3-C678C3A9FC35" class="sect3">Access Control Enforcement</h3>
<div>
<p>The Java runtime keeps track of the sequence of Java calls that are made as a program executes. When access to a protected resource is requested, the entire call stack, by default, is evaluated to determine whether the requested access is permitted.</p>
<p>As mentioned previously, resources are protected by the <code class="codeph">SecurityManager</code>. Security-sensitive code in the JDK and in applications protects access to resources via code like the following:</p>
<pre class="codeblock" dir="ltr">
SecurityManager sm = System.getSecurityManager();
if (sm != null) {
   sm.checkPermission(perm);
}
</pre>
<p>The <span class="apiname">Permission</span> object <code class="codeph">perm</code> corresponds to the requested access. For example, if an attempt is made to read the file <code>/tmp/abc</code>, the permission may be constructed as follows:</p>
<pre class="codeblock" dir="ltr">
Permission perm = new java.io.FilePermission("/tmp/abc", "read");
</pre>
<p>The default implementation of <code class="codeph">SecurityManager</code> delegates its decision to the <code class="codeph">java.security.AccessController</code> implementation. The <code class="codeph">AccessController</code> traverses the call stack, passing to the installed security <code class="codeph">Policy</code> each code element in the stack, along with the requested permission (for example, the <code class="codeph">FilePermission</code> in the previous example). The <code class="codeph">Policy</code> determines whether the requested access is granted, based on the permissions configured by the administrator. If access is not granted, the <code class="codeph">AccessController</code> throws a <code class="codeph">java.lang.SecurityException.</code></p>
<p><a href="java-security-overview1.htm#GUID-2779612B-8DE1-49D3-8EC3-C678C3A9FC35__GUID-33C5A83F-81FF-42DA-8A2C-D726305C9F98">Figure 1-4</a> illustrates access control enforcement. In this particular example, there are initially two elements on the call stack, <code class="codeph">ClassA</code> and <code class="codeph">ClassB</code>. <code class="codeph">ClassA</code> invokes a method in <code class="codeph">ClassB</code>, which then attempts to access the file <code>/tmp/abc</code> by creating an instance of <code class="codeph">java.io.FileInputStream</code>. The <code class="codeph">FileInputStream</code> constructor creates a <code class="codeph">FilePermission</code>, <code class="codeph">perm</code>, as shown above, and then passes <code class="codeph">perm</code> to the <code class="codeph">SecurityManager</code> class's <code class="codeph">checkPermission</code> method. In this particular case, only the permissions for <code class="codeph">ClassA</code> and <code class="codeph">ClassB</code> need to be checked, because all classes in the <code class="codeph">java.base</code> module, including <code class="codeph">FileInputStream</code>, <code class="codeph">SecurityManager</code>, and <code class="codeph">AccessController</code>, automatically receives all permissions.</p>
<p>In this example, <code class="codeph">ClassA</code> and <code class="codeph">ClassB</code> have different code characteristics &ndash; they come from different locations and have different signers. Each may have been granted a different set of permissions. The <code class="codeph">AccessController</code> only grants access to the requested file if the <code class="codeph">Policy</code> indicates that both classes have been granted the required <code class="codeph">FilePermission</code>.</p>
<div class="figure" id="GUID-2779612B-8DE1-49D3-8EC3-C678C3A9FC35__GUID-33C5A83F-81FF-42DA-8A2C-D726305C9F98">
<p class="titleinfigure">Figure 1-4 Controlling Access to Resources</p>
<br />
<img width="677" height="598" src="img/controlling-access-resources.jpg" alt="Description of Figure 1-4 follows" title="Description of Figure 1-4 follows" /><br />
<a href="img_text/controlling-access-resources.htm">Description of "Figure 1-4 Controlling Access to Resources"</a><br /></div>
<!-- class="figure" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-BFC0C7D7-72B5-4DEC-ACF4-5DF4F7925303"></a>
<h2 id="JSSEC-GUID-BFC0C7D7-72B5-4DEC-ACF4-5DF4F7925303" class="sect2">XML Signature</h2>
<div>
<p>The Java XML Digital Signature API is a standard Java API for generating and validating XML Signatures.</p>
<p>XML Signatures can be applied to data of any type, XML or binary (see <a href="http://www.w3.org/TR/xmldsig-core/" target="_blank">XML Signature Syntax and Processing</a>). The resulting signature is represented in XML. An XML Signature can be used to secure your data and provide data integrity, message authentication, and signer authentication.</p>
<p>The API is designed to support all of the required or recommended features of the W3C Recommendation for XML-Signature Syntax and Processing. The API is extensible and pluggable and is based on the Java Cryptography Service Provider Architecture.</p>
<p>The Java XML Digital Signature API, which is in the <a href="https://docs.oracle.com/javase/10/docs/api/java.xml.crypto-summary.html" target="_blank"><span class="apiname">java.xml.crypto</span></a> module, consists of six packages:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">javax.xml.crypto</code></li>
<li><code class="codeph">javax.xml.crypto.dsig</code></li>
<li><code class="codeph">javax.xml.crypto.dsig.keyinfo</code></li>
<li><code class="codeph">javax.xml.crypto.dsig.spec</code></li>
<li><code class="codeph">javax.xml.crypto.dom</code></li>
<li><code class="codeph">javax.xml.crypto.dsig.dom</code></li>
</ul>
</div>
</div>
<div class="sect2"><a id="GUID-49933D9B-83AF-4A3D-94A3-00061A9A212F"></a>
<h2 id="JSSEC-GUID-49933D9B-83AF-4A3D-94A3-00061A9A212F" class="sect2">Additional Information about Java Security</h2>
<div>
<p>Find additional Java security documentation at <a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html" target="_blank">Java SE Security</a>.</p>
<div class="infobox-note" id="GUID-49933D9B-83AF-4A3D-94A3-00061A9A212F__GUID-D3F86052-D6D7-4F6A-9485-44EBB0B27F14">
<p class="notep1">Note:</p>
Historically, as new types of security services were added to <span>Java SE</span> (sometimes initially as extensions), various acronyms were used to refer to them. Since these acronyms are still in use in the Java security documentation, here is an explanation of what they represent:
<ul style="list-style-type: disc;">
<li>
<p>JSSE (Java Secure Socket Extension) refers to the SSL-related services as described in the section <a href="java-security-overview1.htm#GUID-FCF419A7-B856-46DD-A36F-C6F88F9AF37F" title="The JDK provides APIs and an implementation of the SSL, TLS, and DTLS protocols that includes functionality for data encryption, message integrity, and server and client authentication. Applications can use SSL/TLS/DTLS to provide for the secure passage of data between two peers over any application protocol, such as HTTP on top of TCP/IP.">SSL, TLS, and DTLS Protocols</a></p>
</li>
<li>
<p>JCE (Java Cryptography Extension) refers to cryptographic services as described in the section <a href="java-security-overview1.htm#GUID-C6D250FC-F147-4284-A6BF-8384DFD39DA6" title="The Java cryptography architecture is a framework for accessing and developing cryptographic functionality for the Java platform.">Java Cryptography</a></p>
</li>
<li>
<p>JAAS (Java Authentication and Authorization Service) refers to the authentication and user-based access control services as described in the sections <a href="java-security-overview1.htm#GUID-F8BE6C49-3506-4D1A-8E4E-053CA439D1E2">Authentication</a> and <a href="java-security-overview1.htm#GUID-BBEC2DC8-BA00-42B1-B52A-A49488FCF8FE" title="The access control architecture in the Java platform protects access to sensitive resources (for example, local files) or sensitive application code (for example, methods in a class). All access control decisions are mediated by a security manager, represented by the java.lang.SecurityManager class. A SecurityManager must be installed into the Java runtime in order to activate the access control checks.">Access Control</a>, respectively</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-CF323502-F719-4618-91FE-4D37CB57FF24"></a>
<h2 id="JSSEC-GUID-CF323502-F719-4618-91FE-4D37CB57FF24" class="sect2">Java Security Classes Summary</h2>
<div>
<p>The following table describes some of the names, packages, and usage of the Java security classes and interfaces..</p>
<div class="section">
<div class="tblformalwide" id="GUID-CF323502-F719-4618-91FE-4D37CB57FF24__GUID-88D2FAB1-3189-4F9E-AB5A-481276277F62">
<p class="titleintable">Table 1-3 Java security packages and classes</p>
<table class="cellalignment469" title="Java security packages and classes" summary="List of Java security packages and classes.">
<thead>
<tr class="cellalignment456">
<th class="cellalignment480" id="d5332e1279">Package</th>
<th class="cellalignment480" id="d5332e1281">Class/Interface Name</th>
<th class="cellalignment480" id="d5332e1283">Usage</th>
<th class="cellalignment480" id="d5332e1285">Module</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1289" headers="d5332e1279"><code class="codeph">java.lang</code></td>
<td class="cellalignment456" headers="d5332e1289 d5332e1281"><code class="codeph">SecurityException</code></td>
<td class="cellalignment456" headers="d5332e1289 d5332e1283">Indicates a security violation</td>
<td class="cellalignment456" headers="d5332e1289 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1301" headers="d5332e1279"><code class="codeph">java.lang</code></td>
<td class="cellalignment456" headers="d5332e1301 d5332e1281"><code class="codeph">SecurityManager</code></td>
<td class="cellalignment456" headers="d5332e1301 d5332e1283">Mediates all access control decisions</td>
<td class="cellalignment456" headers="d5332e1301 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1313" headers="d5332e1279"><code class="codeph">java.lang</code></td>
<td class="cellalignment456" headers="d5332e1313 d5332e1281"><code class="codeph">System</code></td>
<td class="cellalignment456" headers="d5332e1313 d5332e1283">Installs the SecurityManager</td>
<td class="cellalignment456" headers="d5332e1313 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1325" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1325 d5332e1281"><code class="codeph">AccessController</code></td>
<td class="cellalignment456" headers="d5332e1325 d5332e1283">Called by default implementation of SecurityManager to make access control decisions</td>
<td class="cellalignment456" headers="d5332e1325 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1337" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1337 d5332e1281"><code class="codeph">DomainLoadStoreParameter</code></td>
<td class="cellalignment456" headers="d5332e1337 d5332e1283">Stores parameters for the Domain keystore (DKS)</td>
<td class="cellalignment456" headers="d5332e1337 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1349" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1349 d5332e1281"><code class="codeph">Key</code></td>
<td class="cellalignment456" headers="d5332e1349 d5332e1283">Represents a cryptographic key</td>
<td class="cellalignment456" headers="d5332e1349 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1361" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1361 d5332e1281"><code class="codeph">KeyStore</code></td>
<td class="cellalignment456" headers="d5332e1361 d5332e1283">Represents a repository of keys and trusted certificates</td>
<td class="cellalignment456" headers="d5332e1361 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1373" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1373 d5332e1281"><code class="codeph">MessageDigest</code></td>
<td class="cellalignment456" headers="d5332e1373 d5332e1283">Represents a message digest</td>
<td class="cellalignment456" headers="d5332e1373 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1385" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1385 d5332e1281"><code class="codeph">Permission</code></td>
<td class="cellalignment456" headers="d5332e1385 d5332e1283">Represents access to a particular resource</td>
<td class="cellalignment456" headers="d5332e1385 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1397" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1397 d5332e1281"><code class="codeph">PKCS12Attribute</code></td>
<td class="cellalignment456" headers="d5332e1397 d5332e1283">Supports attributes in PKCS12 keystores</td>
<td class="cellalignment456" headers="d5332e1397 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1409" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1409 d5332e1281"><code class="codeph">Policy</code></td>
<td class="cellalignment456" headers="d5332e1409 d5332e1283">Encapsulates the security policy</td>
<td class="cellalignment456" headers="d5332e1409 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1422" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1422 d5332e1281"><code class="codeph">Provider</code></td>
<td class="cellalignment456" headers="d5332e1422 d5332e1283">Encapsulates security service implementations</td>
<td class="cellalignment456" headers="d5332e1422 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1434" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1434 d5332e1281"><code class="codeph">Security</code></td>
<td class="cellalignment456" headers="d5332e1434 d5332e1283">Manages security providers and Security Properties</td>
<td class="cellalignment456" headers="d5332e1434 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1446" headers="d5332e1279"><code class="codeph">java.security</code></td>
<td class="cellalignment456" headers="d5332e1446 d5332e1281"><code class="codeph">Signature</code></td>
<td class="cellalignment456" headers="d5332e1446 d5332e1283">Creates and verifies digital signatures</td>
<td class="cellalignment456" headers="d5332e1446 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1458" headers="d5332e1279"><code class="codeph">java.security.cert</code></td>
<td class="cellalignment456" headers="d5332e1458 d5332e1281"><code class="codeph">Certificate</code></td>
<td class="cellalignment456" headers="d5332e1458 d5332e1283">Represents a public key certificate</td>
<td class="cellalignment456" headers="d5332e1458 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1470" headers="d5332e1279"><code class="codeph">java.security.cert</code></td>
<td class="cellalignment456" headers="d5332e1470 d5332e1281"><code class="codeph">CertStore</code></td>
<td class="cellalignment456" headers="d5332e1470 d5332e1283">Represents a repository of unrelated and typically untrusted certificates</td>
<td class="cellalignment456" headers="d5332e1470 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1482" headers="d5332e1279"><code class="codeph">java.security.cert</code></td>
<td class="cellalignment456" headers="d5332e1482 d5332e1281"><code class="codeph">CRL</code></td>
<td class="cellalignment456" headers="d5332e1482 d5332e1283">Represents a CRL</td>
<td class="cellalignment456" headers="d5332e1482 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1494" headers="d5332e1279"><code class="codeph">javax.crypto</code></td>
<td class="cellalignment456" headers="d5332e1494 d5332e1281"><code class="codeph">Cipher</code></td>
<td class="cellalignment456" headers="d5332e1494 d5332e1283">Performs encryption and decryption</td>
<td class="cellalignment456" headers="d5332e1494 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1506" headers="d5332e1279"><code class="codeph">javax.crypto</code></td>
<td class="cellalignment456" headers="d5332e1506 d5332e1281"><code class="codeph">KeyAgreement</code></td>
<td class="cellalignment456" headers="d5332e1506 d5332e1283">Performs a key exchange</td>
<td class="cellalignment456" headers="d5332e1506 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1518" headers="d5332e1279"><code class="codeph">javax.net.ssl</code></td>
<td class="cellalignment456" headers="d5332e1518 d5332e1281"><code class="codeph">KeyManager</code></td>
<td class="cellalignment456" headers="d5332e1518 d5332e1283">Manages keys used to perform SSL/TLS authentication</td>
<td class="cellalignment456" headers="d5332e1518 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1530" headers="d5332e1279"><code class="codeph">javax.net.ssl</code></td>
<td class="cellalignment456" headers="d5332e1530 d5332e1281"><code class="codeph">SSLEngine</code></td>
<td class="cellalignment456" headers="d5332e1530 d5332e1283">Produces/consumes SSL/TLS packets, allowing the application freedom to choose a transport mechanism</td>
<td class="cellalignment456" headers="d5332e1530 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1542" headers="d5332e1279"><code class="codeph">javax.net.ssl</code></td>
<td class="cellalignment456" headers="d5332e1542 d5332e1281"><code class="codeph">SSLSocket</code></td>
<td class="cellalignment456" headers="d5332e1542 d5332e1283">Represents a network socket that encapsulates SSL/TLS support on top of a normal stream socket</td>
<td class="cellalignment456" headers="d5332e1542 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1555" headers="d5332e1279"><code class="codeph">javax.net.ssl</code></td>
<td class="cellalignment456" headers="d5332e1555 d5332e1281"><code class="codeph">TrustManager</code></td>
<td class="cellalignment456" headers="d5332e1555 d5332e1283">Makes decisions about who to trust in SSL/TLS interactions (for example, based on trusted certificates in key stores)</td>
<td class="cellalignment456" headers="d5332e1555 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1567" headers="d5332e1279"><code class="codeph">javax.security.auth</code></td>
<td class="cellalignment456" headers="d5332e1567 d5332e1281"><code class="codeph">Subject</code></td>
<td class="cellalignment456" headers="d5332e1567 d5332e1283">Represents a user</td>
<td class="cellalignment456" headers="d5332e1567 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1579" headers="d5332e1279"><code class="codeph">javax.security.auth.kerberos</code></td>
<td class="cellalignment456" headers="d5332e1579 d5332e1281"><code class="codeph">KerberosPrincipal</code></td>
<td class="cellalignment456" headers="d5332e1579 d5332e1283">Represents a Kerberos principal</td>
<td class="cellalignment456" headers="d5332e1579 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1591" headers="d5332e1279"><code class="codeph">javax.security.auth.kerberos</code></td>
<td class="cellalignment456" headers="d5332e1591 d5332e1281"><code class="codeph">KerberosTicket</code></td>
<td class="cellalignment456" headers="d5332e1591 d5332e1283">Represents a Kerberos ticket</td>
<td class="cellalignment456" headers="d5332e1591 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1603" headers="d5332e1279"><code class="codeph">javax.security.auth.kerberos</code></td>
<td class="cellalignment456" headers="d5332e1603 d5332e1281"><code class="codeph">KerberosKey</code></td>
<td class="cellalignment456" headers="d5332e1603 d5332e1283">Represents a Kerberos key</td>
<td class="cellalignment456" headers="d5332e1603 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1615" headers="d5332e1279"><code class="codeph">javax.security.auth.kerberos</code></td>
<td class="cellalignment456" headers="d5332e1615 d5332e1281"><code class="codeph">KerberosTab</code></td>
<td class="cellalignment456" headers="d5332e1615 d5332e1283">Represents a Kerberos keytab file</td>
<td class="cellalignment456" headers="d5332e1615 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1627" headers="d5332e1279"><code class="codeph">javax.security.auth.login</code></td>
<td class="cellalignment456" headers="d5332e1627 d5332e1281"><code class="codeph">LoginContext</code></td>
<td class="cellalignment456" headers="d5332e1627 d5332e1283">Supports pluggable authentication</td>
<td class="cellalignment456" headers="d5332e1627 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1639" headers="d5332e1279"><code class="codeph">javax.security.auth.spi</code></td>
<td class="cellalignment456" headers="d5332e1639 d5332e1281"><code class="codeph">LoginModule</code></td>
<td class="cellalignment456" headers="d5332e1639 d5332e1283">Implements a specific authentication mechanism</td>
<td class="cellalignment456" headers="d5332e1639 d5332e1285"><code class="codeph">java.base</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1651" headers="d5332e1279"><code class="codeph">javax.security.sasl</code></td>
<td class="cellalignment456" headers="d5332e1651 d5332e1281"><code class="codeph">Sasl</code></td>
<td class="cellalignment456" headers="d5332e1651 d5332e1283">Creates SaslClient and SaslServer objects</td>
<td class="cellalignment456" headers="d5332e1651 d5332e1285"><code class="codeph">java.security.sasl</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1663" headers="d5332e1279"><code class="codeph">javax.security.sasl</code></td>
<td class="cellalignment456" headers="d5332e1663 d5332e1281"><code class="codeph">SaslClient</code></td>
<td class="cellalignment456" headers="d5332e1663 d5332e1283">Performs SASL authentication as a client</td>
<td class="cellalignment456" headers="d5332e1663 d5332e1285"><code class="codeph">java.security.sasl</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1675" headers="d5332e1279"><code class="codeph">javax.security.sasl</code></td>
<td class="cellalignment456" headers="d5332e1675 d5332e1281"><code class="codeph">SaslServer</code></td>
<td class="cellalignment456" headers="d5332e1675 d5332e1283">Performs SASL authentication as a server</td>
<td class="cellalignment456" headers="d5332e1675 d5332e1285"><code class="codeph">java.security.sasl</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1688" headers="d5332e1279"><code class="codeph">org.ietf.jgss</code></td>
<td class="cellalignment456" headers="d5332e1688 d5332e1281"><code class="codeph">GSSContext</code></td>
<td class="cellalignment456" headers="d5332e1688 d5332e1283">Encapsulates a GSS-API security context and provides the security services available via the context</td>
<td class="cellalignment456" headers="d5332e1688 d5332e1285"><code class="codeph">java.security.jgss</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1700" headers="d5332e1279"><code class="codeph">com.sun.security.auth.module</code></td>
<td class="cellalignment456" headers="d5332e1700 d5332e1281"><code class="codeph">JndiLoginModule</code></td>
<td class="cellalignment456" headers="d5332e1700 d5332e1283">Performs username/password authentication using LDAP or NIS</td>
<td class="cellalignment456" headers="d5332e1700 d5332e1285"><code class="codeph">jdk.security.auth</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1712" headers="d5332e1279"><code class="codeph">com.sun.security.auth.module</code></td>
<td class="cellalignment456" headers="d5332e1712 d5332e1281"><code class="codeph">KeyStoreLoginModule</code></td>
<td class="cellalignment456" headers="d5332e1712 d5332e1283">Performs authentication based on key store login</td>
<td class="cellalignment456" headers="d5332e1712 d5332e1285"><code class="codeph">jdk.security.auth</code></td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" id="d5332e1724" headers="d5332e1279"><code class="codeph">com.sun.security.auth.module</code></td>
<td class="cellalignment456" headers="d5332e1724 d5332e1281"><code class="codeph">Krb5LoginModule</code></td>
<td class="cellalignment456" headers="d5332e1724 d5332e1283">Performs authentication using Kerberos protocols</td>
<td class="cellalignment456" headers="d5332e1724 d5332e1285"><code class="codeph">jdk.security.auth</code></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-E1A1E8ED-B39F-404B-8036-637F697B45A2"></a>
<h2 id="JSSEC-GUID-E1A1E8ED-B39F-404B-8036-637F697B45A2" class="sect2">Deprecated Security APIs Marked for Removal</h2>
<div>
<p>The following APIs are deprecated and eligible to be removed in a future release.</p>
<div class="section">
<p>You can check the API dependencies using the <code class="codeph">jdeprscan</code> tool. See <a class="olink JSWOR-GUID-2B7588B0-92DB-4A88-88D4-24D183660A62" target="_blank" href="../tools/jdeprscan.htm#JSWOR-GUID-2B7588B0-92DB-4A88-88D4-24D183660A62">jdeprscan</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
<p>The following classes are deprecated and marked for removal:</p>
<ul style="list-style-type: disc;">
<li><span class="apiname">com.sun.security.auth.PolicyFile</span></li>
<li><span class="apiname">com.sun.security.auth.SolarisNumericGroupPrincipal</span></li>
<li><span class="apiname">com.sun.security.auth.SolarisNumericUserPrincipal</span></li>
<li><span class="apiname">com.sun.security.auth.SolarisPrincipal</span></li>
<li><span class="apiname">com.sun.security.auth.X500Principal</span></li>
<li><span class="apiname">com.sun.security.auth.module.SolarisLoginModule</span></li>
<li><span class="apiname">com.sun.security.auth.module.SolarisSystem</span></li>
</ul>
The following methods are deprecated and marked for removal:
<ul style="list-style-type: disc;">
<li><span class="apiname">java.lang.SecurityManager.getInCheck</span></li>
<li><span class="apiname">java.lang.SecurityManager.checkMemberAccess</span></li>
<li><span class="apiname">java.lang.SecurityManager.classDepth</span></li>
<li><span class="apiname">java.lang.SecurityManager.currentClassLoader</span></li>
<li><span class="apiname">java.lang.SecurityManager.currentLoadedClass</span></li>
<li><span class="apiname">java.lang.SecurityManager.inClass</span></li>
<li><span class="apiname">java.lang.SecurityManager.inClassLoader</span></li>
<li><span class="apiname">java.lang.SecurityManager.checkAwtEventQueueAccess</span></li>
<li><span class="apiname">java.lang.SecurityManager.checkTopLevelWindow</span></li>
<li><span class="apiname">java.lang.SecurityManager.checkSystemClipboardAccess</span></li>
</ul>
<p>The following field is deprecated and marked for removal:</p>
<ul style="list-style-type: disc;">
<li><span class="apiname">java.lang.SecurityManager.incheck</span></li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-86FA42B9-E18B-4E2B-9F2D-7567320B53AA"></a>
<h2 id="JSSEC-GUID-86FA42B9-E18B-4E2B-9F2D-7567320B53AA" class="sect2">Security Tools Summary</h2>
<div>
<p>The following tables describe Java security and Kerberos-related tools.</p>
<div class="section">
<p>See <a class="olink JSWOR-GUID-F73EC9CE-C422-4EDB-B3E6-AA3A3A1DDB8E" target="_blank" href="../tools/security-tools-and-commands.htm#JSWOR-GUID-F73EC9CE-C422-4EDB-B3E6-AA3A3A1DDB8E">Security Tools and Commands</a> in <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
<div class="tblformal" id="GUID-86FA42B9-E18B-4E2B-9F2D-7567320B53AA__GUID-AE24FA75-05AF-41A1-83E7-C39207835A71">
<p class="titleintable">Table 1-4 Java Security Tools</p>
<table class="cellalignment466" title="Java Security Tools" summary="List of Java security tools.">
<thead>
<tr class="cellalignment456">
<th class="cellalignment467" id="d5332e1859">Tool</th>
<th class="cellalignment467" id="d5332e1861">Usage</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d5332e1865" headers="d5332e1859"><code class="codeph">jar</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d5332e1865 d5332e1861">Creates Java Archive (JAR) files</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d5332e1871" headers="d5332e1859"><code class="codeph">jarsigner</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d5332e1871 d5332e1861">Signs and verifies signatures on JAR files</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d5332e1877" headers="d5332e1859"><code class="codeph">keytool</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d5332e1877 d5332e1861">Creates and manages key stores</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d5332e1883" headers="d5332e1859"><code class="codeph">policytool</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d5332e1883 d5332e1861">Creates and edits policy files for use with default Policy implementation
<div class="infobox-note" id="GUID-86FA42B9-E18B-4E2B-9F2D-7567320B53AA__GUID-D3875F06-72F8-4E32-976D-4F0CA67889C2">
<p class="notep1">Note:</p>
<code class="codeph">policytool</code> is deprecated and marked for removal.</div>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>There are also three Kerberos-related tools that are shipped with the JDK for Windows. Equivalent functionality is provided in tools of the same name that are automatically part of the Solaris and Linux operating environments.</p>
<div class="tblformal" id="GUID-86FA42B9-E18B-4E2B-9F2D-7567320B53AA__GUID-2761073A-DA7E-4885-8B08-E15CAE52E897">
<p class="titleintable">Table 1-5 Kerberos-related Tools</p>
<table class="cellalignment466" title="Kerberos-related Tools" summary="List of Kerberos-related security tools.">
<thead>
<tr class="cellalignment456">
<th class="cellalignment467" rowspan="1" colspan="1" id="d5332e1904">Tool</th>
<th class="cellalignment467" rowspan="1" colspan="1" id="d5332e1906">Usage</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d5332e1910" headers="d5332e1904"><code class="codeph">kinit</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d5332e1910 d5332e1906">Obtains and caches Kerberos ticket-granting tickets</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d5332e1916" headers="d5332e1904"><code class="codeph">klist</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d5332e1916 d5332e1906">Lists entries in the local Kerberos credentials cache and key table</td>
</tr>
<tr class="cellalignment456">
<td class="cellalignment456" rowspan="1" colspan="1" id="d5332e1922" headers="d5332e1904"><code class="codeph">ktab</code></td>
<td class="cellalignment456" rowspan="1" colspan="1" headers="d5332e1922 d5332e1906">Manages the names and service keys stored in the local Kerberos key table</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-2EF0B3B8-9F3A-41CF-A7DA-63DB52180084"></a>
<h2 id="JSSEC-GUID-2EF0B3B8-9F3A-41CF-A7DA-63DB52180084" class="sect2">Built-In Providers</h2>
<div>
<div class="section">
<p>The <span>Java SE</span> implementation from Oracle includes a number of built-in provider packages. See <a href="oracle-providers.htm#GUID-FE2D2E28-C991-4EF9-9DBE-2A4982726313" title="This document contains the technical details of the providers that are included in the JDK. It is assumed that readers have a strong understanding of the Java Cryptography Architecture and Provider Architecture.">JDK Providers Documentation</a>.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="general-security1.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="java-se-platform-security-architecture.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
