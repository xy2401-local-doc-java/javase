<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>JAAS Authorization Tutorial</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="jaas-authentication-tutorial.htm" title="Previous" type="text/html" />
<link rel="Next" href="java-authentication-and-authorization-service-jaas-loginmodule-developers-guide1.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-D43CF965-8A5F-4A23-A2AF-F41DD5F8B411"></a> <span id="PAGE" style="display:none;">19/59</span> <!-- End Header -->
<h1 id="JSSEC-GUID-D43CF965-8A5F-4A23-A2AF-F41DD5F8B411" class="sect1">JAAS Authorization Tutorial</h1>
<div>
<p>This tutorial expands the program and policy file developed in the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial to demonstrate the JAAS authorization component, which ensures the authenticated caller has the access control rights (permissions) required to do subsequent security-sensitive operations. Since the authorization component requires that the user authentication first be completed, please read the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial first if you have not already done so.</p>
<p>The rest of this tutorial consists of the following sections:</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authorization-tutorial.htm#GUID-AA85EDBD-7866-41CF-925F-6AA329C2E161">What is JAAS Authorization?</a></li>
<li><a href="jaas-authorization-tutorial.htm#GUID-0420D2C8-DF99-43FF-929E-D44564C64F57">How is JAAS Authorization Performed?</a>
<ul style="list-style-type: disc;">
<li><a href="jaas-authorization-tutorial.htm#GUID-8BB38DE7-73AA-4560-AA28-D9CCE265AA78">How Do You Make Principal-Based Policy File Statements?</a></li>
<li><a href="jaas-authorization-tutorial.htm#GUID-BB640CDE-3EA5-4980-94F8-C821B98101FA">How Do You Associate a Subject with an Access Control Context?</a></li>
</ul>
</li>
<li><a href="jaas-authorization-tutorial.htm#GUID-C1549AAE-E32F-449C-9A05-B175A5181EF8">The Authorization Tutorial Code</a></li>
<li><a href="jaas-authorization-tutorial.htm#GUID-247D6204-446B-4B48-B376-5CD76CAFE3E7">The Login Configuration File for the JAAS Authorization Tutorial</a></li>
<li><a href="jaas-authorization-tutorial.htm#GUID-8462E46D-FF67-4630-9A87-D24EE60D100C">The Policy File</a></li>
<li><a href="jaas-authorization-tutorial.htm#GUID-04A78ED2-B68C-4C89-849D-F9BF4F17BBD1">Running the Authorization Tutorial Code</a></li>
</ul>
<p>If you want to first see the tutorial code in action, you can skip directly to <a href="jaas-authorization-tutorial.htm#GUID-04A78ED2-B68C-4C89-849D-F9BF4F17BBD1">Running the Authorization Tutorial Code</a> and then go back to the other sections to learn more.</p>
</div>
<div class="sect2"><a id="GUID-AA85EDBD-7866-41CF-925F-6AA329C2E161"></a>
<h2 id="JSSEC-GUID-AA85EDBD-7866-41CF-925F-6AA329C2E161" class="sect2">What is JAAS Authorization?</h2>
<div>
<p>JAAS authorization extends the existing Java security architecture that uses a security policy (see <a href="permissions-jdk1.htm#GUID-789089CA-8557-4017-B8B0-6899AD3BA18D">Default Policy Implementation and Policy File Syntax</a>) to specify what access rights are granted to executing code. That architecture is <span class="variable">code-centric</span>. That is, the permissions are granted based on code characteristics: where the code is coming from and whether it is digitally signed and if so by whom. We saw an example of this in the <code class="codeph">sampleacn.policy</code> file used in the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial. That file contains the following:</p>
<pre dir="ltr">
grant codebase "file:./SampleAcn.jar" {

   permission javax.security.auth.AuthPermission 
                    "createLoginContext.Sample";
};
</pre>
<p>This grants the code in the <code class="codeph">SampleAcn.jar</code> file, located in the current directory, the specified permission. (No signer is specified, so it doesn't matter whether the code is signed or not.)</p>
<p>JAAS authorization augments the existing code-centric access controls with new <span class="variable">user-centric</span> access controls. Permissions can be granted based not just on what code is running but also on <span class="variable">who</span> is running it.</p>
<p>When an application uses JAAS authentication to authenticate the user (or other entity such as a service), a <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/Subject.html" target="_blank"><span class="apiname">Subject</span></a> is created as a result. The purpose of the <span class="apiname">Subject</span> is to represent the authenticated user. A <span class="apiname">Subject</span> is comprised of a set of <a href="https://docs.oracle.com/javase/10/docs/api/java/security/Principal.html" target="_blank"><span class="apiname">Principal</span></a>s, where each <span class="apiname">Principal</span> represents an identity for that user. For example, a <span class="apiname">Subject</span> could have a name <span class="apiname">Principal</span> ("Susan Smith") and a Social Security Number <span class="apiname">Principal</span> ("987-65-4321"), thereby distinguishing this <span class="apiname">Subject</span> from other <span class="apiname">Subject</span>s.</p>
<p>Permissions can be granted in the policy to specific <span class="apiname">Principal</span>s. After the user has been authenticated, the application can associate the <span class="apiname">Subject</span> with the current access control context. For each subsequent security-checked operation (a local file access, for example), the Java runtime will automatically determine whether the policy grants the required permission only to a specific <span class="apiname">Principal</span> and if so, the operation will be allowed only if the <span class="apiname">Subject</span> associated with the access control context contains the designated <span class="apiname">Principal</span>.</p>
</div>
</div>
<div class="sect2"><a id="GUID-0420D2C8-DF99-43FF-929E-D44564C64F57"></a>
<h2 id="JSSEC-GUID-0420D2C8-DF99-43FF-929E-D44564C64F57" class="sect2">How is JAAS Authorization Performed?</h2>
<div>
<p>To make JAAS authorization take place, the following is required:</p>
<ul style="list-style-type: disc;">
<li>The user must be authenticated, as described in the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial.</li>
<li><span class="apiname">Principal</span>-based entries must be configured in the security policy; see <a href="jaas-authorization-tutorial.htm#GUID-8BB38DE7-73AA-4560-AA28-D9CCE265AA78">How Do You Make Principal-Based Policy File Statements?</a></li>
<li>The <span class="apiname">Subject</span> that is the result of authentication must be associated with the current access control context; see <a href="jaas-authorization-tutorial.htm#GUID-BB640CDE-3EA5-4980-94F8-C821B98101FA">How Do You Associate a Subject with an Access Control Context?</a>.</li>
</ul>
</div>
<div class="sect3"><a id="GUID-8BB38DE7-73AA-4560-AA28-D9CCE265AA78"></a>
<h3 id="JSSEC-GUID-8BB38DE7-73AA-4560-AA28-D9CCE265AA78" class="sect3">How Do You Make Principal-Based Policy File Statements?</h3>
<div>
<p>Policy file <code class="codeph">grant</code> statements (see <a href="permissions-jdk1.htm#GUID-789089CA-8557-4017-B8B0-6899AD3BA18D">Default Policy Implementation and Policy File Syntax</a> can now optionally include one or more <code class="codeph">Principal</code> fields. Inclusion of a <code class="codeph">Principal</code> field indicates that the user or other entity represented by the specified <code class="codeph">Principal</code>, executing the specified code, has the designated permissions.</p>
<p>Thus, the basic format of a <code class="codeph">grant</code> statement is now</p>
<pre dir="ltr">
grant &lt;<span class="variable">signer(s) field</span>&gt;, &lt;<span class="variable">codeBase URL</span>&gt; 
  &lt;<span class="variable">Principal field(s)</span>&gt; {
    permission <span class="variable">perm_class_name</span> "<span class="variable">target_name</span>", "<span class="variable">action</span>";
    ....
    permission <span class="variable">perm_class_name</span> "<span class="variable">target_name</span>", "<span class="variable">action</span>";
  };
</pre>
<p>where each of the <code class="codeph">signer</code>, <code class="codeph">codeBase</code> and <code class="codeph">Principal</code> fields is optional and the order between the fields doesn't matter.</p>
<p>A <code class="codeph">Principal</code> field looks like the following:</p>
<pre dir="ltr">
Principal <span class="variable">Principal_class</span> "<span class="variable">principal_name</span>"
</pre>
<p>That is, it is the word <code class="codeph">Principal</code> (where case doesn't matter) followed by the (fully qualified) name of a <code class="codeph">Principal</code> class and a principal name.</p>
<p>A <code class="codeph">Principal</code> class is a class that implements the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/Principal.html" target="_blank"><span class="apiname">java.security.Principal</span></a> interface. All <code class="codeph">Principal</code> objects have an associated name that can be obtained by calling their <code class="codeph">getName</code> method. The format used for the name is dependent on each <code class="codeph">Principal</code> implementation.</p>
<p>The type of <code class="codeph">Principal</code> placed in the <code class="codeph">Subject</code> created by the basic authentication mechanism used by this tutorial is <code class="codeph">SamplePrincipal</code>, so that is what should be used as the <code class="codeph"><span class="variable">Principal_class</span></code> part of our <code class="codeph">grant</code> statement's <code class="codeph">Principal</code> designation. User names for <code class="codeph">SamplePrincipal</code>s are of the form <span class="variable">name</span>, and the only user name accepted for this tutorial is <code class="codeph">testUser</code>, so the <code class="codeph"><span class="variable">principal_name</span></code> designation to use in the <code class="codeph">grant</code> statement is <code class="codeph">testUser</code>.</p>
<p>It is possible to include more than one <code class="codeph">Principal</code> field in a <code class="codeph">grant</code> statement. If multiple <code class="codeph">Principal</code> fields are specified, then the permissions in that <code class="codeph">grant</code> statement are granted only if the <code class="codeph">Subject</code> associated with the current access control context contains <span class="variable">all</span> of those <code class="codeph">Principal</code>s.</p>
<p>To grant the same set of permissions to different <code class="codeph">Principal</code>s, create multiple <code class="codeph">grant</code> statements where each lists the permissions and contains a single <code class="codeph">Principal</code> field designating one of the <code class="codeph">Principal</code>s.</p>
<p>The policy file for this tutorial includes one <code class="codeph">grant</code> statement with a <code class="codeph">Principal</code> field:</p>
<pre dir="ltr">
grant codebase "file:./SampleAction.jar",
        Principal sample.principal.SamplePrincipal "testUser" {

   permission java.util.PropertyPermission "java.home", "read";
   permission java.util.PropertyPermission "user.home", "read";
   permission java.io.FilePermission "foo.txt", "read";
};
</pre>
<p>This specifies that the indicated permissions are granted to the specified <code class="codeph">Principal</code> executing the code in <code class="codeph">SampleAction.jar</code>. (Note: the <code class="codeph">SamplePrincipal</code> class is in the <code class="codeph">sample.principal</code> package.)</p>
</div>
</div>
<div class="sect3"><a id="GUID-BB640CDE-3EA5-4980-94F8-C821B98101FA"></a>
<h3 id="JSSEC-GUID-BB640CDE-3EA5-4980-94F8-C821B98101FA" class="sect3">How Do You Associate a Subject with an Access Control Context?</h3>
<div>
<p>To create and associate a Subject with the current access control context, you need the following:</p>
<ul style="list-style-type: disc;">
<li>The user must first be authenticated, as described in <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a>.</li>
<li>The static <code class="codeph">doAs</code> method from the <span class="apiname">Subject</span> class must be called, passing it an authenticated <span class="apiname">Subject</span> and a <a href="https://docs.oracle.com/javase/10/docs/api/java/security/PrivilegedAction.html" target="_blank"><span class="apiname">java.security.PrivilegedAction</span></a> or <a href="https://docs.oracle.com/javase/10/docs/api/java/security/PrivilegedExceptionAction.html" target="_blank"><span class="apiname">java.security.PrivilegedExceptionAction</span></a>. (See <a href="java-se-platform-security-architecture.htm#GUID-BB3C8FB3-1A1A-47F3-8536-3952B84F46F2" title="This section explains what privileged code is and what it is used for. It also shows you how to use the doPrivileged API.">Appendix A: API for Privileged Blocks</a> in <a href="permissions-jdk1.htm#GUID-1E8E213A-D7F2-49F1-A2F0-EFB3397A8C95" title="A permission represents access to a system resource. In order for a resource access to be allowed for an applet (or an application running with a security manager), the corresponding permission must be explicitly granted to the code attempting the access.">Permissions in the JDK</a> for a comparison of PrivilegedAction and PrivilegedExceptionAction.) The <code class="codeph">doAs</code> method associates the provided Subject with the current access control context and then invokes the <code class="codeph">run</code> method from the action. The <code class="codeph">run</code> method implementation contains all the code to be executed as the specified Subject. The action thus executes as the specified Subject.
<p>The static <code class="codeph">doAsPrivileged</code> method from the Subject class may be called instead of the <code class="codeph">doAs</code> method, as will be done for this tutorial. In addition to the parameters passed to <code class="codeph">doAs</code>, <code class="codeph">doAsPrivileged</code> requires a third parameter: an AccessControlContext. Unlike <code class="codeph">doAs</code>, which associates the provided Subject with the current access control context, <code class="codeph">doAsPrivileged</code> associates the Subject with the provided access control context or with an empty access control context if the parameter passed in is <code class="codeph">null</code>, as is the case for this tutorial. See <a href="java-authentication-and-authorization-service-jaas-reference-guide.htm#GUID-2A935F5E-0803-411D-B6BC-F8C64D01A25C">doAs vs. doAsPrivileged</a> in the JAAS Reference Guide for a comparison of those methods.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-C1549AAE-E32F-449C-9A05-B175A5181EF8"></a>
<h2 id="JSSEC-GUID-C1549AAE-E32F-449C-9A05-B175A5181EF8" class="sect2">The Authorization Tutorial Code</h2>
<div>
<p>The code for this tutorial consists of four files:</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authorization-tutorial.htm#GUID-07EAB926-63EA-48F4-8DF0-4CC4526FA545__GUID-9AE66C05-0850-4AAF-8DD9-7D940069844F"><code>SampleAzn.java</code></a> is exactly the same as the <code class="codeph">SampleAcn.java</code> application file from the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial except for the additional code needed to call <code class="codeph">Subject.doAsPrivileged</code>.</li>
<li><a href="jaas-authorization-tutorial.htm#GUID-6ECF7E31-E49D-4DF7-B9C9-1EB62EA32510__GUID-49785CE0-3D88-480B-8F76-F87E8AB890E1"><code>SampleAction.java</code></a> contains the <code class="codeph">SampleAction</code> class. This class implements <span class="apiname">PrivilegedAction</span> and has a <code class="codeph">run</code> method that contains all the code we want to be executed with <span class="apiname">Principal</span>-based authorization checks.</li>
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-F9A208EC-3247-4320-8158-82B0E84C6A04"><code>SampleLoginModule.java</code></a> is the class specified by the tutorial's login configuration file (see <a href="jaas-authorization-tutorial.htm#GUID-247D6204-446B-4B48-B376-5CD76CAFE3E7">The Login Configuration File for the JAAS Authorization Tutorial</a>) as the class implementing the desired underlying authentication. <code class="codeph">SampleLoginModule</code>'s user authentication consists of simply verifying that the name and password specified by the user have specific values. This class was also used by the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial and will not be discussed further here.</li>
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-3EA5533B-1284-481E-A35F-C82B17837F2E"><code>SamplePrincipal.java</code></a> is a sample class implementing the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/Principal.html" target="_blank"><span class="apiname">java.security.Principal</span></a> interface. It is used by <code class="codeph">SampleLoginModule</code>. This class was also used by the JAAS Authentication tutorial and will not be discussed further here.</li>
</ul>
<p>The <code class="codeph">SampleLoginModule.java</code> and <code class="codeph">SamplePrincipal.java</code> files were also used in the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial, so they are not described further here. The other source files are described below.</p>
</div>
<div class="sect3"><a id="GUID-07EAB926-63EA-48F4-8DF0-4CC4526FA545"></a>
<h3 id="JSSEC-GUID-07EAB926-63EA-48F4-8DF0-4CC4526FA545" class="sect3">SampleAzn.java</h3>
<div>
<p>Like <code class="codeph">SampleAcn</code>, the <code class="codeph">SampleAzn</code> class instantiates a <span class="apiname">LoginContext</span> <code class="codeph">lc</code> and calls its <code class="codeph">login</code> method to perform the authentication. If successful, the authenticated <span class="apiname">Subject</span> (which includes a <span class="apiname">SamplePrincipal</span> representing the user) is obtained by calling the <span class="apiname">LoginContext</span>'s <code class="codeph">getSubject</code> method:</p>
<pre dir="ltr">
Subject mySubject = lc.getSubject();
</pre>
<p>After providing the user some information about the <span class="apiname">Subject</span>, such as which <span class="apiname">Principal</span>s it has, the <code class="codeph">main</code> method then calls <code class="codeph">Subject.doAsPrivileged</code>, passing it the authenticated <span class="apiname">Subject</span> <code class="codeph">mySubject</code>, a <span class="apiname">PrivilegedAction</span> (<code class="codeph">SampleAction</code>) and a <code class="codeph">null</code> <span class="apiname">AccessControlContext</span>, as described in the following.</p>
<p>The <code class="codeph">SampleAction</code> class is instantiated via the following:</p>
<pre dir="ltr">
PrivilegedAction action = new SampleAction();
</pre>
<p>The call to <code class="codeph">Subject.doAsPrivileged</code> is performed via:</p>
<pre dir="ltr">
Subject.doAsPrivileged(mySubject, action, null);
</pre>
<p>The <code class="codeph">doAsPrivileged</code> method invokes execution of the <code class="codeph">run</code> method in the <span class="apiname">PrivilegedAction</span> <code class="codeph">action</code> (<code class="codeph">SampleAction</code>) to initiate execution of the rest of the code, which is considered to be executed on behalf of the <span class="apiname">Subject</span> <code class="codeph">mySubject</code>.</p>
<p>Passing <code class="codeph">null</code> as the <span class="apiname">AccessControlContext</span> (third) argument to <code class="codeph">doAsPrivileged</code> indicates that <code class="codeph">mySubject</code> should be associated with a new empty <span class="apiname">AccessControlContext</span>. The result is that security checks occurring during execution of <code class="codeph">SampleAction</code> will only require permissions for the <code class="codeph">SampleAction</code> code itself (or other code it invokes), running as <code class="codeph">mySubject</code>. Note that the caller of <code class="codeph">doAsPrivileged</code> (and the callers on the execution stack at the time <code class="codeph">doAsPrivileged</code> was called) do not require any permissions while the action executes.</p>
<div class="section" id="GUID-07EAB926-63EA-48F4-8DF0-4CC4526FA545__GUID-9AE66C05-0850-4AAF-8DD9-7D940069844F">
<p class="subhead3">SampleAzn.java</p>
<pre dir="ltr">
package sample;

import java.io.*;
import java.util.*;
import java.security.Principal;
import java.security.PrivilegedAction;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.sun.security.auth.*;

/**
 * This Sample application attempts to authenticate a user
 * and executes a SampleAction as that user.
 *
 * If the user successfully authenticates itself,
 * the username and number of Credentials is displayed.
 */
public class SampleAzn {

    /**
     * Attempt to authenticate the user.
     *
     * @param args input arguments for this application.  These are ignored.
     */
     public static void main(String[] args) {

        // Obtain a LoginContext, needed for authentication. Tell it
        // to use the LoginModule implementation specified by the
        // entry named "Sample" in the JAAS login configuration
        // file and to also use the specified CallbackHandler.
        LoginContext lc = null;
        try {
            lc = new LoginContext("Sample", new MyCallbackHandler());
        } catch (LoginException le) {
            System.err.println("Cannot create LoginContext. "
                + le.getMessage());
            System.exit(-1);
        } catch (SecurityException se) {
            System.err.println("Cannot create LoginContext. "
                + se.getMessage());
            System.exit(-1);
        }

        // the user has 3 attempts to authenticate successfully
        int i;
        for (i = 0; i &lt; 3; i++) {
            try {

                // attempt authentication
                lc.login();

                // if we return with no exception, authentication succeeded
                break;

            } catch (LoginException le) {

                  System.err.println("Authentication failed:");
                  System.err.println("  " + le.getMessage());
                  try {
                      Thread.currentThread().sleep(3000);
                  } catch (Exception e) {
                      // ignore
                  }

            }
        }

        // did they fail three times?
        if (i == 3) {
            System.out.println("Sorry");
            System.exit(-1);
        }

        System.out.println("Authentication succeeded!");

        Subject mySubject = lc.getSubject();

        // let's see what Principals we have
        Iterator principalIterator = mySubject.getPrincipals().iterator();
        System.out.println("Authenticated user has the following Principals:");
        while (principalIterator.hasNext()) {
            Principal p = (Principal)principalIterator.next();
            System.out.println("\t" + p.toString());
        }

        System.out.println("User has " +
                        mySubject.getPublicCredentials().size() +
                        " Public Credential(s)");

        // now try to execute the SampleAction as the authenticated Subject
        PrivilegedAction action = new SampleAction();
        Subject.doAsPrivileged(mySubject, action, null);

        System.exit(0);
    }
}

/**
 * A CallbackHandler implemented by the application.
 *
 * This application is text-based.  Therefore it displays information
 * to the user using the OutputStreams System.out and System.err,
 * and gathers input from the user using the InputStream System.in.
 */
class MyCallbackHandler implements CallbackHandler {

    /**
     * Invoke an array of Callbacks.
     *
     * @param callbacks an array of &lt;code&gt;Callback&lt;/code&gt; objects which contain
     *                  the information requested by an underlying security
     *                  service to be retrieved or displayed.
     *
     * @exception java.io.IOException if an input or output error occurs. &lt;p&gt;
     *
     * @exception UnsupportedCallbackException if the implementation of this
     *                  method does not support one or more of the Callbacks
     *                  specified in the &lt;code&gt;callbacks&lt;/code&gt; parameter.
     */
    public void handle(Callback[] callbacks)
    throws IOException, UnsupportedCallbackException {

        for (int i = 0; i &lt; callbacks.length; i++) {
            if (callbacks[i] instanceof TextOutputCallback) {

                // display the message according to the specified type
                TextOutputCallback toc = (TextOutputCallback)callbacks[i];
                switch (toc.getMessageType()) {
                case TextOutputCallback.INFORMATION:
                    System.out.println(toc.getMessage());
                    break;
                case TextOutputCallback.ERROR:
                    System.out.println("ERROR: " + toc.getMessage());
                    break;
                case TextOutputCallback.WARNING:
                    System.out.println("WARNING: " + toc.getMessage());
                    break;
                default:
                    throw new IOException("Unsupported message type: " +
                                        toc.getMessageType());
                }

            } else if (callbacks[i] instanceof NameCallback) {

                // prompt the user for a username
                NameCallback nc = (NameCallback)callbacks[i];

                System.err.print(nc.getPrompt());
                System.err.flush();
                nc.setName((new BufferedReader
                        (new InputStreamReader(System.in))).readLine());

            } else if (callbacks[i] instanceof PasswordCallback) {

                // prompt the user for sensitive information
                PasswordCallback pc = (PasswordCallback)callbacks[i];
                System.err.print(pc.getPrompt());
                System.err.flush();
                pc.setPassword(System.console().readPassword());

            } else {
                throw new UnsupportedCallbackException
                        (callbacks[i], "Unrecognized Callback");
            }
        }
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-6ECF7E31-E49D-4DF7-B9C9-1EB62EA32510"></a>
<h3 id="JSSEC-GUID-6ECF7E31-E49D-4DF7-B9C9-1EB62EA32510" class="sect3">SampleAction.java</h3>
<div>
<p><code>SampleAction.java</code> contains the <code class="codeph">SampleAction</code> class. This class implements <code class="codeph">java.security.PrivilegedAction</code> and has a <code class="codeph">run</code> method that contains all the code we want to be executed as the Subject <code class="codeph">mySubject</code>. For this tutorial, we will perform three operations, each of which cannot be done unless code has been granted required permissions. We will:</p>
<ul style="list-style-type: disc;">
<li>Read and print the value of the <code class="codeph">java.home</code> system property,</li>
<li>Read and print the value of the <code class="codeph">user.home</code> system property, and</li>
<li>Determine whether or not a file named <code class="codeph">foo.txt</code> exists in the current directory.</li>
</ul>
<p>Here is the code:</p>
<div class="section" id="GUID-6ECF7E31-E49D-4DF7-B9C9-1EB62EA32510__GUID-49785CE0-3D88-480B-8F76-F87E8AB890E1">
<p class="subhead3">SampleAction.java</p>
<pre dir="ltr">
package sample;

import java.io.File;
import java.security.PrivilegedAction;

/**
 * This is a Sample PrivilegedAction implementation, designed to be
 * used with the Sample application.
 *
 */
public class <span class="bold">SampleAction</span> implements PrivilegedAction {

    /**
     * This Sample PrivilegedAction performs the following operations:
     * &lt;ul&gt;
     *   &lt;li&gt;Access the System property, &lt;i&gt;java.home&lt;/i&gt;&lt;/li&gt;
     *   &lt;li&gt; Access the System property, &lt;i&gt;user.home&lt;/i&gt;&lt;/li&gt;
     *   &lt;li&gt; Access the file, &lt;i&gt;foo.txt&lt;/i&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return &lt;code&gt;null&lt;/code&gt; in all cases.
     *
     * @exception SecurityException if the caller does not have permission
     *          to perform the operations listed above.
     */
    public Object run() {
        System.out.println("\nYour java.home property: "
                            +System.getProperty("java.home"));

        System.out.println("\nYour user.home property: "
                            +System.getProperty("user.home"));

        File f = new File("foo.txt");
        System.out.print("\nfoo.txt does ");
        if (!f.exists())
            System.out.print("not ");
        System.out.println("exist in the current working directory.");
        return null;
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-247D6204-446B-4B48-B376-5CD76CAFE3E7"></a>
<h2 id="JSSEC-GUID-247D6204-446B-4B48-B376-5CD76CAFE3E7" class="sect2">The Login Configuration File for the JAAS Authorization Tutorial</h2>
<div>
<p>The login configuration file used for this tutorial can be exactly the same as that used by the <a href="jaas-authentication-tutorial.htm#GUID-BFEBDB00-9826-499C-A20F-E9463883DED4">JAAS Authentication Tutorial</a> tutorial. Thus we can use the <code>sample_jaas.config</code> file, which contains just one entry:</p>
<pre dir="ltr">
<span class="bold">Sample {
  sample.module.SampleLoginModule required debug=true;
};</span>
</pre>
<p>This entry is named <code class="codeph">Sample</code> and that is the name that both our tutorial applications <code class="codeph">SampleAcn</code> and <code class="codeph">SampleAzn</code> use to refer to it. The entry specifies that the <span class="apiname">LoginModule</span> to be used to do the user authentication is the <code class="codeph">SampleLoginModule</code> in the <code class="codeph">sample.module</code> package and that this <code class="codeph">SampleLoginModule</code> is required to "succeed" in order for authentication to be considered successful. The <code class="codeph">SampleLoginModule</code> succeeds only if the name and password supplied by the user are the one it expects (<code class="codeph">testUser</code> and <code class="codeph">testPassword</code>, respectively).</p>
<p>The <span class="apiname">SampleLoginModule</span> also defines a <code class="codeph">debug</code> option that can be set to <code class="codeph">true</code> as shown. If this option is set to <code class="codeph">true,</code> <span class="apiname">SampleLoginModule</span> outputs extra information about the progress of authentication.</p>
</div>
</div>
<div class="sect2"><a id="GUID-8462E46D-FF67-4630-9A87-D24EE60D100C"></a>
<h2 id="JSSEC-GUID-8462E46D-FF67-4630-9A87-D24EE60D100C" class="sect2">The Policy File</h2>
<div>
<p>The application for this authorization tutorial consists of two classes, <code class="codeph">SampleAzn</code> and <code class="codeph">SampleAction</code>. The code in each class contains some security-sensitive operations and thus relevant permissions are required in a policy file in order for the operations to be executed.</p>
<p>The <span class="apiname">LoginModule</span> used by this tutorial, <code class="codeph">SampleLoginModule</code>, also contains an operation requiring a permission.</p>
<p>The permissions required by each of these classes are described below, followed by the full policy file.</p>
</div>
<div class="sect3"><a id="GUID-B048635B-ACC3-4049-BFAA-16F047ABA415"></a>
<h3 id="JSSEC-GUID-B048635B-ACC3-4049-BFAA-16F047ABA415" class="sect3">Permissions Required by SampleAzn</h3>
<div>
<p>The main method of the <code class="codeph">SampleAzn</code> class does two operations for which permissions are required. It</p>
<ul style="list-style-type: disc;">
<li>creates a <span class="apiname">LoginContext</span>, and</li>
<li>calls the <code class="codeph">doAsPrivileged</code> static method of the Subject class.</li>
</ul>
<p>The <span class="apiname">LoginContext</span> creation is exactly the same as was done in the authentication tutorial, and it thus needs the same <code class="codeph">javax.security.auth.AuthPermission</code> permission with target "<code class="codeph">createLoginContext.Sample</code>".</p>
<p>In order to call the <code class="codeph">doAsPrivileged</code> method of the <span class="apiname">Subject</span> class, you need to have a <code class="codeph">javax.security.auth.AuthPermission</code> with target "<code class="codeph">doAsPrivileged</code>".</p>
<p>Assuming the <code class="codeph">SampleAzn</code> class is placed in a JAR file named <code class="codeph">SampleAzn.jar</code>, these permissions can be granted to the <code class="codeph">SampleAzn</code> code via the following <code class="codeph">grant</code> statement in the policy file:</p>
<pre dir="ltr">
grant codebase "file:./SampleAzn.jar" {
   permission javax.security.auth.AuthPermission 
                    "createLoginContext.Sample";
   permission javax.security.auth.AuthPermission "doAsPrivileged";
};
</pre></div>
</div>
<div class="sect3"><a id="GUID-1C4609F2-96F3-4B8B-BFF4-1496301EA4B0"></a>
<h3 id="JSSEC-GUID-1C4609F2-96F3-4B8B-BFF4-1496301EA4B0" class="sect3">Permissions Required by SampleAction</h3>
<div>
<p>The <code class="codeph">SampleAction</code> code does three operations for which permissions are required. It</p>
<ul style="list-style-type: disc;">
<li>reads the value of the <code class="codeph">java.home</code> system property.</li>
<li>reads the value of the <code class="codeph">user.home</code> system property.</li>
<li>checks to see whether or not a file named <code class="codeph">foo.txt</code> exists in the current directory.</li>
</ul>
<p>The permissions required for these operations are the following:</p>
<pre dir="ltr">
permission java.util.PropertyPermission "java.home", "read";
permission java.util.PropertyPermission "user.home", "read";
permission java.io.FilePermission "foo.txt", "read";
</pre>
<p>We need to grant these permissions to the code in <code class="codeph">SampleAction.class</code>, which we will place in a JAR file named <code class="codeph">SampleAction.jar</code>. However, for this particular <code class="codeph">grant</code> statement we want to grant the permissions not just to the <span class="variable">code</span> but to a specific user executing the code, to demonstrate how to restrict access to a particular user.</p>
<p>Thus, as explained in <a href="jaas-authorization-tutorial.htm#GUID-8BB38DE7-73AA-4560-AA28-D9CCE265AA78">How Do You Make Principal-Based Policy File Statements?</a>, our <code class="codeph">grant</code> statement looks like the following:</p>
<pre dir="ltr">
grant codebase "file:./SampleAction.jar", Principal sample.principal.SamplePrincipal "testUser" {
    permission java.util.PropertyPermission "java.home", "read";
    permission java.util.PropertyPermission "user.home", "read";
    permission java.io.FilePermission "foo.txt", "read";
};
</pre></div>
</div>
<div class="sect3"><a id="GUID-C7890B53-2A4B-4024-8A67-23CAFC81C496"></a>
<h3 id="JSSEC-GUID-C7890B53-2A4B-4024-8A67-23CAFC81C496" class="sect3">Permissions Required by SampleLoginModule</h3>
<div>
<p>The <code class="codeph">SampleLoginModule</code> code does one operation for which permissions are required. It needs a <code class="codeph">javax.security.auth.AuthPermission</code> with target "<code class="codeph">modifyPrincipals</code>" in order to populate a <code class="codeph">Subject</code> with a <code class="codeph">Principal</code>. The grant statement is the following:</p>
<pre dir="ltr">
grant codebase "file:./SampleLM.jar" {
    permission javax.security.auth.AuthPermission "modifyPrincipals";
};
</pre></div>
</div>
<div class="sect3"><a id="GUID-3A2FF6CF-3124-4402-B550-D0F4E76B3D4D"></a>
<h3 id="JSSEC-GUID-3A2FF6CF-3124-4402-B550-D0F4E76B3D4D" class="sect3">The Full Policy File</h3>
<div>
<p>The full policy file is <code>sampleazn.policy</code>:</p>
<div class="section" id="GUID-3A2FF6CF-3124-4402-B550-D0F4E76B3D4D__GUID-6CA8F774-5E38-437D-8549-9604DEC5C317">
<p class="subhead3">sampleazn.policy</p>
<pre dir="ltr">
/* grant the sample LoginModule permissions */

grant codebase "file:./SampleAction.jar", Principal sample.principal.SamplePrincipal "testUser" {
    permission java.util.PropertyPermission "java.home", "read";
    permission java.util.PropertyPermission "user.home", "read";
    permission java.io.FilePermission "foo.txt", "read";
};

grant codebase "file:./SampleLM.jar" {
    permission javax.security.auth.AuthPermission "modifyPrincipals";
};

grant codebase "file:./SampleAcn.jar" {
   permission javax.security.auth.AuthPermission "createLoginContext.Sample";
};
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-04A78ED2-B68C-4C89-849D-F9BF4F17BBD1"></a>
<h3 id="JSSEC-GUID-04A78ED2-B68C-4C89-849D-F9BF4F17BBD1" class="sect3">Running the Authorization Tutorial Code</h3>
<div>
<p>To execute our JAAS authorization tutorial code, all you have to do is</p>
<ol>
<li>
<p>Place the following files into a directory:</p>
<ul style="list-style-type: disc;">
<li><code>sample_jaas.config</code> login configuration file (see <a href="jaas-authorization-tutorial.htm#GUID-247D6204-446B-4B48-B376-5CD76CAFE3E7">The Login Configuration File for the JAAS Authorization Tutorial</a>)</li>
<li><a href="jaas-authorization-tutorial.htm#GUID-3A2FF6CF-3124-4402-B550-D0F4E76B3D4D__GUID-6CA8F774-5E38-437D-8549-9604DEC5C317"><code>sampleazn.policy</code></a> policy file</li>
</ul>
</li>
<li>
<p>Create a subdirectory named <code>sample</code> of that top-level directory, and place the following into it (note the <code class="codeph">SampleAzn</code> and <code class="codeph">SampleAction</code> classes are in a package named <code class="codeph">sample</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authorization-tutorial.htm#GUID-07EAB926-63EA-48F4-8DF0-4CC4526FA545__GUID-9AE66C05-0850-4AAF-8DD9-7D940069844F"><code>SampleAzn.java</code></a> source file</li>
<li><a href="jaas-authorization-tutorial.htm#GUID-6ECF7E31-E49D-4DF7-B9C9-1EB62EA32510__GUID-49785CE0-3D88-480B-8F76-F87E8AB890E1"><code>SampleAction.java</code></a> source file</li>
</ul>
</li>
<li>
<p>Create a subdirectory of the <code>sample</code> directory and name it <code>module</code>. Place the following into it (note the <code class="codeph">SampleLoginModule</code> class is in a package named <code class="codeph">sample.module</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-F9A208EC-3247-4320-8158-82B0E84C6A04"><code>SampleLoginModule.java</code></a> source file</li>
</ul>
</li>
<li>
<p>Create another subdirectory of the <code>sample</code> directory and name it <code>principal</code>. Place the following into it (note the <code class="codeph">SamplePrincipal</code> class is in a package named <code class="codeph">sample.principal</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-3EA5533B-1284-481E-A35F-C82B17837F2E"><code>SamplePrincipal.java</code></a> source file</li>
</ul>
</li>
<li>
<p>While in the top-level directory, compile all the source files:</p>
<p><code class="codeph">javac sample/SampleAction.java sample/SampleAzn.java sample/module/SampleLoginModule.java sample/principal/SamplePrincipal.java</code></p>
<p>(Type all that on one line.)</p>
</li>
<li>
<p>Create a JAR file named <code class="codeph">SampleAzn.jar</code> containing <code class="codeph">SampleAzn.class</code> and <code class="codeph">MyCallbackHandler.class</code> (Note the sources for both these classes are in <code class="codeph">SampleAzn.java</code>):</p>
<p><code class="codeph">jar -cvf SampleAzn.jar sample/SampleAzn.class sample/MyCallbackHandler.class</code></p>
<p>(Type all that on one line.)</p>
</li>
<li>
<p>Create a JAR file named <code class="codeph">SampleAction.jar</code> containing <code class="codeph">SampleAction.class</code>:</p>
<p><code class="codeph">jar -cvf SampleAction.jar sample/SampleAction.class</code></p>
</li>
<li>
<p>Create a JAR file containing <code class="codeph">SampleLoginModule.class</code> and <code class="codeph">SamplePrincipal.class</code>:</p>
<p><code class="codeph">jar -cvf SampleLM.jar sample/module/SampleLoginModule.class sample/principal/SamplePrincipal.class</code></p>
</li>
<li>
<p>Execute the <code class="codeph">SampleAzn</code> application, specifying</p>
<ol>
<li>by an appropriate <code class="codeph">-classpath</code> clause that classes should be searched for in the <code class="codeph">SampleAzn.jar</code>, <code class="codeph">SampleAction.jar</code>, and <code class="codeph">SampleLM.jar</code> JAR files,</li>
<li>by <code class="codeph">-Djava.security.manager</code> that a security manager should be installed,</li>
<li>by <code class="codeph">-Djava.security.policy==sampleazn.policy</code> that the policy file to be used is <code class="codeph">sampleazn.policy</code>, and</li>
<li>by <code class="codeph">-Djava.security.auth.login.config==sample_jaas.config</code> that the login configuration file to be used is <code class="codeph">sample_jaas.config</code>.</li>
</ol>
<p>Below are the full commands to use for both Windows and Solaris, Linux, and macOS systems. The only difference is that on Windows systems you use semicolons to separate class path items, while you use colons for that purpose on Solaris, Linux, and macOS systems.</p>
<p>Here is the full command for Windows systems:</p>
<pre dir="ltr">
java -classpath SampleAzn.jar;SampleAction.jar;SampleLM.jar 
 -Djava.security.manager 
 -Djava.security.policy==sampleazn.policy 
 -Djava.security.auth.login.config==sample_jaas.config sample.SampleAzn
</pre>
<p>Here is the full command for Solaris, Linux, and macOS systems:</p>
<pre dir="ltr">
java -classpath SampleAzn.jar:SampleAction.jar:SampleLM.jar 
 -Djava.security.manager 
 -Djava.security.policy==sampleazn.policy 
 -Djava.security.auth.login.config==sample_jaas.config sample.SampleAzn
</pre>
<p>Type the full command on one line. Multiple lines are used here for legibility. If the command is too long for your system, you may need to place it in a <code>.bat</code> file (for Windows) or a <code>.sh</code> file (for Solaris, Linux, and macOS) and then run that file to execute the command.</p>
<p>You will be prompted for a user name and password (use <code class="codeph">testUser</code> and <code class="codeph">testPassword</code>), and the <code class="codeph">SampleLoginModule</code> specified in the login configuration file will check the name and password. If your login is successful, you will see the message <code class="codeph">Authentication succeeded!</code> and if not, you will see <code class="codeph">Authentication failed:</code> followed by a reason for the failure.</p>
<p>Once authentication is successfully completed, the rest of the program (in <code class="codeph">SampleAction</code>) will be executed on behalf of you, the user, requiring you to have been granted appropriate permissions. The <code class="codeph">sampleazn.policy</code> policy file grants you the required permissions, so you will see a display of the values of your <code class="codeph">java.home</code> and <code class="codeph">user.home</code> system properties and a statement as to whether or not you have a file named <code class="codeph">foo.txt</code> in the current directory.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="jaas-authentication-tutorial.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="java-authentication-and-authorization-service-jaas-loginmodule-developers-guide1.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
