<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>More Things You Can Do with Java GSS-API and JAAS</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm" title="Previous" type="text/html" />
<link rel="Next" href="kerberos-requirements1.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-B69758E7-D7B9-4860-BFA2-0429618374E8"></a> <span id="PAGE" style="display:none;">29/59</span> <!-- End Header -->
<h1 id="JSSEC-GUID-B69758E7-D7B9-4860-BFA2-0429618374E8" class="sect1">More Things You Can Do with Java GSS-API and JAAS</h1>
<div>
<p>The previous tutorial, <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-C1DFED9D-D3A1-4C11-95D8-3543935E87C8">Use of JAAS Login Utility and Java GSS-API for Secure Message Exchanges</a>, demonstrated how two applications, in particular a client and a server, could use the Java GSS-API to establish a secure context between them and then securely exchange messages.</p>
<p>There are additional operations the context acceptor (the server in our client/server example) can perform once the context has been established with the context initiator (the client). Basically, the server can "impersonate" the client. The level of impersonation depends upon whether or not the client has delegated credentials to the server.</p>
<ul style="list-style-type: disc;">
<li><a href="more-things-you-can-do-java-gss-api-and-jaas.htm#GUID-7836E843-A8F1-4C59-A5FD-BFEE3B307508">Executing Code on Behalf of the Client User</a></li>
<li><a href="more-things-you-can-do-java-gss-api-and-jaas.htm#GUID-23E84B31-CEAD-4FAC-A3EB-AD807587A502">Using Credentials Delegated from the Client</a></li>
</ul>
</div>
<div class="sect2"><a id="GUID-7836E843-A8F1-4C59-A5FD-BFEE3B307508"></a>
<h2 id="JSSEC-GUID-7836E843-A8F1-4C59-A5FD-BFEE3B307508" class="sect2">Executing Code on Behalf of the Client User</h2>
<div>
<p>One possible type of client impersonation the server can do is causing code to be executed on behalf of the same entity (user) the client code is executed on behalf of. Normally, a method executed by a thread uses the access control settings for that thread itself. However, when impersonating a client in this tutorial, the server uses the client's access control settings so that the server has access to exactly those resources that the client itself has when it runs.</p>
<p>One major benefit of the approach used in this tutorial is that the JAAS authorization component can be used for access control. Without the JAAS authorization component, the server principal would need access to any resources accessed by the code executed on behalf of the client user, and the server code would need to include access control logic to determine whether the user was authorized to access such resources. By utilizing JAAS authorization, providing principal-based access control, the access control is handled automatically. Permissions for the security-sensitive operations in such code only need to be granted to that user and not also to the server code. See the <a href="jaas-authorization.htm#GUID-69241059-CCD0-49F6-838F-DDC752F9F19F">JAAS Authorization</a> tutorial for more information on JAAS authorization.</p>
<ul style="list-style-type: disc;">
<li><a href="more-things-you-can-do-java-gss-api-and-jaas.htm#GUID-08F32421-A49E-4DB8-9FD9-CC25D398CF2D">Basic Approach</a></li>
<li><a href="more-things-you-can-do-java-gss-api-and-jaas.htm#GUID-B04626E5-C67D-4116-A7D4-4D58270BE4CB">Sample Code and Policy File</a></li>
<li><a href="more-things-you-can-do-java-gss-api-and-jaas.htm#GUID-4CD5A92F-DDD9-4464-9F42-4105B583A08B">Running the Sample Code</a></li>
</ul>
</div>
<div class="sect3"><a id="GUID-08F32421-A49E-4DB8-9FD9-CC25D398CF2D"></a>
<h3 id="JSSEC-GUID-08F32421-A49E-4DB8-9FD9-CC25D398CF2D" class="sect3">Basic Approach</h3>
<div>
<p>How does the server "impersonate" the client to execute code on behalf of the user running the client code? Essentially the same way the client code is set up to be run on behalf of that user. All the server code needs to know is the user's principal name, which it can obtain from the context established with the client.</p>
<p>Recall that JAAS authentication of the user executing the client code results in creation of a <span class="apiname">Subject</span> containing a <span class="apiname">Principal</span> with the user (principal) name. The Subject is subsequently associated with a new access control context (via a <code class="codeph">Subject.doAsPrivileged</code> call from the Login utility) and the client code is considered to be executed on behalf of the user; subsequent access control decisions are based on whether or not that particular user, executing the client code, is granted the required permissions.</p>
<p>The server code is similarly handled, except in that case the Principal specified for authentication is typically a "service principal", not a user principal. Again, a <span class="apiname">Subject</span> containing a <span class="apiname">Principal</span> with the specified principal name is created, <code class="codeph">Subject.doAsPrivileged</code> is called, and the server code is considered to be executed on behalf of the specified principal; subsequent access control decisions are based on whether or not that particular principal, executing the server code, is granted the required permissions.</p>
<p>Once the client and server have established a mutual context, the context initiator's name (the client's principal name) can be determined by the following:</p>
<pre dir="ltr">
GSSName clientGSSName = context.getSrcName();
</pre>
<p>The context acceptor (the server) can use this name to construct a <span class="apiname">Subject</span> containing a <span class="apiname">Principal</span> that represents the same entity. For example, you can construct such a <span class="apiname">Subject</span> with Oracle's JDK via the following:</p>
<pre dir="ltr">
Subject client = 
  com.sun.security.jgss.GSSUtil.createSubject(clientGSSName, null);
</pre>
<p>The <a href="https://docs.oracle.com/javase/10/docs/api/com/sun/security/jgss/GSSUtil.html#createSubject-org.ietf.jgss.GSSName-org.ietf.jgss.GSSCredential-" target="_blank"><span class="apiname">createSubject</span></a> method creates a new Subject from the GSSName and GSSCredential specified as arguments. If the server code is just going to execute code on behalf of the user in the local JVM, the user's credentials are not required &ndash; and in fact cannot even be obtained unless the client has delegated credentials to the server, as discussed in <a href="more-things-you-can-do-java-gss-api-and-jaas.htm#GUID-23E84B31-CEAD-4FAC-A3EB-AD807587A502">Using Credentials Delegated from the Client</a>. Since the credentials are not needed here, we pass a <code class="codeph">null</code> for the GSSCredential argument.</p>
<div class="infobox-note" id="GUID-08F32421-A49E-4DB8-9FD9-CC25D398CF2D__GUID-CCD1A8B1-8E91-418D-93DA-869E28C603FF">
<p class="notep1">Note:</p>
<p>Note: If you are not using Oracle's JDK, an alternative way to do this is to construct a <span class="apiname">KerberosPrincipal</span> instance as follows:</p>
<pre dir="ltr">
KerberosPrincipal principal = 
  new KerberosPrincipal(clientGSSName.toString());
</pre>
<p>Then use this principal to construct a new <span class="apiname">Subject</span> or populate this principal in the principal set of an existing <span class="apiname">Subject</span>.</p>
<p>The code that the server would like to execute on behalf of the user should be initiated from the <code class="codeph">run</code> method of a class that implements <code class="codeph">java.security.PrivilegedAction</code> (or <code class="codeph">java.security.PrivilegedExceptionAction</code>). That is, the code can either be in such a <code class="codeph">run</code> method or invoked from such a <code class="codeph">run</code> method.</p>
<p>The server code can pass the <span class="apiname">Subject</span>, along with an instance of the <span class="apiname">PrivilegedAction</span> (or <span class="apiname">PrivilegedExceptionAction</span>), to <code class="codeph">Subject.doAsPrivileged</code> to execute the subsequent code, starting with the <code class="codeph">run</code> method in the <span class="apiname">PrivilegedAction</span>, on behalf of the principal (user) in the specified Subject.</p>
<p>For example, suppose the <span class="apiname">PrivilegedAction</span> class is called <span class="apiname">ReadFileAction</span> and it takes as an argument a <span class="apiname">String</span> with the principal name. You can create an instance of this class by</p>
<pre dir="ltr">
String clientName = clientGSSName.toString();
PrivilegedAction readFile = 
    new ReadFileAction(clientName);
</pre>
<p>The call to <code class="codeph">doAsPrivileged</code> is then</p>
<pre dir="ltr">
Subject.doAsPrivileged(client, readFile, null);
</pre></div>
</div>
</div>
<div class="sect3"><a id="GUID-B04626E5-C67D-4116-A7D4-4D58270BE4CB"></a>
<h3 id="JSSEC-GUID-B04626E5-C67D-4116-A7D4-4D58270BE4CB" class="sect3">Sample Code and Policy File</h3>
<div>
<p>The following sample code and policy file illustrate the server impersonating the client in order to execute code whose security-sensitive operations are only permitted to be done by the specific user executing the client.</p>
<ul style="list-style-type: disc;">
<li><a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SAMPLESERVERIMP.JAVA-33894617"><code>SampleServerImp.java</code></a></li>
<li><a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__READFILEACTION.JAVA-33894842"><code>ReadFileAction.java</code></a></li>
<li><a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SERVERIMP.POLICY-33894A6C"><code>serverimp.policy</code></a></li>
</ul>
</div>
<div class="sect4"><a id="GUID-78C0C551-4A03-4094-8BEB-DA3D5212E509"></a>
<h4 id="JSSEC-GUID-78C0C551-4A03-4094-8BEB-DA3D5212E509" class="sect4">SampleServerImp.java</h4>
<div>
<p>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SAMPLESERVERIMP.JAVA-33894617"><code>SampleServerImp.java</code></a> file is exactly the same as the <code>SampleServer.java</code> file from the previous (<a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-C1DFED9D-D3A1-4C11-95D8-3543935E87C8">Use of JAAS Login Utility and Java GSS-API for Secure Message Exchanges</a>) tutorial, except that after exchanging messages with the client, it has the following code to perform a <code class="codeph">ReadFileAction</code> as the client user:</p>
<pre dir="ltr">
System.out.println("Impersonating client.");

/*
 * Extract the KerberosPrincipal from the client GSSName and 
 * populate it in the principal set of a new Subject. Pass in a 
 * null for credentials since credentials will not be needed.
 */
GSSName clientGSSName = <span class="bold">context.getSrcName</span>();
System.out.println("clientGSSName: " + clientGSSName);
Subject client =
   com.sun.security.jgss.GSSUtil.<span class="bold">createSubject</span>(clientGSSName,
        null);

/*
* Construct an action that will read a file meant only for the
* client
*/
String clientName = clientGSSName.toString();
PrivilegedAction readFile = 
   new <span class="bold">ReadFileAction</span>(clientName);

/*
* Invoke the action via a doAsPrivileged. This allows the
* action to be executed as the client subject, and it also 
* runs that code as privileged. This means that any permission 
* checking that happens beyond this point applies only to 
* the code being run as the client.
*/
<span class="bold">Subject.doAsPrivileged</span>(client, readFile, null);
</pre></div>
</div>
<div class="sect4"><a id="GUID-2754F056-55C4-4844-ABA5-7535B541A538"></a>
<h4 id="JSSEC-GUID-2754F056-55C4-4844-ABA5-7535B541A538" class="sect4">ReadFileAction.java</h4>
<div>
<p>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__READFILEACTION.JAVA-33894842"><code>ReadFileAction.java</code></a> file contains the <code class="codeph">ReadFileAction</code> class. Its constructor takes as an argument a <span class="apiname">String</span> for the name of the client user. The client user name is used to construct a file name for a file from which <code class="codeph">ReadFileAction</code> will attempt to read. The file name will be:</p>
<pre dir="ltr">
./data/<span class="variable">&lt;name&gt;</span>_info.txt
</pre>
<p>where <code class="codeph"><span class="variable">&lt;name&gt;</span></code> is the client user name without its corresponding realm. For example, if the full user name is <code class="codeph">mjones@KRBNT-OPERATIONS.EXAMPLE.COM</code>, then the file name is</p>
<pre dir="ltr">
./data/mjones_info.txt
</pre>
<div class="infobox-note" id="GUID-2754F056-55C4-4844-ABA5-7535B541A538__GUID-09828A7D-C3B7-40BF-9A22-8C3194F7EA76">
<p class="notep1">Note:</p>
<p>On Window, the forward slashes will be backward slashes.</p>
</div>
<p>The <code class="codeph">ReadFileAction</code> <code class="codeph">run</code> method reads the specified file and prints its contents.</p>
</div>
</div>
<div class="sect4"><a id="GUID-53271ED8-797E-4BCB-8AAB-2D8ABAAE3991"></a>
<h4 id="JSSEC-GUID-53271ED8-797E-4BCB-8AAB-2D8ABAAE3991" class="sect4">serverimp.policy</h4>
<div>
<p><span class="apiname">ReadFileAction</span> attempts to read a file, which is a security-checked operation. Since <span class="apiname">ReadFileAction</span> is considered to be executed as the client user (<span class="apiname">Principal</span>), the appropriate permission must be granted not only to the <span class="apiname">ReadFileAction</span> code itself, but to the client <span class="apiname">Principal</span> as well.</p>
<p>Assuming the <code class="codeph">ReadFileAction</code> class is placed in a JAR file named <code class="codeph">ReadFileAction.jar</code>, and the user principal name is <code class="codeph">mjones@KRBNT-OPERATIONS.EXAMPLE.COM</code>, this permission can be granted via the following in a policy file:</p>
<pre dir="ltr">
grant CodeBase "file:./ReadFileAction.jar" 
    Principal javax.security.auth.kerberos.KerberosPrincipal 
        "mjones@KRBNT-OPERATIONS.EXAMPLE.COM" {

    permission java.io.FilePermission "data/mjones_info.txt", 
        "read";
};
</pre>
<p>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SERVERIMP.POLICY-33894A6C"><code>serverimp.policy</code></a> file is exactly the same as the <code class="codeph">server.policy</code> file from the previous (<a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-C1DFED9D-D3A1-4C11-95D8-3543935E87C8">Use of JAAS Login Utility and Java GSS-API for Secure Message Exchanges</a>) tutorial, except that it grants the <span class="apiname">SampleServer</span> code the <code class="codeph">javax.security.auth.AuthPermission "doAsPrivileged"</code> permission it needs in order to call the <code class="codeph">doAsPrivileged</code> method, and it has the following placeholder for granting the <span class="apiname">FilePermission</span> shown above:</p>
<pre dir="ltr">
grant CodeBase "file:./ReadFileAction.jar" 
    Principal javax.security.auth.kerberos.KerberosPrincipal 
        "your_user_name@your_realm" {

    permission java.io.FilePermission "data/your_user_name_info.txt", 
        "read";
};
</pre>
<p>You must substitute your Kerberos realm for <code class="codeph">your_realm</code>, and your user name for <code class="codeph">your_user_name</code> in both <code class="codeph">your_user_name@your_realm</code> and <code class="codeph">data/your_user_name_info.txt</code>. If you are working on Windows, you also replace the "/" in <code class="codeph">data/your_user_name_info.txt</code> with a "\".</p>
</div>
</div>
</div>
<div class="sect3"><a id="GUID-4CD5A92F-DDD9-4464-9F42-4105B583A08B"></a>
<h3 id="JSSEC-GUID-4CD5A92F-DDD9-4464-9F42-4105B583A08B" class="sect3">Running the Sample Code</h3>
<div>
<p>To run the sample code illustrating the server impersonating the client, do everything listed in <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-07D0C8CC-0922-4B0F-B14D-9A644CB13783">Running the SampleClient and SampleServer Programs</a> in the previous tutorial, except for the following:</p>
<ul style="list-style-type: disc;">
<li>In the "Prepare <code class="codeph">SampleServer</code> for Execution" step:
<ul style="list-style-type: disc;">
<li>Use <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SAMPLESERVERIMP.JAVA-33894617"><code>SampleServerImp.java</code></a> instead of <code class="codeph">SampleServer.java</code>. Compile it and create a JAR file named <code class="codeph">SampleServerImp.jar</code> containing <code class="codeph">SampleServerImp.class</code> via the following:
<pre dir="ltr">
javac SampleServerImp.java
jar -cvf SampleServerImp.jar SampleServerImp.class
</pre></li>
<li>Use the <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SERVERIMP.POLICY-33894A6C"><code>serverimp.policy</code></a> policy file instead of <code class="codeph">server.policy</code>.</li>
<li>Use the <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__CSIMPLOGIN.CONF-37761B67"><code>csImpLogin.conf</code></a> login configuration file instead of <code class="codeph">cs.conf</code>.</li>
<li>Copy <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__READFILEACTION.JAVA-33894842"><code>ReadFileAction.java</code></a> to the same directory as the other files. Compile it and place it in a JAR file via the following:
<pre dir="ltr">
javac ReadFileAction.java
jar -cvf ReadFileAction.jar ReadFileAction.class
</pre></li>
<li>In <code class="codeph">csImpLogin.conf</code>, replace <code class="codeph">service_principal@your_realm</code> with the Kerberos name of the service principal that represents <span class="apiname">SampleServer</span> (see <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>).</li>
<li>In <code class="codeph">serverimp.policy</code>, replace <code class="codeph">service_principal@your_realm</code> in both places it appears with the Kerberos name of the service principal that represents <code class="codeph">SampleServer</code>. (The same name as that used in the login configuration file.) In addition, substitute your Kerberos realm for <code class="codeph">your_realm</code>, and your user name for <code class="codeph">your_user_name</code> in both <code class="codeph">your_user_name@your_realm</code> and <code class="codeph">data/your_user_name_info.txt</code>. If you are running on Windows, then replace the "/" in <code class="codeph">data/your_user_name_info.txt</code> with a "\".</li>
<li>Create a <code class="codeph">data</code> subdirectory of your current directory and create a short text file of the specified name in that directory. For example, if your user name is <code class="codeph">mjones</code>, the file to be placed in the data subdirectory should be named <code class="codeph">mjones_info.txt</code>.</li>
</ul>
</li>
<li>In the "Execute <code class="codeph">SampleServer</code>" step:
<ul style="list-style-type: disc;">
<li>
<p>Use the following commands instead of those specified in that section so that <code class="codeph">SampleServerImp</code> is executed, <code class="codeph">serverimp.policy</code> and <code class="codeph">csImpLogin.conf</code> are used, and <code class="codeph">ReadFileAction.jar</code> is included.</p>
<div class="infobox-note" id="GUID-4CD5A92F-DDD9-4464-9F42-4105B583A08B__GUID-EE702120-44BD-426F-817C-18158F6D293D">
<p class="notep1">Note:</p>
<p><span class="bold">Important: In these commands, you must replace <code class="codeph"><span class="variable">&lt;port_number&gt;</span></code> with an appropriate port number (a high port number such as 4444), <code class="codeph"><span class="variable">&lt;your_realm&gt;</span></code> with your Kerberos realm, and <code class="codeph"><span class="variable">&lt;your_kdc&gt;</span></code> with your Kerberos KDC.</span></p>
</div>
<p>Here is the command for Windows:</p>
<pre dir="ltr">
  java -classpath Login.jar;SampleServerImp.jar;ReadFileAction.jar 
    -Djava.security.manager 
    -Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span> 
    -Djava.security.krb5.kdc=<span class="variable">&lt;your_kdc&gt;</span> 
    -Djava.security.policy=serverimp.policy 
    -Djava.security.auth.login.config=csImpLogin.conf 
    Login SampleServerImp <span class="variable">&lt;port_number&gt;</span> 
</pre>
<p>Here is the command for Solaris, Linux, and macOS:</p>
<pre dir="ltr">
  java -classpath Login.jar:SampleServerImp.jar:ReadFileAction.jar 
    -Djava.security.manager 
    -Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span> 
    -Djava.security.krb5.kdc=<span class="variable">&lt;your_kdc&gt;</span> 
    -Djava.security.policy=serverimp.policy 
    -Djava.security.auth.login.config=csImpLogin.conf 
    Login SampleServerImp <span class="variable">&lt;port_number&gt;</span> 
</pre>
<p>As usual, type the full command on one line. Multiple lines are used here for legibility. If the command is too long for your system, you may need to place it in a .bat file (for Windows) or a .sh file (for Solaris, Linux, and macOS) and then run that file to execute the command.</p>
<p>As when running <code class="codeph">SampleServer</code>, you will be prompted for the Kerberos password for the service principal under which <code class="codeph">SampleServerImp</code> is expected to be run. The Kerberos login module specified in the login configuration file will log the service principal into Kerberos. Once authentication is successfully completed, the <code class="codeph">SampleServerImp</code> code will be executed on behalf of the service principal. It will listen for socket connections on the specified port.</p>
<p>After you follow the "Prepare <code class="codeph">SampleClient</code> for Execution" and "Execute <code class="codeph">SampleClient</code>" instructions as usual and perform the user login, the client code will request a socket connection with <code class="codeph">SampleServerImp</code>. Once <code class="codeph">SampleServerImp</code> accepts the connection, <code class="codeph">SampleClient</code> and <code class="codeph">SampleServerImp</code> establish a shared context and then exchange messages as described in the previous tutorial.</p>
<p>After the message exchange, <code class="codeph">SampleServerImp</code> determines the principal name of the user executing the client code, creates a new <span class="apiname">Subject</span> containing a <span class="apiname">Principal</span> with that name, and calls <code class="codeph">Subject.doAsPrivileged</code> to execute the code in <code class="codeph">ReadFileAction</code> on behalf of the specified user. <code class="codeph">ReadFileAction</code> reads the file named <code class="codeph">your_user_name_info.txt</code> (where <code class="codeph">your_user_name</code> represents the actual user name) in the <code class="codeph">data</code> subdirectory of the current directory, and prints out its contents.</p>
<p>For login troubleshooting suggestions, see <a href="troubleshooting.htm#GUID-2087ADBA-6C36-43D5-8841-C79FCB4F5FBE">Troubleshooting</a>.</p>
</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-23E84B31-CEAD-4FAC-A3EB-AD807587A502"></a>
<h2 id="JSSEC-GUID-23E84B31-CEAD-4FAC-A3EB-AD807587A502" class="sect2">Using Credentials Delegated from the Client</h2>
<div>
<p>The most complete type of client impersonation is possible if the client delegates its credentials to the server.</p>
<p>Recall that prior to context establishment with the context acceptor (the server in our previous tutorial), the context initiator (the client) sets various context options. If the initiator calls the <code class="codeph">requestCredDeleg</code> method on the <code class="codeph">context</code> object with a <code class="codeph">true</code> argument, as in</p>
<pre dir="ltr">
context.requestCredDeleg(true);
</pre>
<p>then this requests that the initiator's credentials be delegated to the acceptor during context establishment.</p>
<p>Delegation of credentials from the initiator to the acceptor enables the acceptor to authenticate itself as an agent or delegate of the initiator.</p>
<p>First, after context establishment, the acceptor must determine whether or not credential delegation actually took place. It does so by calling the <code class="codeph">getCredDelegState</code> method:</p>
<pre dir="ltr">
boolean delegated = context.getCredDelegState();
</pre>
<p>If credentials were delegated, the acceptor can obtain those credentials by calling the <code class="codeph">getDelegCr</code> method:</p>
<pre dir="ltr">
GSSCredential clientCr = context.getDelegCred();
</pre>
<p>The resulting <span class="apiname">GSSCredential</span> object can then be used to initiate subsequent GSS-API contexts as a "delegate" of the initiator. For example, the server could authenticate as the client to a backend server that cares more about who the original client was than who the intermediate server is.</p>
<p>Acting as the client, the server can establish a connection with the backend server, establish a joint security context, and exchange messages in basically the same manner that the client and server did.</p>
<p>One way it could be done is that when the server calls the <code class="codeph">createContext</code> method of a <span class="apiname">GSSManager</span>, it could pass <code class="codeph">createContext</code> the delegated credentials instead of passing a <code class="codeph">null</code>.</p>
<p>Alternatively, the server code could first call the <code class="codeph">com.sun.security.jgss.GSSUtil createSubject</code> method and pass it the delegated credentials. That method returns a <span class="apiname">Subject</span> containing those credentials as the default credentials. The server could then associate this <code class="codeph">Subject</code> with the current <span class="apiname">AccessControlContext</span>, as described in <a href="jaas-authorization.htm#GUID-86CC2E0C-58B9-4E35-91E1-EC130EE2E4FC">How Do You Associate a Subject with an Access Control Context?</a> in the JAAS Authorization tutorial. Then, when the server code calls the <span class="apiname">GSSManager</span> <code class="codeph">createContext</code> method, it can pass a null (indicating the credentials for the "current" Subject should be used). In other words, the server would effectively become the client. Subsequent connections to backend servers using GSS could be made exactly as described in the previous tutorials. This approach is useful if you want the code that will use the delegated credentials to be identical to the code that uses the default local credentials.</p>
<div class="section">
<p class="subhead2">Constrained Delegation</p>
<p>If constrained delegation is configured in a KDC server, then, on the server side, the <span class="apiname">getCredDelegState()</span> call might still return true and <span class="apiname">getDelegCred()</span> would return delegated credentials, depending on the KDC settings, even if the client has not called <span class="apiname">requestCredDeleg(true)</span>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-46E411CE-A04B-4489-AEC6-9AF4D569B371"></a>
<h2 id="JSSEC-GUID-46E411CE-A04B-4489-AEC6-9AF4D569B371" class="sect2">Permission Required In Order to Delegate Credentials</h2>
<div>
<p>In order to delegate credentials, the context initiator (<code class="codeph">SampleClient</code> in our previous tutorial) must have a <code class="codeph">javax.security.auth.kerberos.DelegationPermission</code>. An example using placeholders in italics for actual values is the following:</p>
<pre dir="ltr">
permission javax.security.auth.kerberos.DelegationPermission
  "\"<span class="variable">service_principal@your_realm</span>\"  
     \"krbtgt/<span class="variable">your_realm</span>@<span class="variable">your_realm</span>\"";
</pre>
<p>Note that <span class="apiname">DelegationPermission</span> has a single target in quotes that contains two items, both of which are quoted. Each inner quote is escaped by a "\". Thus the first item is</p>
<pre dir="ltr">
"<span class="variable">service_principal@your_realm</span>"
</pre>
<p>and the second is</p>
<pre dir="ltr">
"krbtgt/<span class="variable">your_realm</span>@<span class="variable">your_realm</span>"
</pre>
<p>This basically gives the code executing on behalf of the client the permission to forward a Kerberos ticket to the specified peer (<code class="codeph"><span class="variable">service_principal</span></code>), where the Kerberos ticket is meant to avail service from <code class="codeph">krbtgt/<span class="variable">your_realm</span>@<span class="variable">your_realm</span></code>.</p>
<p>Substitute your realm for all places <code class="codeph"><span class="variable">your_realm</span></code> appears. Also substitute the service principal name for the service principal representing the server for <code class="codeph"><span class="variable">service_principal@your_realm</span></code>. (See <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a> in the previous tutorial.) Suppose your realm is <code class="codeph">KRBNT-OPERATIONS.EXAMPLE.COM</code> and the service principal is <code class="codeph">sample/raven.example.com@KRBNT-OPERATIONS.EXAMPLE.COM</code>. Then the permission could appear in a policy file as</p>
<pre dir="ltr">
permission javax.security.auth.kerberos.DelegationPermission
  "\"sample/raven.example.com@KRBNT-OPERATIONS.EXAMPLE.COM\"  
     \"krbtgt/KRBNT-OPERATIONS.EXAMPLE.COM@KRBNT-OPERATIONS.EXAMPLE.COM\"";
</pre></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="kerberos-requirements1.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
