<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Use of JAAS Login Utility and Java GSS-API for Secure Message Exchanges</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="use-jaas-login-utility.htm" title="Previous" type="text/html" />
<link rel="Next" href="more-things-you-can-do-java-gss-api-and-jaas.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C1DFED9D-D3A1-4C11-95D8-3543935E87C8"></a> <span id="PAGE" style="display:none;">28/59</span> <!-- End Header -->
<h1 id="JSSEC-GUID-C1DFED9D-D3A1-4C11-95D8-3543935E87C8" class="sect1">Use of JAAS Login Utility and Java GSS-API for Secure Message Exchanges</h1>
<div>
<p>This tutorial presents two sample applications to demonstrate the use of the Java GSS-API. This API permits secure exchanges of messages between communicating applications. Here are the sample client and server applications you'll need for this tutorial:</p>
<ul style="list-style-type: disc;">
<li><a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SAMPLECLIENT.JAVA-338923E1"><code class="codeph">SampleClient.java</code></a></li>
<li><a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SAMPLESERVER.JAVA-33891DED"><code class="codeph">SampleServer.java</code></a></li>
</ul>
<div class="infobox-note" id="GUID-C1DFED9D-D3A1-4C11-95D8-3543935E87C8__GUID-14947E17-44D9-4CE2-8A0F-922A12CFEC92">
<p class="notep1">Note:</p>
<p>This tutorial uses the same client and server applications as the <a href="use-java-gss-api-secure-message-exchanges-jaas-programming.htm#GUID-42A2B80C-90CD-4C7A-8EED-8BFFE83CAF56">Use of Java GSS-API for Secure Message Exchanges Without JAAS Programming</a> tutorial. In that tutorial, JAAS (Java Authentication and Authorization Service) programming is not required. Instead, you let the underlying mechanism decide how to get credentials.</p>
</div>
<p>This tutorial uses policy files and a more complex login configuration file. The programs are run with a security manager; as a result, security-sensitive operations are not allowed unless the required permissions were explicitly granted. This tutorial also demonstrates how JAAS authorization adds <span class="italic">user-centric</span> access control that applies control based on <span class="italic">who</span> is running the code &ndash; not just on what code is running.</p>
<ul style="list-style-type: disc;">
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-A742F77E-9D77-42E1-BFB8-2DE9C6FB3051">Before You Start: Recommended Reading</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-1C2B6E45-2E2F-421C-B0D3-F034156DDAE7">Overview of the Client and Server Applications</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-3B582CD5-135F-4516-843E-1831DB25CCC4">The Login Configuration File</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-2BA7F0B7-D3E3-4B81-8E98-0A39F9763B59">The Policy Files</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-07D0C8CC-0922-4B0F-B14D-9A644CB13783">Running the SampleClient and SampleServer Programs</a></li>
</ul>
</div>
<div class="sect2"><a id="GUID-A742F77E-9D77-42E1-BFB8-2DE9C6FB3051"></a>
<h2 id="JSSEC-GUID-A742F77E-9D77-42E1-BFB8-2DE9C6FB3051" class="sect2">Before You Start: Recommended Reading</h2>
<div>
<p>In this Java GSS-API tutorial, the first step is JAAS authentication. Previous tutorials demonstrated the use of JAAS for user authentication and authorization, and presented examples of policy files and of login configuration files (specifying the underlying authentication technology to be used) that JAAS requires. Applications in the JAAS introductory tutorials, <a href="jaas-authentication.htm#GUID-0C6EB04B-D203-4688-A3E2-A7D442334623">JAAS Authentication</a> and <a href="jaas-authorization.htm#GUID-69241059-CCD0-49F6-838F-DDC752F9F19F">JAAS Authorization</a>, made direct calls to JAAS methods. The <a href="use-jaas-login-utility.htm#GUID-F41E74DF-EE54-4EB1-8609-49C6D324ADF5">Use of JAAS Login Utility</a> tutorial showed the use of a utility program that frees the application from having to do this. The client and server applications in the current tutorial also use the same utility program, so we recommend you <span class="bold">read the login utility tutorial first</span>.</p>
<p>As with all tutorials in this series, the underlying technology used to support authentication and secure communication for the applications in this tutorial is Kerberos. See <a href="kerberos-requirements1.htm#GUID-EAA2758B-3071-4CDA-AEF1-D76F5271E998">Kerberos Requirements</a>.</p>
</div>
</div>
<div class="sect2"><a id="GUID-1C2B6E45-2E2F-421C-B0D3-F034156DDAE7"></a>
<h2 id="JSSEC-GUID-1C2B6E45-2E2F-421C-B0D3-F034156DDAE7" class="sect2">Overview of the Client and Server Applications</h2>
<div>
<p>The applications for this tutorial are named <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code>.</p>
<p>Each is invoked by executing the Login utility supplied with this tutorial and passing it as arguments the name of the application (<code class="codeph">SampleClient</code> or <code class="codeph">SampleServer</code>), followed by the arguments needed by the application. The Login utility uses a JAAS <span class="apiname">LoginContext</span> to authenticate the user using Kerberos. Finally, the Login utility invokes the <code class="codeph">main</code> method of the application class, in our case either <code class="codeph">SampleClient</code> or <code class="codeph">SampleServer</code>, and passes the application its arguments.</p>
<p>Here is a summary of execution of the <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code> applications:</p>
<ol>
<li>Run the <code class="codeph">SampleServer</code> application by running the Login utility and passing it as arguments the name "<code class="codeph">SampleServer</code>" followed by the arguments for the <code class="codeph">SampleServer</code> program. The Login utility prompts you for the password for the principal that <code class="codeph">SampleServer</code> should run as. (See <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>.) After authentication is complete, <code class="codeph">SampleServer</code> is run it:
<ol>
<li>Reads its argument, the port number that it should listen on for client connections.</li>
<li>Creates a <span class="apiname">ServerSocket</span> for listening for client connections on that port.</li>
<li>Listens for a connection.</li>
</ol>
</li>
<li>Run the <code class="codeph">SampleClient</code> application (possibly on a different machine), by running the Login utility and passing it as arguments the name "<code class="codeph">SampleClient</code>" followed by the arguments for the <code class="codeph">SampleClient</code> program. The Login utility prompts you for your Kerberos name and password. After authentication is complete, <code class="codeph">SampleClient</code> is run. It
<ol>
<li>Reads its arguments: (1) The name of the Kerberos principal that represents <code class="codeph">SampleServer</code>. (See <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>.), (2) the name of the host (machine) on which <code class="codeph">SampleServer</code> is running, and (3) the port number on which <code class="codeph">SampleServer</code> listens for client connections.</li>
<li>Attempts a socket connection with the <code class="codeph">SampleServer</code>, using the host and port it was passed as arguments.</li>
</ol>
</li>
<li>The socket connection is accepted by <code class="codeph">SampleServer</code> and both applications initialize a <span class="apiname">DataInputStream</span> and a <span class="apiname">DataOutputStream</span> from the socket input and output streams, to be used for future data exchanges.</li>
<li><code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code> each instantiate a <span class="apiname">GSSContext</span> and establish a shared context that will enable subsequent secure data exchanges.</li>
<li><code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code> can now securely exchange messages.</li>
<li>When <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code> are done exchanging messages, they perform clean-up operations.</li>
</ol>
<div class="infobox-note" id="GUID-1C2B6E45-2E2F-421C-B0D3-F034156DDAE7__GUID-FF74737A-36D0-4B2D-8625-D720121B8CE2">
<p class="notep1">Note:</p>
</div>
<p>Refer to the <a href="use-java-gss-api-secure-message-exchanges-jaas-programming.htm#GUID-0DDC8ACE-7398-41C6-B061-CF3DEAB7AC86">The SampleClient and SampleServer Code</a> section of the <a href="use-java-gss-api-secure-message-exchanges-jaas-programming.htm#GUID-42A2B80C-90CD-4C7A-8EED-8BFFE83CAF56">Use of Java GSS-API for Secure Message Exchanges Without JAAS Programming</a> tutorial for a full discussion of the code used in this tutorial.</p>
</div>
</div>
<div class="sect2"><a id="GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80"></a>
<h2 id="JSSEC-GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80" class="sect2">Kerberos User and Service Principal Names</h2>
<div>
<p>Since the underlying authentication and secure communication technology used by this tutorial is Kerberos V5, we use Kerberos-style principal names wherever a user or service is called for (see <a href="java-authentication-and-authorization-service-jaas-reference-guide.htm#GUID-8FAF9739-CD62-4A47-9582-884DBF3081F0">Principals</a>).</p>
<p>For example, when you run <code class="codeph">SampleClient</code> you are asked to provide your <span class="bold">user name</span>. Your Kerberos-style user name is simply the user name you were assigned for Kerberos authentication. It consists of a base user name (like <code class="codeph">mjones</code>) followed by an "<code class="codeph">@</code>" and your realm (like <code class="codeph">mjones@KRBNT-OPERATIONS.EXAMPLE.COM</code>).</p>
<p>A server program like <code class="codeph">SampleServer</code> is typically considered to offer a "service" and to be run on behalf of a particular "<span class="bold">service principal</span>." A service principal name for <code class="codeph">SampleServer</code> is needed in several places:</p>
<ul style="list-style-type: disc;">
<li>When you run <code class="codeph">SampleServer</code> you must log in as the appropriate service principal. The login configuration file for this tutorial actually specifies the service principal name (as an option to the <span class="apiname">Krb5LoginModule</span>), so the JAAS authentication (done by the <span class="apiname">Login</span> utility) just asks you to specify the password for that service principal. If you specify the correct password, the authentication is successful, a <span class="apiname">Subject</span> is created containing a <span class="apiname">Principal</span> with the service principal name, and that <span class="apiname">Subject</span> is associated with a new access control context. The subsequently-executed code (the <code class="codeph">SampleServer</code> code) is considered to be executed on behalf of the specified principal.</li>
<li>When you run <code class="codeph">SampleClient</code>, one of the arguments is the service principal name. This is needed so <code class="codeph">SampleClient</code> can initiate establishment of a security context with the appropriate service.</li>
<li>The client and server policy files each require a <span class="apiname">ServicePermission</span> with name equal to the service principal name and action equal to "initiate" or "accept" (for initiating or accepting establishment of a security context).</li>
</ul>
<p>Throughout this document, and in the accompanying login configuration file and policy files, <code class="codeph">service_principal@your_realm</code> is used as a placeholder to be replaced by the actual name to be used in your environment. <span class="italic">Any</span> Kerberos principal can actually be used for the service principal name. So <span class="bold">for the purposes of trying out this tutorial, you could use your user name as both the client user name and the service principal name.</span></p>
<p>In a production environment, system administrators typically like servers to be run as specific principals only and may assign a particular name to be used. Often the Kerberos-style service principal name assigned is of the form</p>
<pre dir="ltr">
service_name/machine_name@realm; 
</pre>
<p>For example, an nfs service run on a machine named "raven" in the realm named <code class="codeph">KRBNT-OPERATIONS.EXAMPLE.COM</code> could have the service principal name</p>
<pre dir="ltr">
nfs/raven@KRBNT-OPERATIONS.EXAMPLE.COM
</pre>
<p>Such multi-component names are not required, however. Single-component names, just like those of user principals, can be used. For example, an installation might use the same ftp service principal <code class="codeph">ftp@realm</code> for all ftp servers in that realm, while another installation might have different ftp principals for different ftp servers, such as <code class="codeph">ftp/host1@realm</code> and <code class="codeph">ftp/host2@realm</code> on machines <code class="codeph">host1</code> and <code class="codeph">host2</code>, respectively.</p>
</div>
<div class="sect3"><a id="GUID-E863F99A-77AC-4BE8-BAC1-A7B2E77FE775"></a>
<h3 id="JSSEC-GUID-E863F99A-77AC-4BE8-BAC1-A7B2E77FE775" class="sect3">When the Realm is Required in Principal Names</h3>
<div>
<p>If the realm of a user or service principal name is the default realm (see <a href="kerberos-requirements1.htm#GUID-EAA2758B-3071-4CDA-AEF1-D76F5271E998">Kerberos Requirements</a>), you can leave off the realm when you are logging into Kerberos (that is, when you are prompted for your user name). Thus, for example, if your user name is <code class="codeph">mjones@KRBNT-OPERATIONS.EXAMPLE.COM</code>, and you run <code class="codeph">SampleClient</code>, when it requests your user name you could just specify <code class="codeph">mjones</code>, leaving off the realm. The name is interpreted in the context of being a Kerberos principal name and the default realm is appended, as needed.</p>
<p>You can also leave off the realm if a principal name will be converted to a <span class="apiname">GSSName</span> by a <span class="apiname">GSSManager</span> <code class="codeph">createName</code> method. For example, when you run <code class="codeph">SampleClient</code>, one of the arguments is the server service principal name. You can specify the name without including the realm, because <code class="codeph">SampleClient</code> passes the name to such a <code class="codeph">createName</code> method, which appends the default realm as needed.</p>
<p>It is recommended that you always include realms when principal names are used in login configuration files and policy files, because the behavior of the parsers for such files may be implementation-dependent; they may or may not append the default realm before such names are utilized and subsequent actions may fail if there is no realm in the name.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-3B582CD5-135F-4516-843E-1831DB25CCC4"></a>
<h2 id="JSSEC-GUID-3B582CD5-135F-4516-843E-1831DB25CCC4" class="sect2">The Login Configuration File</h2>
<div>
<p>Whenever JAAS is used, a login configuration is required to specify the desired authentication technology. (See <a href="appendix-b-jaas-login-configuration-file.htm#GUID-7EB80FA5-3C16-4016-AED6-0FC619F86F8E">Appendix B: JAAS Login Configuration File</a> for more information about what a login configuration file is.) Both <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code> can use the same login configuration file, if that file contains two entries, one entry for the client side and one for the server side.</p>
<p>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__CSLOGIN.CONF-33894173"><code>csLogin.conf</code></a> login configuration file used for this tutorial is the following:</p>
<pre dir="ltr">
<span class="bold">SampleClient</span> {
  com.sun.security.auth.module.Krb5LoginModule required;
};

<span class="bold">SampleServer</span> {
  com.sun.security.auth.module.Krb5LoginModule required storeKey=true 
    principal="service_principal@your_realm";
};
</pre>
<p>Note that the name for each entry matches the respective class names for our two top-level applications, <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code>. Recall that this is also the name that is passed to the Login utility that performs JAAS operations for the application. That utility expects the name of the entry to be looked up in your login configuration file to be the same as the name it is passed.</p>
<p>Both entries specify that Oracle's Kerberos V5 LoginModule must be used to successfully authenticate the user. The Krb5LoginModule succeeds only if the attempt to log in to the Kerberos KDC as a specified entity is successful. In the case of <code class="codeph">SampleClient</code>, the user will be prompted for their name and password. In the case of <code class="codeph">SampleServer</code>, a name is already supplied in this login configuration file (the specified principal, as described below) and the user running <code class="codeph">SampleServer</code> is just asked for the password for the entity specified by that name. They must specify the correct password in order for authentication to succeed.</p>
<p>The <code class="codeph">SampleServer</code> entry <span class="bold"><code class="codeph">storeKey=true</code></span> indicates that a secret key should be calculated from the password provided during login and it should be stored in the private credentials of the <span class="apiname">Subject</span> created as a result of login. This key is subsequently utilized during mutual authentication when establishing a security context between <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code>.</p>
<p>The <span class="apiname">Krb5LoginModule</span> has a <span class="bold"><code class="codeph">principal</code></span> option that can be used to specify that only the specified principal (entity/user) should be logged in for the given program. Here, the <code class="codeph">SampleClient</code> entry does not specify a principal (although it could, if desired), so the user is prompted for a user name and password and anyone with a valid user name and password can run <code class="codeph">SampleClient</code>. <code class="codeph">SampleServer</code>, on the other hand, indicates a particular principal because system administrators usually like servers to be run as specific principals only. In this case, the user running <code class="codeph">SampleServer</code> is prompted for that principal's password and must supply the correct one in order for authentication to succeed.</p>
<p>Note that you must replace <code class="codeph">service_principal@your_realm</code> with the name of the service principal that represents <code class="codeph">SampleServer</code>. (See <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>.)</p>
<p>If the server has a keytab file containing secret keys, then use the following JAAS login entry:</p>
<pre dir="ltr">
<span class="bold">SampleServer</span> {
  com.sun.security.auth.module.Krb5LoginModule required
  principal="service_principal@your_realm"
  storeKey=true useKeyTab=true keyTab=keytab.file.name
  isInitiator=false;
};
</pre>
<p>Because the keytab file already provides the keys, you will not be prompted for a password. If the keytab file contains keys for more than one service principal and the server is designed to act as all these service principals, then you can set the principal entry to the following:</p>
<pre dir="ltr">
  principal=*
</pre>
<p>See the <a href="https://docs.oracle.com/javase/10/docs/api/com/sun/security/auth/module/Krb5LoginModule.html" target="_blank"><span class="apiname">Krb5LoginModule</span></a> Javadoc API documentation for information about all the possible options that can be passed to <span class="apiname">Krb5LoginModule</span>.</p>
</div>
</div>
<div class="sect2"><a id="GUID-2BA7F0B7-D3E3-4B81-8E98-0A39F9763B59"></a>
<h2 id="JSSEC-GUID-2BA7F0B7-D3E3-4B81-8E98-0A39F9763B59" class="sect2">The Policy Files</h2>
<div>
<p>The policy file used when running <code class="codeph">SampleClient</code> is <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__CLIENT.POLICY-33894283"><code>client.policy</code></a>, and the policy file used when running <code class="codeph">SampleServer</code> is <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SERVER.POLICY-33894513"><code>server.policy</code></a>. Their contents are described below.</p>
</div>
<div class="sect3"><a id="GUID-6C3F477A-6245-48F1-B83F-3CCE8581197C"></a>
<h3 id="JSSEC-GUID-6C3F477A-6245-48F1-B83F-3CCE8581197C" class="sect3">The Client Policy File</h3>
<div class="sect4"><a id="GUID-F5030E1B-C83F-4464-BD5C-D0D04051FF12"></a>
<h4 id="JSSEC-GUID-F5030E1B-C83F-4464-BD5C-D0D04051FF12" class="sect4">Permissions Required by the Login Utility Classes</h4>
<div>
<p>A number of permissions are required by the classes in <code class="codeph">Login.java</code> (<code class="codeph">Login</code> and <code class="codeph">MyAction</code>). As recommended in <a href="use-jaas-login-utility.htm#GUID-F41E74DF-EE54-4EB1-8609-49C6D324ADF5">Use of JAAS Login Utility</a> on the use of the Login utility, we create a <code class="codeph">Login.jar</code> JAR file containing the <code class="codeph">Login.class</code> and <code class="codeph">MyAction.class</code> files and in the <code class="codeph">client.policy</code> policy file we grant <code class="codeph">Login.jar AllPermission</code>:</p>
<pre dir="ltr">
grant codebase "file:./Login.jar" {
   permission java.security.AllPermission;
};
</pre></div>
</div>
<div class="sect4"><a id="GUID-92A55C57-DA1F-492E-95F3-7FDCF84FCB34"></a>
<h4 id="JSSEC-GUID-92A55C57-DA1F-492E-95F3-7FDCF84FCB34" class="sect4">Permissions Required by SampleClient</h4>
<div>
<p>The <code class="codeph">SampleClient</code> code does two types of operations for which permissions are required. It</p>
<ul style="list-style-type: disc;">
<li>opens a socket connection with the host machine running the <code class="codeph">SampleServer</code> application.</li>
<li>initiates establishment of a security context with <code class="codeph">SampleServer</code>.</li>
</ul>
<p>The permission required to open a socket connection is</p>
<pre dir="ltr">
permission java.net.SocketPermission "*", "connect";
</pre>
<p>You may replace the "*" with the hostname or IP address of the machine that <code class="codeph">SampleServer</code> will be running on.</p>
<p>The permission(s) required to initiate establishment of a security context will depend on the underlying mechanism. This tutorial uses Kerberos as the underlying mechanism, and for that two <code class="codeph">javax.security.auth.kerberos.ServicePermission</code>s are required. A <span class="apiname">ServicePermission</span> contains a service principal name and an action (or list of actions). To initiate establishment of a security context, you need two <span class="apiname">ServicePermissions</span> with action "initiate", whose names specify:</p>
<ul style="list-style-type: disc;">
<li>the service principal name for the ticket granting service for your realm. Granting this permission essentially allows the use of Kerberos as a client.</li>
<li>the service principal name representing <code class="codeph">SampleServer</code>. (See <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>.) Granting this permission allows you to interact with the service, <code class="codeph">SampleServer</code>, using Kerberos.</li>
</ul>
<p>We want to grant the permissions to a specific authenticated user executing <code class="codeph">SampleClient</code>, so we specify both the <code class="codeph">SampleClient</code> code location (in <code class="codeph">SampleClient.jar</code>) and a Principal designation indicating the user name and realm for the user (you, the person who will run <code class="codeph">SampleClient</code>). (See <a href="jaas-authorization.htm#GUID-80F0B546-1E95-457B-8EF7-5BB1519E20A4">How Do You Make Principal-Based Policy File Statements?</a> in <a href="jaas-authorization.htm#GUID-69241059-CCD0-49F6-838F-DDC752F9F19F">JAAS Authorization</a> for information on policy file <code class="codeph">grant</code> statements that include <span class="apiname">Principal</span> designations.)</p>
<p>Here is the basic form for the <code class="codeph">grant</code> statement:</p>
<pre dir="ltr">
  grant CodeBase "file:./SampleClient.jar", 
    Principal javax.security.auth.kerberos.KerberosPrincipal 
        "your_user_name@your_realm" {

    permission java.net.SocketPermission "*", "connect";

    permission javax.security.auth.kerberos.ServicePermission
        "krbtgt/your_realm@your_realm", 
        "initiate";

    permission javax.security.auth.kerberos.ServicePermission
        "service_principal@your_realm", 
        "initiate";
};
</pre>
<p>You must substitute your Kerberos user name (complete with "@" and realm) for <code class="codeph">your_user_name@your_realm</code>. For example, if your user name is <span class="apiname">mjones</span> and your realm is <span class="apiname">KRBNT-OPERATIONS.EXAMPLE.COM</span>, you would use <span class="apiname">mjones@KRBNT-OPERATIONS.EXAMPLE.COM</span>.</p>
<p>You must also substitute your realm in <span class="apiname">krbtgt/your_realm@your_realm</span> and the service principal name for the service principal representing the server (see <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a> for the service principal name for the service principal representing the server for <code class="codeph">service_principal@your_realm</code>. Suppose the former is <span class="apiname">krbtgt/KRBNT-OPERATIONS.EXAMPLE.COM@KRBNT-OPERATIONS.EXAMPLE.COM</span> and the latter is <span class="apiname">sample/raven.example.com@KRBNT-OPERATIONS.EXAMPLE.COM</span>, and your user name is as specified in the previous paragraph. Then the <code class="codeph">grant</code> statement would be</p>
<pre dir="ltr">
grant CodeBase "file:./SampleClient.jar", 
    Principal javax.security.auth.kerberos.KerberosPrincipal 
        "mjones@KRBNT-OPERATIONS.EXAMPLE.COM" {

    permission java.net.SocketPermission "*", "connect";

    permission javax.security.auth.kerberos.ServicePermission
        "krbtgt/KRBNT-OPERATIONS.EXAMPLE.COM@KRBNT-OPERATIONS.EXAMPLE.COM", 
        "initiate";

    permission javax.security.auth.kerberos.ServicePermission
        "sample/raven.example.com@KRBNT-OPERATIONS.EXAMPLE.COM", 
        "initiate";
};
</pre></div>
</div>
</div>
<div class="sect3"><a id="GUID-9126BE63-55A5-45C0-8EDC-89A65A83271D"></a>
<h3 id="JSSEC-GUID-9126BE63-55A5-45C0-8EDC-89A65A83271D" class="sect3">The Server Policy File</h3>
<div class="sect4"><a id="GUID-D84DE593-D18A-49A6-BE6D-DD7F787527C9"></a>
<h4 id="JSSEC-GUID-D84DE593-D18A-49A6-BE6D-DD7F787527C9" class="sect4">Permissions Required by the Login Utility Classes</h4>
<div>
<p>The <code class="codeph">grant</code> statement in the server policy file for the Login classes is exactly the same as the one in the client policy file, as described in <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-F5030E1B-C83F-4464-BD5C-D0D04051FF12">Permissions Required by the Login Utility Classes</a>:</p>
<pre dir="ltr">
grant codebase "file:./Login.jar" {
   permission java.security.AllPermission;
};
</pre></div>
</div>
<div class="sect4"><a id="GUID-D4D40063-566E-489E-AB13-C5B7ADA112B9"></a>
<h4 id="JSSEC-GUID-D4D40063-566E-489E-AB13-C5B7ADA112B9" class="sect4">Permissions Required by SampleServer</h4>
<div>
<p>The <code class="codeph">SampleServer</code> code does two types of operations for which permissions are required. It</p>
<ul style="list-style-type: disc;">
<li>accepts socket connections.</li>
<li>accepts establishment of a security context, that is, it is the "acceptor" for security context establishment.</li>
</ul>
<p>The permission required to accept socket connections is</p>
<pre dir="ltr">
permission java.net.SocketPermission "*", "accept";
</pre>
<p>You may replace the "*" with the hostname or IP address of the machine that <code class="codeph">SampleClient</code> will be running on.</p>
<p>The permission required to accept establishment of a security context is</p>
<pre dir="ltr">
permission javax.security.auth.kerberos.ServicePermission
    "service_principal@your_realm", 
    "accept";
</pre>
<p>where <code class="codeph">service_principal@your_realm</code> is the Kerberos name of the service principal that represents <code class="codeph">SampleServer</code> (see <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>).</p>
<p>We want to grant the permissions to a specific authenticated user executing <code class="codeph">SampleServer</code> (the service principal considered to represent <code class="codeph">SampleServer</code>), so we specify both the <code class="codeph">SampleServer</code> code location (in <code class="codeph">SampleServer.jar</code>) and a Principal designation indicating the service principal. Suppose this name is <code class="codeph">sample/raven.example.com@KRBNT-OPERATIONS.EXAMPLE.COM</code>. Then the <code class="codeph">grant</code> statement would be</p>
<pre dir="ltr">
  grant CodeBase "file:./SampleServer.jar" 
    Principal javax.security.auth.kerberos.KerberosPrincipal 
        "sample/raven.example.com@KRBNT-OPERATIONS.EXAMPLE.COM" {

    permission java.net.SocketPermission "*", "accept";

    permission javax.security.auth.kerberos.ServicePermission
        "sample/raven.example.com@KRBNT-OPERATIONS.EXAMPLE.COM", "accept";
};
</pre></div>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-07D0C8CC-0922-4B0F-B14D-9A644CB13783"></a>
<h2 id="JSSEC-GUID-07D0C8CC-0922-4B0F-B14D-9A644CB13783" class="sect2">Running the SampleClient and SampleServer Programs</h2>
<div>
<p>To execute the <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code> programs, do the following:</p>
<ul style="list-style-type: disc;">
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-901B5429-D25C-4DAA-90BB-7665E3682D52">Prepare SampleServer for Execution</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-F72FA916-2507-479C-A2E3-89FCB25D0FE8">Prepare SampleClient for Execution</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-70ADB0E1-E036-4E40-8289-66545AD90C2F">Execute SampleServer</a></li>
<li><a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-19CC950B-FFCA-471A-918E-92559F556356">Execute SampleClient</a></li>
</ul>
</div>
<div class="sect3"><a id="GUID-901B5429-D25C-4DAA-90BB-7665E3682D52"></a>
<h3 id="JSSEC-GUID-901B5429-D25C-4DAA-90BB-7665E3682D52" class="sect3">Prepare SampleServer for Execution</h3>
<div>
<p>To prepare <code class="codeph">SampleServer</code> for execution, do the following:</p>
<ol>
<li>Copy the following files into a directory accessible by the machine on which you will run <code class="codeph">SampleServer</code>:
<ul style="list-style-type: disc;">
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__LOGIN.JAVA-338935D0"><code>Login.java</code></a> source file.</li>
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SAMPLESERVER.JAVA-33891DED"><code>SampleServer.java</code></a> source file.</li>
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__CSLOGIN.CONF-33894173"><code>csLogin.conf</code></a> login configuration file.</li>
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SERVER.POLICY-33894513"><code>server.policy</code></a> policy file.</li>
</ul>
</li>
<li>Replace <code class="codeph">service_principal@your_realm</code> in <code class="codeph">csLogin.conf</code> with the name of the service principal representing <code class="codeph">SampleServer</code> (see <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>).</li>
<li>In both places it appears, replace <code class="codeph">service_principal@your_realm</code> in <code class="codeph">server.policy</code> with the Kerberos name of the service principal that represents <code class="codeph">SampleServer</code>. (The same name as that used in the login configuration file.)</li>
<li>Compile <code class="codeph">Login.java</code> and <code class="codeph">SampleServer.java</code>:
<pre dir="ltr">
javac Login.java SampleServer.java
</pre>
<p>Note that <code class="codeph">Login.java</code> contains two classes and thus compiling <code class="codeph">Login.java</code> creates <code class="codeph">Login.class</code> and <code class="codeph">MyAction.class</code>.</p>
</li>
<li>Create a JAR file named <code class="codeph">Login.jar</code> containing <code class="codeph">Login.class and MyAction.class</code>:
<pre dir="ltr">
jar -cvf Login.jar Login.class MyAction.class
</pre></li>
<li>Create a JAR file named <code class="codeph">SampleServer.jar</code> containing <code class="codeph">SampleServer.class</code>:
<pre dir="ltr">
jar -cvf SampleServer.jar SampleServer.class
</pre></li>
</ol>
</div>
</div>
<div class="sect3"><a id="GUID-F72FA916-2507-479C-A2E3-89FCB25D0FE8"></a>
<h3 id="JSSEC-GUID-F72FA916-2507-479C-A2E3-89FCB25D0FE8" class="sect3">Prepare SampleClient for Execution</h3>
<div>
<p>To prepare <code class="codeph">SampleClient</code> for execution, do the following:</p>
<ol>
<li>Copy the following files into a directory accessible by the machine on which you will run <code class="codeph">SampleClient</code>:
<ul style="list-style-type: disc;">
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__LOGIN.JAVA-338935D0"><code>Login.java</code></a> source file.</li>
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__SAMPLECLIENT.JAVA-338923E1"><code>SampleClient.java</code></a> source file.</li>
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__CSLOGIN.CONF-33894173"><code>csLogin.conf</code></a> login configuration file.</li>
<li>The <a href="source-code-jaas-and-java-gss-api-tutorials.htm#GUID-09D4192C-D855-49D6-BC62-E08F49ADB4F8__CLIENT.POLICY-33894283"><code>client.policy</code></a> policy file.</li>
</ul>
</li>
<li>Replace parts of <code class="codeph">client.policy</code>:
<ul style="list-style-type: disc;">
<li>replace <code class="codeph">your_user_name@your_realm</code> with your user name and realm.</li>
<li>replace <code class="codeph">your_realm</code> in <code class="codeph">krbtgt/your_realm@your_realm</code> with your realm.</li>
<li>replace <code class="codeph">service_principal@your_realm</code> with the Kerberos name of the service principal that represents <code class="codeph">SampleServer</code> (see <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>).</li>
</ul>
</li>
<li>Compile <code class="codeph">Login.java</code> and <code class="codeph">SampleClient.java</code>:
<pre dir="ltr">
javac Login.java SampleClient.java
</pre></li>
<li>Create a JAR file named <code class="codeph">Login.jar</code> containing <code class="codeph">Login.class and MyAction.class</code>:
<pre dir="ltr">
jar -cvf Login.jar Login.class MyAction.class
</pre></li>
<li>Create a JAR file named <code class="codeph">SampleClient.jar</code> containing <code class="codeph">SampleClient.class</code>:
<pre dir="ltr">
jar -cvf SampleClient.jar SampleClient.class
</pre></li>
</ol>
</div>
</div>
<div class="sect3"><a id="GUID-70ADB0E1-E036-4E40-8289-66545AD90C2F"></a>
<h3 id="JSSEC-GUID-70ADB0E1-E036-4E40-8289-66545AD90C2F" class="sect3">Execute SampleServer</h3>
<div>
<p>It is important to execute <code class="codeph">SampleServer</code> before <code class="codeph">SampleClient</code> because <code class="codeph">SampleClient</code> will try to make a socket connection to <code class="codeph">SampleServer</code> and that will fail if <code class="codeph">SampleServer</code> is not yet running and accepting socket connections.</p>
<p>To execute <code class="codeph">SampleServer</code>, be sure to run it on the machine it is expected to be run on. This machine name (host name) is specified as an argument to <code class="codeph">SampleClient</code>. The service principal name appears in several places, including the login configuration file and the policy files.</p>
<p>Go to the directory in which you have prepared <code class="codeph">SampleServer</code> for execution. Execute the <code class="codeph">Login</code> class, specifying</p>
<ul style="list-style-type: disc;">
<li>by an appropriate <code class="codeph">-classpath</code> clause that classes should be searched for in the <code class="codeph">Login.jar</code> and <code class="codeph">SampleServer.jar</code> JAR files,</li>
<li>by <code class="codeph">-Djava.security.manager</code> that a security manager should be installed,</li>
<li>by <code class="codeph">-Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span></code> that your Kerberos realm is the one specified. For example, if your realm is <code class="codeph">KRBNT-OPERATIONS.EXAMPLE.COM</code> you'd put <code class="codeph">-Djava.security.krb5.realm=KRBNT-OPERATIONS.EXAMPLE.COM</code>.</li>
<li>by <code class="codeph">-Djava.security.krb5.kdc=<span class="variable">&lt;your_kdc&gt;</span></code> that your Kerberos KDC is the one specified. For example, if your KDC is <code class="codeph">samplekdc.example.com</code> you'd put <code class="codeph">-Djava.security.krb5.kdc=samplekdc.example.com</code>.</li>
<li>by <code class="codeph">-Djava.security.policy=server.policy</code> that the policy file to be used is <code class="codeph">server.policy</code>, and</li>
<li>by <code class="codeph">-Djava.security.auth.login.config=csLogin.conf</code> that the login configuration file to be used is <code class="codeph">csLogin.conf</code>.</li>
</ul>
<p>You pass the name of your application (in this case, <code class="codeph">SampleServer</code>) as an argument to Login. You then add as arguments any arguments required by your application, which in the case of <code class="codeph">SampleServer</code> is a single argument specifying the port number to be used for listening for client connections. Choose a high port number unlikely to be used for anything else. An example would be something like 4444.</p>
<p>Below are the full commands to use for Windows and Solaris, Linux, and macOS. The only difference is that Windows you use semicolons to separate class path items, while you use colons for that purpose on Solaris, Linux, and macOS.</p>
<div class="infobox-note" id="GUID-70ADB0E1-E036-4E40-8289-66545AD90C2F__GUID-B539751A-F513-41FA-A623-134F1ABEEBD4">
<p class="notep1">Note:</p>
<p><span class="bold">Important: In these commands, you must replace <code class="codeph"><span class="variable">&lt;port_number&gt;</span></code> with an appropriate port number, <code class="codeph"><span class="variable">&lt;your_realm&gt;</span></code> with your Kerberos realm, and <code class="codeph"><span class="variable">&lt;your_kdc&gt;</span></code> with your Kerberos KDC.</span></p>
</div>
<p>Here is the command for Windows:</p>
<pre dir="ltr">
java -classpath Login.jar;SampleServer.jar 
 -Djava.security.manager 
 -Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span> 
 -Djava.security.krb5.kdc=<span class="variable">&lt;your_kdc&gt;</span> 
 -Djava.security.policy=server.policy 
 -Djava.security.auth.login.config=csLogin.conf 
 Login SampleServer <span class="variable">&lt;port_number&gt;</span>
</pre>
<p>Here is the command for Solaris, Linux, and macOS:</p>
<pre dir="ltr">
java -classpath Login.jar:SampleServer.jar 
 -Djava.security.manager 
 -Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span>
 -Djava.security.krb5.kdc=<span class="variable">&lt;your_kdc&gt;</span> 
 -Djava.security.policy=server.policy 
 -Djava.security.auth.login.config=csLogin.conf 
 Login SampleServer <span class="variable">&lt;port_number&gt;</span>
</pre>
<p>Type the full command on one line. Multiple lines are used here for legibility. If the command is too long for your system, you may need to place it in a .bat file (for Windows) or a .sh file (for Solaris, Linux, and macOS) and then run that file to execute the command.</p>
<p>You will be prompted for the Kerberos password for the service principal. The underlying Kerberos authentication mechanism specified in the login configuration file will log the service principal into Kerberos. Once authentication is successfully completed, the <code class="codeph">SampleServer</code> code will be executed on behalf of the service principal. It will listen for socket connections on the specified port.</p>
<p>For login troubleshooting suggestions, see <a href="troubleshooting.htm#GUID-2087ADBA-6C36-43D5-8841-C79FCB4F5FBE">Troubleshooting</a>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-19CC950B-FFCA-471A-918E-92559F556356"></a>
<h3 id="JSSEC-GUID-19CC950B-FFCA-471A-918E-92559F556356" class="sect3">Execute SampleClient</h3>
<div>
<p>To execute <code class="codeph">SampleClient</code>, go to the directory in which you have prepared <code class="codeph">SampleClient</code> for execution. Then execute the <code class="codeph">Login</code> class, specifying</p>
<ul style="list-style-type: disc;">
<li>by an appropriate <code class="codeph">-classpath</code> clause that classes should be searched for in the <code class="codeph">Login.jar</code> and <code class="codeph">SampleClient.jar</code> JAR files,</li>
<li>by <code class="codeph">-Djava.security.manager</code> that a security manager should be installed,</li>
<li>by <code class="codeph">-Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span></code> that your Kerberos realm is the one specified.</li>
<li>by <code class="codeph">-Djava.security.krb5.kdc=<span class="variable">&lt;your_kdc&gt;</span></code> that your Kerberos KDC is the one specified.</li>
<li>by <code class="codeph">-Djava.security.policy=client.policy</code> that the policy file to be used is <code class="codeph">client.policy</code>, and</li>
<li>by <code class="codeph">-Djava.security.auth.login.config=csLogin.conf</code> that the login configuration file to be used is <code class="codeph">csLogin.conf</code>.</li>
</ul>
<p>Pass to Login the name of your application (<code class="codeph">SampleClient</code>) followed by the arguments required by <code class="codeph">SampleClient</code>. The <code class="codeph">SampleClient</code> arguments are (1) the Kerberos name of the service principal that represents <code class="codeph">SampleServer</code> (see <a href="use-jaas-login-utility-and-java-gss-api-secure-message-exchanges.htm#GUID-832A32FD-3D99-4624-86A4-7AFBF8924C80">Kerberos User and Service Principal Names</a>, (2) the name of the host (machine) on which <code class="codeph">SampleServer</code> is running, and (3) the port number on which <code class="codeph">SampleServer</code> is listening for client connections.</p>
<p>Below are the full commands to use for Windows, Solaris, Linux, and macOS.</p>
<div class="infobox-note" id="GUID-19CC950B-FFCA-471A-918E-92559F556356__GUID-8F54E144-67DF-418F-B273-76815F39CF91">
<p class="notep1">Note:</p>
</div>
<p><span class="bold">Important: In these commands, you must replace <code class="codeph"><span class="variable">&lt;service_principal&gt;</span></code>, <code class="codeph"><span class="variable">&lt;host&gt;</span></code>, <code class="codeph"><span class="variable">&lt;port_number&gt;</span></code>, <code class="codeph"><span class="variable">&lt;your_realm&gt;</span></code>, and <code class="codeph"><span class="variable">&lt;your_kdc&gt;</span></code> with appropriate values</span> (and note that the port number must be the same as the port number passed as an argument to <code class="codeph">SampleServer</code>). These values need not be placed in quotes.</p>
<p>Here is the command for Windows:</p>
<pre dir="ltr">
java -classpath Login.jar;SampleClient.jar 
 -Djava.security.manager 
 -Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span> 
 -Djava.security.krb5.kdc=<span class="variable">&lt;your_kdc&gt;</span> 
 -Djava.security.policy=client.policy 
 -Djava.security.auth.login.config=csLogin.conf 
 Login SampleClient <span class="variable">&lt;service_principal&gt;</span> <span class="variable">&lt;host&gt;</span> <span class="variable">&lt;port_number&gt;</span>
</pre>
<p>Here is the command for Solaris, Linux, and macOS:</p>
<pre dir="ltr">
java -classpath Login.jar:SampleClient.jar 
 -Djava.security.manager 
 -Djava.security.krb5.realm=<span class="variable">&lt;your_realm&gt;</span> 
 -Djava.security.krb5.kdc=<span class="variable">&lt;your_realm&gt;</span> 
 -Djava.security.policy=client.policy 
 -Djava.security.auth.login.config=csLogin.conf 
 Login SampleClient <span class="variable">&lt;service_principal&gt;</span> <span class="variable">&lt;host&gt;</span> <span class="variable">&lt;port_number&gt;</span>
</pre>
<p>Type the full command on one line. Multiple lines are used here for legibility. As with the command for executing <code class="codeph">SampleServer</code>, if the command is too long to type directly into your command window, place it in a .bat file (Microsoft Windows) or a .sh file (Solaris, Linux, and macOS) and then execute that file.</p>
<p>When prompted, type your Kerberos user name and password. The underlying Kerberos authentication mechanism specified in the login configuration file will log you into Kerberos. Once authentication is successfully completed, the <code class="codeph">SampleClient</code> code will be executed on behalf of you. It will request a socket connection with <code class="codeph">SampleServer</code>. Once <code class="codeph">SampleServer</code> accepts the connection, <code class="codeph">SampleClient</code> and <code class="codeph">SampleServer</code> establish a shared context and then exchange messages as described in this tutorial.</p>
<p>For login troubleshooting suggestions, see <a href="troubleshooting.htm#GUID-2087ADBA-6C36-43D5-8841-C79FCB4F5FBE">Troubleshooting</a>.</p>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="use-jaas-login-utility.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="more-things-you-can-do-java-gss-api-and-jaas.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
