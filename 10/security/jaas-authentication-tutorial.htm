<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>JAAS Authentication Tutorial</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="jaas-tutorials.htm" title="Previous" type="text/html" />
<link rel="Next" href="jaas-authorization-tutorial.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>

                    <script>var w=window;if(w.performance||w.mozPerformance||w.msPerformance||w.webkitPerformance){var d=document;AKSB=w.AKSB||{},AKSB.q=AKSB.q||[],AKSB.mark=AKSB.mark||function(e,_){AKSB.q.push(["mark",e,_||(new Date).getTime()])},AKSB.measure=AKSB.measure||function(e,_,t){AKSB.q.push(["measure",e,_,t||(new Date).getTime()])},AKSB.done=AKSB.done||function(e){AKSB.q.push(["done",e])},AKSB.mark("firstbyte",(new Date).getTime()),AKSB.prof={custid:"322179",ustr:"",originlat:"0",clientrtt:"1",ghostip:"23.212.3.15",ipv6:false,pct:"10",clientip:"45.78.37.67",requestid:"2af53814",region:"32996",protocol:"",blver:14,akM:"dsca",akN:"ae",akTT:"O",akTX:"1",akTI:"2af53814",ai:"206465",ra:"false",pmgn:"",pmgi:"",pmp:"",qc:""},function(e){var _=d.createElement("script");_.async="async",_.src=e;var t=d.getElementsByTagName("script"),t=t[t.length-1];t.parentNode.insertBefore(_,t)}(("https:"===d.location.protocol?"https:":"http:")+"//ds-aksb-a.akamaihd.net/aksb.min.js")}</script>
                    <script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-BFEBDB00-9826-499C-A20F-E9463883DED4"></a> <span id="PAGE" style="display:none;">18/59</span> <!-- End Header -->
<h1 id="JSSEC-GUID-BFEBDB00-9826-499C-A20F-E9463883DED4" class="sect1">JAAS Authentication Tutorial</h1>
<div>
<p>JAAS can be used for two purposes:</p>
<ul style="list-style-type: disc;">
<li>for <span class="variable">authentication</span> of users, to reliably and securely determine who is currently executing Java code, regardless of whether the code is running as an application, an applet, a bean, or a servlet; and</li>
<li>for <span class="variable">authorization</span> of users to ensure they have the access control rights (permissions) required to do the actions performed.</li>
</ul>
<p>This section provides a basic tutorial for the authentication component. The authorization component will be described in the <a href="jaas-authorization-tutorial.htm#GUID-D43CF965-8A5F-4A23-A2AF-F41DD5F8B411">JAAS Authorization Tutorial</a>.</p>
<p>JAAS authentication is performed in a <span class="variable">pluggable</span> fashion. This permits Java applications to remain independent from underlying authentication technologies. New or updated technologies can be plugged in without requiring modifications to the application itself. An implementation for a particular authentication technology to be used is determined at runtime. The implementation is specified in a login configuration file. The authentication technology used for this tutorial is very basic, just ensuring that the user specifies a particular name and password.</p>
<p>The rest of this tutorial consists of the following sections:</p>
<ol>
<li><a href="jaas-authentication-tutorial.htm#GUID-EF77AA97-CB87-4D1D-A3BF-8541FF41BA4A">The Authentication Tutorial Code</a></li>
<li><a href="jaas-authentication-tutorial.htm#GUID-987700C5-AE03-4EB1-B16A-66A1404B9604">The Login Configuration</a></li>
<li><a href="jaas-authentication-tutorial.htm#GUID-743703A2-7EC1-4391-A816-4A883FB6A017">Running the Code</a></li>
<li><a href="jaas-authentication-tutorial.htm#GUID-44F2BF3A-F51D-4F21-8F40-96CB1120396D">Running the Code with a Security Manager</a></li>
</ol>
<p>If you want to first see the tutorial code in action, you can skip directly to <a href="jaas-authentication-tutorial.htm#GUID-743703A2-7EC1-4391-A816-4A883FB6A017">Running the Code</a> and then go back to the other sections to learn about coding and configuration file details.</p>
</div>
<div class="sect2"><a id="GUID-EF77AA97-CB87-4D1D-A3BF-8541FF41BA4A"></a>
<h2 id="JSSEC-GUID-EF77AA97-CB87-4D1D-A3BF-8541FF41BA4A" class="sect2">The Authentication Tutorial Code</h2>
<div>
<p>The code for this tutorial consists of three files:</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-E007D5F4-3FA5-417A-B85F-E669839F0101__GUID-1270A0AC-EA51-4A47-B9BC-BDB42F96F5FE"><code>SampleAcn.java</code></a> contains the sample application class (<code class="codeph">SampleAcn</code>) and another class used to handle user input (<code class="codeph">MyCallbackHandler</code>). <span class="bold">The code in this file is the only code you need to understand for this tutorial. Your application will only indirectly use the other source files.</span></li>
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-F9A208EC-3247-4320-8158-82B0E84C6A04"><code>SampleLoginModule.java</code></a> is the class specified by the tutorial's login configuration file, <code>sample_jass.config</code>, described in <a href="jaas-authentication-tutorial.htm#GUID-A7E0803F-DA0B-42BF-8E25-DA5889BE847F">The Login Configuration File for the JAAS Authentication Tutorial</a> as the class implementing the desired underlying authentication. <code class="codeph">SampleLoginModule</code>'s user authentication consists of simply verifying that the name and password specified by the user have specific values.</li>
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-3EA5533B-1284-481E-A35F-C82B17837F2E"><code>SamplePrincipal.java</code></a> is a sample class implementing the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/Principal.html" target="_blank"><span class="apiname">java.security.Principal</span></a> interface. It is used by <code class="codeph">SampleLoginModule</code>.</li>
</ul>
</div>
<div class="sect3"><a id="GUID-01DE56D2-3A45-4C38-83EB-257783975372"></a>
<h3 id="JSSEC-GUID-01DE56D2-3A45-4C38-83EB-257783975372" class="sect3">SampleAcn.java</h3>
<div>
<p>Our authentication tutorial application code is contained in a single source file, <code>SampleAcn.java</code>. That file contains two classes:</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-8DE2AB48-46DC-4EDC-B6E1-93EE0E35D801">The SampleAcn Class</a></li>
<li><a href="jaas-authentication-tutorial.htm#GUID-3D19984B-76FE-4BD6-8B21-44512936DAEE">The MyCallbackHandler Class</a></li>
</ul>
</div>
<div class="sect4"><a id="GUID-8DE2AB48-46DC-4EDC-B6E1-93EE0E35D801"></a>
<h4 id="JSSEC-GUID-8DE2AB48-46DC-4EDC-B6E1-93EE0E35D801" class="sect4">The SampleAcn Class</h4>
<div>
<p>The <code class="codeph">main</code> method of the <code class="codeph">SampleAcn</code> class performs the authentication and then reports whether or not authentication succeeded.</p>
<p>The code for authenticating the user is very simple, consisting of just two steps:</p>
<ol>
<li><a href="jaas-authentication-tutorial.htm#GUID-C6F31AF5-24D6-48FD-B92C-930BFC312FDE">Instantiating a LoginContext</a></li>
<li><a href="jaas-authentication-tutorial.htm#GUID-A2D1F3BA-3CFF-498A-A1F0-9E728C5C5C51">Calling the LoginContext's login Method</a></li>
</ol>
<p>First the basic code is shown, followed by <a href="jaas-authentication-tutorial.htm#GUID-E007D5F4-3FA5-417A-B85F-E669839F0101">The Complete SampleAcn Class Code</a>, complete with the import statement it requires and error handling.</p>
</div>
<div class="sect5"><a id="GUID-C6F31AF5-24D6-48FD-B92C-930BFC312FDE"></a>
<h5 id="JSSEC-GUID-C6F31AF5-24D6-48FD-B92C-930BFC312FDE" class="sect5">Instantiating a LoginContext</h5>
<div>
<p>In order to authenticate a user, you first need a <code class="codeph">javax.security.auth.login.LoginContext</code>. Here is the basic way to instantiate a LoginContext:</p>
<pre dir="ltr">
import javax.security.auth.login.*;
. . .
LoginContext lc =
    new LoginContext(&lt;config file entry name&gt;,
           &lt;CallbackHandler to be used for user interaction&gt;);
</pre>
<p>and here is the specific way our tutorial code does the instantiation:</p>
<pre dir="ltr">
import javax.security.auth.login.*;
. . .
<span class="bold">LoginContext lc =
    new LoginContext("Sample",
          new MyCallbackHandler());</span>
</pre>
<p>The arguments are the following:</p>
<ol>
<li><span class="bold">The name of an entry in the JAAS login configuration file</span>
<p>This is the name for the <span class="apiname">LoginContext</span> to use to look up an entry for this application in the JAAS login configuration file, described in <a href="jaas-authentication-tutorial.htm#GUID-987700C5-AE03-4EB1-B16A-66A1404B9604">The Login Configuration</a>. Such an entry specifies the class(es) that implement the desired underlying authentication technology(ies). The class(es) must implement the <span class="apiname">LoginModule</span> interface, which is in the <code class="codeph">javax.security.auth.spi</code> package.</p>
<p>In our sample code, we use the <code class="codeph">SampleLoginModule</code> supplied with this tutorial. The <code class="codeph">SampleLoginModule</code> performs authentication by ensuring that the user types a particular name and password.</p>
<p>The entry in the login configuration file we use for this tutorial, <code>sample_jass.config</code> (see <a href="jaas-authentication-tutorial.htm#GUID-A7E0803F-DA0B-42BF-8E25-DA5889BE847F">The Login Configuration File for the JAAS Authentication Tutorial</a>), has the name "Sample", so that is the name we specify as the first argument to the LoginContext constructor.</p>
</li>
<li><span class="bold">A CallbackHandler instance</span>
<p>When a <span class="apiname">LoginModule</span> needs to communicate with the user, for example to ask for a user name and password, it does not do so directly. That is because there are various ways of communicating with a user, and it is desirable for <span class="apiname">LoginModule</span>s to remain independent of the different types of user interaction. Rather, the <span class="apiname">LoginModule</span> invokes a <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/callback/CallbackHandler.html" target="_blank"><span class="apiname">javax.security.auth.callback.CallbackHandler</span></a> to perform the user interaction and obtain the requested information, such as the user name and password.</p>
<p>An instance of the particular <span class="apiname">CallbackHandler</span> to be used is specified as the second argument to the <span class="apiname">LoginContext</span> constructor. The <span class="apiname">LoginContext</span> forwards that instance to the underlying <span class="apiname">LoginModule</span> (in our case <code class="codeph">SampleLoginModule</code>). An application typically provides its own <span class="apiname">CallbackHandler</span> implementation. A simple <span class="apiname">CallbackHandler</span>, <span class="apiname">TextCallbackHandler</span>, is provided in the <code class="codeph">com.sun.security.auth.callback</code> package to output information to and read input from the command line. However, we instead demonstrate the more typical case of an application providing its own <span class="apiname">CallbackHandler</span> implementation, described in <a href="jaas-authentication-tutorial.htm#GUID-3D19984B-76FE-4BD6-8B21-44512936DAEE">The MyCallbackHandler Class</a>.</p>
</li>
</ol>
</div>
</div>
<div class="sect5"><a id="GUID-A2D1F3BA-3CFF-498A-A1F0-9E728C5C5C51"></a>
<h5 id="JSSEC-GUID-A2D1F3BA-3CFF-498A-A1F0-9E728C5C5C51" class="sect5">Calling the LoginContext's login Method</h5>
<div>
<p>Once we have a <span class="apiname">LoginContext</span> <code class="codeph">lc</code>, we can call its <code class="codeph">login</code> method to carry out the authentication process:</p>
<pre dir="ltr">
<span class="bold">lc.login();</span>
</pre>
<p>The <span class="apiname">LoginContext</span> instantiates a new empty <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/Subject.html" target="_blank"><span class="apiname">javax.security.auth.Subject</span></a> object (which represents the user or service being authenticated; see <a href="java-authentication-and-authorization-service-jaas-reference-guide.htm#GUID-804BDE80-9E66-421C-BF0A-A96FBE7DE4E3">Subject</a>). The <span class="apiname">LoginContext</span> constructs the configured <span class="apiname">LoginModule</span> (in our case <code class="codeph">SampleLoginModule</code>) and initializes it with this new <span class="apiname">Subject</span> and <code class="codeph">MyCallbackHandler</code>.</p>
<p>The <span class="apiname">LoginContext</span>'s <code class="codeph">login</code> method then calls methods in the <code class="codeph">SampleLoginModule</code> to perform the login and authentication. The <code class="codeph">SampleLoginModule</code> will utilize the <code class="codeph">MyCallbackHandler</code> to obtain the user name and password. Then the <code class="codeph">SampleLoginModule</code> will check that the name and password are the ones it expects.</p>
<p>If authentication is successful, the <code class="codeph">SampleLoginModule</code> populates the <span class="apiname">Subject</span> with a <span class="apiname">Principal</span> representing the user. The <span class="apiname">Principal</span> the <code class="codeph">SampleLoginModule</code> places in the <span class="apiname">Subject</span> is an instance of <code class="codeph">SamplePrincipal</code>, which is a sample class implementing the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/Principal.html" target="_blank"><span class="apiname">java.security.Principal</span></a> interface.</p>
<p>The calling application can subsequently retrieve the authenticated <span class="apiname">Subject</span> by calling the <span class="apiname">LoginContext</span>'s <code class="codeph">getSubject</code> method, although doing so is not necessary for this tutorial.</p>
</div>
</div>
<div class="sect5"><a id="GUID-E007D5F4-3FA5-417A-B85F-E669839F0101"></a>
<h5 id="JSSEC-GUID-E007D5F4-3FA5-417A-B85F-E669839F0101" class="sect5">The Complete SampleAcn Class Code</h5>
<div>
<p>Now that you have seen the basic code required to authenticate the user, we can put it all together into the full class in <code>SampleAcn.java</code>, which includes relevant import statements and error handling:</p>
<div class="section" id="GUID-E007D5F4-3FA5-417A-B85F-E669839F0101__GUID-1270A0AC-EA51-4A47-B9BC-BDB42F96F5FE">
<p class="subhead3">SampleAcn.java</p>
<pre dir="ltr">
package sample;

import java.io.*;
import java.util.*;
import javax.security.auth.login.*;
import javax.security.auth.*;
import javax.security.auth.callback.*;

/**
 * This Sample application attempts to authenticate a user
 * and reports whether or not the authentication was successful.
 */
public class <span class="bold">SampleAcn</span> {

   /**
    * Attempt to authenticate the user.
    *
    * @param args input arguments for this application.  These are ignored.
    */
    public static void main(String[] args) {

        // Obtain a LoginContext, needed for authentication. Tell it
        // to use the LoginModule implementation specified by the
        // entry named "Sample" in the JAAS login configuration
        // file and to also use the specified CallbackHandler.
        LoginContext lc = null;
        try {
            <span class="bold">lc = new LoginContext("Sample", new MyCallbackHandler());</span>
        } catch (LoginException le) {
            System.err.println("Cannot create LoginContext. "
                + le.getMessage());
            System.exit(-1);
        } catch (SecurityException se) {
            System.err.println("Cannot create LoginContext. "
                + se.getMessage());
            System.exit(-1);
        }

        // the user has 3 attempts to authenticate successfully
        int i;
        for (i = 0; i &lt; 3; i++) {
            try {

                // attempt authentication
                <span class="bold">lc.login();</span>

                // if we return with no exception, authentication succeeded
                break;

            } catch (LoginException le) {

                  System.err.println("Authentication failed:");
                  System.err.println("  " + le.getMessage());
                  try {
                      Thread.currentThread().sleep(3000);
                  } catch (Exception e) {
                      // ignore
                  }

            }
        }

        // did they fail three times?
        if (i == 3) {
            System.out.println("Sorry");
            System.exit(-1);
        }

        System.out.println("Authentication succeeded!");

    }
}


/**
 * The application implements the CallbackHandler.
 *
 * &lt;p&gt; This application is text-based.  Therefore it displays information
 * to the user using the OutputStreams System.out and System.err,
 * and gathers input from the user using the InputStream System.in.
 */
class MyCallbackHandler implements CallbackHandler {

    /**
     * Invoke an array of Callbacks.
     *
     * &lt;p&gt;
     *
     * @param callbacks an array of &lt;code&gt;Callback&lt;/code&gt; objects which contain
     *                  the information requested by an underlying security
     *                  service to be retrieved or displayed.
     *
     * @exception java.io.IOException if an input or output error occurs. &lt;p&gt;
     *
     * @exception UnsupportedCallbackException if the implementation of this
     *                  method does not support one or more of the Callbacks
     *                  specified in the &lt;code&gt;callbacks&lt;/code&gt; parameter.
     */
    public void handle(Callback[] callbacks)
    throws IOException, UnsupportedCallbackException {

        for (int i = 0; i &lt; callbacks.length; i++) {
            if (callbacks[i] instanceof TextOutputCallback) {

                // display the message according to the specified type
                TextOutputCallback toc = (TextOutputCallback)callbacks[i];
                switch (toc.getMessageType()) {
                case TextOutputCallback.INFORMATION:
                    System.out.println(toc.getMessage());
                    break;
                case TextOutputCallback.ERROR:
                    System.out.println("ERROR: " + toc.getMessage());
                    break;
                case TextOutputCallback.WARNING:
                    System.out.println("WARNING: " + toc.getMessage());
                    break;
                default:
                    throw new IOException("Unsupported message type: " +
                                        toc.getMessageType());
                }

            } else if (callbacks[i] instanceof NameCallback) {

                // prompt the user for a username
                NameCallback nc = (NameCallback)callbacks[i];

                System.err.print(nc.getPrompt());
                System.err.flush();
                nc.setName((new BufferedReader
                        (new InputStreamReader(System.in))).readLine());

            } else if (callbacks[i] instanceof PasswordCallback) {

                // prompt the user for sensitive information
                PasswordCallback pc = (PasswordCallback)callbacks[i];
                System.err.print(pc.getPrompt());
                System.err.flush();
                pc.setPassword(System.console().readPassword());

            } else {
                throw new UnsupportedCallbackException
                        (callbacks[i], "Unrecognized Callback");
            }
        }
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect4"><a id="GUID-3D19984B-76FE-4BD6-8B21-44512936DAEE"></a>
<h4 id="JSSEC-GUID-3D19984B-76FE-4BD6-8B21-44512936DAEE" class="sect4">The MyCallbackHandler Class</h4>
<div>
<p>In some cases a <span class="apiname">LoginModule</span> must communicate with the user to obtain authentication information. <span class="apiname">LoginModule</span>s use a <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/callback/CallbackHandler.html" target="_blank"><code class="codeph">javax.security.auth.callback.CallbackHandler</code></a> for this purpose. An application can either use one of the sample implementations provided in the <code class="codeph">com.sun.security.auth.callback</code> package or, more typically, write a <span class="apiname">CallbackHandler</span> implementation. The application passes the <span class="apiname">CallbackHandler</span> as an argument to the <span class="apiname">LoginContext</span> instantiation. The <span class="apiname">LoginContext</span> forwards the <span class="apiname">CallbackHandler</span> directly to the underlying <span class="apiname">LoginModule</span>s.</p>
<p>The tutorial sample code supplies its own <span class="apiname">CallbackHandler</span> implementation, the <code class="codeph">MyCallbackHandler</code> class in <a href="jaas-authentication-tutorial.htm#GUID-01DE56D2-3A45-4C38-83EB-257783975372"></a>.</p>
<p><span class="apiname">CallbackHandler</span> is an interface with one method to implement:</p>
<pre dir="ltr">
     void handle(Callback[] callbacks)
         throws java.io.IOException, UnsupportedCallbackException;
</pre>
<p>The <span class="apiname">LoginModule</span> passes the <span class="apiname">CallbackHandler</span> handle method an array of appropriate <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/callback/Callback.html" target="_blank"><span class="apiname">javax.security.auth.callback.Callback</span>s</a>, for example a <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/callback/NameCallback.html" target="_blank"><span class="apiname">NameCallback</span></a> for the user name and a <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/callback/PasswordCallback.html" target="_blank"><span class="apiname">PasswordCallback</span></a> for the password, and the <span class="apiname">CallbackHandler</span> performs the requested user interaction and sets appropriate values in the <span class="apiname">Callback</span>s.</p>
<p>The <code class="codeph">MyCallbackHandler</code> <code class="codeph">handle</code> method is structured as follows:</p>
<pre dir="ltr">
public void handle(Callback[] callbacks)
  throws IOException, UnsupportedCallbackException {

  for (int i = 0; i &lt; callbacks.length; i++) {
    if (callbacks[i] instanceof TextOutputCallback) {

      // display a message according to a specified type
      . . .

    } else if (callbacks[i] instanceof NameCallback) {

      // prompt the user for a username
      . . .

    } else if (callbacks[i] instanceof PasswordCallback) {

      // prompt the user for a password
      . . .

    } else {
        throw new UnsupportedCallbackException
         (callbacks[i], "Unrecognized Callback");
    }
  }
}
</pre>
<p>A <span class="apiname">CallbackHandler</span> <span class="apiname">handle</span> method is passed an array of <span class="apiname">Callback</span> instances, each of a particular type (<span class="apiname">NameCallback</span>, <span class="apiname">PasswordCallback</span>, etc.). It must handle each Callback, performing user interaction in a way that is appropriate for the executing application.</p>
<p><code class="codeph">MyCallbackHandler</code> handles three types of Callbacks: <span class="bold"><span class="apiname">NameCallback</span></span> to prompt the user for a user name, <span class="bold"><span class="apiname">PasswordCallback</span></span> to prompt for a password, and <span class="bold"><span class="apiname">TextOutputCallback</span></span> to report any error, warning, or other messages the <span class="apiname">SampleLoginModule</span> wishes to send to the user.</p>
<p>The <span class="apiname">handle</span> method handles a <span class="bold"><span class="apiname">TextOutputCallback</span></span> by extracting the message to be reported and then printing it to <code class="codeph">System.out</code>, optionally preceded by additional wording that depends on the message type. The message to be reported is determined by calling the <span class="apiname">TextOutputCallback</span>'s <span class="apiname">getMessage</span> method and the type by calling its <span class="apiname">getMessageType</span> method. Here is the code for handling a <span class="apiname">TextOutputCallback</span>:</p>
<pre dir="ltr">
if (callbacks[i] instanceof TextOutputCallback) {

  // display the message according to the specified type
  TextOutputCallback toc = (TextOutputCallback)callbacks[i];
  switch (toc.getMessageType()) {
     case TextOutputCallback.INFORMATION:
        System.out.println(toc.getMessage());
        break;
     case TextOutputCallback.ERROR:
        System.out.println("ERROR: " + toc.getMessage());
        break;
     case TextOutputCallback.WARNING:
        System.out.println("WARNING: " + toc.getMessage());
        break;
     default:
        throw new IOException("Unsupported message type: " +
            toc.getMessageType());
   }
</pre>
<p>The <code class="codeph">handle</code> method handles a <span class="bold"><span class="apiname">NameCallback</span></span> by prompting the user for a user name. It does this by printing the prompt to <code class="codeph">System.err</code>. It then sets the name for use by the <code class="codeph">SampleLoginModule</code> by calling the <span class="apiname">NameCallback</span>'s <code class="codeph">setName</code> method, passing it the name typed by the user:</p>
<pre dir="ltr">
} else if (callbacks[i] instanceof NameCallback) {

    // prompt the user for a username
    NameCallback nc = (NameCallback)callbacks[i];

    System.err.print(nc.getPrompt());
    System.err.flush();
    nc.setName((new BufferedReader
        (new InputStreamReader(System.in))).readLine());
</pre>
<p>Similarly, the <code class="codeph">handle</code> method handles a <span class="bold"><span class="apiname">PasswordCallback</span></span> by printing a prompt to <code class="codeph">System.err</code> to prompt the user for a password. It then sets the password for use by the <code class="codeph">SampleLoginModule</code> by calling the <span class="apiname">PasswordCallback</span>'s <code class="codeph">setPassword</code> method, passing it the password typed by the user:</p>
<pre dir="ltr">
} else if (callbacks[i] instanceof PasswordCallback) {

    // prompt the user for sensitive information
    PasswordCallback pc = (PasswordCallback)callbacks[i];

    System.err.print(pc.getPrompt());
    System.err.flush();
    pc.setPassword(System.console().readPassword());
</pre></div>
</div>
</div>
<div class="sect3"><a id="GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075"></a>
<h3 id="JSSEC-GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075" class="sect3">SampleLoginModule.java and SamplePrincipal.java</h3>
<div>
<p><code>SampleLoginModule.java</code> implements the <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/spi/LoginModule.html" target="_blank"><code class="codeph">LoginModule</code></a> interface. <code class="codeph">SampleLoginModule</code> is the class specified by the tutorial's login configuration file (see <a href="jaas-authentication-tutorial.htm#GUID-A7E0803F-DA0B-42BF-8E25-DA5889BE847F">The Login Configuration File for the JAAS Authentication Tutorial</a>) as the class implementing the desired underlying authentication. <code class="codeph">SampleLoginModule</code>'s user authentication consists of simply verifying that the name and password specified by the user have specific values. This <code class="codeph">SampleLoginModule</code> is specified by the tutorial's login configuration file as the <span class="apiname">LoginModule</span> to use because (1) It performs a basic type of authentication suitable for any environment and thus is appropriate for a tutorial for all users, and (2) It provides an example <span class="apiname">LoginModule</span> implementation for experienced programmers who require the ability to write a <span class="apiname">LoginModule</span> implementing an authentication technology.</p>
<p><code>SamplePrincipal.java</code> is a sample class implementing the <a href="https://docs.oracle.com/javase/10/docs/api/java/security/Principal.html" target="_blank"><span class="apiname">java.security.Principal</span></a> interface. If authentication is successful, the <code class="codeph">SampleLoginModule</code> populates a <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/Subject.html" target="_blank"><span class="apiname">Subject</span></a> with a <code class="codeph">SamplePrincipal</code> representing the user.</p>
<p><span class="bold">Important: If you are an application writer, you do not need to know how to write a <span class="apiname">LoginModule</span> or a <span class="apiname">Principal</span> implementation. You do not need to examine the <code class="codeph">SampleLoginModule</code> or <code class="codeph">SamplePrincipal</code> code.</span> All you have to know is how to write your application and specify configuration information (such as in a login configuration file) such that the application will be able to utilize the <span class="apiname">LoginModule</span> specified by the configuration to authenticate the user. You need to determine which <span class="apiname">LoginModule</span>(s) you want to use and read the <span class="apiname">LoginModule</span>'s documentation to learn about what options you can specify values for (in the configuration) to control the <span class="apiname">LoginModule</span>'s behavior.</p>
<p>Any vendor can provide a LoginModule implementation that you can use. Some implementations are supplied with the JRE from Oracle, as listed in <a href="appendix-b-jaas-login-configuration-file.htm#GUID-7EB80FA5-3C16-4016-AED6-0FC619F86F8E">Appendix B: JAAS Login Configuration File</a>.</p>
<p>Information for programmers who want to write a <span class="apiname">LoginModule</span> can be found in <a href="java-authentication-and-authorization-service-jaas-loginmodule-developers-guide1.htm#GUID-CB46C30D-FFF1-466F-B2F5-6DE0BD5DA43A">Java Authentication and Authorization Service (JAAS): LoginModule Developer's Guide</a>.</p>
<div class="section" id="GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-F9A208EC-3247-4320-8158-82B0E84C6A04">
<p class="subhead3">SampleLoginModule.java</p>
<pre dir="ltr">
package sample.module;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import sample.principal.SamplePrincipal;

/**
 * &lt;p&gt; This sample LoginModule authenticates users with a password.
 *
 * &lt;p&gt; This LoginModule only recognizes one user:       testUser
 * &lt;p&gt; testUser's password is:  testPassword
 *
 * &lt;p&gt; If testUser successfully authenticates itself,
 * a &lt;code&gt;SamplePrincipal&lt;/code&gt; with the testUser's user name
 * is added to the Subject.
 *
 * &lt;p&gt; This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 */
public class SampleLoginModule implements LoginModule {

    // initial state
    private Subject subject;
    private CallbackHandler callbackHandler;
    private Map sharedState;
    private Map options;

    // configurable option
    private boolean debug = false;

    // the authentication status
    private boolean succeeded = false;
    private boolean commitSucceeded = false;

    // username and password
    private String username;
    private char[] password;

    // testUser's SamplePrincipal
    private SamplePrincipal userPrincipal;

    /**
     * Initialize this &lt;code&gt;LoginModule&lt;/code&gt;.
     *
     * @param subject the &lt;code&gt;Subject&lt;/code&gt; to be authenticated. &lt;p&gt;
     *
     * @param callbackHandler a &lt;code&gt;CallbackHandler&lt;/code&gt; for communicating
     *                  with the end user (prompting for user names and
     *                  passwords, for example). &lt;p&gt;
     *
     * @param sharedState shared &lt;code&gt;LoginModule&lt;/code&gt; state. &lt;p&gt;
     *
     * @param options options specified in the login
     *                  &lt;code&gt;Configuration&lt;/code&gt; for this particular
     *                  &lt;code&gt;LoginModule&lt;/code&gt;.
     */
    public void initialize(Subject subject,
                   CallbackHandler callbackHandler,
                         Map&lt;java.lang.String, ?&gt; sharedState,
                         Map&lt;java.lang.String, ?&gt; options) {

        this.subject = subject;
        this.callbackHandler = callbackHandler;
        this.sharedState = sharedState;
        this.options = options;

        // initialize any configured options
        debug = "true".equalsIgnoreCase((String)options.get("debug"));
    }

    /**
     * Authenticate the user by prompting for a user name and password.
     *
     * @return true in all cases since this &lt;code&gt;LoginModule&lt;/code&gt;
     *          should not be ignored.
     *
     * @exception FailedLoginException if the authentication fails. &lt;p&gt;
     *
     * @exception LoginException if this &lt;code&gt;LoginModule&lt;/code&gt;
     *          is unable to perform the authentication.
     */
    public boolean login() throws LoginException {

        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException("Error: no CallbackHandler available " +
                        "to garner authentication information from the user");

        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback("user name: ");
        callbacks[1] = new PasswordCallback("password: ", false);

        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback)callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0,
                        password, 0, tmpPassword.length);
            ((PasswordCallback)callbacks[1]).clearPassword();

        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException("Error: " + uce.getCallback().toString() +
                " not available to garner authentication information " +
                "from the user");
        }

        // print debugging information
        if (debug) {
            System.out.println("\t\t[SampleLoginModule] " +
                                "user entered user name: " +
                                username);
            System.out.print("\t\t[SampleLoginModule] " +
                                "user entered password: ");
            for (int i = 0; i &lt; password.length; i++)
                System.out.print(password[i]);
            System.out.println();
        }

        // verify the username/password
        boolean usernameCorrect = false;
        boolean passwordCorrect = false;
        if (username.equals("testUser"))
            usernameCorrect = true;
        if (usernameCorrect &amp;&amp;
            password.length == 12 &amp;&amp;
            password[0] == 't' &amp;&amp;
            password[1] == 'e' &amp;&amp;
            password[2] == 's' &amp;&amp;
            password[3] == 't' &amp;&amp;
            password[4] == 'P' &amp;&amp;
            password[5] == 'a' &amp;&amp;
            password[6] == 's' &amp;&amp;
            password[7] == 's' &amp;&amp;
            password[8] == 'w' &amp;&amp;
            password[9] == 'o' &amp;&amp;
            password[10] == 'r' &amp;&amp;
            password[11] == 'd') {

            // authentication succeeded!!!
            passwordCorrect = true;
            if (debug)
                System.out.println("\t\t[SampleLoginModule] " +
                                "authentication succeeded");
            succeeded = true;
            return true;
        } else {

            // authentication failed -- clean out state
            if (debug)
                System.out.println("\t\t[SampleLoginModule] " +
                                "authentication failed");
            succeeded = false;
            username = null;
            for (int i = 0; i &lt; password.length; i++)
                password[i] = ' ';
            password = null;
            if (!usernameCorrect) {
                throw new FailedLoginException("User Name Incorrect");
            } else {
                throw new FailedLoginException("Password Incorrect");
            }
        }
    }

    /**
     * This method is called if the LoginContext's
     * overall authentication succeeded
     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     * succeeded).
     *
     * If this LoginModule's own authentication attempt
     * succeeded (checked by retrieving the private state saved by the
     * &lt;code&gt;login&lt;/code&gt; method), then this method associates a
     * &lt;code&gt;SamplePrincipal&lt;/code&gt;
     * with the &lt;code&gt;Subject&lt;/code&gt; located in the
     * &lt;code&gt;LoginModule&lt;/code&gt;.  If this LoginModule's own
     * authentication attempted failed, then this method removes
     * any state that was originally saved.
     *
     * @exception LoginException if the commit fails.
     *
     * @return true if this LoginModule's own login and commit
     *          attempts succeeded, or false otherwise.
     */
    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject

            // assume the user we authenticated is the SamplePrincipal
            userPrincipal = new SamplePrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);

            if (debug) {
                System.out.println("\t\t[SampleLoginModule] " +
                                "added SamplePrincipal to Subject");
            }

            // in any case, clean out state
            username = null;
            for (int i = 0; i &lt; password.length; i++)
                password[i] = ' ';
            password = null;

            commitSucceeded = true;
            return true;
        }
    }

    /**
     * This method is called if the LoginContext's
     * overall authentication failed.
     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     * did not succeed).
     *
     * If this LoginModule's own authentication attempt
     * succeeded (checked by retrieving the private state saved by the
     * &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; methods),
     * then this method cleans up any state that was originally saved.
     *
     * @exception LoginException if the abort fails.
     *
     * @return false if this LoginModule's own login and/or commit attempts
     *          failed, and true otherwise.
     */
    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true &amp;&amp; commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password != null) {
                for (int i = 0; i &lt; password.length; i++)
                    password[i] = ' ';
                password = null;
            }
            userPrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }

    /**
     * Logout the user.
     *
     * This method removes the &lt;code&gt;SamplePrincipal&lt;/code&gt;
     * that was added by the &lt;code&gt;commit&lt;/code&gt; method.
     *
     * @exception LoginException if the logout fails.
     *
     * @return true in all cases since this &lt;code&gt;LoginModule&lt;/code&gt;
     *          should not be ignored.
     */
    public boolean logout() throws LoginException {

        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password != null) {
            for (int i = 0; i &lt; password.length; i++)
                password[i] = ' ';
            password = null;
        }
        userPrincipal = null;
        return true;
    }
}
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-3EA5533B-1284-481E-A35F-C82B17837F2E">
<p class="subhead3">SamplePrincipal.java</p>
<pre dir="ltr">
package sample.principal;

import java.security.Principal;

/**
 * This class implements the &lt;code&gt;Principal&lt;/code&gt; interface
 * and represents a Sample user.
 *
 * Principals such as this &lt;code&gt;SamplePrincipal&lt;/code&gt;
 * may be associated with a particular &lt;code&gt;Subject&lt;/code&gt;
 * to augment that &lt;code&gt;Subject&lt;/code&gt; with an additional
 * identity.  Refer to the &lt;code&gt;Subject&lt;/code&gt; class for more information
 * on how to achieve this.  Authorization decisions can then be based upon
 * the Principals associated with a &lt;code&gt;Subject&lt;/code&gt;.
 *
 * @see java.security.Principal
 * @see javax.security.auth.Subject
 */
public class SamplePrincipal implements Principal, java.io.Serializable {

    /**
     * @serial
     */
    private String name;

    /**
     * Create a SamplePrincipal with a Sample username.
     *
     * @param name the Sample username for this user.
     *
     * @exception NullPointerException if the &lt;code&gt;name&lt;/code&gt;
     *                  is &lt;code&gt;null&lt;/code&gt;.
     */
    public SamplePrincipal(String name) {
        if (name == null)
            throw new NullPointerException("illegal null input");

        this.name = name;
    }

    /**
     * Return the Sample username for this &lt;code&gt;SamplePrincipal&lt;/code&gt;.
     *
     * @return the Sample username for this &lt;code&gt;SamplePrincipal&lt;/code&gt;
     */
    public String getName() {
        return name;
    }

    /**
     * Return a string representation of this &lt;code&gt;SamplePrincipal&lt;/code&gt;.
     *
     * @return a string representation of this &lt;code&gt;SamplePrincipal&lt;/code&gt;.
     */
    public String toString() {
        return("SamplePrincipal:  " + name);
    }

    /**
     * Compares the specified Object with this &lt;code&gt;SamplePrincipal&lt;/code&gt;
     * for equality.  Returns true if the given object is also a
     * &lt;code&gt;SamplePrincipal&lt;/code&gt; and the two SamplePrincipals
     * have the same username.
     *
     * @param o Object to be compared for equality with this
     *          &lt;code&gt;SamplePrincipal&lt;/code&gt;.
     *
     * @return true if the specified Object is equal equal to this
     *          &lt;code&gt;SamplePrincipal&lt;/code&gt;.
     */
    public boolean equals(Object o) {
        if (o == null)
            return false;

        if (this == o)
            return true;

        if (!(o instanceof SamplePrincipal))
            return false;
        SamplePrincipal that = (SamplePrincipal)o;

        if (this.getName().equals(that.getName()))
            return true;
        return false;
    }

    /**
     * Return a hash code for this &lt;code&gt;SamplePrincipal&lt;/code&gt;.
     *
     * @return a hash code for this &lt;code&gt;SamplePrincipal&lt;/code&gt;.
     */
    public int hashCode() {
        return name.hashCode();
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-987700C5-AE03-4EB1-B16A-66A1404B9604"></a>
<h2 id="JSSEC-GUID-987700C5-AE03-4EB1-B16A-66A1404B9604" class="sect2">The Login Configuration</h2>
<div>
<p>JAAS authentication is performed in a pluggable fashion, so applications can remain independent from underlying authentication technologies. A system administrator determines the authentication technologies, or <span class="apiname">LoginModules</span>, to be used for each application and configures them in a login <span class="apiname">Configuration</span>. The source of the configuration information (for example, a file or a database) is up to the current <a href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/login/Configuration.html" target="_blank"><span class="apiname">javax.security.auth.login.Configuration</span></a> implementation. The default <code class="codeph">Configuration</code> implementation from Oracle reads configuration information from configuration files, as described in the <a href="https://docs.oracle.com/javase/10/docs/api/com/sun/security/auth/login/ConfigFile.html" target="_blank"><span class="apiname">ConfigFile</span></a> class.</p>
<p>See <a href="appendix-b-jaas-login-configuration-file.htm#GUID-7EB80FA5-3C16-4016-AED6-0FC619F86F8E">Appendix B: JAAS Login Configuration File</a> for information as to what a login configuration file is, what it contains, and how to specify which login configuration file should be used.</p>
</div>
<div class="sect3"><a id="GUID-A7E0803F-DA0B-42BF-8E25-DA5889BE847F"></a>
<h3 id="JSSEC-GUID-A7E0803F-DA0B-42BF-8E25-DA5889BE847F" class="sect3">The Login Configuration File for the JAAS Authentication Tutorial</h3>
<div>
<p>As noted, the login configuration file we use for this tutorial, <code>sample_jass.config</code>, contains just one entry, which is</p>
<pre dir="ltr">
<span class="bold">Sample {
  sample.module.SampleLoginModule required debug=true;
};</span>
</pre>
<p>This entry is named "Sample" and that is the name that our tutorial application, <code class="codeph">SampleAcn</code>, uses to refer to this entry. The entry specifies that the <span class="apiname">LoginModule</span> to be used to do the user authentication is the <code class="codeph">SampleLoginModule</code> in the <code class="codeph">sample.module</code> package and that this <code class="codeph">SampleLoginModule</code> is required to "succeed" in order for authentication to be considered successful. The <code class="codeph">SampleLoginModule</code> succeeds only if the name and password supplied by the user are the one it expects ("testUser" and "testPassword", respectively).</p>
<p>The <code class="codeph">SampleLoginModule</code> also defines a "debug" option that can be set to <code class="codeph">true</code> as shown. If this option is set to <code class="codeph">true,</code> <code class="codeph">SampleLoginModule</code> outputs extra information about the progress of authentication. A <span class="apiname">LoginModule</span> can define as many options as it wants. The <span class="apiname">LoginModule</span> documentation should specify the possible option names and values you can set in your configuration file.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-743703A2-7EC1-4391-A816-4A883FB6A017"></a>
<h2 id="JSSEC-GUID-743703A2-7EC1-4391-A816-4A883FB6A017" class="sect2">Running the Code</h2>
<div>
<p>To execute our JAAS authentication tutorial code, all you have to do is</p>
<ol>
<li>
<p>Place the following file into a directory:</p>
<ul style="list-style-type: disc;">
<li><span class="apiname">sample_jass.config</span> login configuration file (see <a href="jaas-authentication-tutorial.htm#GUID-A7E0803F-DA0B-42BF-8E25-DA5889BE847F">The Login Configuration File for the JAAS Authentication Tutorial</a>)</li>
</ul>
</li>
<li>
<p>Create a subdirectory named <span class="apiname">sample</span> of that top-level directory, and place the following into it (note the <code class="codeph">SampleAcn</code> and <span class="apiname">MyCallbackHandler</span> classes, both in <code class="codeph">SampleAcn.java</code>, are in a package named <code class="codeph">sample</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-E007D5F4-3FA5-417A-B85F-E669839F0101__GUID-1270A0AC-EA51-4A47-B9BC-BDB42F96F5FE"><code>SampleAcn.java</code></a> application source file</li>
</ul>
</li>
<li>
<p>Create a subdirectory of the <code>sample</code> directory and name it <code>module</code>. Place the following into it (note the <code>SampleLoginModule</code> class is in a package named <code class="codeph">sample.module</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-F9A208EC-3247-4320-8158-82B0E84C6A04"><code>SampleLoginModule.java</code></a> source file</li>
</ul>
</li>
<li>Create another subdirectory of the <code>sample</code> directory and name it <code>principal</code>. Place the following into it (note the <code class="codeph">SamplePrincipal</code> class is in a package named <code class="codeph">sample.principal</code>):
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-3EA5533B-1284-481E-A35F-C82B17837F2E"><code>SamplePrincipal.java</code></a> source file</li>
</ul>
</li>
<li>
<p>While in the top-level directory, compile <code class="codeph">SampleAcn.java</code>, <code class="codeph">SampleLoginModule.java</code>, and <code class="codeph">SamplePrincipal.java</code>:</p>
<p><code class="codeph">javac sample/SampleAcn.java sample/module/SampleLoginModule.java sample/principal/SamplePrincipal.java</code></p>
<p>(Type all that on one line.)</p>
</li>
<li>Execute the <code class="codeph">SampleAcn</code> application, specifying
<ul style="list-style-type: disc;">
<li>by <code class="codeph">-Djava.security.auth.login.config==sample_jaas.config</code> that the login configuration file to be used is <code class="codeph">sample_jaas.config</code>.</li>
</ul>
</li>
</ol>
<p>The full command is below.</p>
<pre dir="ltr">
java -Djava.security.auth.login.config==sample_jaas.config sample.SampleAcn
</pre>
<p>You will be prompted for your user name and password, and the <code class="codeph">SampleLoginModule</code> specified in the login configuration file will check to ensure these are correct. The <code class="codeph">SampleLoginModule</code> expects <code class="codeph">testUser</code> for the user name and <code class="codeph">testPassword</code> for the password.</p>
<p>You will see some messages output by <code class="codeph">SampleLoginModule</code> as a result of the <code class="codeph">debug</code> option being set to <code class="codeph">true</code> in the login configuration file. Then, if your login is successful, you will see the following message output by <span class="apiname">SampleAcn</span>:</p>
<pre dir="ltr">
Authentication succeeded!
</pre>
<p>If the login is not successful (for example, if you misspell the password), you will see</p>
<pre dir="ltr">
Authentication failed:
</pre>
<p>followed by a reason for the failure. For example, if you mistype the password, you may see a message like the following:</p>
<pre dir="ltr">
Authentication failed:
  Password Incorrect
</pre>
<p><span class="apiname">SampleAcn</span> gives you three chances to successfully log in.</p>
</div>
</div>
<div class="sect2"><a id="GUID-44F2BF3A-F51D-4F21-8F40-96CB1120396D"></a>
<h2 id="JSSEC-GUID-44F2BF3A-F51D-4F21-8F40-96CB1120396D" class="sect2">Running the Code with a Security Manager</h2>
<div>
<p>When a Java program is run with a security manager installed, the program is not allowed to access resources or otherwise perform security-sensitive operations unless it is explicitly granted permission to do so by the security policy in effect. (See <a href="permissions-jdk1.htm#GUID-1E8E213A-D7F2-49F1-A2F0-EFB3397A8C95" title="A permission represents access to a system resource. In order for a resource access to be allowed for an applet (or an application running with a security manager), the corresponding permission must be explicitly granted to the code attempting the access.">Permissions in the JDK</a>.) The permission must be granted by an entry in a policy file (see <a href="permissions-jdk1.htm#GUID-789089CA-8557-4017-B8B0-6899AD3BA18D">Default Policy Implementation and Policy File Syntax</a>.)</p>
<p>Most browsers install a security manager, so <span class="variable">applets</span> typically run under the scrutiny of a security manager. <span class="variable">Applications</span>, on the other hand, do not, since a security manager is not automatically installed when an application is running. Thus an application, like our <code class="codeph">SampleAcn</code> application, by default has full access to resources.</p>
<p><span class="bold">To run an application with a security manager</span>, simply invoke the interpreter with a <code class="codeph">-Djava.security.manager</code> argument included on the command line.</p>
<p>If you try invoking <code class="codeph">SampleAcn</code> with a security manager but without specifying any policy file, you will get the following (unless you have a default policy setup elsewhere that grants the required permissions or grants <code class="codeph">AllPermission</code>):</p>
<pre dir="ltr">
% java -Djava.security.manager \
 -Djava.security.auth.login.config==sample_jaas.config sample.SampleAcn
Exception in thread "main" java.security.AccessControlException:
  access denied (
  javax.security.auth.AuthPermission createLoginContext.Sample)
</pre>
<p>As you can see, you get an <span class="apiname">AccessControlException</span>, because we haven't created and used a policy file granting our code the permission that is required in order to be allowed to create a <span class="apiname">LoginContext</span>.</p>
<p>Here are the complete steps required in order to be able to run our <code class="codeph">SampleAcn</code> application with a security manager installed. You can skip the first five steps if you have already done them, as described in <a href="jaas-authentication-tutorial.htm#GUID-743703A2-7EC1-4391-A816-4A883FB6A017">Running the Code</a>.</p>
<ol>
<li>
<p>Place the following file into a directory:</p>
<ul style="list-style-type: disc;">
<li><code>sample_jass.config</code> login configuration file (see <a href="jaas-authentication-tutorial.htm#GUID-A7E0803F-DA0B-42BF-8E25-DA5889BE847F">The Login Configuration File for the JAAS Authentication Tutorial</a>)</li>
</ul>
</li>
<li>
<p>Create a subdirectory named <span class="apiname">sample</span> of that top-level directory, and place the following into it (note the <code class="codeph">SampleAcn</code> and <span class="apiname">MyCallbackHandler</span> classes, both in <code class="codeph">SampleAcn.java</code>, are in a package named <code class="codeph">sample</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-E007D5F4-3FA5-417A-B85F-E669839F0101__GUID-1270A0AC-EA51-4A47-B9BC-BDB42F96F5FE"><code>SampleAcn.java</code></a> application source file</li>
</ul>
</li>
<li>
<p>Create a subdirectory of the <code>sample</code> directory and name it <code>module</code>. Place the following into it (note the <code>SampleLoginModule</code> class is in a package named <code class="codeph">sample.module</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-F9A208EC-3247-4320-8158-82B0E84C6A04"><code>SampleLoginModule.java</code></a> source file</li>
</ul>
</li>
<li>
<p>Create another subdirectory of the <code>sample</code> directory and name it <code>principal</code>. Place the following into it (note the <code class="codeph">SamplePrincipal</code> class is in a package named <code class="codeph">sample.principal</code>):</p>
<ul style="list-style-type: disc;">
<li><a href="jaas-authentication-tutorial.htm#GUID-03476CCA-11C6-4D51-B170-C8DD7C0D9075__GUID-3EA5533B-1284-481E-A35F-C82B17837F2E"><code>SamplePrincipal.java</code></a> source file</li>
</ul>
</li>
<li>
<p>While in the top-level directory, compile <code class="codeph">SampleAcn.java</code>, <code class="codeph">SampleLoginModule.java</code>, and <code class="codeph">SamplePrincipal.java</code>:</p>
<p><code class="codeph">javac sample/SampleAcn.java sample/module/SampleLoginModule.java sample/principal/SamplePrincipal.java</code></p>
<p>(Type all that on one line.)</p>
</li>
<li>
<p>Create a JAR file containing <code class="codeph">SampleAcn.class</code> and <code class="codeph">MyCallbackHandler.class</code>:</p>
<p><code class="codeph">jar -cvf SampleAcn.jar sample/SampleAcn.class sample/MyCallbackHandler.class</code></p>
<p>(Type all that on one line.) This command creates a JAR file, <code class="codeph">SampleAcn.jar</code>, and places the <code class="codeph">SampleAcn.class</code> and <code class="codeph">MyCallbackHandler.class</code> files inside it.</p>
</li>
<li>
<p>Create a JAR file containing <code class="codeph">SampleLoginModule.class</code> and <code class="codeph">SamplePrincipal.class</code>:</p>
<p><code class="codeph">jar -cvf SampleLM.jar sample/module/SampleLoginModule.class sample/principal/SamplePrincipal.class</code></p>
</li>
<li>
<p>Create a policy file granting the required permissions.</p>
<p>The permission that is needed by code attempting to instantiate a <span class="apiname">LoginContext</span> is a <code class="codeph">javax.security.auth.AuthPermission</code> with target <code class="codeph">createLoginContext.<span class="variable">&lt;entry name&gt;</span></code>. Here, <code class="codeph"><span class="variable">&lt;entry name&gt;</span></code> refers to the name of the login configuration file entry that the application references in its instantiation of <span class="apiname">LoginContext</span>. The name used by our <code class="codeph">SampleAcn</code> application's <span class="apiname">LoginContext</span> instantiation is <code class="codeph">Sample</code>, as you can see in the code:</p>
<pre dir="ltr">
LoginContext lc =
    new LoginContext("Sample",
          new MyCallbackHandler());
</pre>
<p>Thus, the permission that needs to be granted to <code class="codeph">SampleAcn.jar</code> is</p>
<pre dir="ltr">
permission javax.security.auth.AuthPermission
  "createLoginContext.Sample";
</pre>
<p>The <code class="codeph">SampleLM.jar</code> file also needs to be granted a permission. The documentation for a <span class="apiname">LoginModule</span> should tell you what permissions it needs to be granted. In the case of <code class="codeph">SampleLoginModule</code>, it needs a <code class="codeph">javax.security.auth.AuthPermission</code> with target <code class="codeph">modifyPrincipals</code> in order to populate a <span class="apiname">Subject</span> with a <span class="apiname">Principal</span>:</p>
<pre dir="ltr">
permission javax.security.auth.AuthPermission
  "modifyPrincipals";
</pre>
<p>Copy the policy file <a href="jaas-authentication-tutorial.htm#GUID-44F2BF3A-F51D-4F21-8F40-96CB1120396D__SAMPLEACN.POLICY-2FEDE143"><code>sampleacn.policy</code></a> to the same directory as that in which you stored <code class="codeph">SampleAcn.java</code>, etc. The policy file contains the following <code class="codeph">grant</code> statement to grant <code class="codeph">SampleAcn.jar</code> (in the current directory) its required permission:</p>
<pre dir="ltr">
grant codebase "file:./SampleAcn.jar" {
   permission javax.security.auth.AuthPermission "createLoginContext.Sample";
};
</pre>
<p>The policy file also contains the following <code class="codeph">grant</code> statement to grant <code class="codeph">SampleLM.jar</code> (also in the current directory) its required permission:</p>
<pre dir="ltr">
grant codebase "file:./SampleLM.jar" {
   permission javax.security.auth.AuthPermission "modifyPrincipals";
};
</pre>
<p>Note: Policy files and the structure of entries within them are described in <a href="permissions-jdk1.htm#GUID-789089CA-8557-4017-B8B0-6899AD3BA18D">Default Policy Implementation and Policy File Syntax</a>. Permissions are described in <a href="permissions-jdk1.htm#GUID-1E8E213A-D7F2-49F1-A2F0-EFB3397A8C95" title="A permission represents access to a system resource. In order for a resource access to be allowed for an applet (or an application running with a security manager), the corresponding permission must be explicitly granted to the code attempting the access.">Permissions in the JDK</a>.</p>
<p>Execute the <code class="codeph">SampleAcn</code> application, specifying</p>
<ol>
<li>by an appropriate <code class="codeph">-classpath</code> clause that classes should be searched for in the <code class="codeph">SampleAcn.jar</code> and <code class="codeph">SampleLM.jar</code> JAR files,</li>
<li>by <code class="codeph">-Djava.security.manager</code> that a security manager should be installed,</li>
<li>by <code class="codeph">-Djava.security.policy==sampleacn.policy</code> that the policy file to be used is <code class="codeph">sampleacn.policy</code>, and</li>
<li>by <code class="codeph">-Djava.security.auth.login.config==sample_jaas.config</code> that the login configuration file to be used is <code class="codeph">sample_jaas.config</code>.</li>
</ol>
<p>Below are the full commands to use for both Windows and Solaris, Linux, and macOS systems. The only difference is that on Windows systems you use semicolons to separate class path items, while you use colons for that purpose on Solaris, Linux, and macOS systems.</p>
<p>Here is the full command for Windows systems:</p>
<pre dir="ltr">
java -classpath SampleAcn.jar;SampleLM.jar
 -Djava.security.manager
 -Djava.security.policy==sampleacn.policy
 -Djava.security.auth.login.config==sample_jaas.config
 sample.SampleAcn
</pre>
<p>Here is the full command for Solaris, Linux, and macOS systems:</p>
<pre dir="ltr">
java -classpath SampleAcn.jar:SampleLM.jar
 -Djava.security.manager
 -Djava.security.policy==sampleacn.policy
 -Djava.security.auth.login.config==sample_jaas.config
 sample.SampleAcn
</pre>
<p>Type all that on one line. Multiple lines are used here for legibility. If the command is too long for your system, you may need to place it in a <code class="codeph">.bat</code> file (for Microsoft Windows) or a <code class="codeph">.sh</code> file (for Solaris, Linux, and macOS) and then run that file to execute the command.</p>
<p>Since the specified policy file contains an entry granting the code the required permissions, execution should proceed without any exceptions indicating a required permission was not granted. You will be prompted for a user name and password (use <code class="codeph">testUser</code> and <code class="codeph">testPassword</code>), and the <code class="codeph">SampleLoginModule</code> specified in the login configuration file will check the name and password. If your login is successful, you will see the message <code class="codeph">Authentication succeeded!</code> and if not, you will see <code class="codeph">Authentication failed:</code> followed by a reason for the failure.</p>
</li>
</ol>
<div class="section" id="GUID-44F2BF3A-F51D-4F21-8F40-96CB1120396D__SAMPLEACN.POLICY-2FEDE143">
<p class="subhead2">sampleacn.policy</p>
<pre dir="ltr">
/* grant the sample LoginModule permissions */
grant codebase "file:./SampleLM.jar" {
    permission javax.security.auth.AuthPermission "modifyPrincipals";
};

grant codebase "file:./SampleAcn.jar" {
   permission javax.security.auth.AuthPermission "createLoginContext.Sample";
};
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="jaas-tutorials.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="jaas-authorization-tutorial.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
