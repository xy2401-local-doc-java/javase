<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Sample Code Illustrating HTTPS Connections</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T07:25:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Security Developer&rsquo;s Guide" />
<meta name="dcterms.identifier" content="E91076-01" />
<meta name="dcterms.isVersionOf" content="JSSEC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="sample-code-illustrating-secure-socket-connection-client-and-server.htm" title="Previous" type="text/html" />
<link rel="Next" href="sample-code-illustrating-secure-rmi-connection.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSSEC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-54F1F19F-0F93-4877-A4A1-46ACD03FD7CB"></a> <span id="PAGE" style="display:none;">49/59</span> <!-- End Header -->
<h1 id="JSSEC-GUID-54F1F19F-0F93-4877-A4A1-46ACD03FD7CB" class="sect1">Sample Code Illustrating HTTPS Connections</h1>
<div>
<p>There are two primary APIs for accessing secure communications through JSSE. One way is through a socket-level API that can be used for arbitrary secure communications, as illustrated by the <a href="sample-code-illustrating-secure-socket-connection-client-and-server.htm#GUID-AA1C27A1-2CA8-4309-B281-D6199F60E666__SSLSOCKETCLIENT.JAVA-32CFECE1"><code>SSLSocketClient.java</code></a>, <a href="sample-code-illustrating-secure-socket-connection-client-and-server.htm#GUID-B9103D0C-3E6A-4301-B558-461E4CB23DC9__SSLSOCKETCLIENTWITHTUNNELING.JAVA-32D03DB5"><code>SSLSocketClientWithTunneling.java</code></a>, and <a href="sample-code-illustrating-secure-socket-connection-client-and-server.htm#GUID-756AE510-E1BF-42FE-92FC-B9BE3EC31C7B__SSLSOCKETCLIENTWITHCLIENTAUTH.JAVA-32D0CA6C"><code>SSLSocketClientWithClientAuth.java</code></a> examples (with and without the examples described in <a href="sample-code-illustrating-secure-socket-connection-client-and-server.htm#GUID-3561ED02-174C-4E65-8BB1-5995E9B7282C">Running ClassFileServer</a>).</p>
<p>A second, and often simpler, way is through the standard Java URL API. You can communicate securely with an SSL-enabled web server by using the HTTPS URL protocol or scheme using the <a href="https://docs.oracle.com/javase/10/docs/api/java/net/URL.html" target="_blank"><span class="apiname">java.net.URL</span></a> class.</p>
<p>Support for HTTPS URL schemes is implemented in many of the common browsers, which allows access to secured communications without requiring the socket-level API provided with JSSE. An example URL is <code class="codeph">https://www.verisign.com</code>.</p>
<p>The trust and key management for the HTTPS URL implementation is environment-specific. The JSSE implementation provides an HTTPS URL implementation. To use a different HTTPS protocol implementation, set the <code class="codeph">java.protocol.handler.pkgs</code> system property; see <a href="java-secure-socket-extension-jsse-reference-guide.htm#GUID-460C3E5A-A373-4742-9E84-EB42A7A3C363">How to Specify a java.lang.System Property</a>.</p>
</div>
<div class="sect2"><a id="GUID-BC38D378-DF50-4B41-8489-67B6AB621FAB"></a>
<h2 id="JSSEC-GUID-BC38D378-DF50-4B41-8489-67B6AB621FAB" class="sect2">Running URLReader</h2>
<div>
<p>The example <a href="sample-code-illustrating-https-connections.htm#GUID-BC38D378-DF50-4B41-8489-67B6AB621FAB__URLREADER.JAVA-33086510"><code>URLReader.java</code></a> illustrates using a URL to access resources on a secure site. By default, this example connects to <code class="codeph">www.verisign.com</code>, but it can be adapted to connect to <a href="sample-code-illustrating-secure-socket-connection-client-and-server.htm#GUID-3561ED02-174C-4E65-8BB1-5995E9B7282C__CLASSFILESERVER.JAVA-3314B74B"><code>ClassFileServer.java</code></a>. To do so, the URL will need to be modified to point to the correct address. You may also need to update the server's certificate or provide a custom <span class="apiname">HostNameVerifier</span> (see <a href="https://docs.oracle.com/javase/10/docs/api/javax/net/ssl/HttpsURLConnection.html" target="_blank"><span class="apiname">HttpsURLConnection</span></a>) if the hostname in the server's certificate doesn't match the URL's hostname.</p>
<div class="infobox-note" id="GUID-BC38D378-DF50-4B41-8489-67B6AB621FAB__GUID-19BA7A7B-2800-429C-A1F8-9536E5D75382">
<p class="notep1">Note:</p>
If you are behind a firewall, you may need to set the <code class="codeph">https.proxyHost</code> and <code class="codeph">https.proxyPort</code> system properties to correctly specify the proxy.</div>
<div class="section">
<p class="subhead2">Usage</p>
<pre dir="ltr">
java URLReader
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-BC38D378-DF50-4B41-8489-67B6AB621FAB__URLREADER.JAVA-33086510">
<p class="subhead2">URLReader.java</p>
<pre dir="ltr">
import java.net.*;
import java.io.*;

/*
 * This example illustrates using a URL to access resources
 * on a secure site.
 *
 * If you are running inside a firewall, please also set the following
 * Java system properties to the appropriate value:
 *
 *   https.proxyHost = &lt;secure proxy server hostname&gt;
 *   https.proxyPort = &lt;secure proxy server port&gt;
 *
 */

public class URLReader {
    public static void main(String[] args) throws Exception {
        URL verisign = new URL("https://www.verisign.com/");
        BufferedReader in = new BufferedReader(
                                new InputStreamReader(
                                verisign.openStream()));

        String inputLine;

        while ((inputLine = in.readLine()) != null)
            System.out.println(inputLine);

        in.close();
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-20E68036-A8A2-4297-8074-44D076845E00"></a>
<h2 id="JSSEC-GUID-20E68036-A8A2-4297-8074-44D076845E00" class="sect2">Running URLReaderWithOptions</h2>
<div>
<p>The example is very similar to <a href="sample-code-illustrating-https-connections.htm#GUID-BC38D378-DF50-4B41-8489-67B6AB621FAB__URLREADER.JAVA-33086510"><code>URLReaader.java</code></a>, but it enables you to set the system properties through main method arguments rather than as <code class="codeph">-D</code> options to the Java runtime environment.</p>
<div class="section">
<p class="subhead2">Usage</p>
<p><code class="codeph">java URLReaderWithOptions [-h <span class="variable">proxyhost</span>] [-p <span class="variable">proxyport</span>] [-k <span class="variable">protocolhandlerpkgs</span>] [-c <span class="variable">ciphersarray</span>]</code></p>
<ul style="list-style-type: disc;">
<li><code class="codeph"><span class="variable">proxyHost</span></code>: secure proxy server hostname (<code class="codeph">https.proxyHost</code>)</li>
<li><code class="codeph"><span class="variable">proxyPort</span></code>: secure proxy server port (<code class="codeph">https.proxyPort</code>)</li>
<li><code class="codeph"><span class="variable">protocolhandlerpkgs</span></code>: a pipe-separated (<code class="codeph">|</code>) list of protocol handlers (<code class="codeph">java.protocol.handler.pkgs</code>)</li>
<li><code class="codeph"><span class="variable">ciphersarray</span></code>: enabled cipher suites as a comma-separated list (<code class="codeph">https.cipherSuites</code>)</li>
</ul>
<div class="infobox-note" id="GUID-20E68036-A8A2-4297-8074-44D076845E00__GUID-91B04C04-7256-438A-8976-CFF5EC570A16">
<p class="notep1">Note:</p>
Multiple protocol handlers can be included in the <code class="codeph"><span class="variable">protocolhandlerpkgs</span></code> argument as a list with items separated by vertical bars. Multiple SSL cipher suite names can be included in the <code class="codeph"><span class="variable">ciphersarray</span></code> argument as a list with items separated by commas. The possible cipher suite names are the same as those returned by the <code class="codeph">SSLSocket.getSupportedCipherSuites()</code> method. The suite names are taken from the SSL and TLS protocol specifications.</div>
<p>You need a <code class="codeph"><span class="variable">protocolhandlerpkgs</span></code> argument only if you want to use an HTTPS protocol handler implementation other than the default one provided by Oracle.</p>
<p>If you are running the sample code behind a firewall, then you must include arguments for the proxy host and the proxy port. Additionally, you can include a list of cipher suites to enable.</p>
<p>Here is an example of running <code class="codeph">URLReaderWithOptions</code> and specifying the proxy host "webproxy" on port 8080:</p>
<pre class="codeblock" dir="ltr">
java URLReaderWithOptions -h webproxy -p 8080
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-20E68036-A8A2-4297-8074-44D076845E00__URLREADERWITHOPTIONS.JAVA-3315CF43">
<p class="subhead2">URLReaderWithOptions.java</p>
<pre dir="ltr">
import java.net.*;
import java.io.*;

/*
 * Using a URL to access resources on a secure site.
 *
 * You can optionally set the following command line options:
 *
 *     -h &lt;secure proxy server hostname&gt;
 *     -p &lt;secure proxy server port&gt;
 *     -k &lt;| separated list of protocol handlers&gt;
 *     -c &lt;enabled cipher suites as a comma separated list&gt;
 *
 */

public class URLReaderWithOptions {
    public static void main(String[] args) throws Exception {

        System.out.println("USAGE: java URLReaderWithOptions " +
            "[-h proxyhost] [-p proxyport] [-k protocolhandlerpkgs] " +
            "[-c ciphersarray]");

        // initialize system properties
        char option = 'd';
        for (int i = 0; i &lt; args.length; i++) {
            System.out.println(option+": "+args[i]);
            switch(option) {
            case 'h':
                System.setProperty("https.proxyHost", args[i]);
                option = 'd';
                break;
            case 'p':
                System.setProperty("https.proxyPort", args[i]);
                option = 'd';
                break;
            case 'k':
                System.setProperty("java.protocol.handler.pkgs", args[i]);
                option = 'd';
                break;
            case 'c':
                System.setProperty("https.cipherSuites", args[i]);
                option = 'd';
                break;
            default:
                // get the next option
                if (args[i].startsWith("-")) {
                    option = args[i].charAt(1);
                }
            }
        }

        URL verisign = new URL("https://www.verisign.com/");
        BufferedReader in = new BufferedReader(
                                new InputStreamReader(
                                verisign.openStream()));

        String inputLine;

        while ((inputLine = in.readLine()) != null)
            System.out.println(inputLine);

        in.close();
    }
}
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment455">
<tr>
<td class="cellalignment462">
<table class="cellalignment460">
<tr>
<td class="cellalignment459"><a href="sample-code-illustrating-secure-socket-connection-client-and-server.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment459"><a href="sample-code-illustrating-secure-rmi-connection.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment464">
<table class="cellalignment458">
<tr>
<td class="cellalignment459"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment459"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment459"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
