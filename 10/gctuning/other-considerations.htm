<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Other Considerations</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This section covers other situations that affect garbage collection." />
<meta name="dcterms.created" content="2018-03-13T02:53:16Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide" />
<meta name="dcterms.identifier" content="E92394-01" />
<meta name="dcterms.isVersionOf" content="JSGCT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2014, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="garbage-first-garbage-collector-tuning.htm" title="Previous" type="text/html" />
<link rel="alternate" href="JSGCT.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-28448147-EC4C-4C94-9A54-54152AD21CB8"></a> <span id="PAGE" style="display:none;">14/14</span> <!-- End Header -->
<h1 id="JSGCT-GUID-28448147-EC4C-4C94-9A54-54152AD21CB8" class="sect1"><span class="enumeration_chapter">11</span> Other Considerations</h1>
<div>
<p>This section covers other situations that affect garbage collection.</p>
<div class="section">
<p class="subhead1">Topics</p>
<ul style="list-style-type: disc;">
<li><a href="other-considerations.htm#GUID-A7B0991C-661F-47BE-AEDB-74C6BDBDE181" title="Some applications interact with garbage collection by using finalization and weak, soft, or phantom references.">Finalization and Weak, Soft, and Phantom References</a></li>
<li><a href="other-considerations.htm#GUID-9E3E5371-20F5-4B70-A003-9D7851B115AF" title="Another way that applications can interact with garbage collection is by calling full garbage collections explicitly by using System.gc().">Explicit Garbage Collection</a></li>
<li><a href="other-considerations.htm#GUID-BFB89453-60C0-42AC-81CA-87D59B0ACE2E" title="Soft references are kept alive longer in the server virtual machine than in the client.">Soft References</a></li>
<li><a href="other-considerations.htm#GUID-B29C9153-3530-4C15-9154-E74F44E3DAD9" title="Java classes have an internal representation within Java Hotspot VM and are referred to as class metadata.">Class Metadata</a></li>
</ul>
</div>
<!-- class="section" --></div>
<div class="props_rev_3"><a id="GUID-A7B0991C-661F-47BE-AEDB-74C6BDBDE181"></a>
<h2 id="JSGCT-GUID-A7B0991C-661F-47BE-AEDB-74C6BDBDE181" class="sect2">Finalization and Weak, Soft, and Phantom References</h2>
<div>
<p>Some applications interact with garbage collection by using finalization and weak, soft, or phantom references.</p>
<p>These features can create performance artifacts at the Java programming language level. An example of this is relying on finalization to close file descriptors, which makes an external resource (descriptors) dependent on garbage collection promptness. Relying on garbage collection to manage resources other than memory is almost always a bad idea.</p>
<p>See <a href="http://www.devx.com/Java/Article/30192" target="_blank">How to Handle Java Finalization's Memory-Retention Issues</a>, which discusses in depth some of the pitfalls of finalization and techniques for avoiding them.</p>
</div>
</div>
<div class="props_rev_3"><a id="GUID-9E3E5371-20F5-4B70-A003-9D7851B115AF"></a>
<h2 id="JSGCT-GUID-9E3E5371-20F5-4B70-A003-9D7851B115AF" class="sect2">Explicit Garbage Collection</h2>
<div>
<p>Another way that applications can interact with garbage collection is by calling full garbage collections explicitly by using <code class="codeph">System.gc()</code>.</p>
<p>This can force a major collection to be done when it may not be necessary (for example, when a minor collection would suffice), and so in general should be avoided. The performance effect of explicit garbage collections can be measured by disabling them using the flag <code class="codeph">-XX:+DisableExplicitGC</code>, which causes the VM to ignore calls to <code class="codeph">System.gc()</code>.</p>
<p>One of the most commonly encountered uses of explicit garbage collection occurs with the distributed garbage collection (DGC) of Remote Method Invocation (RMI). Applications using RMI refer to objects in other virtual machines. Garbage cannot be collected in these distributed applications without occasionally invoking garbage collection of the local heap, so RMI forces full collections periodically. The frequency of these collections can be controlled with properties, as in the following example:</p>
<pre dir="ltr">
java -Dsun.rmi.dgc.client.gcInterval=3600000
    -Dsun.rmi.dgc.server.gcInterval=3600000 ...
</pre>
<p>This example specifies explicit garbage collection once per hour instead of the default rate of once per minute. However, this may also cause some objects to take much longer to be reclaimed. These properties can be set as high as <code class="codeph">Long.MAX_VALUE</code> to make the time between explicit collections effectively infinite if there's no desire for an upper bound on the timeliness of DGC activity.</p>
</div>
</div>
<div class="props_rev_3"><a id="GUID-BFB89453-60C0-42AC-81CA-87D59B0ACE2E"></a>
<h2 id="JSGCT-GUID-BFB89453-60C0-42AC-81CA-87D59B0ACE2E" class="sect2">Soft References</h2>
<div>
<p>Soft references are kept alive longer in the server virtual machine than in the client.</p>
<p>The rate of clearing can be controlled with the command-line option <code class="codeph">-XX:SoftRefLRUPolicyMSPerMB=</code><code class="codeph">&lt;N&gt;</code>, which specifies the number of milliseconds (ms) a soft reference will be kept alive (once it is no longer strongly reachable) for each megabyte of free space in the heap. The default value is 1000 ms per megabyte, which means that a soft reference will survive (after the last strong reference to the object has been collected) for 1 second for each megabyte of free space in the heap. This is an approximate figure because soft references are cleared only during garbage collection, which may occur sporadically.</p>
</div>
</div>
<div class="props_rev_3"><a id="GUID-B29C9153-3530-4C15-9154-E74F44E3DAD9"></a>
<h2 id="JSGCT-GUID-B29C9153-3530-4C15-9154-E74F44E3DAD9" class="sect2">Class Metadata</h2>
<div>
<p>Java classes have an internal representation within Java Hotspot VM and are referred to as class metadata.</p>
<p>In previous releases of Java Hotspot VM, the class metadata was allocated in the so-called permanent generation. Starting with JDK 8, the permanent generation was removed and the class metadata is allocated in native memory. The amount of native memory that can be used for class metadata is by default unlimited. Use the option <code class="codeph">-XX:MaxMetaspaceSize</code> to put an upper limit on the amount of native memory used for class metadata.</p>
<p>Java Hotspot VM explicitly manages the space used for metadata. Space is requested from the OS and then divided into chunks. A class loader allocates space for metadata from its chunks (a chunk is bound to a specific class loader). When classes are unloaded for a class loader, its chunks are recycled for reuse or returned to the OS. Metadata uses space allocated by <code class="codeph">mmap</code>, not by <code class="codeph">malloc</code>.</p>
<p>If <code class="codeph">-XX:UseCompressedOops</code> is turned on and <code class="codeph">-XX:UseCompressedClassesPointers</code> is used, then two logically different areas of native memory are used for class metadata. <code class="codeph">-XX:UseCompressedClassPointers</code> uses a 32-bit offset to represent the class pointer in a 64-bit process as does <code class="codeph">-XX:UseCompressedOops</code> for Java object references. A region is allocated for these compressed class pointers (the 32-bit offsets). The size of the region can be set with <code class="codeph">-XX:CompressedClassSpaceSize</code> and is 1 gigabyte (GB) by default. The space for the compressed class pointers is reserved as space allocated by <code class="codeph">-XX:mmap</code> at initialization and committed as needed. The <code class="codeph">-XX:MaxMetaspaceSize</code> applies to the sum of the committed compressed class space and the space for the other class metadata.</p>
<p>Class metadata is deallocated when the corresponding Java class is unloaded. Java classes are unloaded as a result of garbage collection, and garbage collections may be induced to unload classes and deallocate class metadata. When the space committed for class metadata reaches a certain level (a high-water mark), a garbage collection is induced. After the garbage collection, the high-water mark may be raised or lowered depending on the amount of space freed from class metadata. The high-water mark would be raised so as not to induce another garbage collection too soon. The high-water mark is initially set to the value of the command-line option <code class="codeph">-XX:MetaspaceSize</code>. It is raised or lowered based on the options <code class="codeph">-XX:MaxMetaspaceFreeRatio</code> and <code class="codeph">-XX:MinMetaspaceFreeRatio</code>. If the committed space available for class metadata as a percentage of the total committed space for class metadata is greater than <code class="codeph">-XX:MaxMetaspaceFreeRatio</code>, then the high-water mark will be lowered. If it's less than <code class="codeph">-XX:MinMetaspaceFreeRatio</code>, then the high-water mark will be raised.</p>
<p>Specify a higher value for the option <code class="codeph">-XX:MetaspaceSize</code> to avoid early garbage collections induced for class metadata. The amount of class metadata allocated for an application is application-dependent and general guidelines do not exist for the selection of <code class="codeph">-XX:MetaspaceSize</code>. The default size of <code class="codeph">-XX:MetaspaceSize</code> is platform-dependent and ranges from 12 MB to about 20 MB.</p>
<p>Information about the space used for metadata is included in a printout of the heap. The following is typical output:.</p>
<pre dir="ltr">
[0,296s][info][gc,heap,exit] Heap
[0,296s][info][gc,heap,exit] garbage-first heap total 514048K, used 0K [0x00000005ca600000, 0x00000005ca8007d8, 0x00000007c0000000)
[0,296s][info][gc,heap,exit] region size 2048K, 1 young (2048K), 0 survivors (0K)
[0,296s][info][gc,heap,exit] Metaspace used 2575K, capacity 4480K, committed 4480K, reserved 1056768K
[0,296s][info][gc,heap,exit] class space used 238K, capacity 384K, committed 384K, reserved 1048576K
</pre>
<p>In the line beginning with <code class="codeph">Metaspace</code>, the <code class="codeph">used</code> value is the amount of space used for loaded classes. The <code class="codeph">capacity</code> value is the space available for metadata in currently allocated chunks. The <code class="codeph">committed</code> value is the amount of space available for chunks. The <code class="codeph">reserved</code> value is the amount of space reserved (but not necessarily committed) for metadata. The line beginning with <code class="codeph">class space</code> contains the corresponding values for the metadata for compressed class pointers.</p>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment57">
<tr>
<td class="cellalignment69">
<table class="cellalignment77">
<tr>
<td class="cellalignment61"><a href="garbage-first-garbage-collector-tuning.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2014, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment71">
<table class="cellalignment60">
<tr>
<td class="cellalignment61"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment61"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment61"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
