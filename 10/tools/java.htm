<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>java</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="You can use the java command to launch a Java application." />
<meta name="dcterms.created" content="2018-03-13T12:23:13Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Tools Reference" />
<meta name="dcterms.identifier" content="E91146-01" />
<meta name="dcterms.isVersionOf" content="JSWOR" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="javadoc.htm" title="Previous" type="text/html" />
<link rel="Next" href="appletviewer.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSWOR.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE"></a> <span id="PAGE" style="display:none;">9/63</span> <!-- End Header -->
<a id="JSWOR625"></a><a id="JSWOR626"></a><a id="JSWOR624"></a>
<h1 id="JSWOR-GUID-3B1CE181-CD30-4178-9602-230B800D4FAE" class="sect1">java</h1>
<div>
<p><span>You can use the <code class="codeph">java</code> command to launch a Java application.</span></p>
<div class="section">
<p class="subhead1">Synopsis</p>
<p>To execute a class:</p>
<pre dir="ltr">
java [<span class="variable">options</span>] <span class="variable">mainclass</span> [<span class="variable">args...</span>] 
</pre>
<p>To execute a JAR file:</p>
<pre dir="ltr">
java [<span class="variable">options</span>] -jar <span class="variable">jarfile</span> [<span class="variable">args...</span>]
</pre>
<p>To execute the main class in a module:</p>
<pre dir="ltr">
java [<span class="variable">options</span>] [--module-path <span class="variable">modulepath</span>] --module <span class="variable">module</span>[/<span class="variable">mainclass</span>] [<span class="variable">args...</span>] 
</pre>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-059E2BD9-881B-421D-9170-6AA051434E10"><!-- --></a><code class="codeph"><span class="variable">options</span></code></dt>
<dd>
<p>Optional: Specifies command-line options separated by spaces. See <a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__CBBIJCHG">Overview of Java Options</a> for a description of available options.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F01F6A46-F2B5-4F6E-9680-21E3EF310453"><!-- --></a><code class="codeph"><span class="variable">mainclass</span></code></dt>
<dd>
<p>Specifies the name of the class to be launched. Command-line entries following <code class="codeph"><span class="variable">classname</span></code> are the arguments for the main method.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-308F58A7-B518-4D13-9634-CD1A8126F0B7"><!-- --></a><code class="codeph"><span class="variable">jarfile</span></code></dt>
<dd>
<p>Specifies the name of the Java Archive (JAR) file to be called. Used only with the <code class="codeph">-jar</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A16B893D-C862-4205-A87F-05926DD81CA4"><!-- --></a>[<code class="codeph">--module-path <span class="variable">modulepath</span></code>]</dt>
<dd>
<p>Optional: Specifies the path to a semicolon-separated (;) list of directories in which each directory is a directory of modules Used only with the <code class="codeph">--module-path</code> option. See <a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABDJJFI">Standard Options for Java</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5F97A247-EF3F-4381-84C4-AC88723DBDED"><!-- --></a><code class="codeph"><span class="variable">module</span>[/<span class="variable">mainclass</span>]</code></dt>
<dd>
<p>Specifies the name of the initial <code class="codeph"><span class="variable">module</span></code> to resolve and, if it isn&rsquo;t specified by the <code class="codeph"><span class="variable">module</span></code>, then specifies the name of the <code class="codeph"><span class="variable">mainclass</span></code> to execute. Used only with the <code class="codeph">--module</code> or <code class="codeph">-m</code> option. See <a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABDJJFI">Standard Options for Java</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-556F694E-7775-46E3-91D3-A5459DF83C03"><!-- --></a><code class="codeph"><span class="variable">args</span></code></dt>
<dd>
<div class="p">Optional: Specifies the arguments passed to the <code class="codeph">main</code> method separated by spaces.
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-4847CDA7-F095-45F4-A6BF-F37825D4ED25">
<p class="notep1">Note:</p>
<p>Arguments following the main class, <code class="codeph">-jar <span class="variable">jarfile</span></code> , <code class="codeph">-m</code> or <code class="codeph">--module <span class="variable">module</span>/<span class="variable">mainclass</span></code> are passed as the arguments to the main class.</p>
</div>
</div>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Description</p>
<p>The <code class="codeph">java</code> command starts a Java application. It does this by starting the Java Runtime Environment (JRE), loading the specified class, and calling that class's <code class="codeph">main()</code> method. The method must be declared <code class="codeph">public</code> and <code class="codeph">static</code>, it must not return any value, and it must accept a <code class="codeph">String</code> array as a parameter. The method declaration has the following form:</p>
<pre dir="ltr">
public static void main(String[] args)
</pre>
<p>A new launcher environment variable, <code class="codeph">JDK_JAVA_OPTIONS</code>, was introduced in JDK 9 that prepends its content to the actual command line of the <code class="codeph">java</code> launcher. See <a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__USINGTHEJDK_JAVA_OPTIONSLAUNCHERENV-F3C0E3BA">Using the JDK_JAVA_OPTIONS Launcher Environment Variable</a>.</p>
<p>The <code class="codeph">java</code> command can be used to launch a JavaFX application by loading a class that either has a <code class="codeph">main()</code> method or that extends the <code class="codeph">javafx.application.Application</code>. In the latter case, the launcher constructs an instance of the <code class="codeph">Application</code> class, calls its <code class="codeph">init()</code> method, and then calls the <code class="codeph">start(javafx.stage.Stage)</code> method.</p>
<p>By default, the first argument that isn&rsquo;t an option of the <code class="codeph">java</code> command is the fully qualified name of the class to be called. If the <code class="codeph">-jar</code> option is specified, then its argument is the name of the JAR file containing class and resource files for the application. The startup class must be indicated by the <code class="codeph">Main-Class</code> manifest header in its manifest file.</p>
<p>Arguments after the class file name or the JAR file name are passed to the <code class="codeph">main()</code> method.</p>
<p><span class="bold">Windows:</span> The <code class="codeph">javaw</code> command is identical to <code class="codeph">java</code>, except that with <code class="codeph">javaw</code> there&rsquo;s no associated console window. Use <code class="codeph">javaw</code> when you don&rsquo;t want a command prompt window to appear. The <code class="codeph">javaw</code> launcher will, however, display a dialog box with error information if a launch fails.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__USINGTHEJDK_JAVA_OPTIONSLAUNCHERENV-F3C0E3BA">
<p class="subhead1">Using the JDK_JAVA_OPTIONS Launcher Environment Variable</p>
<p><code class="codeph">JDK_JAVA_OPTIONS</code> prepends its content to the options parsed from the command line. The content of the <code class="codeph">JDK_JAVA_OPTIONS</code> environment variable is a list of arguments separated by white-space characters (as determined by <code class="codeph">isspace()</code>). These are prepended to the command line arguments passed to <code class="codeph">java</code> launcher. The encoding requirement for the environment variable is the same as the <code class="codeph">java</code> command line on the system. <code class="codeph">JDK_JAVA_OPTIONS</code> environment variable content is treated in the same manner as that specified in the command line.</p>
<p>Single (<code class="codeph">'</code>) or double (<code class="codeph">"</code>) quotes can be used to enclose arguments that&nbsp;contain whitespace characters. All content between the open quote and the first matching close quote are preserved by simply removing the pair of quotes. In case a matching quote is not found, the launcher will abort with an error message. <code class="codeph">@<span class="variable">files</span></code> are supported as they are specified in the command line. However, as in <code class="codeph">@<span class="variable">files</span></code>, use of a wildcard is not supported. In order to mitigate potential misuse of <code class="codeph">JDK_JAVA_OPTIONS</code> behavior, options that specify the main class (such as <code class="codeph">-jar</code>) or cause the <code class="codeph">java</code> launcher to exit without executing the main class (such as <code class="codeph">-h</code>) are disallowed in the environment variable. If any of these options appear in the environment variable, the launcher will abort with an error message. When <code class="codeph">JDK_JAVA_OPTIONS</code> is set, the launcher prints a message to stderr as a reminder.</p>
<p><span class="bold">Example:</span></p>
<pre dir="ltr">
export JDK_JAVA_OPTIONS='-g @file1 -Dprop=value @file2 -Dws.prop="white spaces"' 
$ java -Xint @file3
</pre>
<p>is equivalent to the command line:</p>
<pre dir="ltr">
java -g @file1 -Dprop=value @file2 -Dws.prop="white spaces" -Xint @file3
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__CBBIJCHG">
<p class="subhead1">Overview of Java Options</p>
<p>The <code class="codeph">java</code> command supports a wide range of options in the following categories:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABDJJFI">Standard Options for Java</a>: Options guaranteed to be supported by all implementations of the Java Virtual Machine (JVM). They&rsquo;re used for common actions, such as checking the version of the JRE, setting the class path, enabling verbose output, and so on.</p>
</li>
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABHDABI">Extra Options for Java</a>: General purpose options that are specific to the Java HotSpot Virtual Machine. They aren&rsquo;t guaranteed to be supported by all JVM implementations, and are subject to change. These options start with <code class="codeph">-X</code>.</p>
</li>
</ul>
<p>The advanced options aren&rsquo;t recommended for casual use. These are developer options used for tuning specific areas of the Java HotSpot Virtual Machine operation that often have specific system requirements and may require privileged access to system configuration parameters. Several examples of performance tuning are provided in <a href="java.htm#GUID-EE6BD9FA-EF6D-4C3E-AC5C-30B8762CDC1B" title="You can use the Java advanced runtime options to optimize the performance of your applications.">Performance Tuning Examples</a>. These options aren&rsquo;t guaranteed to be supported by all JVM implementations and are subject to change. Advanced options start with <code class="codeph">-XX</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABCBGHF">Advanced Runtime Options for Java</a>: Control the runtime behavior of the Java HotSpot VM.</p>
</li>
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABDDFII">Advanced JIT Compiler Options for java</a>: Control the dynamic just-in-time (JIT) compilation performed by the Java HotSpot VM.</p>
</li>
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABFJDIC">Advanced Serviceability Options for Java</a>: Enable gathering system information and performing extensive debugging.</p>
</li>
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABFAFAE">Advanced Garbage Collection Options for Java</a>: Control how garbage collection (GC) is performed by the Java HotSpot</p>
</li>
</ul>
<p>Boolean options are used to either enable a feature that&rsquo;s disabled by default or disable a feature that&rsquo;s enabled by default. Such options don&rsquo;t require a parameter. Boolean <code class="codeph">-XX</code> options are enabled using the plus sign (<code class="codeph">-XX:+<span class="variable">OptionName</span></code>) and disabled using the minus sign (<code class="codeph">-XX:-<span class="variable">OptionName</span></code>).</p>
<p>For options that require an argument, the argument may be separated from the option name by a space, a colon (:), or an equal sign (=), or the argument may directly follow the option (the exact syntax differs for each option). If you&rsquo;re expected to specify the size in bytes, then you can use no suffix, or use the suffix <code class="codeph">k</code> or <code class="codeph">K</code> for kilobytes (KB), <code class="codeph">m</code> or <code class="codeph">M</code> for megabytes (MB), or <code class="codeph">g</code> or <code class="codeph">G</code> for gigabytes (GB). For example, to set the size to 8 GB, you can specify either <code class="codeph">8g</code>, <code class="codeph">8192m</code>, <code class="codeph">8388608k</code>, or <code class="codeph">8589934592</code> as the argument. If you are expected to specify the percentage, then use a number from 0 to 1. For example, specify <code class="codeph">0.25</code> for 25%.</p>
<p>The following sections describe the options that are obsolete, deprecated, and removed in JDK 10:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__OBSOLETEJAVAOPTIONS-A4E7030A">Obsolete Java Options</a>: Accepted but ignored. A warning is issued when they&rsquo;re used.</p>
</li>
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__DEPRECATEDJAVAOPTIONS-A4E6FB83">Deprecated Java Options</a>: Accepted and acted upon. A warning is issued when they&rsquo;re used.</p>
</li>
<li>
<p><a href="java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__REMOVEDJAVAOPTIONS-A4E6F213">Removed Java Options</a>: Removed in JDK 9. Using them results in an error.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABDJJFI">
<p class="subhead1">Standard Options for Java</p>
<p>These are the most commonly used options supported by all implementations of the JVM.</p>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-8171D88B-7A9D-4530-81E5-62420A4E36B6">
<p class="notep1">Note:</p>
<p>To specify an argument for a long option, you can use either <code class="codeph">--<span class="variable">name</span>=<span class="variable">value</span></code> or <code class="codeph">--<span class="variable">name</span> <span class="variable">value</span></code>.</p>
</div>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-37DE51D5-4B5C-4348-BB23-F039273ABAA4"><!-- --></a><code class="codeph">-agentlib:<span class="variable">libname</span>[=<span class="variable">options</span>]</code></dt>
<dd>
<p>Loads the specified native agent library. After the library name, a comma-separated list of options specific to the library can be used.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> If the option <code class="codeph">-agentlib:foo</code> is specified, then the JVM attempts to load the library named <code class="codeph">libfoo.so</code> in the location specified by the <code class="codeph">LD_LIBRARY_PATH</code> system variable (on OS X this variable is <code class="codeph">DYLD_LIBRARY_PATH</code>).</p>
</li>
<li>
<p><span class="bold">Windows:</span> If the option <code class="codeph">-agentlib:foo</code> is specified, then the JVM attempts to load the library named <code class="codeph">foo.dll</code> in the location specified by the <code class="codeph">PATH</code> system variable.</p>
<p>The following example shows how to load the Java Debug Wire Protocol (JDWP) library and listen for the socket connection on port 8000, suspending the JVM before the main class loads:</p>
<pre dir="ltr">
-agentlib:jdwp=transport=dt_socket,server=y,address=8000
</pre></li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E3E7D982-EB89-4582-9CAD-C665B6E956F0"><!-- --></a><code class="codeph">-agentpath:<span class="variable">pathname</span>[=<span class="variable">options</span>]</code></dt>
<dd>
<p>Loads the native agent library specified by the absolute path name. This option is equivalent to <code class="codeph">-agentlib</code> but uses the full path and file name of the library.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-8CAE5D46-28F3-49B8-AAF5-EE79DC092E5D"><!-- --></a><code class="codeph">--class-path <span class="variable">classpath</span></code>, <code class="codeph">-classpath <span class="variable">classpath</span></code> , or <code class="codeph">-cp <span class="variable">classpath</span></code></dt>
<dd>
<p>A semicolon (<code class="codeph">;</code>) separated list of directories, JAR archives, and ZIP archives to search for class files.</p>
<p>Specifying <code class="codeph"><span class="variable">classpath</span></code> overrides any setting of the <code class="codeph">CLASSPATH</code> environment variable. If the class path option isn&rsquo;t used and <code class="codeph"><span class="variable">classpath</span></code> isn&rsquo;t set, then the user class path consists of the current directory (.).</p>
<p>As a special convenience, a class path element that contains a base name of an asterisk (*) is considered equivalent to specifying a list of all the files in the directory with the extension <code class="codeph">.jar</code> or <code class="codeph">.JAR</code> . A Java program can&rsquo;t tell the difference between the two invocations. For example, if the directory <code>mydir</code> contains <code class="codeph">a.jar</code> and <code class="codeph">b.JAR</code>, then the class path element <code>mydir/*</code> is expanded to <code class="codeph">A.jar:b.JAR</code>, except that the order of JAR files is unspecified. All <code class="codeph">.jar</code> files in the specified directory, even hidden ones, are included in the list. A class path entry consisting of an asterisk (*) expands to a list of all the jar files in the current directory. The <code class="codeph">CLASSPATH</code> environment variable, where defined, is similarly expanded. Any class path wildcard expansion that occurs before the Java VM is started. Java programs never see wildcards that aren&rsquo;t expanded except by querying the environment, such as by calling <code class="codeph">System.getenv("CLASSPATH")</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-9C11973A-1EBD-4C6B-ABA4-FA7F31535E45"><!-- --></a><code class="codeph">--disable-@files</code></dt>
<dd>
<p>Can be used anywhere on the command line, including in an argument file, to prevent further <code class="codeph">@filename</code> expansion. This option stops expanding <code class="codeph">@argfiles</code> after the option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-30E227AA-D105-45A1-98F8-66B48B960391"><!-- --></a><code class="codeph">--module-path <span class="variable">modulepath</span>...</code> or <code class="codeph">-p <span class="variable">modulepath</span></code></dt>
<dd>
<p>A semicolon (;) separated list of directories in which each directory is a directory of modules.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D924FD85-9E53-414B-85F4-4254E138799B"><!-- --></a><code class="codeph">--upgrade-module-path <span class="variable">modulepath</span>...</code></dt>
<dd>
<p>A semicolon (;) separated list of directories in which each directory is a directory of modules that replace upgradeable modules in the runtime image.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-688B46ED-0337-4066-B40C-499731FE7F4B"><!-- --></a><code class="codeph">--add-modules <span class="variable">module</span>[,<span class="variable">module</span>...]</code></dt>
<dd>
<p>Specifies the root modules to resolve in addition to the initial module. <code class="codeph"><span class="variable">module</span></code> also can be <code class="codeph">ALL-DEFAULT</code>, <code class="codeph">ALL-SYSTEM</code>, and <code class="codeph">ALL-MODULE-PATH</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-8A27E339-DA5C-4179-BFFE-FAA4604DB9A5"><!-- --></a><code class="codeph">--list-modules</code></dt>
<dd>
<p>Lists the observable modules and then exits.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D7226FEE-B19A-4C59-9CB4-90AB13470037"><!-- --></a><code class="codeph">-d <span class="variable">module</span></code> or <code class="codeph">--describe-module <span class="variable">module</span></code></dt>
<dd>
<p>Describes a specified module and then exits.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FFEF90E4-F22E-4B53-91CB-8F15B5CDDB30"><!-- --></a><code class="codeph">--dry-run</code></dt>
<dd>
<p>Creates the VM but doesn&rsquo;t execute the main method. This <code class="codeph">--dry-run</code> option might be useful for validating the command-line options such as the module system configuration.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3D7A967D-7B51-4518-B7A0-A8C7DF686820"><!-- --></a><code class="codeph">--validate-modules</code></dt>
<dd>
<p>Validates all modules and exit. This option is helpful for finding conflicts and other errors with modules on the module path.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F6A19E5C-0E9C-4376-BA5C-11571082F509"><!-- --></a><code class="codeph">-D<span class="variable">property</span>=<span class="variable">value</span></code></dt>
<dd>
<p>Sets a system property value. The <code class="codeph"><span class="variable">property</span></code> variable is a string with no spaces that represents the name of the property. The <code class="codeph"><span class="variable">value</span></code> variable is a string that represents the value of the property. If <code class="codeph"><span class="variable">value</span></code> is a string with spaces, then enclose it in quotation marks (for example <code class="codeph">-Dfoo="foo bar"</code>).</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2327FFCA-5148-466F-B5D3-F3BEC8726B94"><!-- --></a><code class="codeph">-disableassertions[:[<span class="variable">packagename</span>]...|:<span class="variable">classname</span>]</code> or <code class="codeph">-da[:[<span class="variable">packagename</span>]...|:<span class="variable">classname</span>]</code></dt>
<dd>
<p>Disables assertions. By default, assertions are disabled in all packages and classes. With no arguments, <code class="codeph">-disableassertions</code> (<code class="codeph">-da</code>) disables assertions in all packages and classes. With the <code class="codeph"><span class="variable">packagename</span></code> argument ending in <code class="codeph">...</code>, the switch disables assertions in the specified package and any subpackages. If the argument is simply <code class="codeph">...</code>, then the switch disables assertions in the unnamed package in the current working directory. With the <code class="codeph"><span class="variable">classname</span></code> argument, the switch disables assertions in the specified class.</p>
<p>The <code class="codeph">-disableassertions</code> (<code class="codeph">-da</code>) option applies to all class loaders and to system classes (which don&rsquo;t have a class loader). There&rsquo;s one exception to this rule: If the option is provided with no arguments, then it doesn&rsquo;t apply to system classes. This makes it easy to disable assertions in all classes except for system classes. The <code class="codeph">-disablesystemassertions</code> option enables you to disable assertions in all system classes. To explicitly enable assertions in specific packages or classes, use the <code class="codeph">-enableassertions</code> (<code class="codeph">-ea</code>) option. Both options can be used at the same time. For example, to run the <code class="codeph">MyClass</code> application with assertions enabled in the package <code class="codeph">com.wombat.fruitbat</code> (and any subpackages) but disabled in the class <code class="codeph">com.wombat.fruitbat.Brickbat</code>, use the following command:</p>
<pre dir="ltr">
java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat MyClass
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-985A5BDE-6111-49BC-8CD9-7A1EE971EDA1"><!-- --></a><code class="codeph">-disablesystemassertions</code> or <code class="codeph">-dsa</code></dt>
<dd>
<p>Disables assertions in all system classes.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D152AEF8-E151-422E-9389-2F2D5BBD85B2"><!-- --></a><code class="codeph">-enableassertions[:[<span class="variable">packagename</span>]...|:<span class="variable">classname</span>]</code> or <code class="codeph">-ea[:[<span class="variable">packagename</span>]...|:<span class="variable">classname</span>]</code></dt>
<dd>
<p>Enables assertions. By default, assertions are disabled in all packages and classes. With no arguments, <code class="codeph">-enableassertions</code> (<code class="codeph">-ea</code>) enables assertions in all packages and classes. With the <code class="codeph"><span class="variable">packagename</span></code> argument ending in <code class="codeph">...</code>, the switch enables assertions in the specified package and any subpackages. If the argument is simply <code class="codeph">...</code>, then the switch enables assertions in the unnamed package in the current working directory. With the <code class="codeph"><span class="variable">classname</span></code> argument, the switch enables assertions in the specified class.</p>
<p>The <code class="codeph">-enableassertions</code> (<code class="codeph">-ea</code>) option applies to all class loaders and to system classes (which don&rsquo;t have a class loader). There&rsquo;s one exception to this rule: If the option is provided with no arguments, then it doesn&rsquo;t apply to system classes. This makes it easy to enable assertions in all classes except for system classes. The <code class="codeph">-enablesystemassertions</code> option provides a separate switch to enable assertions in all system classes. To explicitly disable assertions in specific packages or classes, use the <code class="codeph">-disableassertions</code> (<code class="codeph">-da</code>) option. If a single command contains multiple instances of these switches, then they&rsquo;re processed in order, before loading any classes. For example, to run the <code class="codeph">MyClass</code> application with assertions enabled only in the package <code class="codeph">com.wombat.fruitbat</code> (and any subpackages) but disabled in the class <code class="codeph">com.wombat.fruitbat.Brickbat</code>, use the following command:</p>
<pre dir="ltr">
java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat MyClass
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-77DBFA33-F57D-49BB-840C-C176AE754A78"><!-- --></a><code class="codeph">-enablesystemassertions</code> or <code class="codeph">-esa</code></dt>
<dd>
<p>Enables assertions in all system classes.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B3A5F675-7921-4FAA-A0E7-49283D1F9A74"><!-- --></a><code class="codeph">-help</code> or <code class="codeph">-?</code></dt>
<dd>
<p>Prints the help message to the error stream.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0DDAB3BE-09B9-41AA-B5E8-3AFB2BB71FE8"><!-- --></a><code class="codeph">--help</code></dt>
<dd>
<p>Prints the help message to the output stream.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0F559BD8-4BB2-4365-9F9C-610B3D0FB07A"><!-- --></a><code class="codeph">-jar <span class="variable">filename</span></code></dt>
<dd>
<p>Executes a program encapsulated in a JAR file. The <code class="codeph"><span class="variable">filename</span></code> argument is the name of a JAR file with a manifest that contains a line in the form <code class="codeph">Main-Class:<span class="variable">classname</span></code> that defines the class with the <code class="codeph">public static void main(String[] args)</code> method that serves as your application's starting point. When you use the <code class="codeph">-jar</code> option, the specified JAR file is the source of all user classes, and other class path settings are ignored. If you&rsquo;re using JAR files, then see: <a href="jar.htm#GUID-51C11B76-D9F6-4BC2-A805-3C847E857867" title="You can use the jar command to create an archive for classes and resources, and to manipulate or restore individual classes or resources from an archive.">jar</a></p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6041C1F1-4A31-4339-AFD9-083F4802BECE"><!-- --></a><code class="codeph">-javaagent:<span class="variable">jarpath</span>[=<span class="variable">options</span>]</code></dt>
<dd>
<p>Loads the specified Java programming language agent.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D010431B-4ABF-4DEB-A0E6-F5B2B3FBF562"><!-- --></a><code class="codeph">--show-version</code> or <code class="codeph">-showversion</code></dt>
<dd>
<p>Displays version information and continues execution of the application. This option is equivalent to the <code class="codeph">-version</code> option except that the latter instructs the JVM to exit after displaying version information.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-00385B33-695B-4A56-AC22-870BEE3D0D10"><!-- --></a><code class="codeph">--show-module-resolution</code></dt>
<dd>
<p>Shows module resolution output during startup.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-38DE3394-D6AD-4F49-9A68-E15D9F88C460"><!-- --></a><code class="codeph">-splash:<span class="variable">imgname</span></code></dt>
<dd>
<p>Shows the splash screen with the image specified by <code class="codeph"><span class="variable">imgname</span></code>. HiDPI scaled images are automatically supported and used if available. The unscaled image file name, such as <code class="codeph">image.ext</code>, should always be passed as the argument to the <code class="codeph">-splash</code> option. The most appropriate scaled image provided is picked up automatically.</p>
<p>For example, to show the <code class="codeph">splash.gif</code> file from the <code class="codeph">images</code> directory when starting your application, use the following option:</p>
<pre dir="ltr">
-splash:images/splash.gif
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1C3A14C6-9D80-40C7-BA58-00308195430C"><!-- --></a><code class="codeph">-verbose:class</code></dt>
<dd>
<p>Displays information about each loaded class.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-224B9F78-A997-4717-B09F-0403FEE4DD6A"><!-- --></a><code class="codeph">-verbose:gc</code></dt>
<dd>
<p>Displays information about each garbage collection (GC) event.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E33A5786-740C-4B9B-8D7D-2138AC6369ED"><!-- --></a><code class="codeph">-verbose:jni</code></dt>
<dd>
<p>Displays information about the use of native methods and other Java Native Interface (JNI) activity.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B256CAA3-A8A6-4223-AB50-04AC22639975"><!-- --></a><code class="codeph">-verbose:module</code></dt>
<dd>
<p>Displays information about the modules in use.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-621B6C2B-EDC9-4978-ACA0-ABD8BE193364"><!-- --></a><code class="codeph">--version</code> or <code class="codeph">-version</code></dt>
<dd>
<p>Displays version information and then exits. This option is equivalent to the <code class="codeph">-showversion</code> option except that the latter doesn&rsquo;t instruct the JVM to exit after displaying version information.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-BAA01DEF-3FBE-4D82-95F0-677A022CF3C7"><!-- --></a><code class="codeph">-X</code></dt>
<dd>
<p>Prints the help on extra options to the error stream.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0A4E2480-48C8-4BEB-8538-59A16E1C8D66"><!-- --></a><span class="bold"><code class="codeph">--help-extra</code></span></dt>
<dd>
<p>Prints the help on extra options to the output stream.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-36C0C35E-403B-4A05-9C54-0CBE7D237C1C"><!-- --></a><span class="bold"><code class="codeph">@<span class="variable">argument files</span></code></span></dt>
<dd>
<p>Specifies one or more argument files prefixed by <code class="codeph">@</code> used by the <code class="codeph">java</code> command. It isn&rsquo;t uncommon for the <code class="codeph">java</code> command line to be very long because of the <code class="codeph">.jar</code> files needed in the classpath. The <code class="codeph">@<span class="variable">argument files</span></code> option overcomes command-line length limitations by enabling the launcher to expand the contents of argument files after shell expansion, but before argument processing. Contents in the argument files are expanded because otherwise, they would be specified on the command line until the <code class="codeph">-Xdisable-@files</code> option was encountered.</p>
<p>The argument files can also contain the main class name and all options. If an argument file contains all of the options required by the <code class="codeph">java</code> command, then the command line could simply be:</p>
<p><code class="codeph">java @<span class="variable">argument files</span></code></p>
<p>See <a href="java.htm#GUID-4856361B-8BFD-4964-AE84-121F5F6CF111" title="You can shorten or simplify the java command by using @argument files to specify a text file that contains arguments, such as options and class names, passed to the java command. This let&rsquo;s you to create java commands of any length on any operating system.">java Command-Line Argument Files</a> for a description and examples of using <code class="codeph">@<span class="variable">argument files</span></code> .</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABHDABI">
<p class="subhead1">Extra Options for Java</p>
<p>The following <code class="codeph">java</code> options are general purpose options that are specific to the Java HotSpot Virtual Machine.</p>
<dl class="1.08* 2.92*">
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EAC0AB71-BC2D-4A56-AA38-985A897C2784"><!-- --></a><code class="codeph">-Xbatch</code></dt>
<dd>
<p>Disables background compilation. By default, the JVM compiles the method as a background task, running the method in interpreter mode until the background compilation is finished. The <code class="codeph">-Xbatch</code> flag disables background compilation so that compilation of all methods proceeds as a foreground task until completed. This option is equivalent to <code class="codeph">-XX:-BackgroundCompilation</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-99B61470-01FA-416C-A492-64C0E6861290"><!-- --></a><code class="codeph">-Xbootclasspath/a:<span class="variable">directories| zip|JAR files</span></code></dt>
<dd>
<p>Specifies a list of directories, JAR files, and ZIP archives to append to the end of the default bootstrap class path.</p>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> Colons (<code class="codeph">:</code>) separate entities in this list.</p>
<p><span class="bold">Windows:</span> Semicolons (<code class="codeph">;</code>) separate entities in this list.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-48F38B87-44D1-4F89-81EB-79AFD4565187"><!-- --></a><code class="codeph">-Xcheck:jni</code></dt>
<dd>
<p>Performs additional checks for Java Native Interface (JNI) functions. Specifically, it validates the parameters passed to the JNI function and the runtime environment data before processing the JNI request. It also checks for pending exceptions between JNI calls. Any invalid data encountered indicates a problem in the native code, and the JVM terminates with an irrecoverable error in such cases. Expect a performance degradation when this option is used.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-98BE7332-FB29-4389-979B-B065ACD9EC63"><!-- --></a><code class="codeph">-Xcomp</code></dt>
<dd>
<p>Forces compilation of methods on first invocation. By default, the Client VM (<code class="codeph">-client</code>) performs 1,000 interpreted method invocations and the Server VM (<code class="codeph">-server</code>) performs 10,000 interpreted method invocations to gather information for efficient compilation. Specifying the <code class="codeph">-Xcomp</code> option disables interpreted method invocations to increase compilation performance at the expense of efficiency. You can also change the number of interpreted method invocations before compilation using the <code class="codeph">-XX:CompileThreshold</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-110FFF6B-F9CE-497C-A695-282E57CA7532"><!-- --></a><code class="codeph">-Xdebug</code></dt>
<dd>
<p>Does nothing. Provided for backward compatibility.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F829EDAD-34E1-4612-A202-CBA86E724A43"><!-- --></a><code class="codeph">-Xdiag</code></dt>
<dd>
<p>Shows additional diagnostic messages.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5D19634F-82FC-4646-88CF-228C5A5EB58D"><!-- --></a><code class="codeph">-Xfuture</code></dt>
<dd>
<p>Enables strict class-file format checks that enforce close conformance to the class-file format specification. Developers should use this flag when developing new code. Stricter checks may become the default in future releases.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-795FE7B7-E1F2-4D76-A64C-A16FC787E6EE"><!-- --></a><code class="codeph">-Xint</code></dt>
<dd>
<p>Runs the application in interpreted-only mode. Compilation to native code is disabled, and all bytecode is executed by the interpreter. The performance benefits offered by the just-in-time (JIT) compiler aren&rsquo;t present in this mode.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F444A4AF-327C-4664-9B1E-E7AF650EED7E"><!-- --></a><code class="codeph">-Xinternalversion</code></dt>
<dd>
<p>Displays more detailed JVM version information than the <code class="codeph">-version</code> option, and then exits.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B4E93115-D032-4B17-8136-AFC03957F2E9"><!-- --></a><code class="codeph">-Xloggc:<span class="variable">option</span></code></dt>
<dd>
<p>Enables the JVM unified logging framework. Logs GC status to a file with time stamps.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0EBCD5B3-CFED-4FD8-81E4-62B64E74DAA3"><!-- --></a><code class="codeph">-Xlog:<span class="variable">option</span></code></dt>
<dd>
<p>Configure or enable logging with the Java Virtual Machine (JVM) unified logging framework. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E8EFD8B3-87E5-49F4-B37E-37AAC17CEAE2"><!-- --></a><code class="codeph">-Xmixed</code></dt>
<dd>
<p>Executes all bytecode by the interpreter except for hot methods, which are compiled to native code.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-462EA549-0BFB-4221-A803-412C63D6BA5F"><!-- --></a><code class="codeph">-Xmn <span class="variable">size</span></code></dt>
<dd>
<p>Sets the initial and maximum size (in bytes) of the heap for the young generation (nursery). Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The young generation region of the heap is used for new objects. GC is performed in this region more often than in other regions. If the size for the young generation is too small, then a lot of minor garbage collections are performed. If the size is too large, then only full garbage collections are performed, which can take a long time to complete. Oracle recommends that you keep the size for the young generation greater than 25% and less than 50% of the overall heap size. The following examples show how to set the initial and maximum size of young generation to 256 MB using various units:</p>
<pre dir="ltr">
-Xmn256m
-Xmn262144k
-Xmn268435456
</pre>
<p>Instead of the <code class="codeph">-Xmn</code> option to set both the initial and maximum size of the heap for the young generation, you can use <code class="codeph">-XX:NewSize</code> to set the initial size and <code class="codeph">-XX:MaxNewSize</code> to set the maximum size.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-897FA8D4-BC24-4443-99C2-D0F3D6BE1A77"><!-- --></a><code class="codeph">-Xms <span class="variable">size</span></code></dt>
<dd>
<p>Sets the initial size (in bytes) of the heap. This value must be a multiple of 1024 and greater than 1 MB. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The following examples show how to set the size of allocated memory to 6 MB using various units:</p>
<pre dir="ltr">
-Xms6291456
-Xms6144k
-Xms6m
</pre>
<p>If you don&rsquo;t set this option, then the initial size is set as the sum of the sizes allocated for the old generation and the young generation. The initial size of the heap for the young generation can be set using the <code class="codeph">-Xmn</code> option or the <code class="codeph">-XX:NewSize</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-98AC4535-A539-406D-9AC5-390C1AF143F0"><!-- --></a><code class="codeph">-Xmx <span class="variable">size</span></code></dt>
<dd>
<p>Specifies the maximum size (in bytes) of the memory allocation pool in bytes. This value must be a multiple of 1024 and greater than 2 MB. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The default value is chosen at runtime based on system configuration. For server deployments, <code class="codeph">-Xms</code> and <code class="codeph">-Xmx</code> are often set to the same value. The following examples show how to set the maximum allowed size of allocated memory to 80 MB using various units:</p>
<pre dir="ltr">
-Xmx83886080
-Xmx81920k
-Xmx80m
</pre>
<p>The <code class="codeph">-Xmx</code> option is equivalent to <code class="codeph">-XX:MaxHeapSize</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FF8D817B-78F6-48E8-AC5E-3FE84D03C8F2"><!-- --></a><code class="codeph">-Xnoclassgc</code></dt>
<dd>
<p>Disables garbage collection (GC) of classes. This can save some GC time, which shortens interruptions during the application run. When you specify <code class="codeph">-Xnoclassgc</code> at startup, the class objects in the application are left untouched during GC and are always be considered live. This can result in more memory being permanently occupied which, if not used carefully, throws an out-of-memory exception.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6DD65C8C-F64E-4248-8316-42BEB1102702"><!-- --></a><code class="codeph">-Xprof</code></dt>
<dd>
<p>Profiles the running program and sends profiling data to standard output. This option is provided as a utility that&rsquo;s useful in program development and isn&rsquo;t intended to be used in production systems.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A0E69D30-6CFF-49CB-A237-F709C9AD7FA6"><!-- --></a><code class="codeph">-Xrs</code></dt>
<dd>
<p>Reduces the use of operating system signals by the JVM. Shutdown hooks enable the orderly shutdown of a Java application by running user cleanup code (such as closing database connections) at shutdown, even if the JVM terminates abruptly.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span></p>
<ul style="list-style-type: disc;">
<li>
<p>The JVM catches signals to implement shutdown hooks for unexpected termination. The JVM uses <code class="codeph">SIGHUP</code>, <code class="codeph">SIGINT</code>, and <code class="codeph">SIGTERM</code> to initiate the running of shutdown hooks.</p>
</li>
<li>
<p>Applications embedding the JVM frequently need to trap signals such as <code class="codeph">SIGINT</code> or <code class="codeph">SIGTERM</code>, which can lead to interference with the JVM signal handlers. The <code class="codeph">-Xrs</code> option is available to address this issue. When <code class="codeph">-Xrs</code> is used, the signal masks for <code class="codeph">SIGINT</code>, <code class="codeph">SIGTERM</code>, <code class="codeph">SIGHUP</code>, and <code class="codeph">SIGQUIT</code> aren&rsquo;t changed by the JVM, and signal handlers for these signals aren&rsquo;t installed.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Windows:</span></p>
<ul style="list-style-type: disc;">
<li>
<p>The JVM watches for console control events to implement shutdown hooks for unexpected termination. Specifically, the JVM registers a console control handler that begins shutdown-hook processing and returns <code class="codeph">TRUE</code> for <code class="codeph">CTRL_C_EVENT</code>, <code class="codeph">CTRL_CLOSE_EVENT</code>, <code class="codeph">CTRL_LOGOFF_EVENT</code>, and <code class="codeph">CTRL_SHUTDOWN_EVENT</code>.</p>
</li>
<li>
<p>The JVM uses a similar mechanism to implement the feature of dumping thread stacks for debugging purposes. The JVM uses <code class="codeph">CTRL_BREAK_EVENT</code> to perform thread dumps.</p>
</li>
<li>
<p>If the JVM is run as a service (for example, as a servlet engine for a web server), then it can receive <code class="codeph">CTRL_LOGOFF_EVENT</code> but shouldn&rsquo;t initiate shutdown because the operating system doesn&rsquo;t actually terminate the process. To avoid possible interference such as this, the <code class="codeph">-Xrs</code> option can be used. When the <code class="codeph">-Xrs</code> option is used, the JVM doesn&rsquo;t install a console control handler, implying that it doesn&rsquo;t watch for or process <code class="codeph">CTRL_C_EVENT</code>, <code class="codeph">CTRL_CLOSE_EVENT</code>, <code class="codeph">CTRL_LOGOFF_EVENT</code>, or <code class="codeph">CTRL_SHUTDOWN_EVENT</code>.</p>
</li>
</ul>
</li>
</ul>
<p>There are two consequences of specifying <code class="codeph">-Xrs</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> <code class="codeph">SIGQUIT</code> thread dumps aren&rsquo;t available.</p>
</li>
<li>
<p><span class="bold">Windows:</span> Ctrl + Break thread dumps aren&rsquo;t available.</p>
</li>
</ul>
<p>User code is responsible for causing shutdown hooks to run, for example, by calling the <code class="codeph">System.exit()</code> when the JVM is to be terminated.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DD586FCF-F78E-45C7-AE43-5338813970E9"><!-- --></a><code class="codeph">-Xshare:<span class="variable">mode</span></code></dt>
<dd>
<p>Sets the class data sharing (CDS) mode.</p>
<p>Possible <code class="codeph"><span class="variable">mode</span></code> arguments for this option include the following:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-721EFB11-C2D1-46EF-BF14-B05029270139"><!-- --></a><span class="bold"><code class="codeph">auto</code></span></dt>
<dd>
<p>Uses CDS if possible. This is the default value for Java HotSpot 32-Bit Client VM.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7EA73CEA-E7C3-4BAE-8A1A-57B6555FFE02"><!-- --></a><span class="bold"><code class="codeph">on</code></span></dt>
<dd>
<p>Requires the use of CDS. This option prints an error message and exits if class data sharing can&rsquo;t be used.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3AD20DBB-8141-4A4D-8BC3-C6B9961144C9"><!-- --></a><span class="bold"><code class="codeph">off</code></span></dt>
<dd>
<p>Instructs not to use CDS.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FB9FF753-F72E-4B49-B637-61F119A2C096"><!-- --></a><code class="codeph">-XshowSettings</code></dt>
<dd>
<p>Shows all settings and then continues.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0A6BB1F6-1AC6-4F23-B767-746785F3167B"><!-- --></a><code class="codeph">-XshowSettings:<span class="variable">category</span></code></dt>
<dd>
<p>Shows settings and continues. Possible <code class="codeph"><span class="variable">category</span></code> arguments for this option include the following:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3FCCD7BA-A516-424D-A7F1-CF7AB16CAC22"><!-- --></a><span class="bold"><code class="codeph">all</code></span></dt>
<dd>
<p>Shows all categories of settings. This is the default value.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FDBEE5DB-226A-4616-9019-0AFFFA1B4AC1"><!-- --></a><span class="bold"><code class="codeph">locale</code></span></dt>
<dd>
<p>Shows settings related to locale.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5FEAC6B0-171C-45AC-8FC0-C92DD0560F39"><!-- --></a><span class="bold"><code class="codeph">properties</code></span></dt>
<dd>
<p>Shows settings related to system properties.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3230B631-E249-4A3A-AD91-449FD0C336F8"><!-- --></a><span class="bold"><code class="codeph">vm</code></span></dt>
<dd>
<p>Shows the settings of the JVM.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-72BC3B70-49FF-4588-979F-7F8A32FEE6DA"><!-- --></a><code class="codeph">-Xss <span class="variable">size</span></code></dt>
<dd>
<p>Sets the thread stack size (in bytes). Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate KB, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate MB, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate GB. The default value depends on the platform:</p>
<ul style="list-style-type: disc;">
<li>
<p>Linux/x64 (64-bit): 1024 KB</p>
</li>
<li>
<p>OS X (64-bit): 1024 KB</p>
</li>
<li>
<p>Oracle Solaris/x64 (64-bit): 1024 KB</p>
</li>
<li>
<p>Windows: The default value depends on virtual memory</p>
</li>
</ul>
<p>The following examples set the thread stack size to 1024 KB in different units:</p>
<pre dir="ltr">
-Xss1m
-Xss1024k
-Xss1048576
</pre>
<p>This option is similar to <code class="codeph">-XX:ThreadStackSize</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-868FC876-08B4-4B21-A09F-B867511EC1ED"><!-- --></a><code class="codeph">-Xverify:<span class="variable">mode</span></code></dt>
<dd>
<p>Sets the mode of the bytecode verifier. Bytecode verification ensures that class files are properly formed and satisfy the constraints listed in <a class="olink JSSEC-GUID-65C96219-B2AB-4205-808E-5B41CB2AD694" target="_blank" href="../security/java-security-overview1.htm#JSSEC-GUID-65C96219-B2AB-4205-808E-5B41CB2AD694">Verification of Class Files</a> in the <cite>The Java Virtual Machine Specification</cite>.</p>
<p>Don&rsquo;t turn off verification because this reduces the protection provided by Java and could cause problems due to ill-formed class files.</p>
<p>Possible <code class="codeph"><span class="variable">mode</span></code> arguments for this option include the following:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FFF0D2FE-31E9-4AF0-B1DD-B6F5F33C424A"><!-- --></a><span class="bold"><code class="codeph">remote</code></span></dt>
<dd>
<p>Verifies those classes that aren&rsquo;t loaded by the bootstrap class loader. This is the default behavior if you don&rsquo;t specify the <code class="codeph">-Xverify</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B641843A-29CA-43ED-AAD2-3BEFC9A8F336"><!-- --></a><span class="bold"><code class="codeph">all</code></span></dt>
<dd>
<p>Enables verification of all bytecodes.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C4D51CF7-4927-4240-874A-EE40EE76FB94"><!-- --></a><span class="bold"><code class="codeph">none</code></span></dt>
<dd>
<p>Disables verification of all bytecodes. Use of <code class="codeph">-Xverify:none</code> is unsupported.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-AC22D7B8-E3C4-4554-AE49-A62C9421AA7C"><!-- --></a><code class="codeph">--add-reads <span class="variable">module</span>=<span class="variable">target-module</span>(,<span class="variable">target-module</span>)*</code></dt>
<dd>
<p>Updates <code class="codeph"><span class="variable">module</span></code> to read the <code class="codeph"><span class="variable">target-module</span></code>, regardless of the module declaration. <code class="codeph"><span class="variable">target-module</span></code> can be all unnamed to read all unnamed modules.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-9C0CBDB7-C149-46EB-8595-831EF3EB0623"><!-- --></a><code class="codeph">--add-exports <span class="variable">module</span>/<span class="variable">package</span>=<span class="variable">target-module</span>(,<span class="variable">target-module</span>)*</code></dt>
<dd>
<p>Updates <code class="codeph"><span class="variable">module</span></code> to export <code class="codeph"><span class="variable">package</span></code> to <code class="codeph"><span class="variable">target-module</span></code>, regardless of module declaration. The <code class="codeph"><span class="variable">target-module</span></code> can be all unnamed to export to all unnamed modules.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-26C77A7F-58B6-429B-A397-799E2DB5DF65"><!-- --></a><code class="codeph">--add-opens <span class="variable">module</span>/<span class="variable">package</span>=<span class="variable">target-module</span>(,<span class="variable">target-module</span>)*</code></dt>
<dd>
<p>Updates <code class="codeph"><span class="variable">module</span></code> to open <code class="codeph"><span class="variable">package</span></code> to <code class="codeph"><span class="variable">target-module</span></code>, regardless of module declaration.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5D972434-DC15-4D1D-8473-56085896D5F2"><!-- --></a><code class="codeph">--illegal-access=<span class="variable">parameter</span></code></dt>
<dd>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C26F2127-DFD3-42DC-973D-32F3958B0791">
<p class="notep1">Note:</p>
<p>This option is a new option in JDK 9 and may not be available in future JDK versions.</p>
</div>
<p>When present at run time, <code class="codeph">--illegal-access=</code> takes a keyword <code class="codeph"><span class="variable">parameter</span></code> to specify a mode of operation:</p>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-9A6D0C4C-A024-428F-8769-3FB7B687B055">
<p class="notep1">Note:</p>
<p>Illegal-access operations to internal APIs from code on the class path are allowed by default in JDK 9.</p>
</div>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">permit</code>: This mode opens packages in JDK 9 that existed in JDK 8 to code on the class path. This allows code on class path that relies on the use of setAccessible to break into JDK internals, or to do other illegal access on members of classes in these packages, to work as per previous releases. This enables both static access (such as, by compiled bytecode) and deep reflective access. Deep reflective access is accomplished through the platform's reflection APIs. The first reflective-access operation to any such package causes a warning to be issued. However, no warnings are issued after the first occurrence. This single warning describes how to enable further warnings. This mode is the default for JDK 9 but will change in a future release.</p>
</li>
<li>
<p><code class="codeph">warn</code>: This mode is identical to <code class="codeph">permit</code> except that a warning message is issued for each illegal reflective-access operation.</p>
</li>
<li>
<p><code class="codeph">debug</code>: This mode is identical to <code class="codeph">warn</code> except that both a warning message and a stack trace are issued for each illegal reflective-access operation.</p>
</li>
<li>
<p><code class="codeph">deny</code>: This mode disables all illegal-access operations except for those enabled by other command-line options, such as<code class="codeph">--add-opens</code>. This mode will become the default in a future release.</p>
</li>
</ul>
<p>The default mode, <code class="codeph">--illegal-access=permit</code>, is intended to make you aware of code on the class path that reflectively accesses any JDK-internal APIs at least once. To learn about all such accesses, you can use the <code class="codeph">warn</code> or the <code class="codeph">debug</code> modes. For each library or framework on the class path that requires illegal access, you have two options:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the component's maintainers have already released a fixed version that no longer uses JDK-internal APIs then you can consider upgrading to that version.</p>
</li>
<li>
<p>If the component still needs to be fixed, then you can contact its maintainers and ask them to replace their use of JDK-internal APIs with the proper exported APIs.</p>
</li>
</ul>
<p>If you must continue to use a component that requires illegal access, then you can eliminate the warning messages by using one or more <code class="codeph">--add-opens</code> options to open only those internal packages to which access is required.</p>
<p>To verify that your application is ready for a future version of the JDK, run it with <code class="codeph">--illegal-access=deny</code> along with any necessary <code class="codeph">--add-opens</code> options. Any remaining illegal-access errors will most likely be due to static references from compiled code to JDK-internal APIs. You can identify those by running the <a href="jdeps.htm#GUID-A543FEBE-908A-49BF-996C-39499367ADB4" title="You use the jdeps command to launch the Java class dependency analyzer.">jdeps</a> tool with the <code class="codeph">--jdk-internals</code> option. For performance reasons, JDK 9 does not issue warnings for illegal static-access operations.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-73B43547-9D2C-4838-ACBB-F4077E2768EC"><!-- --></a><code class="codeph">--limit-modules <span class="variable">module</span>[,<span class="variable">module</span>...]</code></dt>
<dd>
<p>Specifies the limit of the universe of observable modules.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-ABA4F32C-222A-48BC-BE92-3B167D3134AD"><!-- --></a><code class="codeph">--patch-module <span class="variable">module</span>=<span class="variable">file</span>(;<span class="variable">file</span>)*</code></dt>
<dd>
<p>Overrides or augments a module with classes and resources in JAR files or directories.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-BF95F220-C021-4B7B-BFA7-DDAB2111D0F3"><!-- --></a><code class="codeph">--disable-@files</code></dt>
<dd>
<p>Can be used anywhere on the command line, including in an argument file, to prevent further <code class="codeph">@filename</code> expansion. This option stops expanding <code class="codeph">@argfiles</code> after the option.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Extra Options for Mac OS</p>
<p>The following extra options are Mac OS specific.</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3305E367-1496-4863-BD96-8E2F462F14CF"><!-- --></a><code class="codeph">-XstartOnFirstThread</code></dt>
<dd>
<p>Runs the <code class="codeph">main()</code> method on the first (AppKit) thread.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-573F48D8-D766-4E0C-89B6-16FCB5A6BD63"><!-- --></a><code class="codeph">-Xdock:name=<span class="variable">application name</span></code></dt>
<dd>
<p>Overrides the default application name displayed in dock.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F9C4F1A7-CA16-4D90-82D8-D2F4BED93820"><!-- --></a><code class="codeph">-Xdock:icon=<span class="variable">path to icon file</span></code></dt>
<dd>
<p>Overrides the default icon displayed in dock.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABCBGHF">
<p class="subhead1">Advanced Runtime Options for Java</p>
<p>These <code class="codeph">java</code> options control the runtime behavior of the Java HotSpot VM.</p>
<dl class="1.07* 2.93*">
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6155D02B-FD3F-47BF-BD06-E3D111919353"><!-- --></a><code class="codeph">-XX:ActiveProcessorCount=<span class="variable">xx</span></code></dt>
<dd>
<p>Overrides the number of CPUs that the VM will use to calculate the size of thread pools it will use for various operations such as Garbage Collection and ForkJoinPool.</p>
<p>The VM normally determines the number of available processors from the operating system. This flag can be useful for partitioning CPU resources when running multiple Java processes in docker containers. This flag is honored even if <code class="codeph">UseContainerSupport</code> is not enabled. See <code class="codeph">-XX:-UseContainerSupport</code> for a description of enabling and disabling container support.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6B720D34-0A07-4F6E-ADEB-4F0BC5C566E2"><!-- --></a><code class="codeph">-XX:AllocateHeapAt=<span class="variable">path</span></code></dt>
<dd>
<p>Takes a path to the file system and uses memory mapping to allocate the object heap on the memory device. Using this option enables the HotSpot VM to allocate the Java object heap on an alternative memory device, such as an NV-DIMM, specified by the user.</p>
<p>Alternative memory devices that have the same semantics as DRAM, including the semantics of atomic operations, can be used instead of DRAM for the object heap without changing the existing application code. All other memory structures (such as the code heap, metaspace, and thread stacks) continue to reside in DRAM.</p>
<p>Some operating systems expose non-DRAM memory through the file system. Memory-mapped files in these file systems bypass the page cache and provide a direct mapping of virtual memory to the physical memory on the device. The existing heap related flags (such as <code class="codeph">-Xmx</code> and <code class="codeph">-Xms</code>) and garbage-collection related flags continue to work as before.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A66FEEF0-B572-4935-A95B-3289D15E9BF5"><!-- --></a><code class="codeph">-XX:+CheckEndorsedAndExtDirs</code></dt>
<dd>
<p>Enables the option to prevent the <code class="codeph">java</code> command from running a Java application if any of these directories exists and isn't empty:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">lib/endorsed</code></p>
</li>
<li>
<p><code class="codeph">lib/ext</code></p>
</li>
<li>
<p>The systemwide platform-specific extension directory</p>
</li>
</ul>
<p>The endorsed standards override mechanism and the extension mechanism are no longer supported.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-CBE7EDFC-034B-4C96-B43A-C0C4879DEF22"><!-- --></a><code class="codeph">-XX:-CompactStrings</code></dt>
<dd>
<p>Disables the Compact Strings feature. By default, this option is enabled. When this option is enabled, Java Strings containing only single-byte characters are internally represented and stored as single-byte-per-character Strings using ISO-8859-1 / Latin-1 encoding. This reduces, by 50%, the amount of space required for Strings containing only single-byte characters. For Java Strings containing at least one multibyte character: these are represented and stored as 2 bytes per character using UTF-16 encoding. Disabling the Compact Strings feature forces the use of UTF-16 encoding as the internal representation for all Java Strings.</p>
<p>Cases where it may be beneficial to disable Compact Strings include the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>When it&rsquo;s known that an application overwhelmingly will be allocating multibyte character Strings</p>
</li>
<li>
<p>In the unexpected event where a performance regression is observed in migrating from Java SE 8 to Java SE 9 and an analysis shows that Compact Strings introduces the regression</p>
</li>
</ul>
<p>In both of these scenarios, disabling Compact Strings makes sense.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-63E10752-DD85-4225-B6BA-B17692E7013F"><!-- --></a><code class="codeph">-XX:CompilerDirectivesFile=file</code></dt>
<dd>
<p>Adds directives from a file to the directives stack when a program starts. See <a class="olink JSJVM-GUID-3517007F-824A-4079-B374-188C107D9AB2" target="_blank" href="../vm/commands-work-directive-files.htm#JSJVM-GUID-3517007F-824A-4079-B374-188C107D9AB2">Compiler Directives and the Command Line</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C99D717F-834C-4CF9-8BBB-B89B140C47C3"><!-- --></a><code class="codeph">-XX:CompilerDirectivesPrint</code></dt>
<dd>
<p>Prints the directives stack when the program starts or when a new directive is added..</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1901A243-FFBB-405C-BEC0-8113BF34900F"><!-- --></a><code class="codeph">-XX:ConcGCThreads=<span class="variable">n</span></code></dt>
<dd>
<p>Sets the number of parallel marking threads. Sets <code class="codeph"><span class="variable">n</span></code> to approximately 1/4 of the number of parallel garbage collection threads (ParallelGCThreads).</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3804B90A-CF86-4E27-8C06-E1B2AC510305"><!-- --></a><code class="codeph">-XX:+DisableAttachMechanism</code></dt>
<dd>
<p>Disables the mechanism that lets tools attach to the JVM. By default, this option is disabled, meaning that the attach mechanism is enabled and you can use diagnostics and troubleshooting tools such as <code class="codeph">jcmd</code>, <code class="codeph">jstack</code>, <code class="codeph">jmap</code>, and <code class="codeph">jinfo</code>.</p>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-AA72FDE6-E319-404E-BE51-18956E60F74C">
<p class="notep1">Note:</p>
<p>The tools such as <a href="jcmd.htm#GUID-59153599-875E-447D-8D98-0078A5778F05" title="You use the jcmd utility to send diagnostic command requests to a running Java Virtual Machine (JVM).">jcmd</a>, <a href="jinfo.htm#GUID-69246B58-28C4-477D-B375-278F5F9830A5" title="You use the jinfo command to generate Java configuration information for a specified Java process. This command is experimental and unsupported.">jinfo</a>, <a href="jmap.htm#GUID-D2340719-82BA-4077-B0F3-2803269B7F41" title="You use the jmap command to print details of a specified process. This command is experimental and unsupported.">jmap</a>, and <a href="jstack.htm#GUID-721096FC-237B-473C-A461-DBBBB79E4F6A" title="You use the jstack command to print Java stack traces of Java threads for a specified Java process. This command is experimental and unsupported.">jstack</a> shipped with the JDK aren&rsquo;t supported when using the tools from one JDK version to troubleshoot a different JDK version.</p>
</div>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EC34275B-B906-450E-A5A9-D5807311F844"><!-- --></a><code class="codeph">-XX:ErrorFile=<span class="variable">filename</span></code></dt>
<dd>
<p>Specifies the path and file name to which error data is written when an irrecoverable error occurs. By default, this file is created in the current working directory and named <code class="codeph">hs_err_pid <span class="variable">pid</span>.log</code> where <code class="codeph"><span class="variable">pid</span></code> is the identifier of the process that caused the error.</p>
<p>The following example shows how to set the default log file (note that the identifier of the process is specified as <code class="codeph">%p</code>):</p>
<pre dir="ltr">
-XX:ErrorFile=./hs_err_pid%p.log
</pre>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> The following example shows how to set the error log to <code class="codeph">/var/log/java/java_error.log</code>:</p>
<pre dir="ltr">
-XX:ErrorFile=/var/log/java/java_error.log
</pre></li>
<li>
<p><span class="bold">Windows:</span> The following example shows how to set the error log file to <code class="codeph">C:/log/java/java_error.log</code>:</p>
<pre dir="ltr">
-XX:ErrorFile=C:/log/java/java_error.log
</pre></li>
</ul>
<p>If the file can&rsquo;t be created in the specified directory (due to insufficient space, permission problem, or another issue), then the file is created in the temporary directory for the operating system:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> The temporary directory is <code class="codeph">/tmp</code>.</p>
</li>
<li>
<p><span class="bold">Windows:</span> The temporary directory is specified by the value of the <code class="codeph">TMP</code> environment variable; if that environment variable isn&rsquo;t defined, then the value of the <code class="codeph">TEMP</code> environment variable is used.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F76A697B-5E05-41BC-93A1-1236CA7A13E1"><!-- --></a><code class="codeph">-XX:+FailOverToOldVerifier</code></dt>
<dd>
<p>Enables automatic failover to the old verifier when the new type checker fails. By default, this option is disabled and it&rsquo;s ignored (that is, treated as disabled) for classes with a recent bytecode version. You can enable it for classes with older versions of the bytecode.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5363F9BA-CBBF-4011-A497-567A8D258EE1"><!-- --></a><code class="codeph">-XX:+FlightRecorder</code></dt>
<dd>
<p>Enables the use of Java Flight Recorder (JFR) during the runtime of the application. This is a commercial feature that requires that you also specify the <code class="codeph">-XX:+UnlockCommercialFeatures</code> option as follows:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -XX:+FlightRecorder
</pre>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0EEC3AE8-97E3-4C5B-8F76-3F0DA4B21A65">
<p class="notep1">Note:</p>
The <code class="codeph">-XX:+FlightRecorder</code> option is no longer required to use JFR. This was a change made in JDK 8u40.</div>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6D79EEF1-52D7-4038-820C-EDD46208A664"><!-- --></a><code class="codeph">-XX:FlightRecorderOptions=<span class="variable">parameter</span>=<span class="variable">value</span></code></dt>
<dd>
<p>Sets the parameters that control the behavior of JFR. This is a commercial feature that works with the <code class="codeph">-XX:+UnlockCommercialFeatures</code> option.</p>
<p>The following list contains the available JFR <code class="codeph"><span class="variable">parameter</span>=<span class="variable">value</span></code> entries:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D6A7E199-442F-4AF9-9BFA-595CD5A7F474"><!-- --></a><code class="codeph">allow_threadbuffers_to_disk={true|false}</code></dt>
<dd>
<p>Specifies whether thread buffers are written directly to disk if the buffer thread is blocked. By default, this parameter is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-049C36AE-D896-4BB0-89F3-868A1AE79D95"><!-- --></a><code class="codeph">globalbuffersize=<span class="variable">size</span></code></dt>
<dd>
<p>Specifies the total amount of primary memory used for data retention. The default value is based on the value specified for <code class="codeph">memorysize</code>. Change the <code class="codeph">memorysize</code> parameter to alter the size of global buffers.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-01EB2D0C-E5D2-490D-B235-732E8C6765D0"><!-- --></a><code class="codeph">maxchunksize=<span class="variable">size</span></code></dt>
<dd>
<p>Specifies the maximum size (in bytes) of the data chunks in a recording. Append <code class="codeph">m</code> or <code class="codeph">M</code> to specify the size in megabytes (MB), or <code class="codeph">g</code> or <code class="codeph">G</code> to specify the size in gigabytes (GB). By default, the maximum size of data chunks is set to 12 MB. The minimum allowed is 1 MB.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-4742CBC0-D22A-4BCA-AA76-01BB2589BFEF"><!-- --></a><code class="codeph">memorysize=<span class="variable">size</span></code></dt>
<dd>
<p>Determines how much buffer memory should be used, and sets the <code class="codeph">globalbuffersize</code> and <code class="codeph">numglobalbuffers</code> parameters based on the size specified. Append <code class="codeph">m</code> or <code class="codeph">M</code> to specify the size in megabytes (MB), or <code class="codeph">g</code> or <code class="codeph">G</code> to specify the size in gigabytes (GB). By default, the memory size is set to 10 MB.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0ED16DAB-9CF6-4AA0-AC44-C83647316F82"><!-- --></a><code class="codeph">numglobalbuffers</code></dt>
<dd>
<p>Specifies the number of global buffers used. The default value is based on the memory size specified. Change the <code class="codeph">memorysize</code> parameter to alter the number of global buffers.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C64237D0-B57A-4DA4-95D6-814FCACB690A"><!-- --></a><code class="codeph">old-object-queue-size=<span class="variable">number-of-objects</span></code></dt>
<dd>
<p>Maximum number of old objects to track. By default, the number of objects is set to 256.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DFFF8414-4E5B-4B5E-B31B-77FD3E4D72F6"><!-- --></a><code class="codeph">repository=<span class="variable">path</span></code></dt>
<dd>
<p>Specifies the repository (a directory) for temporary disk storage. By default, the system's temporary directory is used.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D271BDAD-31B1-4D8B-A575-F602C4D27A78"><!-- --></a><code class="codeph">retransform={true|false}</code></dt>
<dd>
<p>Specifies whether event classes should be retransformed using JVMTI. If false, instrumentation is added when event classes are loaded. By default, this parameter is enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-72E4C472-2E11-44D0-9145-52C601725AC0"><!-- --></a><code class="codeph">samplethreads={true|false}</code></dt>
<dd>
<p>Specifies whether thread sampling is enabled. Thread sampling occurs only if the sampling event is enabled along with this parameter. By default, this parameter is enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1B89962C-86D8-4C6D-8CF1-2BED57E860CA"><!-- --></a><code class="codeph">stackdepth=<span class="variable">depth</span></code></dt>
<dd>
<p>Stack depth for stack traces. By default, the depth is set to 64 method calls. The maximum is 2048. Values greater than 64 could create significant overhead and reduce performance.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-35F1BB7E-056A-4438-98DF-A30364933176"><!-- --></a><code class="codeph">threadbuffersize=<span class="variable">size</span></code></dt>
<dd>
<p>Specifies the per-thread local buffer size (in bytes). By default, the local buffer size is set to 8 kilobytes. Overriding this parameter could reduce performance and is not recommended.</p>
</dd>
</dl>
<p>You can specify values for multiple parameters by separating them with a comma.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B8F2A794-FB96-4003-B3D3-A53E8FDB92A1"><!-- --></a><code class="codeph">-XX:InitiatingHeapOccupancyPercent=<span class="variable">45</span></code></dt>
<dd>
<p>Sets the Java heap occupancy threshold that triggers a marking cycle. The default occupancy is 45 percent of the entire Java heap.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-15557713-2E7E-4D0B-901F-958AA628E7F7"><!-- --></a><code class="codeph">-XX:LargePageSizeInBytes=<span class="variable">size</span></code></dt>
<dd>
<p><span class="bold">Oracle Solaris:</span> Sets the maximum size (in bytes) for large pages used for the Java heap. The <code class="codeph"><span class="variable">size</span></code> argument must be a power of 2 (2, 4, 8, 16, and so on). Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. By default, the size is set to 0, meaning that the JVM chooses the size for large pages automatically. See <a href="java.htm#GUID-7BE7CD55-3AC3-4A96-BBDD-E4D9FC4FCCCB" title="You use large pages, also known as huge pages, as memory pages that are significantly larger than the standard memory page size (which varies depending on the processor and operating system). Large pages optimize processor Translation-Lookaside Buffers.">Large Pages</a>.</p>
<p>The following example describes how to set the large page size to 4 megabytes (MB):</p>
<pre dir="ltr">
-XX:LargePageSizeInBytes=4m
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2E02B495-5C36-4C93-8597-0020EFDC9A9C"><!-- --></a><code class="codeph">-XX:MaxDirectMemorySize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the maximum total size (in bytes) of the <code class="codeph">java.nio</code> package, direct-buffer allocations. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. By default, the size is set to 0, meaning that the JVM chooses the size for NIO direct-buffer allocations automatically.</p>
<p>The following examples illustrate how to set the NIO size to 1024 KB in different units:</p>
<pre dir="ltr">
-XX:MaxDirectMemorySize=1m
-XX:MaxDirectMemorySize=1024k
-XX:MaxDirectMemorySize=1048576
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B5DB91C4-E6D2-4415-B9DD-C88E1D7AC115"><!-- --></a><code class="codeph">-XX:-MaxFDLimit</code></dt>
<dd>
<p>Disables the attempt to set the soft limit for the number of open file descriptors to the hard limit. By default, this option is enabled on all platforms, but is ignored on Windows. The only time that you may need to disable this is on Mac OS, where its use imposes a maximum of 10240, which is lower than the actual system maximum.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2951C196-DB50-4E12-8BBF-27A85C66D35C"><!-- --></a><code class="codeph">-XX:MaxGCPauseMillis=<span class="variable">200</span></code></dt>
<dd>
<p>Sets a target value for the desired maximum pause time. The default value is 200 milliseconds. The specified value doesn&rsquo;t adapt to your heap size.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-40EE5C9C-5D85-4397-A8D2-636CABBE3FBB"><!-- --></a><code class="codeph">-XX:NativeMemoryTracking=<span class="variable">mode</span></code></dt>
<dd>
<p>Specifies the mode for tracking JVM native memory usage. Possible <span class="variable">mode</span> arguments for this option include the following:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2CDA6C67-05F5-447D-8A31-D6FE792FD10C"><!-- --></a><code class="codeph">off</code></dt>
<dd>
<p>Instructs not to track JVM native memory usage. This is the default behavior if you don&rsquo;t specify the <code class="codeph">-XX:NativeMemoryTracking</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FB9FFB02-8D45-43CF-AA12-ACCEDF733B31"><!-- --></a><code class="codeph">summary</code></dt>
<dd>
<p>Tracks memory usage only by JVM subsystems, such as Java heap, class, code, and thread.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E2477824-9786-4813-A769-B2CB4E0F58A6"><!-- --></a><code class="codeph">detail</code></dt>
<dd>
<p>In addition to tracking memory usage by JVM subsystems, track memory usage by individual <code class="codeph">CallSite</code>, individual virtual memory region and its committed regions.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2261D7D0-4CC0-471F-A325-3585E1099748"><!-- --></a><code class="codeph">-XX:ObjectAlignmentInBytes=<span class="variable">alignment</span></code></dt>
<dd>
<p>Sets the memory alignment of Java objects (in bytes). By default, the value is set to 8 bytes. The specified value should be a power of 2, and must be within the range of 8 and 256 (inclusive). This option makes it possible to use compressed pointers with large Java heap sizes.</p>
<p>The heap size limit in bytes is calculated as:</p>
<pre dir="ltr">
4GB * ObjectAlignmentInBytes
</pre>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-07E18076-0A66-41A9-9230-5A11DC21E1EC">
<p class="notep1">Note:</p>
<p>As the alignment value increases, the unused space between objects also increases. As a result, you may not realize any benefits from using compressed pointers with large Java heap sizes.</p>
</div>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-04AEB619-927F-4118-A6D3-3167DD0F6BED"><!-- --></a><code class="codeph">-XX:OnError=<span class="variable">string</span></code></dt>
<dd>
<p>Sets a custom command or a series of semicolon-separated commands to run when an irrecoverable error occurs. If the string contains spaces, then it must be enclosed in quotation marks.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Oracle Solaris, Linux, and OS X:</span> The following example shows how the <code class="codeph">-XX:OnError</code> option can be used to run the <code class="codeph">gcore</code> command to create the core image, and the debugger is started to attach to the process in case of an irrecoverable error (the <code class="codeph">%p</code> designates the current process):</p>
<pre dir="ltr">
-XX:OnError="gcore %p;dbx - %p"
</pre></li>
<li>
<p><span class="bold">Windows:</span> The following example shows how the <code class="codeph">-XX:OnError</code> option can be used to run the <code class="codeph">userdump.exe</code> utility to obtain a crash dump in case of an irrecoverable error (the <code class="codeph">%p</code> designates the current process). This example assumes that the path to the <code class="codeph">userdump.exe</code> utility is specified in the <code class="codeph">PATH</code> environment variable:</p>
<pre dir="ltr">
-XX:OnError="userdump.exe %p"
</pre></li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-01F4A72B-DB45-4EFB-BDF0-DB03DC056C66"><!-- --></a><code class="codeph">-XX:OnOutOfMemoryError=<span class="variable">string</span></code></dt>
<dd>
<p>Sets a custom command or a series of semicolon-separated commands to run when an <code class="codeph">OutOfMemoryError</code> exception is first thrown. If the string contains spaces, then it must be enclosed in quotation marks. For an example of a command string, see the description of the <code class="codeph">-XX:OnError</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E3E557B7-AA19-4CD5-8385-767B053C3397"><!-- --></a><code class="codeph">-XX:ParallelGCThreads=<span class="variable">n</span></code></dt>
<dd>
<p>Sets the value of the STW worker threads. Sets the value of n to the number of logical processors. The value of <code class="codeph"><span class="variable">n</span></code> is the same as the number of logical processors up to a value of 8. If there are more than 8 logical processors, then this option sets the value of <code class="codeph">n</code> to approximately 5/8 of the logical processors. This works in most cases except for larger SPARC systems where the value of <code class="codeph">n</code> can be approximately 5/16 of the logical processors.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E013C919-B1A7-482F-8883-9B38D049FE9F"><!-- --></a><code class="codeph">-XX:+PerfDataSaveToFile</code></dt>
<dd>
<p>If enabled, saves <a href="jstat.htm#GUID-5F72A7F9-5D5A-4486-8201-E1D1BA8ACCB5" title="You use the jstat command to monitor JVM statistics. This command is experimental and unsupported.">jstat</a> binary data when the Java application exits. This binary data is saved in a file named <code class="codeph">hsperfdata_</code><code class="codeph"><span class="variable">pid</span></code>, where <code class="codeph"><span class="variable">pid</span></code> is the process identifier of the Java application that you ran. Use the<code class="codeph"><span class="variable">jstat</span></code> command to display the performance data contained in this file as follows:</p>
<pre dir="ltr">
jstat -class file:///<span class="variable">path</span>/hsperfdata_<span class="variable">pid</span>
</pre>
<pre dir="ltr">
jstat -gc file:///<span class="variable">path</span>/hsperfdata_<span class="variable">pid</span>
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-021FB56C-6B3A-48B7-95A4-697C7CB77E6A"><!-- --></a><code class="codeph">-XX:+PrintCommandLineFlags</code></dt>
<dd>
<p>Enables printing of ergonomically selected JVM flags that appeared on the command line. It can be useful to know the ergonomic values set by the JVM, such as the heap space size and the selected garbage collector. By default, this option is disabled and flags aren&rsquo;t printed.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-90D07719-207A-4903-B1A8-CFC3817FC7D7"><!-- --></a><code class="codeph">-XX:+PreserveFramePointer&nbsp;</code></dt>
<dd>
<p>Selects between using the RBP register as a general purpose register (<code class="codeph">-XX:-PreserveFramePointer</code>) and using the RBP register to hold the frame pointer of the currently executing method (<code class="codeph">-XX:+PreserveFramePointer</code> . If the frame pointer is available, then external profiling tools&nbsp;(for example, Linux perf) can construct more accurate stack traces.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6778E677-2616-435B-AFBD-1EDC4F1830BD"><!-- --></a><code class="codeph">-XX:+PrintNMTStatistics</code></dt>
<dd>
<p>Enables printing of collected native memory tracking data at JVM exit when native memory tracking is enabled (see <code class="codeph">-XX:NativeMemoryTracking</code>). By default, this option is disabled and native memory tracking data isn&rsquo;t printed.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-490DB6FB-7DD7-4527-A12E-240D134803C0"><!-- --></a><code class="codeph">-XX:+RelaxAccessControlCheck</code></dt>
<dd>
<p>Decreases the amount of access control checks in the verifier. By default, this option is disabled, and it&rsquo;s ignored (that is, treated as disabled) for classes with a recent bytecode version. You can enable it for classes with older versions of the bytecode.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A8BF79EE-48B1-4D9F-ACED-1800944BEB1F"><!-- --></a><code class="codeph">-XX:+ResourceManagement</code></dt>
<dd>
<p>Enables the use of Resource Management during the runtime of the application.</p>
<p>This is a commercial feature that requires you to also specify the <code class="codeph">-XX:+UnlockCommercialFeatures</code> option as follows:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -XX:+ResourceManagement
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-9117D8FB-91BB-4949-B0C7-02412CC7DCDF"><!-- --></a><code class="codeph">-XX:ResourceManagementSampleInterval=<span class="variable">value in milliseconds</span></code></dt>
<dd>
<p>Sets the parameter that controls the sampling interval for Resource Management measurements, in milliseconds.</p>
<p>This option can be used only when Resource Management is enabled (that is, the <code class="codeph">-XX:+ResourceManagement</code> option is specified).</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A37C3055-BF73-4D9B-920A-75562650F9EE"><!-- --></a><code class="codeph">-XX:SharedArchiveFile=<span class="variable">path</span></code></dt>
<dd>
<p>Specifies the path and name of the class data sharing (CDS) archive file</p>
<p>See <a href="java.htm#GUID-31503FCE-93D0-4175-9B4F-F6A738B2F4C4" title="Application Class Data Sharing (AppCDS) extends class data sharing to enable application classes to be placed in the shared archive.">Application Class Data Sharing</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D5E35460-2790-4F3E-997F-1546674827CD"><!-- --></a><code class="codeph">-XX:SharedArchiveConfigFile=<span class="variable">shared_config_file</span></code></dt>
<dd>
<p>Specifies additional shared data added to the archive file.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B7B30A0B-47D9-44C6-9D75-EA6087514004"><!-- --></a><code class="codeph">-XX:SharedClassListFile=<span class="variable">file_name</span></code></dt>
<dd>
<p>Specifies the text file that contains the names of the classes to store in the class data sharing (CDS) archive. This file contains the full name of one class per line, except slashes (<code class="codeph">/</code>) replace dots (<code class="codeph">.</code>). For example, to specify the classes <code class="codeph">java.lang.Object</code> and <code class="codeph">hello.Main</code>, create a text file that contains the following two lines:</p>
<pre dir="ltr">
java/lang/Object
hello/Main
</pre>
<p>The classes that you specify in this text file should include the classes that are commonly used by the application. They may include any classes from the application, extension, or bootstrap class paths.</p>
<p>See <a href="java.htm#GUID-31503FCE-93D0-4175-9B4F-F6A738B2F4C4" title="Application Class Data Sharing (AppCDS) extends class data sharing to enable application classes to be placed in the shared archive.">Application Class Data Sharing</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FD377576-9B3A-4833-9DDD-9B36BB209E97"><!-- --></a><code class="codeph">-XX:+ShowMessageBoxOnError</code></dt>
<dd>
<p>Enables the display of a dialog box when the JVM experiences an irrecoverable error. This prevents the JVM from exiting and keeps the process active so that you can attach a debugger to it to investigate the cause of the error. By default, this option is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-348FD717-B699-481B-AD14-9F765CCB9759"><!-- --></a><code class="codeph">-XX:StartFlightRecording=<span class="variable">parameter</span>=<span class="variable">value</span></code></dt>
<dd>
<p>Starts a JFR recording for the Java application. This is a commercial feature that works with the <code class="codeph">-XX:+UnlockCommercialFeatures</code> option. This option is equivalent to the <code class="codeph">JFR.start</code> diagnostic command that starts a recording during runtime. You can set the following <code class="codeph"><span class="variable">parameter</span>=<span class="variable">value</span></code> entries when starting a JFR recording:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2B9B0171-929E-4844-BBD3-285925981932"><!-- --></a><code class="codeph">delay=<span class="variable">time</span></code></dt>
<dd>
<p>Specifies the delay between the Java application launch time and the start of the recording. Append <code class="codeph">s</code> to specify the time in seconds, <code class="codeph">m</code> for minutes, <code class="codeph">h</code> for hours, or <code class="codeph">d</code> for days (for example, specifying <code class="codeph">10m</code> means 10 minutes). By default, there&rsquo;s no delay, and this parameter is set to 0.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DB2193C8-0044-4801-BB41-F7E3C5F51A0F"><!-- --></a><code class="codeph">disk={true|false}</code></dt>
<dd>
<p>Specifies whether to write data to disk while recording. By default, this parameter is enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-671426B0-1C39-43EF-8795-3794E6C74911"><!-- --></a><code class="codeph">dumponexit={true|false}</code></dt>
<dd>
<p>Specifies if the running recording is dumped when the JVM shuts down. If enabled and a <code class="codeph">filename</code> is not entered, the recording is written to a file in the directory where the process was started. The file name is a system-generated name that contains the process ID, recording ID, and current timestamp, similar to <code>hotspot-pid-47496-id-1-2018_01_25_19_10_41.jfr</code>. By default, this parameter is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2C8C7A66-A0DA-4546-A770-383B0F16BE37"><!-- --></a><code class="codeph">duration=<span class="variable">time</span></code></dt>
<dd>
<p>Specifies the duration of the recording. Append <code class="codeph">s</code> to specify the time in seconds, <code class="codeph">m</code> for minutes, <code class="codeph">h</code> for hours, or <code class="codeph">d</code> for days (for example, specifying <code class="codeph">5h</code> means 5 hours). By default, the duration isn&rsquo;t limited, and this parameter is set to 0.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D68FEE63-71AD-48F8-A576-C40733660A3C"><!-- --></a><code class="codeph">filename=<span class="variable">path</span></code></dt>
<dd>
<p>Specifies the path and name of the file to which the recording is written when the recording is stopped, for example:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">recording.jfr</code></li>
<li><code class="codeph">/home/user/recordings/recording.jfr</code></li>
<li><code class="codeph">c:\recordings\recording.jfr</code></li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-62DBC6A7-7A09-4A48-B7B9-95F5AC725B0D"><!-- --></a><code class="codeph">name=<span class="variable">identifier</span></code></dt>
<dd>
<p>Takes both the name and the identifier of a recording.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-07092AD3-C073-42E7-B14D-4242B739FFA5"><!-- --></a><code class="codeph">maxage=<span class="variable">time</span></code></dt>
<dd>
<p>Specifies the maximum age of disk data to keep for the recording. This parameter is valid only when the <code class="codeph">disk</code> parameter is set to <code class="codeph">true</code>. Append <code class="codeph">s</code> to specify the time in seconds, <code class="codeph">m</code> for minutes, <code class="codeph">h</code> for hours, or <code class="codeph">d</code> for days (for example, specifying <code class="codeph">30s</code> means 30 seconds). By default, the maximum age isn&rsquo;t limited, and this parameter is set to <code class="codeph">0s</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E577A56E-83A6-4C04-85D3-D51BF3590D68"><!-- --></a><code class="codeph">maxsize=<span class="variable">size</span></code></dt>
<dd>
<p>Specifies the maximum size (in bytes) of disk data to keep for the recording. This parameter is valid only when the <code class="codeph">disk</code> parameter is set to <code class="codeph">true</code>. The value must not be less than the value for the <code class="codeph">maxchunksize</code> parameter set with <code class="codeph">-XX:FlightRecorderOptions</code>. Append <code class="codeph">m</code> or <code class="codeph">M</code> to specify the size in megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to specify the size in gigabytes. By default, the maximum size of disk data isn&rsquo;t limited, and this parameter is set to <code class="codeph">0</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-9E204547-FA42-47C0-A18F-040AD6A61D49"><!-- --></a><code class="codeph">path-to-gc-roots={true|false)</code></dt>
<dd>
<p>Specifies whether to collect the path to garbage collection (GC) roots at the end of a recording. By default, this parameter is disabled. This option was introduced in JDK 10.</p>
<p>The path to GC roots is useful for finding memory leaks, but collecting it is time-consuming. Enable this option only when you start a recording for an application that you suspect has a memory leak. If the <code class="codeph">settings</code> parameter is set to <code class="codeph">profile</code>, the stack trace from where the potential leaking object was allocated is included in the information collected.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C6D19A12-255E-454D-BE58-65C82E083989"><!-- --></a><code class="codeph">settings=<span class="variable">path</span></code></dt>
<dd>
<p>Specifies the path and name of the event settings file (of type JFC). By default, the <code class="codeph">default.jfc</code> file is used, which is located in <code class="codeph">JRE_HOME/lib/jfr</code>. This default settings file collects a predefined set of information with low overhead, so it has minimal impact on performance and can be used with recordings that run continuously.</p>
<p>A second settings file is also provided, <code>profile.jfc</code>, which provides more data than the default configuration, but can have more overhead and impact performance. Use this configuration for short periods of time when more information is needed.</p>
</dd>
</dl>
<p>You can specify values for multiple parameters by separating them with a comma.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EFC23CFC-A104-49C1-97BE-5E00A9241A5E"><!-- --></a><code class="codeph">-XX:ThreadStackSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the Java thread stack size (in kilobytes). Use of a scaling suffix, such as <code class="codeph">k</code>, results in the scaling of the kilobytes value so that <code class="codeph">-XX:ThreadStackSize=1k</code> sets the Java thread stack size&nbsp;to 1024*1024 bytes or 1 megabyte. The default value depends on the platform:</p>
<ul style="list-style-type: disc;">
<li>
<p>Linux/x64 (64-bit): 1024 KB</p>
</li>
<li>
<p>OS X (64-bit): 1024 KB</p>
</li>
<li>
<p>Oracle Solaris/x64 (64-bit): 1024 KB</p>
</li>
<li>
<p>Windows: The default value depends on the virtual memory.</p>
</li>
</ul>
<p>The following examples show how to set the thread stack size to 1 megabyte in different units:</p>
<pre dir="ltr">
-XX:ThreadStackSize=1k
-XX:ThreadStackSize=1024
</pre>
<p>This option is similar to <code class="codeph">-Xss</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0C7A9590-BC3D-4967-8689-1E27FB686811"><!-- --></a><code class="codeph">-XX:+UnlockCommercialFeatures</code></dt>
<dd>
<p>Enables the use of commercial features. Commercial features are included with Oracle Java SE Advanced or Oracle Java SE Suite packages, as defined in the <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=javase_embedded_products" target="_blank">Oracle Java SE and Oracle Java Embedded Products</a> page.</p>
<p>By default, this option is disabled and the JVM runs without the commercial features. After they're enabled for a JVM process, it isn&rsquo;t possible to disable their use for that process.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7D644D1F-8603-45EA-ABDB-3638D983184A"><!-- --></a><code class="codeph">-XX:+UseAppCDS</code></dt>
<dd>
<p>Enables application class data sharing (AppCDS). To use AppCDS, you must also specify values for the options <code class="codeph">-XX:SharedClassListFile</code> and <code class="codeph">-XX:SharedArchiveFile</code> during both CDS dump time (see the option <code class="codeph">-Xshare:dump</code>) and application run time.</p>
<p>This is a commercial feature that requires you to also specify the <code class="codeph">-XX:+UnlockCommercialFeatures</code> option. This is also an experimental feature; it may change in future releases.</p>
<p>See <a href="java.htm#GUID-31503FCE-93D0-4175-9B4F-F6A738B2F4C4" title="Application Class Data Sharing (AppCDS) extends class data sharing to enable application classes to be placed in the shared archive.">Application Class Data Sharing</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2A02B104-E2AE-45AA-B10D-CEAACADAE219"><!-- --></a><code class="codeph">-XX:-UseBiasedLocking</code></dt>
<dd>
<p>Disables the use of biased locking. Some applications with significant amounts of uncontended synchronization may attain significant speedups with this flag enabled, but applications with certain patterns of locking may see slowdowns. .</p>
<p>By default, this option is enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5E8FB0EE-1058-4F53-A54A-C2247FE19FD5"><!-- --></a><code class="codeph">-XX:-UseCompressedOops</code></dt>
<dd>
<p>Disables the use of compressed pointers. By default, this option is enabled, and compressed pointers are used when Java heap sizes are less than 32 GB. When this option is enabled, object references are represented as 32-bit offsets instead of 64-bit pointers, which typically increases performance when running the application with Java heap sizes of less than 32 GB. This option works only for 64-bit JVMs.</p>
<p>It&rsquo;s also possible to use compressed pointers when Java heap sizes are greater than 32 GB. See the <code class="codeph">-XX:ObjectAlignmentInBytes</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1A47ED1F-EA7D-47BE-AE96-929E3E97B9CE"><!-- --></a><code class="codeph">-XX:-UseContainerSupport</code></dt>
<dd>
<p>The VM now provides automatic container detection support, which allows the VM to determine the amount of memory and number of processors that are available to a Java process running in docker containers. It uses this information to allocate system resources. This support is only available on Linux x64 platforms. &nbsp;If supported, the default for this flag is&nbsp;<code class="codeph">true</code>, and container support is enabled by default. &nbsp;It&nbsp;can be disabled with&nbsp;<code class="codeph">-XX:-UseContainerSupport</code>.</p>
<p>Unified Logging is available to help to diagnose issues related to this support.</p>
<p>Use <code class="codeph">-Xlog:os+container=trace</code> for maximum logging of container information. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a> for a description of using Unified Logging.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-ED4A27EA-AEDE-472F-978D-F65578839E33"><!-- --></a><code class="codeph">XX:+UseGCLogRotation</code></dt>
<dd>
<p>Handles large log files. This option must be used with <code class="codeph">-Xloggc:<span class="variable">filename</span>.</code></p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DBB99499-527D-49F5-A3B0-568B3FFE9C6B"><!-- --></a><code class="codeph">-XX:NumberOfGClogFiles=<span class="variable">number of files</span></code></dt>
<dd>
<p>Handles large log files. The <code class="codeph"><span class="variable">number of files</span></code> must be greater than or equal to <code class="codeph">1</code>. The default is <code class="codeph">1</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E739DA8F-6EC5-4881-A293-4204E75FDD16"><!-- --></a><code class="codeph">-XX:GCLogFileSize=<span class="variable">number</span></code></dt>
<dd>
<p>Handles large log files. The <code class="codeph"><span class="variable">number</span></code> can be in the form of <code class="codeph"><span class="variable">number</span>M</code> or <code class="codeph"><span class="variable">number</span>K</code>. The default is set to <code class="codeph">512K</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C6A677D3-D1D9-4DEF-8298-B80CC946654E"><!-- --></a><code class="codeph">-XX:+UseHugeTLBFS</code></dt>
<dd>
<p><span class="bold">Linux only:</span> This option is the equivalent of specifying <code class="codeph">-XX:+UseLargePages</code>. This option is disabled by default. This option pre-allocates all large pages up-front, when memory is reserved; consequently the JVM can&rsquo;t dynamically grow or shrink large pages memory areas; see <code class="codeph">-XX:UseTransparentHugePages</code> if you want this behavior.</p>
<p>See <a href="java.htm#GUID-7BE7CD55-3AC3-4A96-BBDD-E4D9FC4FCCCB" title="You use large pages, also known as huge pages, as memory pages that are significantly larger than the standard memory page size (which varies depending on the processor and operating system). Large pages optimize processor Translation-Lookaside Buffers.">Large Pages</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-51E05566-8DA5-4DBE-8300-B3DC28B1D3BB"><!-- --></a><code class="codeph">-XX:+UseLargePages</code></dt>
<dd>
<p>Enables the use of large page memory. By default, this option is disabled and large page memory isn&rsquo;t used.</p>
<p>See <a href="java.htm#GUID-7BE7CD55-3AC3-4A96-BBDD-E4D9FC4FCCCB" title="You use large pages, also known as huge pages, as memory pages that are significantly larger than the standard memory page size (which varies depending on the processor and operating system). Large pages optimize processor Translation-Lookaside Buffers.">Large Pages</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-800C2D61-DA7D-4755-B507-687634FFB601"><!-- --></a><code class="codeph">-XX:+UseMembar</code></dt>
<dd>
<p>Enables issuing of membars on thread-state transitions. This option is disabled by default on all platforms except ARM servers, where it&rsquo;s enabled. (It&rsquo;s recommended that you don&rsquo;t disable this option on ARM servers.)</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E89486E9-FE76-4C30-9A8C-08A0E5224DFE"><!-- --></a><code class="codeph" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXUSEPERFDATA-AC3DC346">-XX:+UsePerfData</code></dt>
<dd>
<p>Enables the <code class="codeph">perfdata</code> feature. This option is enabled by default to allow JVM monitoring and performance testing. Disabling it suppresses the creation of the <code class="codeph">hsperfdata_userid</code> directories. To disable the <code class="codeph">perfdata</code> feature, specify <code class="codeph">-XX:-UsePerfData</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-83E85C0B-F13D-4669-BBDE-8E63705D5D30"><!-- --></a><code class="codeph">-XX:+UseTransparentHugePages</code></dt>
<dd>
<p><span class="bold">Linux only:</span> Enables the use of large pages that can dynamically grow or shrink. This option is disabled by default. You may encounter performance problems with transparent huge pages as the OS moves other pages around to create huge pages; this option is made available for experimentation.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-471A9FC9-CABB-4CC9-B327-BA66A560C2FC"><!-- --></a><code class="codeph">-XX:+AllowUserSignalHandlers</code></dt>
<dd>
<p>Enables installation of signal handlers by the application. By default, this option is disabled and the application isn&rsquo;t allowed to install signal handlers.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1E3C83E8-B1F1-49D6-824B-B4CE1E22F088"><!-- --></a><code class="codeph">-XX:VMOptionsFile=<span class="variable">filename</span></code></dt>
<dd>
<p>Allows user to specify VM options in a file, for example, <code class="codeph">java -XX:VMOptionsFile=/var/my_vm_options HelloWorld</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABDDFII">
<p class="subhead1">Advanced JIT Compiler Options for java</p>
<p>These <code class="codeph">java</code> options control the dynamic just-in-time (JIT) compilation performed by the Java HotSpot VM.</p>
<dl class="1.00* 3.00*">
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-74288A34-3018-4050-9713-236DFEF0F54B"><!-- --></a><code class="codeph">-XX:+AggressiveOpts</code></dt>
<dd>
<p>Enables the use of aggressive performance optimization features. By default, this option is disabled and experimental performance features aren&rsquo;t used.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-CDC345C8-0417-49AB-9F04-D32666D4BBBA"><!-- --></a><code class="codeph">-XX:AllocateInstancePrefetchLines=<span class="variable">lines</span></code></dt>
<dd>
<p>Sets the number of lines to prefetch ahead of the instance allocation pointer. By default, the number of lines to prefetch is set to 1:</p>
<pre dir="ltr">
-XX:AllocateInstancePrefetchLines=1
</pre>
<p>Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6A20A6D6-5641-4084-9BBD-475E69624556"><!-- --></a><code class="codeph">-XX:AllocatePrefetchDistance=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the size (in bytes) of the prefetch distance for object allocation. Memory about to be written with the value of new objects is prefetched up to this distance starting from the address of the last allocated object. Each Java thread has its own allocation point.</p>
<p>Negative values denote that prefetch distance is chosen based on the platform. Positive values are bytes to prefetch. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The default value is set to -1.</p>
<p>The following example shows how to set the prefetch distance to 1024 bytes:</p>
<pre dir="ltr">
-XX:AllocatePrefetchDistance=1024
</pre>
<p>Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3F6467A4-634A-4FB4-91F3-A5E73FCED3BB"><!-- --></a><code class="codeph">-XX:AllocatePrefetchInstr=<span class="variable">instruction</span></code></dt>
<dd>
<p>Sets the prefetch instruction to prefetch ahead of the allocation pointer. Only the Java HotSpot Server VM supports this option. Possible values are from 0 to 3. The actual instructions behind the values depend on the platform. By default, the prefetch instruction is set to 0:</p>
<pre dir="ltr">
-XX:AllocatePrefetchInstr=0
</pre>
<p>Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EF2F09D4-65DE-4AC8-A822-05134DB84BCE"><!-- --></a><code class="codeph">-XX:AllocatePrefetchLines=<span class="variable">lines</span></code></dt>
<dd>
<p>Sets the number of cache lines to load after the last object allocation by using the prefetch instructions generated in compiled code. The default value is 1 if the last allocated object was an instance, and 3 if it was an array.</p>
<p>The following example shows how to set the number of loaded cache lines to 5:</p>
<pre dir="ltr">
-XX:AllocatePrefetchLines=5
</pre>
<p>Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-74CDE8DD-9511-44E0-9012-77E91F3D9BCF"><!-- --></a><code class="codeph">-XX:AllocatePrefetchStepSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the step size (in bytes) for sequential prefetch instructions. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. By default, the step size is set to 16 bytes:</p>
<pre dir="ltr">
-XX:AllocatePrefetchStepSize=16
</pre>
<p>Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C16A1109-E2C1-4A44-B0B2-77FB179B5748"><!-- --></a><code class="codeph">-XX:AllocatePrefetchStyle=<span class="variable">style</span></code></dt>
<dd>
<p>Sets the generated code style for prefetch instructions. The <code class="codeph"><span class="variable">style</span></code> argument is an integer from 0 to 3:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-49E6F329-6FA6-47E8-8C5A-0DF7CCEAFE44"><!-- --></a><code class="codeph">0</code></dt>
<dd>
<p>Don&rsquo;t generate prefetch instructions.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EC049189-F132-4F8A-B5BE-DFF321EC864C"><!-- --></a><code class="codeph">1</code></dt>
<dd>
<p>Execute prefetch instructions after each allocation. This is the default parameter.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F6212D64-E8AC-4CE8-A3A9-4B42DE03D5A1"><!-- --></a><code class="codeph">2</code></dt>
<dd>
<p>Use the thread-local allocation block (TLAB) watermark pointer to determine when prefetch instructions are executed.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2E35459A-46BE-4171-B40A-ADF229E48BEA"><!-- --></a><code class="codeph">3</code></dt>
<dd>
<p>Use BIS instruction on SPARC for allocation prefetch.</p>
</dd>
</dl>
<p>Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7D2D88A8-2D90-4C8E-A10D-7BACA052D5DA"><!-- --></a><code class="codeph">-XX:+BackgroundCompilation</code></dt>
<dd>
<p>Enables background compilation. This option is enabled by default. To disable background compilation, specify <code class="codeph">-XX:-BackgroundCompilation</code> (this is equivalent to specifying <code class="codeph">-Xbatch</code>).</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7DAB6574-7606-47D6-973E-C73171F0F786"><!-- --></a><code class="codeph">-XX:CICompilerCount=<span class="variable">threads</span></code></dt>
<dd>
<p>Sets the number of compiler threads to use for compilation. By default, the number of threads is set to 2 for the server JVM, to 1 for the client JVM, and it scales to the number of cores if tiered compilation is used. The following example shows how to set the number of threads to 2:</p>
<pre dir="ltr">
-XX:CICompilerCount=2
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EEFF3F9F-FB7B-432A-A2FD-D1E45662116E"><!-- --></a><code class="codeph">-XX:CompileCommand=<span class="variable">command</span>,<span class="variable">method</span>[,<span class="variable">option</span>]</code></dt>
<dd>
<p>Specifies a command to perform on a method. For example, to exclude the <code class="codeph">indexOf()</code> method of the <code class="codeph">String</code> class from being compiled, use the following:</p>
<pre dir="ltr">
-XX:CompileCommand=exclude,java/lang/String.indexOf
</pre>
<p>Note that the full class name is specified, including all packages and subpackages separated by a slash (<code class="codeph">/</code>). For easier cut-and-paste operations, it&rsquo;s also possible to use the method name format produced by the <code class="codeph">-XX:+PrintCompilation</code> and <code class="codeph">-XX:+LogCompilation</code> options:</p>
<pre dir="ltr">
-XX:CompileCommand=exclude,java.lang.String::indexOf
</pre>
<p>If the method is specified without the signature, then the command isapplied to all methods with the specified name. However, you can also specify the signature of the method in the class file format. In this case, you should enclose the arguments in quotation marks, because otherwise the shell treats the semicolon as a command end. For example, if you want to exclude only the <code class="codeph">indexOf(String)</code> method of the <code class="codeph">String</code> class from being compiled, use the following:</p>
<pre dir="ltr">
-XX:CompileCommand="exclude,java/lang/String.indexOf,(Ljava/lang/String;)I"
</pre>
<p>You can also use the asterisk (*) as a wildcard for class and method names. For example, to exclude all <code class="codeph">indexOf()</code> methods in all classes from being compiled, use the following:</p>
<pre dir="ltr">
-XX:CompileCommand=exclude,*.indexOf
</pre>
<p>The commas and periods are aliases for spaces, making it easier to pass compiler commands through a shell. You can pass arguments to <code class="codeph">-XX:CompileCommand</code> using spaces as separators by enclosing the argument in quotation marks:</p>
<pre dir="ltr">
-XX:CompileCommand="exclude java/lang/String indexOf"
</pre>
<p>Note that after parsing the commands passed on the command line using the <code class="codeph">-XX:CompileCommand</code> options, the JIT compiler then reads commands from the <code class="codeph">.hotspot_compiler</code> file. You can add commands to this file or specify a different file using the <code class="codeph">-XX:CompileCommandFile</code> option.</p>
<p>To add several commands, either specify the <code class="codeph">-XX:CompileCommand</code> option multiple times, or separate each argument with the new line separator (<code class="codeph">\n</code>). The following commands are available:</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-78217B83-C102-4489-9DE4-ABAFF133EC72"><!-- --></a><code class="codeph">break</code></dt>
<dd>
<p>Sets a breakpoint when debugging the JVM to stop at the beginning of compilation of the specified method.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-42240DD6-1E02-448A-A00B-950F7DDF8E44"><!-- --></a><code class="codeph">compileonly</code></dt>
<dd>
<p>Excludes all methods from compilation except for the specified method. As an alternative, you can use the <code class="codeph">-XX:CompileOnly</code> option, which lets you specify several methods.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-951223F7-88B6-4F89-98C8-0E19652351CC"><!-- --></a><code class="codeph">dontinline</code></dt>
<dd>
<p>Prevents inlining of the specified method.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-59F82668-7F74-4880-A065-A85AA9C47035"><!-- --></a><code class="codeph">exclude</code></dt>
<dd>
<p>Excludes the specified method from compilation.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-985ADB6D-3338-4FB2-8AFE-88A568B6672A"><!-- --></a><code class="codeph">help</code></dt>
<dd>
<p>Prints a help message for the <code class="codeph">-XX:CompileCommand</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1C60AC1A-5EB6-4284-B879-3441F2CF3343"><!-- --></a><code class="codeph">inline</code></dt>
<dd>
<p>Attempts to inline the specified method.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-31A550BD-585F-493D-B884-A4EE059B5E52"><!-- --></a><code class="codeph">log</code></dt>
<dd>
<p>Excludes compilation logging (with the <code class="codeph">-XX:+LogCompilation</code> option) for all methods except for the specified method. By default, logging is performed for all compiled methods.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C9B8F7AB-F229-467E-8A97-1B6EF4E50A28"><!-- --></a><code class="codeph">option</code></dt>
<dd>
<p>Passes a JIT compilation option to the specified method in place of the last argument (<code class="codeph"><span class="variable">option</span></code>). The compilation option is set at the end, after the method name. For example, to enable the <code class="codeph">BlockLayoutByFrequency</code> option for the <code class="codeph">append()</code> method of the <code class="codeph">StringBuffer</code> class, use the following:</p>
<pre dir="ltr">
-XX:CompileCommand=option,java/lang/StringBuffer.append,BlockLayoutByFrequency
</pre>
<p>You can specify multiple compilation options, separated by commas or spaces.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F5D59766-D26D-4553-9797-A0118A7501CB"><!-- --></a><code class="codeph">print</code></dt>
<dd>
<p>Prints generated assembler code after compilation of the specified method.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-12905E67-19B6-4620-A614-D77FFD21CA7D"><!-- --></a><code class="codeph">quiet</code></dt>
<dd>
<p>Instructs not to print the compile commands. By default, the commands that you specify with the -<code class="codeph">XX:CompileCommand</code> option are printed; for example, if you exclude from compilation the <code class="codeph">indexOf()</code> method of the <code class="codeph">String</code> class, then the following is printed to standard output:</p>
<pre dir="ltr">
CompilerOracle: exclude java/lang/String.indexOf
</pre>
<p>You can suppress this by specifying the <code class="codeph">-XX:CompileCommand=quiet</code> option before other <code class="codeph">-XX:CompileCommand</code> options.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C392678F-67D9-4B4C-8C24-3AA55C3451EC"><!-- --></a><code class="codeph">-XX:CompileCommandFile=<span class="variable">filename</span></code></dt>
<dd>
<p>Sets the file from which JIT compiler commands are read. By default, the <code class="codeph">.hotspot_compiler</code> file is used to store commands performed by the JIT compiler.</p>
<p>Each line in the command file represents a command, a class name, and a method name for which the command is used. For example, this line prints assembly code for the <code class="codeph">toString()</code> method of the <code class="codeph">String</code> class:</p>
<pre dir="ltr">
print java/lang/String toString
</pre>
<p>If you&rsquo;re using commands for the JIT compiler to perform on methods, then see the <code class="codeph">-XX:CompileCommand</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DCA373B1-DAF0-40E8-9840-321896DD3988"><!-- --></a><code class="codeph">-XX:CompileOnly=<span class="variable">methods</span></code></dt>
<dd>
<p>Sets the list of methods (separated by commas) to which compilation should be restricted. Only the specified methods are compiled. Specify each method with the full class name (including the packages and subpackages). For example, to compile only the <code class="codeph">length()</code> method of the <code class="codeph">String</code> class and the <code class="codeph">size()</code> method of the <code class="codeph">List</code> class, use the following:</p>
<pre dir="ltr">
-XX:CompileOnly=java/lang/String.length,java/util/List.size
</pre>
<p>Note that the full class name is specified, including all packages and subpackages separated by a slash (<code class="codeph">/</code>). For easier cut and paste operations, it&rsquo;s also possible to use the method name format produced by the <code class="codeph">-XX:+PrintCompilation</code> and <code class="codeph">-XX:+LogCompilation</code> options:</p>
<pre dir="ltr">
-XX:CompileOnly=java.lang.String::length,java.util.List::size
</pre>
<p>Although wildcards aren&rsquo;t supported, you can specify only the class or package name to compile all methods in that class or package, as well as specify just the method to compile methods with this name in any class:</p>
<pre dir="ltr">
-XX:CompileOnly=java/lang/String
-XX:CompileOnly=java/lang
-XX:CompileOnly=.length
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-BC0E8E98-5F8B-4430-B09F-CD3DEA753E14"><!-- --></a><code class="codeph">-XX:CompileThreshold=<span class="variable">invocations</span></code></dt>
<dd>
<p>Sets the number of interpreted method invocations before compilation. By default, in the server JVM, the JIT compiler performs 10,000 interpreted method invocations to gather information for efficient compilation. For the client JVM, the default setting is 1,500 invocations. This option is ignored when tiered compilation is enabled; see the option <code class="codeph">-XX:-TieredCompilation</code>. The following example shows how to set the number of interpreted method invocations to 5,000:</p>
<pre dir="ltr">
-XX:CompileThreshold=5000
</pre>
<p>You can completely disable interpretation of Java methods before compilation by specifying the <code class="codeph">-Xcomp</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-91EBC542-755A-481C-A6E0-C5F905C1A003"><!-- --></a><code class="codeph">-XX:CompileThresholdScaling=<span class="variable">scale</span></code></dt>
<dd>
<p>Provides unified control of first compilation. This option controls when methods are first compiled for both the tiered and the nontiered modes of operation. The <code class="codeph">CompileThresholdScaling</code> option has an integer value between 0 and +Inf and scales the thresholds corresponding to the current mode of operation (both tiered and nontiered). Setting <code class="codeph">CompileThresholdScaling</code> to a value less than 1.0 results in earlier compilation while values greater than 1.0 delay compilation. Setting <code class="codeph">CompileThresholdScaling</code> to 0 is equivalent to disabling compilation.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F28BD5C4-1DD8-479C-96F4-F872AC1F0672"><!-- --></a><code class="codeph">-XX:+DoEscapeAnalysis</code></dt>
<dd>
<p>Enables the use of escape analysis. This option is enabled by default. To disable the use of escape analysis, specify <code class="codeph">-XX:-DoEscapeAnalysis</code>. Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1E08AD37-3DB9-41FD-9895-EE8B4F0B022D"><!-- --></a><code class="codeph">-XX:InitialCodeCacheSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the initial code cache size (in bytes). Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The default value is set to 500 KB. The initial code cache size shouldn&rsquo;t be less than the system's minimal memory page size. The following example shows how to set the initial code cache size to 32 KB:</p>
<pre dir="ltr">
-XX:InitialCodeCacheSize=32k
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1A963FA2-BD3E-4D80-8249-5397D40BE969"><!-- --></a><code class="codeph">-XX:+Inline</code></dt>
<dd>
<p>Enables method inlining. This option is enabled by default to increase performance. To disable method inlining, specify <code class="codeph">-XX:-Inline</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-09A613D3-69CC-4108-B7AB-08E73B078894"><!-- --></a><code class="codeph">-XX:InlineSmallCode=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the maximum code size (in bytes) for compiled methods that should be inlined. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. Only compiled methods with the size smaller than the specified size is inlined. By default, the maximum code size is set to 1000 bytes:</p>
<pre dir="ltr">
-XX:InlineSmallCode=1000
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-58C5D621-40D7-4B01-ADA3-4BBEF50D8412"><!-- --></a><code class="codeph">-XX:+LogCompilation</code></dt>
<dd>
<p>Enables logging of compilation activity to a file named <code class="codeph">hotspot.log</code> in the current working directory. You can specify a different log file path and name using the <code class="codeph">-XX:LogFile</code> option.</p>
<p>By default, this option is disabled and compilation activity isn&rsquo;t logged. The <code class="codeph">-XX:+LogCompilation</code> option has to be used together with the <code class="codeph">-XX:UnlockDiagnosticVMOptions</code> option that unlocks diagnostic JVM options.</p>
<p>You can enable verbose diagnostic output with a message printed to the console every time a method is compiled by using the <code class="codeph">-XX:+PrintCompilation</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-BF1B5BDD-3512-427A-BE8B-CA72BCAD780B"><!-- --></a><code class="codeph">-XX:MaxInlineSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the maximum bytecode size (in bytes) of a method to be inlined. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. By default, the maximum bytecode size is set to 35 bytes:</p>
<pre dir="ltr">
-XX:MaxInlineSize=35
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-BF44D05B-13CF-43A6-BFD6-229E7A80D63B"><!-- --></a><code class="codeph">-XX:MaxNodeLimit=<span class="variable">nodes</span></code></dt>
<dd>
<p>Sets the maximum number of nodes to be used during single method compilation. By default, the maximum number of nodes is set to 65,000:</p>
<pre dir="ltr">
-XX:MaxNodeLimit=65000
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F93786D2-159C-4522-ADDB-9AC1F331F0C7"><!-- --></a><code class="codeph">-XX:NonNMethodCodeHeapSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the size in bytes of the code segment containing nonmethod code.</p>
<p>A nonmethod code segment containing nonmethod code, such as compiler buffers and the bytecode interpreter. This code type stays in the code cache forever. This flag is used only if <code class="codeph">&mdash;XX:SegmentedCodeCache</code> is enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5085D923-C63B-449F-97A2-78FF46824F5C"><!-- --></a><code class="codeph">&mdash;XX:NonProfiledCodeHeapSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the size in bytes of the code segment containing nonprofiled methods. This flag is used only if <code class="codeph">&mdash;XX:SegmentedCodeCache</code> is enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B0BD6950-B293-48C0-8349-3594D9497972"><!-- --></a><code class="codeph">-XX:MaxTrivialSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the maximum bytecode size (in bytes) of a trivial method to be inlined. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. By default, the maximum bytecode size of a trivial method is set to 6 bytes:</p>
<pre dir="ltr">
-XX:MaxTrivialSize=6
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2087CC3B-E7F0-4DAA-B42D-4F9FE3A8419B"><!-- --></a><code class="codeph">-XX:+OptimizeStringConcat</code></dt>
<dd>
<p>Enables the optimization of <code class="codeph">String</code> concatenation operations. This option is enabled by default. To disable the optimization of <code class="codeph">String</code> concatenation operations, specify <code class="codeph">-XX:-OptimizeStringConcat</code>. Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-CA098685-2F70-4D8C-8F75-D003CFE62022"><!-- --></a><code class="codeph">-XX:+PrintAssembly</code></dt>
<dd>
<p>Enables printing of assembly code for bytecoded and native methods by using the external <code class="codeph">hsdis-&lt;arch&gt;.so</code> or <code class="codeph">.dll</code> library. For 64-bit VM on Windows, it&rsquo;s <code class="codeph">hsdis-amd64.dll</code>. This lets you to see the generated code, which may help you to diagnose performance issues.</p>
<p>By default, this option is disabled and assembly code isn&rsquo;t printed. The <code class="codeph">-XX:+PrintAssembly</code> option has to be used together with the <code class="codeph">-XX:UnlockDiagnosticVMOptions</code> option that unlocks diagnostic JVM options.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D9263E0B-6613-40A9-A37D-CB35FF5CC983"><!-- --></a><code class="codeph">-XX:ProfiledCodeHeapSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the size in bytes of the code segment containing profiled methods. This flag is used only if <code class="codeph">&mdash;XX:SegmentedCodeCache</code> is enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-499709B1-E4A1-4C39-88B2-5ABFCC20831B"><!-- --></a><code class="codeph">-XX:+PrintCompilation</code></dt>
<dd>
<p>Enables verbose diagnostic output from the JVM by printing a message to the console every time a method is compiled. This lets you to see which methods actually get compiled. By default, this option is disabled and diagnostic output isn&rsquo;t printed.</p>
<p>You can also log compilation activity to a file by using the <code class="codeph">-XX:+LogCompilation</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F72125D2-B44F-4A91-8BFE-16795A2A40B5"><!-- --></a><code class="codeph">-XX:+PrintInlining</code></dt>
<dd>
<p>Enables printing of inlining decisions. This let&rsquo;s you to see which methods are getting inlined.</p>
<p>By default, this option is disabled and inlining information isn&rsquo;t printed. The <code class="codeph">-XX:+PrintInlining</code> option has to be used together with the <code class="codeph">-XX:+UnlockDiagnosticVMOptions</code> option that unlocks diagnostic JVM options.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3CFE74F1-EBAF-4FDA-8472-9C4D583D2723"><!-- --></a><code class="codeph">-XX:ReservedCodeCacheSize=<span class="variable">size</span></code></dt>
<dd>
<p>Sets the maximum code cache size (in bytes) for JIT-compiled code. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The default maximum code cache size is 240 MB; if you disable tiered compilation with the option <code class="codeph">-XX:-TieredCompilation</code>, then the default size is 48 MB. This option has a limit of 2 GB; otherwise, an error is generated. The maximum code cache size shouldn&rsquo;t be less than the initial code cache size; see the option <code class="codeph">-XX:InitialCodeCacheSize</code>. This option is equivalent to <code class="codeph">-Xmaxjitcodesize</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7B470A4F-E63F-4614-83AF-3018D36E9509"><!-- --></a><code class="codeph">-XX:RTMAbortRatio=<span class="variable">abort_ratio</span></code></dt>
<dd>
<p>Specifies the RTM abort ratio is specified as a percentage (%) of all executed RTM transactions. If a number of aborted transactions becomes greater than this ratio, then the compiled code is deoptimized. This ratio is used when the <code class="codeph">-XX:+UseRTMDeopt</code> option is enabled. The default value of this option is 50. This means that the compiled code is deoptimized if 50% of all transactions are aborted.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-24C7711F-3C49-4007-BF16-002B28A8F4B2"><!-- --></a><code class="codeph">-XX:+SegmentedCodeCache</code></dt>
<dd>
<p>Enables segmentation of the code cache. Without the <code class="codeph">&mdash;XX:+SegmentedCodeCache</code>, the code cache consists of one large segment. With <code class="codeph">&mdash;XX:+SegmentedCodeCache</code>, we have separate segments for nonmethod, profiled method, and nonprofiled method code. These segments aren&rsquo;t resized at runtime. The feature is enabled by default if tiered compilation is enabled (<code class="codeph">-XX:+TieredCompilation</code> ) and <code class="codeph">-XX:ReservedCodeCacheSize</code> &gt;= 240 MB. The advantages are better control of the memory footprint, reduced code fragmentation, and better iTLB/iCache behavior due to improved locality. iTLB/iCache is a CPU-specific term meaning Instruction Translation Lookaside Buffer (ITLB). ICache is an instruction cache in theCPU. The implementation of the code cache can be found in the file: <code>/share/vm/code/codeCache.cpp</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-208BCEC0-ABCE-4B75-88C7-52682B06738A"><!-- --></a><code class="codeph">-XX:StartAggressiveSweepingAt=<span class="variable">percent</span></code></dt>
<dd>
<p>Forces stack scanning of active methods to aggressively remove unused code when only the given percentage of the code cache is free. The default value is 10%.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-AED1A461-3648-4F24-8504-2652E4009D0B"><!-- --></a><code class="codeph">-XX:RTMRetryCount=<span class="variable">number_of_retries</span></code></dt>
<dd>
<p>Specifies the number of times that the RTM locking code is retried, when it is aborted or busy, before falling back to the normal locking mechanism. The default value for this option is 5. The <code class="codeph">-XX:UseRTMLocking</code> option must be enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D15D1A39-DED8-4409-9FBA-BE06E23E8C38"><!-- --></a><code class="codeph">-XX:-TieredCompilation</code></dt>
<dd>
<p>Disables the use of tiered compilation. By default, this option is enabled. Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-89946F0C-73DE-4DFC-B137-A86FD94EDAD6"><!-- --></a><code class="codeph">-XX:+UseAES</code></dt>
<dd>
<p>Enables hardware-based AES intrinsics for Intel, AMD, and SPARC hardware. Intel Westmere (2010 and newer), AMD Bulldozer (2011 and newer), and SPARC (T4 and newer) are the supported hardware. The <code class="codeph">-XX:+UseAES</code> is used in conjunction with UseAESIntrinsics. Flags that control intrinsics now require the option <code class="codeph">-XX:+UnlockDiagnosticVMOptions</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-184F07C5-102C-4DD0-B11B-EE344F8E82ED"><!-- --></a><code class="codeph">-XX:+UseAESIntrinsics</code></dt>
<dd>
<p>Enables <code class="codeph">-XX:+UseAES</code> and <code class="codeph">-XX:+UseAESIntrinsics</code> flags by default and are supported only for the Java HotSpot Server VM. To disable hardware-based AES intrinsics, specify <code class="codeph">-XX:-UseAES -XX:-UseAESIntrinsics</code>. For example, to enable hardware AES, use the following flags:</p>
<pre dir="ltr">
-XX:+UseAES -XX:+UseAESIntrinsics
</pre>
<p>Flags that control intrinsics now require the option <code class="codeph">-XX:+UnlockDiagnosticVMOptions</code>. To support UseAES and UseAESIntrinsics flags, use the <code class="codeph">-server</code> option to select the Java HotSpot Server VM. These flags aren&rsquo;t supported on Client VM.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-57898B09-AB39-47DF-B044-216DB70F5064"><!-- --></a><code class="codeph">-XX:+UseCMoveUnconditionally</code></dt>
<dd>
<p>Generates CMove (scalar and vector) instructions regardless of profitability analysis.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1FB47631-E505-44C4-9228-1DDEE9641CA4"><!-- --></a><code class="codeph">-XX:+UseCodeCacheFlushing</code></dt>
<dd>
<p>Enables flushing of the code cache before shutting down the compiler. This option is enabled by default. To disable flushing of the code cache before shutting down the compiler, specify <code class="codeph">-XX:-UseCodeCacheFlushing</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DDFF278B-0065-4D45-BDD7-9AADEE3582B9"><!-- --></a><code class="codeph">-XX:+UseCondCardMark</code></dt>
<dd>
<p>Enables checking if the card is already marked before updating the card table. This option is disabled by default. It should be used only on machines with multiple sockets, where it increases the performance of Java applications that rely on concurrent operations. Only the Java HotSpot Server VM supports this option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F4A3D081-4CB5-48E6-8D4E-AB37CBFBD868"><!-- --></a><code class="codeph">-XX:+UseCountedLoopSafepoints</code></dt>
<dd>
<p>Keeps safepoints in counted loops. Its default value is false.&nbsp;</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-4518DD05-D6D1-4FAD-9D35-E124580D689A"><!-- --></a><code class="codeph">-XX:+UseFMA</code></dt>
<dd>
<p>Enables hardware-based FMA intrinsics for hardware where FMA instructions are available (such as, Intel, SPARC, and ARM64). FMA intrinsics are generated for the <code class="codeph">java.lang.Math.fma(<span class="variable">a</span>, <span class="variable">b</span>, <span class="variable">c</span>)</code> methods that calculate the value of (<code class="codeph"><span class="variable">a</span> * <span class="variable">b</span> + <span class="variable">c</span></code>) expressions.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FDDF35E6-A336-447D-9E9D-C23FD995E066"><!-- --></a><code class="codeph">-XX:+UseRTMDeopt</code></dt>
<dd>
<p>Autotunes RTM locking depending on the abort ratio. This ratio is specified by the <code class="codeph">-XX:RTMAbortRatio</code> option. If the number of aborted transactions exceeds the abort ratio, then the method containing the lock is deoptimized and recompiled with all locks as normal locks. This option is disabled by default. The <code class="codeph">-XX:+UseRTMLocking</code> option must be enabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F702DC4A-EA68-4CF9-9A6B-D8440D5639B1"><!-- --></a><code class="codeph">-XX:+UseRTMLocking</code></dt>
<dd>
<p>Generates Restricted Transactional Memory (RTM) locking code for all inflated locks, with the normal locking mechanism as the fallback handler. This option is disabled by default. Options related to RTM are available only for the Java HotSpot Server VM on x86 CPUs that support Transactional Synchronization Extensions (TSX).</p>
<p>RTM is part of Intel's TSX, which is an x86 instruction set extension and facilitates the creation of multithreaded applications. RTM introduces the new instructions <code class="codeph">XBEGIN</code>, <code class="codeph">XABORT</code>, <code class="codeph">XEND</code>, and <code class="codeph">XTEST</code>. The <code class="codeph">XBEGIN</code> and <code class="codeph">XEND</code> instructions enclose a set of instructions to run as a transaction. If no conflict is found when running the transaction, then the memory and register modifications are committed together at the <code class="codeph">XEND</code> instruction. The <code class="codeph">XABORT</code> instruction can be used to explicitly abort a transaction and the <code class="codeph">XEND</code> instruction checks if a set of instructions is being run in a transaction.</p>
<p>A lock on a transaction is inflated when another thread tries to access the same transaction, thereby blocking the thread that didn&rsquo;t originally request access to the transaction. RTM requires that a fallback set of operations be specified in case a transaction aborts or fails. An RTM lock is a lock that has been delegated to the TSX's system.</p>
<p>RTM improves performance for highly contended locks with low conflict in a critical region (which is code that must not be accessed by more than one thread concurrently). RTM also improves the performance of coarse-grain locking, which typically doesn&rsquo;t perform well in multithreaded applications. (Coarse-grain locking is the strategy of holding locks for long periods to minimize the overhead of taking and releasing locks, while fine-grained locking is the strategy of trying to achieve maximum parallelism by locking only when necessary and unlocking as soon as possible.) Also, for lightly contended locks that are used by different threads, RTM can reduce false cache line sharing, also known as cache line ping-pong. This occurs when multiple threads from different processors are accessing different resources, but the resources share the same cache line. As a result, the processors repeatedly invalidate the cache lines of other processors, which forces them to read from main memory instead of their cache.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C8FC7000-89CD-4E47-93D4-0D23908BFFD4"><!-- --></a><code class="codeph">-XX:+UseSHA</code></dt>
<dd>
<p>Enables hardware-based intrinsics for SHA crypto hash functions for SPARC hardware. The <code class="codeph">UseSHA</code> option is used in conjunction with the <code class="codeph">UseSHA1Intrinsics</code>, <code class="codeph">UseSHA256Intrinsics</code>, and <code class="codeph">UseSHA512Intrinsics</code> options.</p>
<p>The <code class="codeph">UseSHA</code> and <code class="codeph">UseSHA*Intrinsics</code> flags are enabled by default, and are supported only for Java HotSpot Server VM 64-bit on SPARC T4 and newer.</p>
<p>This feature is applicable only when using the <code class="codeph">sun.security.provider.Sun</code> provider for SHA operations. Flags that control intrinsics now require the option <code class="codeph">-XX:+UnlockDiagnosticVMOptions</code>.</p>
<p>To disable all hardware-based SHA intrinsics, specify the <code class="codeph">-XX:-UseSHA</code>. To disable only a particular SHA intrinsic, use the appropriate corresponding option. For example: <code class="codeph">-XX:-UseSHA256Intrinsics</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-9C9914C4-F4F6-4E65-B52F-C3D8F76D096B"><!-- --></a><code class="codeph">-XX:+UseSHA1Intrinsics</code></dt>
<dd>
<p>Enables intrinsics for SHA-1 crypto hash function. Flags that control intrinsics now require the option <code class="codeph">-XX:+UnlockDiagnosticVMOptions</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0B136A5A-0867-46F7-A592-99D53AAC8212"><!-- --></a><code class="codeph">-XX:+UseSHA256Intrinsics</code></dt>
<dd>
<p>Enables intrinsics for SHA-224 and SHA-256 crypto hash functions. Flags that control intrinsics now require the option <code class="codeph">-XX:+UnlockDiagnosticVMOptions</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-00ABA50D-4CD0-4968-8E42-12001A11BDE2"><!-- --></a><code class="codeph">-XX:+UseSHA512Intrinsics</code></dt>
<dd>
<p>Enables intrinsics for SHA-384 and SHA-512 crypto hash functions. Flags that control intrinsics now require the option <code class="codeph">-XX:+UnlockDiagnosticVMOptions</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7E9D63AE-254C-4A5D-B9CF-A66FF4755FAE"><!-- --></a><code class="codeph">-XX:+UseSuperWord</code></dt>
<dd>
<p>Enables the transformation of scalar operations into superword operations. Superword is a vectorization optimization. This option is enabled by default. To disable the transformation of scalar operations into superword operations, specify <code class="codeph">-XX:-UseSuperWord</code>. Only the Java HotSpot Server VM supports this option.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABFJDIC">
<p class="subhead1">Advanced Serviceability Options for Java</p>
<p>These <code>java</code> options provide the ability to gather system information and perform extensive debugging.</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-65231785-2AB8-43C4-BB64-72E4B391DF67"><!-- --></a><span class="bold"><code class="codeph">-XX:+ExtendedDTraceProbes</code></span></dt>
<dd>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> Enables additional <code class="codeph">dtrace</code> tool probes that affect the performance. By default, this option is disabled and <code class="codeph">dtrace</code> performs only standard probes.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-54771326-1CB1-4D43-A22E-7D75C4ADC153"><!-- --></a><span class="bold"><code class="codeph">-XX:+HeapDumpOnOutOfMemoryError</code></span></dt>
<dd>
<p>Enables the dumping of the Java heap to a file in the current directory by using the heap profiler (HPROF) when a <code class="codeph">java.lang.OutOfMemoryError</code> exception is thrown. You can explicitly set the heap dump file path and name using the <code class="codeph">-XX:HeapDumpPath</code> option. By default, this option is disabled and the heap isn&rsquo;t dumped when an <code class="codeph">OutOfMemoryError</code> exception is thrown.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-38364443-118C-4536-8AB5-DF0933997159"><!-- --></a><span class="bold"><code class="codeph">-XX:HeapDumpPath=<span class="variable">path</span></code></span></dt>
<dd>
<p>Sets the path and file name for writing the heap dump provided by the heap profiler (HPROF) when the <code class="codeph">-XX:+HeapDumpOnOutOfMemoryError</code> option is set. By default, the file is created in the current working directory, and it&rsquo;s named <code class="codeph">java_pid</code><code class="codeph">pid</code><code class="codeph">.hprof</code> where <code class="codeph">pid</code> is the identifier of the process that caused the error. The following example shows how to set the default file explicitly (<code class="codeph">%p</code> represents the current process identifier):</p>
<pre dir="ltr">
-XX:HeapDumpPath=./java_pid%p.hprof
</pre>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> The following example shows how to set the heap dump file to <code class="codeph">/var/log/java/java_heapdump.hprof</code>:</p>
<pre dir="ltr">
-XX:HeapDumpPath=/var/log/java/java_heapdump.hprof
</pre></li>
<li>
<p><span class="bold">Windows:</span> The following example shows how to set the heap dump file to <code class="codeph">C:/log/java/java_heapdump.log</code>:</p>
<pre dir="ltr">
-XX:HeapDumpPath=C:/log/java/java_heapdump.log
</pre></li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0A32E900-3405-49B3-9BCE-A2B7598A1FA8"><!-- --></a><span class="bold"><code class="codeph">-XX:LogFile=<span class="variable">path</span></code></span></dt>
<dd>
<p>Sets the path and file name to where log data is written. By default, the file is created in the current working directory, and it&rsquo;s named <code class="codeph">hotspot.log</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> The following example shows how to set the log file to <code class="codeph">/var/log/java/hotspot.log</code>:</p>
<pre dir="ltr">
-XX:LogFile=/var/log/java/hotspot.log
</pre></li>
<li>
<p><span class="bold">Windows:</span> The following example shows how to set the log file to <code class="codeph">C:/log/java/hotspot.log</code>:</p>
<pre dir="ltr">
-XX:LogFile=C:/log/java/hotspot.log
</pre></li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A19C2751-E79A-40FA-AFCA-89BF5326BA8E"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintClassHistogram</code></span></dt>
<dd>
<p>Enables printing of a class instance histogram after one of the following events:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> <code class="codeph">Control+Break</code></p>
</li>
<li>
<p><span class="bold">Windows:</span> <code class="codeph">Control+C</code> (<code class="codeph">SIGTERM</code>)</p>
</li>
</ul>
<p>By default, this option is disabled.</p>
<p>Setting this option is equivalent to running the <code class="codeph">jmap -histo</code> command, or the <code class="codeph">jcmd <span class="variable">pid</span> GC.class_histogram</code> command, where <code class="codeph"><span class="variable">pid</span></code> is the current Java process identifier.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EA8F2041-B541-45D7-A9FC-D9F7BEAD6B3C"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintConcurrentLocks</code></span></dt>
<dd>
<p>Enables printing of <code class="codeph">java.util.concurrent</code> locks after one of the following events:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> <code class="codeph">Control+Break</code></p>
</li>
<li>
<p><span class="bold">Windows:</span> <code class="codeph">Control+C</code> (<code class="codeph">SIGTERM</code>)</p>
</li>
</ul>
<p>By default, this option is disabled.</p>
<p>Setting this option is equivalent to running the <code class="codeph">jstack -l</code> command or the<code class="codeph">jcmd <span class="variable">pid</span> Thread.print -l</code> command, where <code class="codeph"><span class="variable">pid</span></code> is the current Java process identifier.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3C2AF1D0-CCDA-481E-A697-1AC875347BC2"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintFlagsRanges</code></span></dt>
<dd>
<p>Prints the range specified and allows automatic testing of the values. See <a href="java.htm#GUID-9569449C-525F-4474-972C-4C1F63D5C357" title="You use values provided to all Java Virtual Machine (JVM) command-line flags for validation and, if the input value is invalid or out-of-range, then an appropriate error message is displayed.">Validate Java Virtual Machine Flag Arguments</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E0FD8F37-0D2A-4686-B59A-F0C83CC196A4"><!-- --></a><span class="bold"><code class="codeph">-XX:+UnlockDiagnosticVMOptions</code></span></dt>
<dd>
<p>Unlocks the options intended for diagnosing the JVM. By default, this option is disabled and diagnostic options aren&rsquo;t available.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__BABFAFAE">
<p class="subhead1">Advanced Garbage Collection Options for Java</p>
<p>These <code class="codeph">java</code> options control how garbage collection (GC) is performed by the Java HotSpot VM.</p>
<dl>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6C4E6A3C-05B5-4037-B812-A7912712ED43"><!-- --></a><span class="bold"><code class="codeph">-XX:+AggressiveHeap</code></span></dt>
<dd>
<p>Enables Java heap optimization. This sets various parameters to be optimal for long-running jobs with intensive memory allocation, based on the configuration of the computer (RAM and CPU). By default, the option is disabled and the heap isn&rsquo;t optimized.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-228D6C58-31A4-488D-810E-296FED374B59"><!-- --></a><span class="bold"><code class="codeph">-XX:+AlwaysPreTouch</code></span></dt>
<dd>
<p>Enables touching of every page on the Java heap during JVM initialization. This gets all pages into memory before entering the <code class="codeph">main()</code> method. The option can be used in testing to simulate a long-running system with all virtual memory mapped to physical memory. By default, this option is disabled and all pages are committed as JVM heap space fills.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-31D382AC-4730-45BE-A921-C0C4A05BBAF8"><!-- --></a><span class="bold"><code class="codeph">-XX:+CMSClassUnloadingEnabled</code></span></dt>
<dd>
<p>Enables class unloading when using the concurrent mark-sweep (CMS) garbage collector. This option is enabled by default. To disable class unloading for the CMS garbage collector, specify <code class="codeph">-XX:-CMSClassUnloadingEnabled</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-24323CF9-88AF-4814-96F2-0D94ECBA8406"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSExpAvgFactor=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of time (0 to 100) used to weight the current sample when computing exponential averages for the concurrent collection statistics. By default, the exponential averages factor is set to 25%. The following example shows how to set the factor to 15%:</p>
<pre dir="ltr">
-XX:CMSExpAvgFactor=15
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-8E1AC53B-4CC0-4A89-A300-4C31DF5013A2"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalDutyCycle=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage (0 to 100) of time between minor collections that the CMS collector is allowed to run. If <code class="codeph">CMSIncrementalPacing</code> is enabled, then this is just the initial value. The default value is 10.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-9A8166B1-96B3-4A33-8BAB-D73843793EA8"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalDutyCycleMin=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage (0 to 100) that&rsquo;s the lower bound on the duty cycle when <code class="codeph">CMSIncrementalPacing</code> is enabled. The default value is 0.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-75D457E3-D16E-4A8F-912F-5EE8988722BD"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalDutySafetyFactor=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage (0 to 100) used to add conservatism when computing the duty cycle. The default value is 10.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-430EC636-B612-4FB0-A418-AF19A54BD061"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalOffset=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage (0 to 100) by which the incremental mode duty cycle is shifted to the right within the period between minor collections. The default value is 0.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-28DDBD36-EFA5-4497-8DE4-5F33955E33F1"><!-- --></a><span class="bold"><code class="codeph">-XX:+CMSIncrementalPacing</code></span></dt>
<dd>
<p>Enables automatic pacing. The incremental mode duty cycle is automatically adjusted based on statistics collected while the JVM is running. By default, this option is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5EC52715-B974-482D-A6DC-515F27C3B504"><!-- --></a><span class="bold"><code class="codeph">-XX:+CMSScavengeBeforeRemark</code></span></dt>
<dd>
<p>Enables scavenging attempts before the CMS remark step. By default, this option is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3F8A5BF0-67F5-4B55-A84C-BB34B95DE180"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSTriggerRatio=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage (0 to 100) of the value specified by the option <code class="codeph">-XX:MinHeapFreeRatio</code> that&rsquo;s allocated before a CMS collection cycle commences. The default value is set to 80%.</p>
<p>The following example shows how to set the occupancy fraction to 75%:</p>
<pre dir="ltr">
-XX:CMSTriggerRatio=75
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-EDAC2B01-CBD6-40DF-A345-0CCC1D90E5A6"><!-- --></a><span class="bold"><code class="codeph">-XX:ConcGCThreads=<span class="variable">threads</span></code></span></dt>
<dd>
<p>Sets the number of threads used for concurrent GC. Sets <span class="italic"><code class="codeph">threads</code></span> to approximately 1/4 of the number of parallel garbage collection threads. The default value depends on the number of CPUs available to the JVM.</p>
<p>For example, to set the number of threads for concurrent GC to 2, specify the following option:</p>
<pre dir="ltr">
-XX:ConcGCThreads=2
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C1BBE082-B974-4605-9F1E-A84F5A35C2F6"><!-- --></a><span class="bold"><code class="codeph">-XX:+DisableExplicitGC</code></span></dt>
<dd>
<p>Enables the option that disables processing of calls to the <code class="codeph">System.gc()</code> method. This option is disabled by default, meaning that calls to <code class="codeph">System.gc()</code> are processed. If processing of calls to <code class="codeph">System.gc()</code> is disabled, then the JVM still performs GC when necessary.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3C6DF7A2-77AB-486F-BFEC-59A9FC7B638B"><!-- --></a><span class="bold"><code class="codeph">-XX:+ExplicitGCInvokesConcurrent</code></span></dt>
<dd>
<p>Enables invoking of concurrent GC by using the <code class="codeph">System.gc()</code> request. This option is disabled by default and can be enabled only together with the <code class="codeph">-XX:+UseConcMarkSweepGC</code> and <code class="codeph">-XX:+UseG1GC</code> options.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-6281356F-EABB-4568-9BAE-9A0BB1CE0133"><!-- --></a><span class="bold"><code class="codeph">-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses</code></span></dt>
<dd>
<p>Enables invoking of concurrent GC by using the <code class="codeph">System.gc()</code> request and unloading of classes during the concurrent GC cycle. This option is disabled by default and can be enabled only together with the <code class="codeph">-XX:+UseConcMarkSweepGC</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-B9F3FC5E-F03C-46D5-A0C7-1A0699CFD7D2"><!-- --></a><span class="bold"><code class="codeph">-XX:G1HeapRegionSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the size of the regions into which the Java heap is subdivided when using the garbage-first (G1) collector. The value is a power of 2 and can range from 1 MB to 32 MB. The goal is to have around 2048 regions based on the minimum Java heap size. The default region size is determined ergonomically based on the heap size.</p>
<p>The following example sets the size of the subdivisions to 16 MB:</p>
<pre dir="ltr">
-XX:G1HeapRegionSize=16m
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5E738BEB-BD20-4ADC-B21E-E32595C4F2C1"><!-- --></a><span class="bold"><code class="codeph">-XX:G1HeapWastePercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of heap that you&rsquo;re willing to waste. The Java HotSpot VM doesn&rsquo;t initiate the mixed garbage collection cycle when the reclaimable percentage is less than the heap waste percentage. The default is 5 percent.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-23C38E1D-2DDF-42CD-BC3C-A36E065B1650"><!-- --></a><span class="bold"><code class="codeph">-XX:G1MaxNewSizePercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of the heap size to use as the maximum for the young generation size. The default value is 60 percent of your Java heap.</p>
<p>This is an experimental flag. This setting replaces the <code class="codeph">-XX:DefaultMaxNewGenPercent</code> setting.</p>
<p>This setting isn&rsquo;t available in Java HotSpot VM build 23 or earlier.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-364D09E1-D236-41A3-BE6A-6D291559372C"><!-- --></a><span class="bold"><code class="codeph">-XX:G1MixedGCCountTarget=<span class="variable">number</span></code></span></dt>
<dd>
<p>Sets the target number of mixed garbage collections after a marking cycle to collect old regions with at most <code class="codeph">G1MixedGCLIveThresholdPercent</code> live data. The default is 8 mixed garbage collections. The goal for mixed collections is to be within this target number.</p>
<p>This setting isn&rsquo;t available in Java HotSpot VM build 23 or earlier.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-BBD43EC1-BF18-49DB-B20E-53DEE08A904B"><!-- --></a><span class="bold"><code class="codeph">-XX:G1MixedGCLiveThresholdPercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the occupancy threshold for an old region to be included in a mixed garbage collection cycle. The default occupancy is 85 percent.</p>
<p>This is an experimental flag. This setting replaces the <code class="codeph">-XX:G1OldCSetRegionLiveThresholdPercent</code> setting.</p>
<p>This setting isn&rsquo;t available in Java HotSpot VM build 23 or earlier.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-4CFBD26E-B890-471C-9299-5395355FE105"><!-- --></a><span class="bold"><code class="codeph">-XX:G1NewSizePercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of the heap to use as the minimum for the young generation size. The default value is 5 percent of your Java heap.</p>
<p>This is an experimental flag. This setting replaces the <code class="codeph">-XX:DefaultMinNewGenPercent</code> setting.</p>
<p>This setting isn&rsquo;t available in Java HotSpot VM build 23 or earlier.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3B41E8F6-36B3-4686-AD2B-DA877FD3EFF3"><!-- --></a><span class="bold"><code class="codeph">-XX:G1OldCSetRegionThresholdPercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets an upper limit on the number of old regions to be collected during a mixed garbage collection cycle. The default is 10 percent of the Java heap.</p>
<p>This setting isn&rsquo;t available in Java HotSpot VM build 23 or earlier.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A1CE758F-6246-470D-93E5-59085756150D"><!-- --></a><span class="bold"><code class="codeph">-XX:G1ReservePercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of the heap (0 to 50) that&rsquo;s reserved as a false ceiling to reduce the possibility of promotion failure for the G1 collector. When you increase or decrease the percentage, ensure that you adjust the total Java heap by the same amount. By default, this option is set to 10%.</p>
<p>The following example sets the reserved heap to 20%:</p>
<pre dir="ltr">
-XX:G1ReservePercent=20
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-2CAEFBDD-3B79-443C-9AC3-53DC051673A7"><!-- --></a><span class="bold"><code class="codeph">-XX:InitialHeapOccupancyPercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the Java heap occupancy threshold that triggers a marking cycle. The default occupancy is 45 percent of the entire Java heap.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-77CCA623-9925-432D-8F74-1F8FD08C0D98"><!-- --></a><span class="bold"><code class="codeph">-XX:InitialHeapSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the initial size (in bytes) of the memory allocation pool. This value must be either 0, or a multiple of 1024 and greater than 1 MB. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The default value is selected at run time based on the system configuration.</p>
<p>The following examples show how to set the size of allocated memory to 6 MB using various units:</p>
<pre dir="ltr">
-XX:InitialHeapSize=6291456
-XX:InitialHeapSize=6144k
-XX:InitialHeapSize=6m
</pre>
<p>If you set this option to 0, then the initial size is set as the sum of the sizes allocated for the old generation and the young generation. The size of the heap for the young generation can be set using the <code class="codeph">-XX:NewSize</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DE80CD5E-729C-46D5-AABB-D05D249AB804"><!-- --></a><span class="bold"><code class="codeph">-XX:InitialSurvivorRatio=<span class="variable">ratio</span></code></span></dt>
<dd>
<p>Sets the initial survivor space ratio used by the throughput garbage collector (which is enabled by the <code class="codeph">-XX:+UseParallelGC</code> and/or -<code class="codeph">XX:+UseParallelOldGC</code> options). Adaptive sizing is enabled by default with the throughput garbage collector by using the <code class="codeph">-XX:+UseParallelGC</code> and <code class="codeph">-XX:+UseParallelOldGC</code> options, and the survivor space is resized according to the application behavior, starting with the initial value. If adaptive sizing is disabled (using the <code class="codeph">-XX:-UseAdaptiveSizePolicy</code> option), then the <code class="codeph">-XX:SurvivorRatio</code> option should be used to set the size of the survivor space for the entire execution of the application.</p>
<p>The following formula can be used to calculate the initial size of survivor space (S) based on the size of the young generation (Y), and the initial survivor space ratio (R):</p>
<pre dir="ltr">
S=Y/(R+2)
</pre>
<p>The 2 in the equation denotes two survivor spaces. The larger the value specified as the initial survivor space ratio, the smaller the initial survivor space size.</p>
<p>By default, the initial survivor space ratio is set to 8. If the default value for the young generation space size is used (2 MB), then the initial size of the survivor space is 0.2 MB.</p>
<p>The following example shows how to set the initial survivor space ratio to 4:</p>
<pre dir="ltr">
-XX:InitialSurvivorRatio=4
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-5D50EEFC-FF82-4444-8E0E-957B26B52E5D"><!-- --></a><span class="bold"><code class="codeph">-XX:InitiatingHeapOccupancyPercent=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of the heap occupancy (0 to 100) at which to start a concurrent GC cycle. It&rsquo;s used by garbage collectors that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (for example, the G1 garbage collector).</p>
<p>By default, the initiating value is set to 45%. A value of 0 implies nonstop GC cycles. The following example shows how to set the initiating heap occupancy to 75%:</p>
<pre dir="ltr">
-XX:InitiatingHeapOccupancyPercent=75
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-BC9C47F0-2C8F-4423-B298-A524D3BE28EF"><!-- --></a><span class="bold"><code class="codeph">-XX:MaxGCPauseMillis=<span class="variable">time</span></code></span></dt>
<dd>
<p>Sets a target for the maximum GC pause time (in milliseconds). This is a soft goal, and the JVM will make its best effort to achieve it. The specified value doesn&rsquo;t adapt to your heap size. By default, there&rsquo;s no maximum pause time value.</p>
<p>The following example shows how to set the maximum target pause time to 500 ms:</p>
<pre dir="ltr">
-XX:MaxGCPauseMillis=500
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-16B1303C-0604-40AE-B3AC-D5A1BC08C9B1"><!-- --></a><span class="bold"><code class="codeph">-XX:MaxHeapSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the maximum size (in byes) of the memory allocation pool. This value must be a multiple of 1024 and greater than 2 MB. Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The default value is selected at run time based on the system configuration. For server deployments, the options <code class="codeph">-XX:InitialHeapSize</code> and <code class="codeph">-XX:MaxHeapSize</code> are often set to the same value.</p>
<p>The following examples show how to set the maximum allowed size of allocated memory to 80 MB using various units:</p>
<pre dir="ltr">
-XX:MaxHeapSize=83886080
-XX:MaxHeapSize=81920k
-XX:MaxHeapSize=80m
</pre>
<p>On Oracle Solaris 7 and Oracle Solaris 8 SPARC platforms, the upper limit for this value is approximately 4,000 MB minus overhead amounts. On Oracle Solaris 2.6 and x86 platforms, the upper limit is approximately 2,000 MB minus overhead amounts. On Linux platforms, the upper limit is approximately 2,000 MB minus overhead amounts.</p>
<p>The <code class="codeph">-XX:MaxHeapSize</code> option is equivalent to <code class="codeph">-Xmx</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1188B661-AF65-425F-A583-62ABD7BC0B51"><!-- --></a><span class="bold"><code class="codeph">-XX:MaxHeapFreeRatio=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the maximum allowed percentage of free heap space (0 to 100) after a GC event. If free heap space expands above this value, then the heap is shrunk. By default, this value is set to 70%.</p>
<p>Minimize the Java heap size by lowering the values of the parameters <code class="codeph">MaxHeapFreeRatio</code> (default value is 70%) and <code class="codeph">MinHeapFreeRatio</code> (default value is 40%) with the command-line options <code class="codeph">-XX:MaxHeapFreeRatio</code> and <code class="codeph">-XX:MinHeapFreeRatio</code>. Lowering <code class="codeph">MaxHeapFreeRatio</code> to as low as 10% and <code class="codeph">MinHeapFreeRatio</code> to 5% has successfully reduced the heap size without too much performance regression; however, results may vary greatly depending on your application. Try different values for these parameters until they&rsquo;re as low as possible yet still retain acceptable performance.</p>
<pre dir="ltr">
-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5 
</pre>
<p>Customers trying to keep the heap small should also add the option <code class="codeph">-XX:-ShrinkHeapInSteps</code>. See <a href="java.htm#GUID-EE6BD9FA-EF6D-4C3E-AC5C-30B8762CDC1B" title="You can use the Java advanced runtime options to optimize the performance of your applications.">Performance Tuning Examples</a> for a description of using this option to keep the Java heap small by reducing the dynamic footprint for embedded applications.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-00745992-626E-483C-9895-381D8FA5A4DB"><!-- --></a><span class="bold"><code class="codeph">-XX:MaxMetaspaceSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the maximum amount of native memory that can be allocated for class metadata. By default, the size isn&rsquo;t limited. The amount of metadata for an application depends on the application itself, other running applications, and the amount of memory available on the system.</p>
<p>The following example shows how to set the maximum class metadata size to 256 MB:</p>
<pre dir="ltr">
-XX:MaxMetaspaceSize=256m
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-06251108-3903-4241-808F-F22328FA8B1E"><!-- --></a><span class="bold"><code class="codeph">-XX:MaxNewSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the maximum size (in bytes) of the heap for the young generation (nursery). The default value is set ergonomically.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7D91A1EF-EF14-4AB9-A2A5-383C85BC2D48"><!-- --></a><span class="bold"><code class="codeph">-XX:MaxTenuringThreshold=<span class="variable">threshold</span></code></span></dt>
<dd>
<p>Sets the maximum tenuring threshold for use in adaptive GC sizing. The largest value is 15. The default value is 15 for the parallel (throughput) collector, and 6 for the CMS collector.</p>
<p>The following example shows how to set the maximum tenuring threshold to 10:</p>
<pre dir="ltr">
-XX:MaxTenuringThreshold=10
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-06646B3F-3F78-4EEF-A12C-B5049C1D6C2C"><!-- --></a><span class="bold"><code class="codeph">-XX:MetaspaceSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the size of the allocated class metadata space that triggers a garbage collection the first time it&rsquo;s exceeded. This threshold for a garbage collection is increased or decreased depending on the amount of metadata used. The default size depends on the platform.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-AF59549A-80B0-4A65-9B51-9499366745E5"><!-- --></a><span class="bold"><code class="codeph">-XX:MinHeapFreeRatio=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the minimum allowed percentage of free heap space (0 to 100) after a GC event. If free heap space falls below this value, then the heap is expanded. By default, this value is set to 40%.</p>
<p>Minimize Java heap size by lowering the values of the parameters <code class="codeph">MaxHeapFreeRatio</code> (default value is 70%) and <code class="codeph">MinHeapFreeRatio</code> (default value is 40%) with the command-line options <code class="codeph">-XX:MaxHeapFreeRatio</code> and <code class="codeph">-XX:MinHeapFreeRatio</code>. Lowering <code class="codeph">MaxHeapFreeRatio</code> to as low as 10% and <code class="codeph">MinHeapFreeRatio</code> to 5% has successfully reduced the heap size without too much performance regression; however, results may vary greatly depending on your application. Try different values for these parameters until they&rsquo;re as low as possible, yet still retain acceptable performance.</p>
<pre dir="ltr">
-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5 
</pre>
<p>Customers trying to keep the heap small should also add the option <code class="codeph">-XX:-ShrinkHeapInSteps</code>. See <a href="java.htm#GUID-EE6BD9FA-EF6D-4C3E-AC5C-30B8762CDC1B" title="You can use the Java advanced runtime options to optimize the performance of your applications.">Performance Tuning Examples</a> for a description of using this option to keep the Java heap small by reducing the dynamic footprint for embedded applications.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F9708DDE-19BD-4001-B7EF-559BDF24CBA2"><!-- --></a><span class="bold"><code class="codeph">-XX:NewRatio=<span class="variable">ratio</span></code></span></dt>
<dd>
<p>Sets the ratio between young and old generation sizes. By default, this option is set to 2. The following example shows how to set the young-to-old ratio to 1:</p>
<pre dir="ltr">
-XX:NewRatio=1
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7CA92AEC-F9D1-4965-A0EE-6474FFAD8EC1"><!-- --></a><span class="bold"><code class="codeph">-XX:NewSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the initial size (in bytes) of the heap for the young generation (nursery). Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes.</p>
<p>The young generation region of the heap is used for new objects. GC is performed in this region more often than in other regions. If the size for the young generation is too low, then a large number of minor GCs are performed. If the size is too high, then only full GCs are performed, which can take a long time to complete. Oracle recommends that you keep the size for the young generation greater than 25% and less than 50% of the overall heap size.</p>
<p>The following examples show how to set the initial size of the young generation to 256 MB using various units:</p>
<pre dir="ltr">
-XX:NewSize=256m
-XX:NewSize=262144k
-XX:NewSize=268435456
</pre>
<p>The <code class="codeph">-XX:NewSize</code> option is equivalent to <code class="codeph">-Xmn</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A0EED983-31F3-4A6C-996D-C446F9B6E90B"><!-- --></a><span class="bold"><code class="codeph">-XX:ParallelGCThreads=<span class="variable">threads</span></code></span></dt>
<dd>
<p>Sets the value of the stop-the-world (STW) worker threads. This option sets the value of <code class="codeph"><span class="variable">threads</span></code> to the number of logical processors. The value of <code class="codeph"><span class="variable">threads</span></code> is the same as the number of logical processors up to a value of 8.</p>
<p>If there are more than 8 logical processors, then this option sets the value of <code class="codeph"><span class="variable">threads</span></code> to approximately 5/8 of the logical processors. This works in most cases except for larger SPARC systems where the value of <code class="codeph"><span class="variable">threads</span></code> can be approximately 5/16 of the logical processors.</p>
<p>The default value depends on the number of CPUs available to the JVM.</p>
<p>For example, to set the number of threads for parallel GC to 2, specify the following option:</p>
<pre dir="ltr">
-XX:ParallelGCThreads=2
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C7FC81DF-4472-4B29-98F1-937A7CA1B720"><!-- --></a><span class="bold"><code class="codeph">-XX:+ParallelRefProcEnabled</code></span></dt>
<dd>
<p>Enables parallel reference processing. By default, this option is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-7B83E274-2B09-4F60-A1EC-524E7CD2BE9F"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintAdaptiveSizePolicy</code></span></dt>
<dd>
<p>Enables printing of information about adaptive-generation sizing. By default, this option is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3F5BF92A-3F8B-4390-BA31-15BF6A7FEBFF"><!-- --></a><span class="bold"><code class="codeph">-XX:+ScavengeBeforeFullGC</code></span></dt>
<dd>
<p>Enables GC of the young generation before each full GC. This option is enabled by default. Oracle recommends that you <span class="italic">don&rsquo;t</span> disable it, because scavenging the young generation before a full GC can reduce the number of objects reachable from the old generation space into the young generation space. To disable GC of the young generation before each full GC, specify the option <code class="codeph">-XX:-ScavengeBeforeFullGC</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E2E96805-AC1A-4BCD-91DC-D210750AC08E"><!-- --></a><span class="bold"><code class="codeph">-XX:-ShrinkHeapInSteps</code></span></dt>
<dd>
<p>Incrementally reduces the Java heap to the target size, specified by the option <code class="codeph">&mdash;XX:MaxHeapFreeRatio</code>. This option is enabled by default. If disabled, then it immediately reduces the Java heap to the target size instead of requiring multiple garbage collection cycles. Disable this option if you want to minimize the Java heap size. You will likely encounter performance degradation when this option is disabled.</p>
<p>See <a href="java.htm#GUID-EE6BD9FA-EF6D-4C3E-AC5C-30B8762CDC1B" title="You can use the Java advanced runtime options to optimize the performance of your applications.">Performance Tuning Examples</a> for a description of using the <code class="codeph">MaxHeapFreeRatio</code> option to keep the Java heap small by reducing the dynamic footprint for embedded applications.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-3A53F101-8D5D-451F-A726-C1BF5A8F7198"><!-- --></a><span class="bold"><code class="codeph">&ndash;XX:StringDeduplicationAgeThreshold=<span class="variable">threshold</span></code></span></dt>
<dd>
<p>Identifies <code class="codeph">String</code> objects reaching the specified age that are considered candidates for deduplication. An object's age is a measure of how many times it has survived garbage collection. This is sometimes referred to as tenuring. See the <code class="codeph">-XX:+PrintTenuringDistribution</code> option.</p>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-A5A66696-4BC6-4187-A261-274F57228288">
<p class="notep1">Note:</p>
<p><code class="codeph">String</code> objects that are promoted to an old heap region before this age has been reached are always considered candidates for deduplication. The default value for this option is <code class="codeph">3</code>. See the <code class="codeph">-XX:+UseStringDeduplication</code> option.</p>
</div>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0B776EEF-4A67-46A7-AED3-397F8CE4A229"><!-- --></a><span class="bold"><code class="codeph">-XX:SurvivorRatio=<span class="variable">ratio</span></code></span></dt>
<dd>
<p>Sets the ratio between eden space size and survivor space size. By default, this option is set to 8. The following example shows how to set the eden/survivor space ratio to 4:</p>
<pre dir="ltr">
-XX:SurvivorRatio=4
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-4FB69536-35AA-4121-BEDA-E686AC962B88"><!-- --></a><span class="bold"><code class="codeph">-XX:TargetSurvivorRatio=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the desired percentage of survivor space (0 to 100) used after young garbage collection. By default, this option is set to 50%.</p>
<p>The following example shows how to set the target survivor space ratio to 30%:</p>
<pre dir="ltr">
-XX:TargetSurvivorRatio=30
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-D69A24EE-5341-489E-8CE2-B5B0753AD828"><!-- --></a><span class="bold"><code class="codeph">-XX:TLABSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the initial size (in bytes) of a thread-local allocation buffer (TLAB). Append the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. If this option is set to 0, then the JVM selects the initial size automatically.</p>
<p>The following example shows how to set the initial TLAB size to 512 KB:</p>
<pre dir="ltr">
-XX:TLABSize=512k
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-8F90F247-0DD1-4DE4-B252-E941A6EB375C"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseAdaptiveSizePolicy</code></span></dt>
<dd>
<p>Enables the use of adaptive generation sizing. This option is enabled by default. To disable adaptive generation sizing, specify <code class="codeph">-XX:-UseAdaptiveSizePolicy</code> and set the size of the memory allocation pool explicitly. See the <code class="codeph">-XX:SurvivorRatio</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1A0FD6E8-0AC1-4E8A-B1F0-6BC88E503458"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseCMSInitiatingOccupancyOnly</code></span></dt>
<dd>
<p>Enables the use of the occupancy value as the only criterion for initiating the CMS collector. By default, this option is disabled and other criteria may be used.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-146724E9-C9AF-4F88-8F7A-BA6419F20CAB"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseG1GC</code></span></dt>
<dd>
<p>Enables the use of the garbage-first (G1) garbage collector. It&rsquo;s a server-style garbage collector, targeted for multiprocessor machines with a large amount of RAM. This option meets GC pause time goals with high probability, while maintaining good throughput. The G1 collector is recommended for applications requiring large heaps (sizes of around 6 GB or larger) with limited GC latency requirements (a stable and predictable pause time below 0.5 seconds). By default, this option is enabled and G1 is used as the default garbage collector.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-729376EB-FC4A-4BAA-A743-9A0BA7E3619D"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseGCOverheadLimit</code></span></dt>
<dd>
<p>Enables the use of a policy that limits the proportion of time spent by the JVM on GC before an <code class="codeph">OutOfMemoryError</code> exception is thrown. This option is enabled, by default, and the parallel GC will throw an <code class="codeph">OutOfMemoryError</code> if more than 98% of the total time is spent on garbage collection and less than 2% of the heap is recovered. When the heap is small, this feature can be used to prevent applications from running for long periods of time with little or no progress. To disable this option, specify the option <code class="codeph">-XX:-UseGCOverheadLimit</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-0CF18151-BF1E-46AE-B63E-755EB573D155"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseNUMA</code></span></dt>
<dd>
<p>Enables performance optimization of an application on a machine with nonuniform memory architecture (NUMA) by increasing the application's use of lower latency memory. By default, this option is disabled and no optimization for NUMA is made. The option is available only when the parallel garbage collector is used (<code class="codeph">-XX:+UseParallelGC</code>).</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DD9FE0C9-E505-45D7-B4F3-D6E0A08430D7"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseParallelGC</code></span></dt>
<dd>
<p>Enables the use of the parallel scavenge garbage collector (also known as the throughput collector) to improve the performance of your application by leveraging multiple processors.</p>
<p>By default, this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM. If it&rsquo;s enabled, then the <code class="codeph">-XX:+UseParallelOldGC</code> option is automatically enabled, unless you explicitly disable it.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-69880687-4B41-490B-A3B8-4832C9441D7A"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseParallelOldGC</code></span></dt>
<dd>
<p>Enables the use of the parallel garbage collector for full GCs. By default, this option is disabled. Enabling it automatically enables the <code class="codeph">-XX:+UseParallelGC</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-29F4121C-BD9F-47B5-B043-C801F79102A5"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseSerialGC</code></span></dt>
<dd>
<p>Enables the use of the serial garbage collector. This is generally the best choice for small and simple applications that don&rsquo;t require any special functionality from garbage collection. By default, this option is disabled and the collector is selected automatically based on the configuration of the machine and type of the JVM.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-E867E13D-00EF-403F-A808-72CEE66F1AF7"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseSHM</code></span></dt>
<dd>
<p><span class="bold">Linux only:</span> Enables the JVM to use shared memory to set up large pages.</p>
<p>See <a href="java.htm#GUID-7BE7CD55-3AC3-4A96-BBDD-E4D9FC4FCCCB" title="You use large pages, also known as huge pages, as memory pages that are significantly larger than the standard memory page size (which varies depending on the processor and operating system). Large pages optimize processor Translation-Lookaside Buffers.">Large Pages</a> for setting up large pages.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-C6B373BC-6312-45EC-A3CB-2AA8164BEF2F"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseStringDeduplication</code></span></dt>
<dd>
<p>Enables string deduplication. By default, this option is disabled. To use this option, you must enable the garbage-first (G1) garbage collector.</p>
<p>String deduplication reduces the memory footprint of <code class="codeph">String</code> objects on the Java heap by taking advantage of the fact that many <code class="codeph">String</code> objects are identical. Instead of each <code class="codeph">String</code> object pointing to its own character array, identical <code class="codeph">String</code> objects can point to and share the same character array.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DEE9762E-3E49-4705-A0C5-8251A6CF6135"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseTLAB</code></span></dt>
<dd>
<p>Enables the use of thread-local allocation blocks (TLABs) in the young generation space. This option is enabled by default. To disable the use of TLABs, specify the option <code class="codeph">-XX:-UseTLAB</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__OBSOLETEJAVAOPTIONS-A4E7030A">
<p class="subhead1">Obsolete Java Options</p>
<p>These <code class="codeph">java</code> options are still accepted but ignored, and a warning is issued when they&rsquo;re used.</p>
<dl class="0.99* 3.01*">
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-66DDEAD6-E436-4000-B784-14DDECFC538F"><!-- --></a><span class="bold"><code class="codeph">-Xusealtsigs / -XX:+UseAltSigs</code></span></dt>
<dd>
<p><span class="bold">Oracle Solaris only:</span> Use alternative signals instead of SIGUSR1 and SIGUSR2 for JVM internal signals. Since Solaris 10, two dedicated signals have been made available to the VM and so, since JDK 6, these flags have been documented as having no effect. The flags have now been made obsolete, and their use generates a warning. In a future release these flags will be removed completely.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__DEPRECATEDJAVAOPTIONS-A4E6FB83">
<p class="subhead1">Deprecated Java Options</p>
<p>These <code class="codeph">java</code> options are <span>deprecated and might be removed in a future JDK release.</span> They&rsquo;re still accepted and acted upon, but a warning is issued when they&rsquo;re used.</p>
<dl class="0.99* 3.01*">
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-F199ACE0-1295-4D7C-B812-532E12ADB2B8"><!-- --></a><span class="bold"><code class="codeph">-d32</code></span></dt>
<dd>
<p>This option is deprecated and will be removed in a future release.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__D64DEPRECATEDORACLESOLARISLINUXANDO-A4E30862"><!-- --></a><span class="bold"><code class="codeph">-d64</code></span></dt>
<dd>
<p>This option is deprecated and will be removed in a future release.</p>
<p><span class="bold">Oracle Solaris, Linux, and OS X:</span> Runs the application in a 64-bit environment. If a 64-bit environment isn&rsquo;t installed or isn&rsquo;t supported, then an error is reported.</p>
<p>Only the Java HotSpot Server VM supports 64-bit operation and the <code class="codeph">-server</code> option is implicit with the use of <code class="codeph">-d64</code>. The <code class="codeph">-client</code> option is ignored with the use of <code class="codeph">-d64</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XLOGGCGARBAGE-COLLECTION.LOGINJDK9X-A4E3089D"><!-- --></a><span class="bold"><code class="codeph">-Xloggc:garbage-collection.log</code></span></dt>
<dd>
<p>Sets the file to which verbose GC events information should be redirected for logging. The information written to this file is similar to the output of <code class="codeph">-verbose:gc</code> with the time elapsed since the first GC event preceding each logged event. The <code class="codeph">-Xloggc</code> option overrides <code class="codeph">-verbose:gc</code> if both are given with the same java command.</p>
<p>Example:</p>
<pre dir="ltr">
-Xlog:gc:garbage-collection.log
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINITIATINGOCCUPANCYFRACTIONPER-A4E307F3"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSInitiatingOccupancyFraction=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of the old generation occupancy (0 to 100) at which to start a CMS collection cycle. The default value is set to -1. Any negative value (including the default) implies that the option <code class="codeph">-XX:CMSTriggerRatio</code> is used to define the value of the initiating occupancy fraction.</p>
<p>The following example shows how to set the occupancy fraction to 20%:</p>
<pre dir="ltr">
-XX:CMSInitiatingOccupancyFraction=20
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINITIATINGPERMOCCUPANCYFRACTIO-A4E30802"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSInitiatingPermOccupancyFraction=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of the permanent generation occupancy (0 to 100) at which to start a GC. This option was deprecated in JDK 8 with no replacement.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXG1PRINTHEAPREGIONSINJDK9THISISADE-A4E307EB"><!-- --></a><span class="bold"><code class="codeph">-XX:+G1PrintHeapRegions</code></span></dt>
<dd>
<p>Enables the printing of information about which regions are allocated and which are reclaimed by the G1 collector. By default, this option is disabled. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXMAXPERMSIZESIZEDEPRECATEDSETSTHEM-A4E307DD"><!-- --></a><span class="bold"><code class="codeph">-XX:MaxPermSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the maximum permanent generation space size (in bytes). This option was deprecated in JDK 8 and superseded by the <code class="codeph">-XX:MaxMetaspaceSize</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPERMSIZESIZEDEPRECATEDSETSTHESPAC-A4E3074F"><!-- --></a><span class="bold"><code class="codeph">-XX:PermSize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Sets the space (in bytes) allocated to the permanent generation that triggers a garbage collection if it&rsquo;s exceeded. This option was deprecated in JDK 8 and superseded by the <code class="codeph">-XX:MetaspaceSize</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTGCINJDK9THISISADEPRECATEDOPT-A4E307D5"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintGC</code></span></dt>
<dd>
<p>Enables printing of messages at every GC. By default, this option is disabled. If you&rsquo;re using this flag, then see <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>. In JDK 9, this option is deprecated.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTGCAPPLICATIONCONCURRENTTIMEI-A4E308BF"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintGCApplicationConcurrentTime</code></span></dt>
<dd>
<p>Enables printing of how much time elapsed since the last pause (for example, a GC pause). By default, this option is deprecated.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTGCAPPLICATIONSTOPPEDTIMEINJD-A4E308B8"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintGCApplicationStoppedTime</code></span></dt>
<dd>
<p>Enables printing of how much time the pause (for example, a GC pause) lasted. By default, this option is deprecated</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTGCDATESTAMPSINJDK9THISISADEP-A4E307C1"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintGCDateStamps</code></span></dt>
<dd>
<p>Enables printing of a date stamp at every GC. By default, this option is deprecated.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTGCDETAILSINJDK9THISISADEPREC-A4E307B9"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintGCDetails</code></span></dt>
<dd>
<p>Enables printing of detailed messages at every GC. By default, this option is disabled. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTGCTASKTIMESTAMPSINJDK9THISIS-A4E30857"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintGCTaskTimeStamps</code></span></dt>
<dd>
<p>Enables printing of time stamps for every individual GC worker thread task. By default, this option is disabled. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTGCTIMESTAMPSINJDK9THISISADEP-A4E308B1"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintGCTimeStamps</code></span></dt>
<dd>
<p>Enables printing of time stamps at every GC. By default, this option is disabled. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTSTRINGDEDUPLICATIONSTATISTIC-A4E307C7"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintStringDeduplicationStatistics</code></span></dt>
<dd>
<p>Prints detailed deduplication statistics. By default, this option is disabled. See the <code class="codeph">-XX:+UseStringDeduplication</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXPRINTTENURINGDISTRIBUTIONINJDK9TH-A4E307FB"><!-- --></a><span class="bold"><code class="codeph">-XX:+PrintTenuringDistribution</code></span></dt>
<dd>
<p>Enables printing of tenuring age information. The following is an example of the output:</p>
<pre dir="ltr">
Desired survivor size 48286924 bytes, new threshold 10 (max 10)
- age 1: 28992024 bytes, 28992024 total
- age 2: 1366864 bytes, 30358888 total
- age 3: 1425912 bytes, 31784800 total
...
</pre>
<p>Age 1 objects are the youngest survivors (they were created after the previous scavenge, survived the latest scavenge, and moved from eden to survivor space). Age 2 objects have survived two scavenges (during the second scavenge they were copied from one survivor space to the next). This pattern is repeated for all objects in the output.</p>
<p>In the preceding example, 28,992,024bytes survived one scavenge and were copied from eden to survivor space, 1,366,864 bytes are occupied by age 2 objects, and so on. The third value in each row is the cumulative size of objects of age <span class="variable">n</span> or less.</p>
<p>By default, this option is disabled.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXSOFTREFLRUPOLICYMSPERMBTIMEADDEDT-A4E30812"><!-- --></a><span class="bold"><code class="codeph">-XX:SoftRefLRUPolicyMSPerMB=<span class="variable">time</span></code></span></dt>
<dd>
<p>Sets the amount of time (in milliseconds) a softly reachable object is kept active on the heap after the last time it was referenced. The default value is one second of lifetime per free megabyte in the heap. The <code class="codeph">-XX:SoftRefLRUPolicyMSPerMB</code> option accepts integer values representing milliseconds per one megabyte of the current heap size (for Java HotSpot Client VM) or the maximum possible heap size (for Java HotSpot Server VM). This difference means that the Client VM tends to flush soft references rather than grow the heap, whereas the Server VM tends to grow the heap rather than flush soft references. In the latter case, the value of the <code class="codeph">-Xmx</code> option has a significant effect on how quickly soft references are garbage collected.</p>
<p>The following example shows how to set the value to 2.5 seconds:</p>
<pre dir="ltr">
-XX:SoftRefLRUPolicyMSPerMB=2500
</pre></dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-85A9CF82-09DB-4AC8-81EC-2404A8DC8660"><!-- --></a><span class="bold"><code class="codeph">-XX:+TraceClassLoading</code></span></dt>
<dd>
<p>Enables tracing of classes as they are loaded. By default, this option is disabled and classes aren&rsquo;t traced.</p>
<p>The replacement Unified Logging syntax is <code class="codeph">-Xlog:class+load=<span class="variable">level</span></code>. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a></p>
<p>Use <code class="codeph"><span class="variable">level</span></code>=<code class="codeph">info</code> for regular information, or <code class="codeph"><span class="variable">level</span></code>=<code class="codeph">debug</code> for additional information. In Unified Logging syntax, <code class="codeph">-verbose:class</code> equals <code class="codeph">-Xlog:class+load=info,class+unload=info</code>..</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-FF7B6056-45D5-46CB-B45C-20A7F12FDA68"><!-- --></a><span class="bold"><code class="codeph">-XX:+TraceClassLoadingPreorder</code></span></dt>
<dd>
<p>Enables tracing of all loaded classes in the order in which they&rsquo;re referenced. By default, this option is disabled and classes aren&rsquo;t traced.</p>
<p>The replacement Unified Logging syntax is <code class="codeph">-Xlog:class+preorder=debug</code>. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-17D5AEFA-D964-4A0F-AB08-F718B74AE53F"><!-- --></a><span class="bold"><code class="codeph">-XX:+TraceClassResolution</code></span></dt>
<dd>
<p>Enables tracing of constant pool resolutions. By default, this option is disabled and constant pool resolutions aren&rsquo;t traced.</p>
<p>The replacement Unified Logging syntax is <code class="codeph">-Xlog:class+resolve=debug</code>. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-21107EDD-4B6A-402E-8BDD-0C47142E9192"><!-- --></a><span class="bold"><code class="codeph">-XX:+TraceClassUnloading</code></span></dt>
<dd>
<p>Enables tracing of classes as they&rsquo;re unloaded. By default, this option is disabled and classes aren&rsquo;t traced.</p>
<p>The replacement Unified Logging syntax is <code class="codeph">-Xlog:class+unload=<span class="variable">level</span></code>. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
<p>Use <code class="codeph"><span class="variable">level</span></code>=<code class="codeph">info</code> for regular information, and <code class="codeph"><span class="variable">level</span></code>=<code class="codeph">trace</code> for additional information. In Unified Logging syntax, <code class="codeph">-verbose:class</code> equals <code class="codeph">-Xlog:class+unload=info,class+unload=info</code> .</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-DB8FC218-1200-43D5-962F-75DAEA2E0D7B"><!-- --></a><span class="bold"><code class="codeph">-XX:+TraceLoaderConstraints</code></span></dt>
<dd>
<p>Enables tracing of the loader constraints recording. By default, this option is disabled and loader constraints recording isn&rsquo;t traced.</p>
<p>The replacement Unified Logging syntax is <code class="codeph">-Xlog:class+loader+constraints=info</code>. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" title="You use the -Xlog option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.">Enable Logging with the JVM Unified Logging Framework</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-88A2F5D3-F598-469A-BC57-5B7D040FAFA4"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseConcMarkSweepGC</code></span></dt>
<dd>
<p>Enables the use of the CMS garbage collector for the old generation. CMS is an alternative to the default garbage collector (G1), which also focuses on meeting application latency requirements. By default, this option is disabled and the collector is selected automatically based on the configuration of the machine and type of the JVM. In JDK 9, the CMS garbage collector is deprecated.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXUSEPARNEWGCADDED-XXUSEPARNEWGCASA-A4E308A3"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseParNewGC</code></span></dt>
<dd>
<p>Enables the use of parallel threads for collection in the young generation. By default, this option is disabled. It&rsquo;s automatically enabled when you set the <code class="codeph">-XX:+UseConcMarkSweepGC</code> option. Using the <code class="codeph">-XX:+UseParNewGC</code> option without the <code class="codeph">-XX:+UseConcMarkSweepGC</code> option was deprecated in JDK 8. Starting with JDK 9, all uses of the <code class="codeph">-XX:+UseParNewGC</code> option are deprecated. Using the option without <code class="codeph">-XX:+UseConcMarkSweepGC</code> isn&rsquo;t possible.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXUSESPLITVERIFIERDEPRECATEDENABLES-A4E30755"><!-- --></a><span class="bold"><code class="codeph">-XX:+UseSplitVerifier</code></span></dt>
<dd>
<p>Enables splitting the verification process. By default, this option was enabled in the previous releases, and verification was split into two phases: type referencing (performed by the compiler) and type checking (performed by the JVM runtime). Verification is now split by default without a way to disable it.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__REMOVEDJAVAOPTIONS-A4E6F213">
<p class="subhead1">Removed Java Options</p>
<div class="p">These <code class="codeph">java</code> options were removed in JDK 9 and using them results in an error of:
<pre dir="ltr">
Unrecognized VM option <span class="variable">option-name</span>
</pre></div>
<dl class="0.99* 3.01*">
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-1573045C-9AA3-40E4-ADA0-D1C240D226F5"><!-- --></a><span class="bold"><code class="codeph">-d32</code></span></dt>
<dd>
<p><span class="bold">Oracle Solaris, Linux, and OS X:</span> Ran the application in a 32-bit environment. 32-bit JDKs/JREs are no longer supported.</p>
<div class="infobox-note" id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__THE-D32AND-D64OPTIONSWEREADDEDTOALL-A4E30839">
<p class="notep1">Note:</p>
<p>The <code class="codeph">-d32</code> and <code class="codeph">-d64</code> options were added to allow multiple architectures (data model) JDKs and JREs to coexist on the same system. The user could invoke the other data model by using these launcher options. Oracle Solaris was the only platform supporting these options, and the 32-bit JDKs/JREs are no longer supported.</p>
</div>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XINCGCINJDK9THE-XINCGCOPTIONNOTAVAI-A4E386AB"><!-- --></a><span class="bold"><code class="codeph">-Xincgc</code></span></dt>
<dd>
<p>Enabled incremental garbage collection. This option and the GC mode are removed in JDK 9.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XMAXJITCODESIZESIZEREMOVEDJDK-80421-A4E386C0"><!-- --></a><span class="bold"><code class="codeph">-Xmaxjitcodesize=<span class="variable">size</span></code></span></dt>
<dd>
<p>Specified the maximum code cache size (in bytes) for JIT-compiled code. Appended the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. The default maximum code cache size is 240 MB; if you disable tiered compilation with the option <code class="codeph">-XX:-TieredCompilation</code>, then the default size is 48 MB:</p>
<pre dir="ltr">
-Xmaxjitcodesize=240m
</pre>
<p>This option is equivalent to <code class="codeph">-XX:ReservedCodeCacheSize</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XRUNLIBNAMEREMOVEDLOADSTHESPECIFIED-A4E3872D"><!-- --></a><span class="bold"><code class="codeph">-Xrun<span class="variable">libname</span></code></span></dt>
<dd>
<p>Loaded the specified debugging/profiling library. This option was superseded by the <code class="codeph">-agentlib</code> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINCREMENTALDUTYCYCLEPERCENTINJ-A4E385C1"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalDutyCycle=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Set the percentage of time (0 to 100) between minor collections that the concurrent collector was allowed to run.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINCREMENTALDUTYCYCLEMINPERCENT-A4E3861C"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalDutyCycleMin=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Sets the percentage of time (0 to 100) between minor collections that was the lower bound for the duty cycle when <code class="codeph">-XX:+CMSIncrementalPacing</code> option was enabled. This option was deprecated in JDK 8 with no replacement, following the deprecation of the <code class="codeph">-XX:+CMSIncrementalMode</code> option. The option was removed in JDK 9, because the entire incremental mode was removed.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINCREMENTALMODEINJDK9THISISADE-A4E385CC"><!-- --></a><span class="bold"><code class="codeph">-XX:+CMSIncrementalMode</code></span></dt>
<dd>
<p>Enabled incremental mode. Note that the CMS collector must also be enabled (with <code class="codeph">-XX:+UseConcMarkSweepGC)</code> for this option to work. The option was removed in JDK 9, because the entire incremental mode was removed.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINCREMENTALOFFSETPERCENTINPUTS-A4E385D6"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalOffset=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Set the percentage of time (0 to 100) by which the incremental mode duty cycle was shifted to the right within the period between minor collections.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINCREMENTALPACINGINPUTSFROMSTE-A4E385E0"><!-- --></a><span class="bold"><code class="codeph">-XX:+CMSIncrementalPacing</code></span></dt>
<dd>
<p>Enabled automatic adjustment of the incremental mode duty cycle based on statistics collected while the JVM was running. This option was deprecated with no replacement, following the deprecation of the <code class="codeph">-XX:+CMSIncrementalMode</code> option. The option was removed, because the entire incremental mode was removed.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCMSINCREMENTALSAFETYFACTORPERCENT-A4E385EA"><!-- --></a><span class="bold"><code class="codeph">-XX:CMSIncrementalSafetyFactor=<span class="variable">percent</span></code></span></dt>
<dd>
<p>Set the percentage of time (0 to 100) used to add conservatism when computing the duty cycle. This option was deprecated in JDK 8 with no replacement, following the deprecation of the <code class="codeph">-XX:+CMSIncrementalMode</code> option. The option was removed, because the entire incremental mode was removed.</p>
</dd>
<dt class="dlterm"><a id="GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__XXCODECACHEMINIMUMFREESPACESIZEJDK--A4E3866D"><!-- --></a><span class="bold"><code class="codeph">-XX:CodeCacheMinimumFreeSpace=<span class="variable">size</span></code></span></dt>
<dd>
<p>Set the minimum free space (in bytes) required for compilation. Appended the letter <code class="codeph">k</code> or <code class="codeph">K</code> to indicate kilobytes, <code class="codeph">m</code> or <code class="codeph">M</code> to indicate megabytes, or <code class="codeph">g</code> or <code class="codeph">G</code> to indicate gigabytes. When less than the minimum free space remained, compiling stopped. By default, this option was set to 500 KB.</p>
</dd>
</dl>
</div>
<!-- class="section" --></div>
<div class="sect2"><a id="GUID-4856361B-8BFD-4964-AE84-121F5F6CF111"></a>
<h2 id="JSWOR-GUID-4856361B-8BFD-4964-AE84-121F5F6CF111" class="sect2">java Command-Line Argument Files</h2>
<div>
<p>You can shorten or simplify the <code class="codeph">java</code> command by using <code class="codeph">@<span class="variable">argument files</span></code> to specify a text file that contains arguments, such as options and class names, passed to the <code class="codeph">java</code> command. This let&rsquo;s you to create <code class="codeph">java</code> commands of any length on any operating system.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="section">
<p>In the command line, use the at sign (<code class="codeph">@</code>) prefix to identify an argument file that contains <code class="codeph">java</code> options and class names. When the <code class="codeph">java</code> command encounters a file beginning with the at sign (<code class="codeph">@</code>) , it expands the contents of that file into an argument list just as they would be specified on the command line.</p>
<p>The <code class="codeph">java</code> launcher expands the argument file contents until it encounters the <code class="codeph">-Xdisable-@files</code> option. You can use the <code class="codeph">-Xdisable-@files</code> option anywhere on the command line, including in an argument file, to stop <code class="codeph">@{argument files}</code> expansion.</p>
<p>The following items describe the syntax of <code class="codeph">java</code> argument files:</p>
<ul style="list-style-type: disc;">
<li>
<p>The argument file must contain only ASCII characters or characters in system default encoding that&rsquo;s ASCII friendly, such as UTF-8.</p>
</li>
<li>
<p>The argument file size must not exceed MAXINT (2,147,483,647) bytes.</p>
</li>
<li>
<p>The launcher doesn&rsquo;t expand wildcards that are present within an argument file.</p>
</li>
<li>
<p>Use white space or new line characters to separate arguments included in the file.</p>
</li>
<li>
<p>White space includes a white space character, <code class="codeph">\t</code>, <code class="codeph">\n</code>, <code class="codeph">\r</code>, and <code class="codeph">\f</code>.</p>
<p>For example, it is possible to have a path with a space, such as <code class="codeph">c:\Program Files</code> that can be specified as either <code class="codeph">"c:\\Program Files"</code> or, to avoid an escape, <code class="codeph">c:\Program" "Files</code>.</p>
</li>
<li>
<p>Any option that contains spaces, such as a path component, must be within quotation marks using quotation ('"') characters in its entirety.</p>
</li>
<li>
<p>A string within quotation marks may contain the characters <code class="codeph">\n</code>, <code class="codeph">\r</code>, <code class="codeph">\t</code>, and <code class="codeph">\f</code>. They are converted to their respective ASCII codes. &nbsp;</p>
</li>
<li>
<p>If a file name contains embedded spaces, then put the whole file name in double quotation marks.</p>
</li>
<li>
<p>File names in an argument file are relative to the current directory, not to the location of the argument file.</p>
</li>
<li>
<p>Use the number sign <code class="codeph">#</code> in the argument file to identify comments. All characters following the<code class="codeph">#</code> are ignored until the end of line.</p>
</li>
<li>
<p>Additional at sign <code class="codeph">@</code> prefixes to <code class="codeph">@</code> prefixed options act as an escape, (the first <code class="codeph">@</code> is removed and the rest of the arguments are presented to the launcher literally).</p>
</li>
<li>
<p>Lines may be continued using the continuation character (<code class="codeph">\</code>) at the end-of-line. The two lines are concatenated with the leading white spaces trimmed. To prevent trimming the &nbsp;leading white spaces, a continuation character (<code class="codeph">\</code>) may be placed at the first column.</p>
</li>
<li>
<p>Because backslash (\) is an escape character, a backslash character&nbsp;must be escaped with another backslash character.</p>
</li>
<li>
<p>Partial quote is allowed and is closed by an end-of-file.</p>
</li>
<li>
<p>An open quote stops at end-of-line unless <code class="codeph">\</code> is the last character, which then joins the next line by removing all leading white space characters.</p>
</li>
<li>
<p>Wildcards (*) aren&rsquo;t allowed in these lists (such as specifying <code class="codeph">*.java</code>).</p>
</li>
<li>
<p>Use of the at sign (<code class="codeph">@</code>) to recursively interpret files isn&rsquo;t supported.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example of Open or Partial Quotes in an Argument File</p>
<p>In the argument file,</p>
<pre dir="ltr">
-cp "lib/
cool/
app/
jars
</pre>
<p>this is interpreted as:</p>
<pre dir="ltr">
-cp lib/cool/app/jars  
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example of a Backslash Character&nbsp;Escaped with Another Backslash Character in an Argument File</p>
<p>To output the following:</p>
<p><code class="codeph">-cp c:\Program Files (x86)\Java\jre\lib\ext;c:\Program Files\Java\jre9\lib\ext</code></p>
<p>The backslash character must be specified in the argument file as:</p>
<p><code class="codeph">-cp &nbsp;"c:\\Program Files (x86)\\Java\\jre\\lib\\ext;c:\\Program Files\\Java\\jre9\\lib\\ext"</code></p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example of an EOL Escape Used to Force Concatenation of Lines in an Argument File</p>
<p>In the argument file,</p>
<pre dir="ltr">
-cp "/lib/cool app/jars:\
    /lib/another app/jars"
</pre>
<p>This is interpreted as:</p>
<pre dir="ltr">
-cp /lib/cool app/jars:/lib/another app/jars  
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example of Line Continuation with Leading Spaces in an Argument File</p>
<p>In the argument file,</p>
<pre dir="ltr">
-cp "/lib/cool\ 
\app/jars&rdquo; 
</pre>
<p>This is interpreted as:</p>
<p><code class="codeph">-cp /lib/cool app/jars</code> &nbsp;</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples of Using Single Argument File</p>
<p>You can use a single argument file, such as <code class="codeph">myargumentfile</code> in the following example, to hold all required <code class="codeph">java</code> arguments:</p>
<pre dir="ltr">
java @myargumentfile
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples of Using Argument Files with Paths</p>
<p>You can include relative paths in argument files; however, they&rsquo;re relative to the current working directory and not to the paths of the argument files themselves. In the following example, <code class="codeph">path1/options</code> and <code class="codeph">path2/options</code> represent argument files with different paths. Any relative paths that they contain are relative to the current working directory and not to the argument files:</p>
<pre dir="ltr">
java @path1/options @path2/classes
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5"></a>
<h2 id="JSWOR-GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5" class="sect2">Enable Logging with the JVM Unified Logging Framework</h2>
<div>
<p>You use the <code class="codeph">-Xlog</code> option to configure or enable logging with the Java Virtual Machine (JVM) unified logging framework.</p>
<div class="section">
<p class="subhead2">Synopsis</p>
<pre dir="ltr">
-Xlog[:[<span class="variable">what</span>][:[<span class="variable">output</span>][:[<span class="variable">decorators</span>][:<span class="variable">output-options</span> [,...]]]]]
</pre>
<dl>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__XLOGHELPPRINTS-XLOGUSAGESYNTAXANDAV-A7A3FE7C"><!-- --></a><code class="codeph"><span class="variable">what</span></code></dt>
<dd>
<p>Specifies a combination of tags and levels of the form <code class="codeph"><span class="variable">tag1</span></code>[+<code class="codeph"><span class="variable">tag2</span></code>...][<code class="codeph">*</code>][=<code class="codeph"><span class="variable">level</span></code>][,...]. Unless the wildcard (<code class="codeph">*</code>) is specified, only log messages tagged with exactly the tags specified are matched. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__TAGSANDLEVELS-A7A4A0DF">-Xlog Tags and Levels</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-ED271C85-4EA8-4A7C-ABF1-DE4618B44B1A"><!-- --></a><code class="codeph"><span class="variable">output</span></code></dt>
<dd>
<p>Sets the type of output. Omitting the <code class="codeph"><span class="variable">output</span></code> type defaults to <code class="codeph">stdout</code>. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__OUTPUTS-A7A49D8E">-Xlog Output</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-3AE387D4-BBE2-4500-9A05-872E583A2C0A"><!-- --></a><code class="codeph"><span class="variable">decorators</span></code></dt>
<dd>
<p>Configures the output to use a custom set of decorators. Omitting <code class="codeph"><span class="variable">decorators</span></code> defaults to <code class="codeph">uptime</code>, <code class="codeph">level</code>, and <code class="codeph">tags</code>. See <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__DECORATIONS-A7A4AD31">Decorations</a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-062AD496-C390-43A7-B5F9-C241F52B9C33"><!-- --></a><code class="codeph"><span class="variable">output-options</span></code></dt>
<dd>
<p>Sets the <code class="codeph">-Xlog</code> logging output options.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Description</p>
<p>The Java Virtual Machine (JVM) unified logging framework provides a common logging system for all components of the JVM. GC logging for the JVM has been changed to use the new logging framework. The mapping of old GC flags to the corresponding new Xlog configuration is described in <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__CONVERTGCLOGGINGFLAGSTOXLOG-A5046BD1">Convert GC Logging Flags to Xlog</a>. In addition, runtime logging has also been changed to use the JVM unified logging framework. The mapping of legacy runtime logging flags to the corresponding new Xlog configuration is described in <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__CONVERTRUNTIMELOGGINGFLAGSTOXLOG-A504703E">Convert Runtime Logging Flags to Xlog</a>.</p>
<p>The following provides quick reference to the <code class="codeph">-Xlog</code> command and syntax for options:</p>
<dl>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-EFAA771C-7ACA-4BC0-9D03-21CBD578386E"><!-- --></a><code class="codeph">-Xlog</code></dt>
<dd>
<p>Enables JVM logging on an <code class="codeph">info</code> level.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-7749EEC4-8FEE-4D91-B296-D058D1F78E6D"><!-- --></a><code class="codeph">-Xlog:help</code></dt>
<dd>
<p>Prints <code class="codeph">-Xlog</code> usage syntax and available tags, levels, and decorators along with example command lines with explanations.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-A4AC2771-EB79-423F-93C2-546CF5277C8E"><!-- --></a><code class="codeph">-Xlog:disable</code></dt>
<dd>
<p>Turns off all logging and clears all configuration of the logging framework including the default configuration for warnings and errors.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-61EE25F9-F19C-4531-9DBE-C343F270643A"><!-- --></a><code class="codeph">-Xlog[:<span class="variable">option</span>]</code></dt>
<dd>
<p>Applies multiple arguments in the order that they appear on the command line. Multiple <code class="codeph">-Xlog</code> arguments for the same output override each other in their given order.</p>
The <code class="codeph"><span class="variable">option</span></code> is set as:
<pre dir="ltr">
[<span class="variable">tag selection</span>][:[<span class="variable">output</span>][:[<span class="variable">decorators</span>][:<span class="variable">output-options</span>]]]
</pre>
<p>Omitting the <code class="codeph"><span class="variable">tag selection</span></code> defaults to a tag-set of <code class="codeph">all</code> and a level of <code class="codeph">info</code>.</p>
<pre dir="ltr">
<span class="variable">tag</span>[+...] all
</pre>
<p>The <code class="codeph">all</code> tag is a meta tag consisting of all tag-sets available. The asterisk <code class="codeph">*</code> in a tag set definition denotes a wildcard tag match. Matching with a wildcard selects all tag sets that contain <span class="italic">at least</span> the specified tags. Without the wildcard, only exact matches of the specified tag sets are selected.</p>
<code class="codeph"><span class="variable">output_options</span></code> is
<pre dir="ltr">
filecount=<span class="variable">file count</span> filesize=<span class="variable">file size with optional K, M or G suffix</span>
</pre></dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Default Configuration</p>
<p>When the <code class="codeph">-Xlog</code> option and nothing else is specified on the command line, the default configuration is used. The default configuration logs all messages with a level that matches either the warning or error regardless of what tags the message is associated with. The default configuration is equivalent to entering the following on the command line:</p>
<pre dir="ltr">
-Xlog:all=warning:stdout:uptime,level,tags
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Controlling Logging at Runtime</p>
<p>Logging can also be controlled at run time through Diagnostic Commands (with the <code class="codeph">jcmd</code> utility). Everything that can be specified on the command line can also be specified dynamically with the <code class="codeph">VM.log</code> command. As the diagnostic commands are automatically exposed as MBeans, you can use JMX to change logging configuration at run time.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__TAGSANDLEVELS-A7A4A0DF">
<p class="subhead2">-Xlog Tags and Levels</p>
<p>Each log message has a level and a tag set associated with it. The level of the message corresponds to its details, and the tag set corresponds to what the message contains or which JVM component it involves (such as, GC, compiler, or threads). Mapping GC flags to the Xlog configuration is described in <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__CONVERTGCLOGGINGFLAGSTOXLOG-A5046BD1">Convert GC Logging Flags to Xlog</a>. Mapping legacy runtime logging flags to the corresponding Xlog configuration is described in <a href="java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__CONVERTRUNTIMELOGGINGFLAGSTOXLOG-A504703E">Convert Runtime Logging Flags to Xlog</a>.</p>
<dl>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-1D43F04B-7CCF-421B-9FB6-A0B08F489EC1"><!-- --></a>Available log levels:</dt>
<dd>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">off</code></p>
</li>
<li>
<p><code class="codeph">trace</code></p>
</li>
<li>
<p><code class="codeph">debug</code></p>
</li>
<li>
<p><code class="codeph">info</code></p>
</li>
<li>
<p><code class="codeph">warning</code></p>
</li>
<li>
<p><code class="codeph">error</code></p>
</li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-05C7ACDF-518C-4F00-AEBD-F8854A3E3ADB"><!-- --></a>Available log tags:</dt>
<dd>
<p>The following are the available log tags. Specifying <code class="codeph">all</code> instead of a tag combination matches all tag combinations.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">add</code></p>
</li>
<li>
<p><code class="codeph">age</code></p>
</li>
<li>
<p><code class="codeph">alloc</code></p>
</li>
<li>
<p><code class="codeph">annotation</code></p>
</li>
<li>
<p><code class="codeph">aot</code></p>
</li>
<li>
<p><code class="codeph">arguments</code></p>
</li>
<li>
<p><code class="codeph">attach</code></p>
</li>
<li>
<p><code class="codeph">barrier</code></p>
</li>
<li>
<p><code class="codeph">biasedlocking</code></p>
</li>
<li>
<p><code class="codeph">blocks</code></p>
</li>
<li>
<p><code class="codeph">bot</code></p>
</li>
<li>
<p><code class="codeph">breakpoint</code></p>
</li>
<li>
<p><code class="codeph">bytecode</code></p>
</li>
<li>
<p><code class="codeph">census</code></p>
</li>
<li>
<p><code class="codeph">class</code></p>
</li>
<li>
<p><code class="codeph">classhisto</code></p>
</li>
<li>
<p><code class="codeph">cleanup</code></p>
</li>
<li>
<p><code class="codeph">compaction</code></p>
</li>
<li>
<p><code class="codeph">comparator</code></p>
</li>
<li>
<p><code class="codeph">constraints</code></p>
</li>
<li>
<p><code class="codeph">constantpool</code></p>
</li>
<li>
<p><code class="codeph">coops</code></p>
</li>
<li>
<p><code class="codeph">cpu</code></p>
</li>
<li>
<p><code class="codeph">cset</code></p>
</li>
<li>
<p><code class="codeph">data</code></p>
</li>
<li>
<p><code class="codeph">defaultmethods</code></p>
</li>
<li>
<p><code class="codeph">dump</code></p>
</li>
<li>
<p><code class="codeph">ergo</code></p>
</li>
<li>
<p><code class="codeph">event</code></p>
</li>
<li>
<p><code class="codeph">exceptions</code></p>
</li>
<li>
<p><code class="codeph">exit</code></p>
</li>
<li>
<p><code class="codeph">fingerprint</code></p>
</li>
<li>
<p><code class="codeph">freelist</code></p>
</li>
<li>
<p><code class="codeph">gc</code></p>
</li>
<li>
<p><code class="codeph">hashtables</code></p>
</li>
<li>
<p><code class="codeph">heap</code></p>
</li>
<li>
<p><code class="codeph">humongous</code></p>
</li>
<li>
<p><code class="codeph">ihop</code></p>
</li>
<li>
<p><code class="codeph">iklass</code></p>
</li>
<li>
<p><code class="codeph">init</code></p>
</li>
<li>
<p><code class="codeph">itables</code></p>
</li>
<li>
<p><code class="codeph">jfr</code></p>
</li>
<li>
<p><code class="codeph">jni</code></p>
</li>
<li>
<p><code class="codeph">jvmti</code></p>
</li>
<li>
<p><code class="codeph">liveness</code></p>
</li>
<li>
<p><code class="codeph">load</code></p>
</li>
<li>
<p><code class="codeph">loader</code></p>
</li>
<li>
<p><code class="codeph">logging</code></p>
</li>
<li>
<p><code class="codeph">mark</code></p>
</li>
<li>
<p><code class="codeph">marking</code></p>
</li>
<li>
<p><code class="codeph">metadata</code></p>
</li>
<li>
<p><code class="codeph">metaspace</code></p>
</li>
<li>
<p><code class="codeph">method</code></p>
</li>
<li>
<p><code class="codeph">mmu</code></p>
</li>
<li>
<p><code class="codeph">modules</code></p>
</li>
<li>
<p><code class="codeph">monitorinflation</code></p>
</li>
<li>
<p><code class="codeph">monitormismatch</code></p>
</li>
<li>
<p><code class="codeph">nmethod</code></p>
</li>
<li>
<p><code class="codeph">normalize</code></p>
</li>
<li>
<p><code class="codeph">objecttagging</code></p>
</li>
<li>
<p><code class="codeph">obsolete</code></p>
</li>
<li>
<p><code class="codeph">oopmap</code></p>
</li>
<li>
<p><code class="codeph">os</code></p>
</li>
<li>
<p><code class="codeph">pagesize</code></p>
</li>
<li>
<p><code class="codeph">parser</code></p>
</li>
<li>
<p><code class="codeph">patch</code></p>
</li>
<li>
<p><code class="codeph">path</code></p>
</li>
<li>
<p><code class="codeph">phases</code></p>
</li>
<li>
<p><code class="codeph">plab</code></p>
</li>
<li>
<p><code class="codeph">preorder</code></p>
</li>
<li>
<p><code class="codeph">promotion</code></p>
</li>
<li>
<p><code class="codeph">protectiondomain</code></p>
</li>
<li>
<p><code class="codeph">purge</code></p>
</li>
<li>
<p><code class="codeph">redefine</code></p>
</li>
<li>
<p><code class="codeph">ref</code></p>
</li>
<li>
<p><code class="codeph">refine</code></p>
</li>
<li>
<p><code class="codeph">region</code></p>
</li>
<li>
<p><code class="codeph">remset</code></p>
</li>
<li>
<p><code class="codeph">resolve</code></p>
</li>
<li>
<p><code class="codeph">safepoint</code></p>
</li>
<li>
<p><code class="codeph">scavenge</code></p>
</li>
<li>
<p><code class="codeph">scrub</code></p>
</li>
<li>
<p><code class="codeph">setting</code></p>
</li>
<li>
<p><code class="codeph">stackmap</code></p>
</li>
<li>
<p><code class="codeph">stacktrace</code></p>
</li>
<li>
<p><code class="codeph">stackwalk</code></p>
</li>
<li>
<p><code class="codeph">start</code></p>
</li>
<li>
<p><code class="codeph">startuptime</code></p>
</li>
<li>
<p><code class="codeph">state</code></p>
</li>
<li>
<p><code class="codeph">stats</code></p>
</li>
<li>
<p><code class="codeph">stringdedup</code></p>
</li>
<li>
<p><code class="codeph">stringtable</code></p>
</li>
<li>
<p><code class="codeph">subclass</code></p>
</li>
<li>
<p><code class="codeph">survivor</code></p>
</li>
<li>
<p><code class="codeph">sweep</code></p>
</li>
<li>
<p><code class="codeph">system</code></p>
</li>
<li>
<p><code class="codeph">task</code></p>
</li>
<li>
<p><code class="codeph">thread</code></p>
</li>
<li>
<p><code class="codeph">time</code></p>
</li>
<li>
<p><code class="codeph">timer</code></p>
</li>
<li>
<p><code class="codeph">tlab</code></p>
</li>
<li>
<p><code class="codeph">unload</code></p>
</li>
<li>
<p><code class="codeph">update</code></p>
</li>
<li>
<p><code class="codeph">verification</code></p>
</li>
<li>
<p><code class="codeph">verify</code></p>
</li>
<li>
<p><code class="codeph">vmoperation</code></p>
</li>
<li>
<p><code class="codeph">vtables</code></p>
</li>
<li>
<p><code class="codeph">workgang</code></p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__OUTPUTS-A7A49D8E">
<p class="subhead2">-Xlog Output</p>
<p>The <code class="codeph">-Xlog</code> option supports the following types of outputs:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">stdout</code> &mdash; Sends output to stdout</p>
</li>
<li>
<p><code class="codeph">stderr</code> &mdash; Sends output to stderr</p>
</li>
<li>
<p><code class="codeph">file=<span class="variable">filename</span></code> &mdash; Sends output to text file(s).</p>
</li>
</ul>
<p>When using <code class="codeph">file=<span class="variable">filename</span></code>, specifying <code class="codeph">%p</code> and/or <code class="codeph">%t</code> in the file name expands to the JVM's PID and startup timestamp, respectively. You can also configure text files to handle file rotation based on file size and a number of files to rotate. For example, to rotate the log file every 10 MB and keep 5 files in rotation, specify the options <code class="codeph">filesize=10M, filecount=5</code>. The target size of the files isn&rsquo;t guaranteed to be exact, it&rsquo;s just an approximate value. Files are rotated by default with up to 5 rotated files of target size 20 MB, unless configured otherwise. Specifying <code class="codeph">filecount=0</code> means that the log file shouldn&rsquo;t be rotated. There&rsquo;s a possibility of the pre-existing log file getting overwritten.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__DECORATIONS-A7A4AD31">
<p class="subhead2">Decorations</p>
<div class="p">Logging messages are decorated with information about the message. You can configure each output to use a custom set of decorators. The order of the output is always the same as listed in the table. You can configure the decorations to be used at run time. Decorations are prepended to the log message. For example:
<pre dir="ltr">
[6.567s][info][gc,old] Old collection complete
</pre></div>
<p>Omitting <code class="codeph"><span class="variable">decorators</span></code> defaults to <code class="codeph">uptime</code>, <code class="codeph">level</code>, and <code class="codeph">tags</code>. The <code class="codeph">none</code> decorator is special and is used to turn off all decorations.</p>
<p><code class="codeph">time</code> (<code class="codeph">t</code>), <code class="codeph">utctime</code> (<code class="codeph">utc</code>), <code class="codeph">uptime</code> (<code class="codeph">u</code>), <code class="codeph">timemillis</code> (<code class="codeph">tm</code>), <code class="codeph">uptimemillis</code> (<code class="codeph">um</code>), <code class="codeph">timenanos</code> (<code class="codeph">tn</code>), <code class="codeph">uptimenanos</code> (<code class="codeph">un</code>), <code class="codeph">hostname</code> (<code class="codeph">hn</code>), <code class="codeph">pid</code> (<code class="codeph">p</code>), <code class="codeph">tid</code> (<code class="codeph">ti</code>), <code class="codeph">level</code> (<code class="codeph">l</code>), <code class="codeph">tags</code> (<code class="codeph">tg</code>) decorators can also be specified as <code class="codeph">none</code> for no decoration.</p>
<div class="tblformalwide" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__THEFOLLOWINGTABLEDESCRIBESALISTOFTH-4A1B5B9F">
<p class="titleintable">Table 2-1 Possible Logging Message Decorations</p>
<table class="cellalignment203" title=" Possible Logging Message Decorations" summary="The following table describes a list of the possible decorations.">
<thead>
<tr class="cellalignment187">
<th class="cellalignment204" id="d11248e7639">Decorations</th>
<th class="cellalignment204" id="d11248e7641">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">time</code> or <code class="codeph">t</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>Current time and date in ISO-8601 format.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">utctime</code> or <code class="codeph">utc</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>Universal Time Coordinated or Coordinated Universal Time.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">uptime</code> or <code class="codeph">u</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>Time since the start of the JVM in seconds and milliseconds. For example, 6.567s.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">timemillis</code> or <code class="codeph">tm</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>The same value as generated by <code class="codeph">System.currentTimeMillis()</code>.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">uptimemillis</code> or <code class="codeph">um</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>Milliseconds since the JVM started.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">timenanos</code> or <code class="codeph">tn</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>The same value generated by <code class="codeph">System.nanoTime()</code>.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">uptimenanos</code> or <code class="codeph">un</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>Nanoseconds since the JVM started.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">hostname</code> or <code class="codeph">hn</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>The host name.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">pid</code> or <code class="codeph">p</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>The process identifier.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">tid</code> or <code class="codeph">ti</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>The thread identifier.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">level</code> or <code class="codeph">l</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>The level associated with the log message.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7639"><code class="codeph">tags</code> or <code class="codeph">tg</code></td>
<td class="cellalignment187" headers="d11248e7641">
<p>The tag-set associated with the log message.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__CONVERTGCLOGGINGFLAGSTOXLOG-A5046BD1">
<p class="subhead2">Convert GC Logging Flags to Xlog</p>
<div class="tblformalwide" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-615C95D0-B715-4924-BF23-6915455D15DB">
<p class="titleintable">Table 2-2 Mapping Legacy Garbage Collection Logging Flags to the Xlog Configuration</p>
<table class="cellalignment203" title="Mapping Legacy Garbage Collection Logging Flags to the Xlog Configuration" summary=" The following table describes the mapping of legacy Garbage Collection (GC) logging flags to the corresponding new Xlog configuration.">
<thead>
<tr class="cellalignment187">
<th class="cellalignment204" id="d11248e7786">Legacy Garbage Collection (GC) Flag</th>
<th class="cellalignment204" id="d11248e7788">Xlog Configuration</th>
<th class="cellalignment204" id="d11248e7790">Comment</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">G1PrintHeapRegions</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:gc+region=trace</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">GCLogFileSize</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p>No configuration available</p>
</td>
<td class="cellalignment187" headers="d11248e7790">Log rotation is handled by the framework.</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">NumberOfGCLogFiles</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p>Not Applicable</p>
</td>
<td class="cellalignment187" headers="d11248e7790">Log rotation is handled by the framework.</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintAdaptiveSizePolicy</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:ergo*=<span class="variable">level</span></code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Use a <code class="codeph"><span class="variable">level</span></code> of <code class="codeph">debug</code> for most of the information, or a <code class="codeph"><span class="variable">level</span></code> of <code class="codeph">trace</code> for all of what was logged for <code class="codeph">PrintAdaptiveSizePolicy</code>.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGC</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:gc</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCApplicationConcurrentTime</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:safepoint</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Note that <code class="codeph">PrintGCApplicationConcurrentTime</code> and <code class="codeph">PrintGCApplicationStoppedTime</code> are logged on the same tag and aren&rsquo;t separated in the new logging.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCApplicationStoppedTime</code></td>
<td class="cellalignment187" headers="d11248e7788">
<div class="p">
<pre dir="ltr">
-Xlog:safepoint
</pre></div>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Note that <code class="codeph">PrintGCApplicationConcurrentTime</code> and <code class="codeph">PrintGCApplicationStoppedTime</code> are logged on the same tag and not separated in the new logging.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCCause</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p>Not Applicable</p>
</td>
<td class="cellalignment187" headers="d11248e7790">GC cause is now always logged.</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCDateStamps</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p>Not Applicable</p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Date stamps are logged by the framework.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCDetails</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:gc*</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCID</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p>Not Applicable</p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>GC ID is now always logged.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCTaskTimeStamps</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:task*=debug</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintGCTimeStamps</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p>Not Applicable</p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Time stamps are logged by the framework.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintHeapAtGC</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:gc+heap=trace</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintReferenceGC</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:ref*=debug</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Note that in the old logging, <code class="codeph">PrintReferenceGC</code> had an effect only if <code class="codeph">PrintGCDetails</code> was also enabled.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintStringDeduplicationStatistics</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:stringdedup*=debug</code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">PrintTenuringDistribution</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p><code class="codeph">-Xlog:age*=<span class="variable">level</span></code></p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>Use a <code class="codeph"><span class="variable">level</span></code> of <code class="codeph">debug</code> for the most relevant information, or a <code class="codeph"><span class="variable">level</span></code> of <code class="codeph">trace</code> for all of what was logged for <code class="codeph">PrintTenuringDistribution</code>.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e7786"><code class="codeph">UseGCLogFileRotation</code></td>
<td class="cellalignment187" headers="d11248e7788">
<p>Not Applicable</p>
</td>
<td class="cellalignment187" headers="d11248e7790">
<p>What was logged for <code class="codeph">PrintTenuringDistribution</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__CONVERTRUNTIMELOGGINGFLAGSTOXLOG-A504703E">
<p class="subhead2">Convert Runtime Logging Flags to Xlog</p>
<div class="tblformalwide" id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__MAPPINGLEGACYGARBAGECOLLECTIONLOGGI-A486C349">
<p class="titleintable">Table 2-3 Mapping Runtime Logging Flags to the Xlog Configuration</p>
<table class="cellalignment203" title="Mapping Runtime Logging Flags to the Xlog Configuration" summary=" The following table describes the mapping of legacy runtime logging flags to the corresponding new Xlog configuration.">
<thead>
<tr class="cellalignment187">
<th class="cellalignment204" id="d11248e8056">Legacy Runtime Flag</th>
<th class="cellalignment204" id="d11248e8058">Xlog Configuration</th>
<th class="cellalignment204" id="d11248e8060">Comment</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceExceptions</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:exceptions=info</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceClassLoading</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+load=<span class="variable">level</span></code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Use <code class="codeph"><span class="variable">level</span>=info</code> for regular information, or <code class="codeph"><span class="variable">level</span>=debug</code> for additional information. In Unified Logging syntax, <code class="codeph">-verbose:class</code> equals <code class="codeph">-Xlog:class+load=info,class+unload=info</code>.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceClassLoadingPreorder</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+preorder=debug</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceClassUnloading</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+unload=<span class="variable">level</span></code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Use <code class="codeph"><span class="variable">level</span>=info</code> for regular information, or <code class="codeph"><span class="variable">level</span>=trace</code> for additional information. In Unified Logging syntax, <code class="codeph">-verbose:class</code> equals <code class="codeph">-Xlog:class+load=info,class+unload=info</code>.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">VerboseVerification</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:verification=info</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceClassPaths</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+path=info</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceClassResolution</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+resolve=debug</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceClassInitialization</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+init=info</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceLoaderConstraints</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+loader+constraints=info</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceClassLoaderData</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:class+loader+data=<span class="variable">level</span></code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Use <code class="codeph">level=debug</code> for regular information or <code class="codeph">level=trace</code> for additional information.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceSafepointCleanupTime</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:safepoint+cleanup=info</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceSafepoint</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:safepoint=debug</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceMonitorInflation</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:monitorinflation=debug</code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceBiasedLocking</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:biasedlocking=<span class="variable">level</span></code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p>Use <code class="codeph">level=info</code> for regular information, or <code class="codeph">level=trace</code> for additional information.</p>
</td>
</tr>
<tr class="cellalignment187">
<td class="cellalignment187" headers="d11248e8056"><code class="codeph">TraceRedefineClasses</code></td>
<td class="cellalignment187" headers="d11248e8058">
<p><code class="codeph">-Xlog:redefine+class*=<span class="variable">level</span></code></p>
</td>
<td class="cellalignment187" headers="d11248e8060">
<p><code class="codeph">level=info</code>, <code class="codeph">=debug</code>, and <code class="codeph">=trace</code> provide increasing amounts of information.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">-Xlog Usage Examples</p>
<p>The following are <code class="codeph">-Xlog</code> examples.</p>
<dl>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-7A56566A-44F3-4D4F-90D9-F31A5968059B"><!-- --></a><code class="codeph">-Xlog</code></dt>
<dd>
<p>Logs all messages by using the <code class="codeph">info</code> level to <code class="codeph">stdout</code> with <code class="codeph">uptime</code>, <code class="codeph">levels</code>, and <code class="codeph">tags</code> decorations. This is equivalent to using:</p>
<pre dir="ltr">
-Xlog:all=info:stdout:uptime,levels,tags
</pre></dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-E685CE51-86BF-4EF0-851B-05F40F6898F5"><!-- --></a><code class="codeph">-Xlog:gc</code></dt>
<dd>
<p>Logs messages tagged with the <code class="codeph">gc</code> tag using <code class="codeph">info</code> level to <code class="codeph">stdout</code>. The default configuration for all other messages at level <code class="codeph">warning</code> is in effect.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-55445A32-BFBC-424F-B9C0-090ECF203926"><!-- --></a><code class="codeph">-Xlog:gc,safepoint</code></dt>
<dd>
<p>Logs messages tagged either with the <code class="codeph">gc</code> or <code class="codeph">safepoint</code> tags, both using the <code class="codeph">info</code> level, to <code class="codeph">stdout</code>, with default decorations. Messages tagged with both <code class="codeph">gc</code> and <code class="codeph">safepoint</code> won&rsquo;t be logged.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-1736B765-CAF5-4A55-9FD2-B3921FF407B1"><!-- --></a><code class="codeph">-Xlog:gc+ref=debug</code></dt>
<dd>
<p>Logs messages tagged with both <code class="codeph">gc</code> and <code class="codeph">ref</code> tags, using the <code class="codeph">debug</code> level to <code class="codeph">stdout</code>, with default decorations. Messages tagged only with one of the two tags won&rsquo;t be logged.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-0CFF7A78-5FE2-4892-A414-51576BBA2323"><!-- --></a><code class="codeph">-Xlog:gc=debug:file=gc.txt:none</code></dt>
<dd>
<p>Logs messages tagged with the <code class="codeph">gc</code> tag using the <code class="codeph">debug</code> level to a file called <code class="codeph">gc.txt</code> with no decorations. The default configuration for all other messages at level <code class="codeph">warning</code> is still in effect.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-6387517C-8601-4F75-9C2C-CC675E287DC3"><!-- --></a><code class="codeph">-Xlog:gc=trace:file=gctrace.txt:uptimemillis,pids:filecount=5,filesize=1024</code></dt>
<dd>
<p>Logs messages tagged with the <code class="codeph">gc</code> tag using the <code class="codeph">trace</code> level to a rotating file set with 5 files with size 1 MB with the base name <code class="codeph">gctrace.txt</code> and uses decorations <code class="codeph">uptimemillis</code> and <code class="codeph">pid</code>.</p>
<p>The default configuration for all other messages at level <code class="codeph">warning</code> is still in effect.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-B02B8F49-5E24-4A38-B723-0370BE75A7B6"><!-- --></a><code class="codeph">-Xlog:gc::uptime,tid</code></dt>
<dd>
<p>Logs messages tagged with the <code class="codeph">gc</code> tag using the default 'info' level to default the output<code class="codeph">stdout</code> and uses decorations <code class="codeph">uptime</code> and <code class="codeph">tid</code>. The default configuration for all other messages at level<code class="codeph">warning</code> is still in effect.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-01D8E833-3611-4CF4-9571-3D3547BB5143"><!-- --></a><code class="codeph">-Xlog:gc*=info,safepoint*=off</code></dt>
<dd>
<p>Logs messages tagged with at least <code class="codeph">gc</code> using the <code class="codeph">info</code> level, but turns off logging of messages tagged with <code class="codeph">safepoint</code>. Messages tagged with both <code class="codeph">gc</code> and <code class="codeph">safepoint</code> won&rsquo;t be logged.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-65F007AE-7757-4EDD-8CC0-31933EBE9D64"><!-- --></a><code class="codeph">-Xlog:disable -Xlog:safepoint=trace:safepointtrace.txt</code></dt>
<dd>
<p>Turns off all logging, including warnings and errors, and then enables messages tagged with <code class="codeph">safepoint</code>using <code class="codeph">trace</code>level to the file <code class="codeph">safepointtrace.txt</code>. The default configuration doesn&rsquo;t apply, because the command line started with <code class="codeph">-Xlog:disable</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Complex -Xlog Usage Examples</p>
<p>The following describes a few complex examples of using the <code class="codeph">-Xlog</code> option.</p>
<dl>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-D843C19D-D6CA-437E-AE7E-CAE5E16B7B22"><!-- --></a><code class="codeph">-Xlog:gc+class*=debug</code></dt>
<dd>
<p>Logs messages tagged with at least <code class="codeph">gc</code> and <code class="codeph">class</code> tags using the <code class="codeph">debug</code> level to <code class="codeph">stdout</code>. The default configuration for all other messages at the level <code class="codeph">warning</code> is still in effect</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-AA440A9C-C4FE-4B5D-BBA9-18FCBA040CEA"><!-- --></a><code class="codeph">-Xlog:gc+meta*=trace,class*=off:file=gcmetatrace.txt</code></dt>
<dd>
<p>Logs messages tagged with at least the <code class="codeph">gc</code> and <code class="codeph">meta</code> tags using the<code class="codeph">trace</code> level to the file <code class="codeph">metatrace.txt</code> but turns off all messages tagged with <code class="codeph">class</code>. Messages tagged with <code class="codeph">gc</code>, <code class="codeph">meta</code>, and<code class="codeph">class</code> aren&rsquo;t be logged as<code class="codeph">class*</code> is set to off. The default configuration for all other messages at level <code class="codeph">warning</code> is in effect except for those that include <code class="codeph">class</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-49527B3D-FF04-434A-B01F-6CF786C17158"><!-- --></a><code class="codeph">-Xlog:gc+meta=trace</code></dt>
<dd>
<p>Logs messages tagged with exactly the <code class="codeph">gc</code> and <code class="codeph">meta</code> tags using the <code class="codeph">trace</code> level to <code class="codeph">stdout</code>. The default configuration for all other messages at level <code class="codeph">warning</code> is still be in effect.</p>
</dd>
<dt class="dlterm"><a id="GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__GUID-A7FC1C13-00D1-4242-9BD4-30A85F81E598"><!-- --></a><code class="codeph">-Xlog:gc+class+heap*=debug,meta*=warning,threads*=off</code></dt>
<dd>
<p>Logs messages tagged with at least <code class="codeph">gc</code>, <code class="codeph">class</code>, and <code class="codeph">heap</code> tags using the <code class="codeph">trace</code> level to <code class="codeph">stdout</code> but only log messages tagged with <code class="codeph">meta</code> with level. The default configuration for all other messages at the level <code class="codeph">warning</code> is in effect except for those that include <code class="codeph">threads</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-9569449C-525F-4474-972C-4C1F63D5C357"></a>
<h2 id="JSWOR-GUID-9569449C-525F-4474-972C-4C1F63D5C357" class="sect2">Validate Java Virtual Machine Flag Arguments</h2>
<div>
<p>You use values provided to all Java Virtual Machine (JVM) command-line flags for validation and, if the input value is invalid or out-of-range, then an appropriate error message is displayed.</p>
<div class="section">Whether they&rsquo;re set ergonomically, in a command line, by an input tool, or through the APIs (for example, classes contained in the package <code class="codeph">java.lang.management</code>) the values provided to all Java Virtual Machine (JVM) command-line flags are validated. Ergonomics are described in <span><cite>Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide</cite></span>.
<p>Range and constraints are validated either when all flags have their values set during JVM initialization or a flag&rsquo;s value is changed during runtime (for example using the <code class="codeph">jcmd</code> tool). The JVM is terminated if a value violates either the range or constraint check and an appropriate error message is printed on the error stream.</p>
</div>
<!-- class="section" -->
<div class="section">For example, if a flag violates a range or a constraint check, then the JVM exits with an error:
<pre dir="ltr">
java -XX:AllocatePrefetchStyle=5 -version   
intx AllocatePrefetchStyle=5 is outside the allowed range [ 0 ... 3 ]   
Improperly specified VM option 'AllocatePrefetchStyle=5'   
Error: Could not create the Java Virtual Machine.  
Error: A fatal exception has occurred. Program will exit.
</pre>
<p>The flag <code class="codeph">-XX:+PrintFlagsRanges</code> prints the range of all the flags. This flag allows automatic testing of the flags by the values provided by the ranges. For the flags that have the ranges specified, the type, name, and the actual range is printed in the output.</p>
<div class="p">For example,
<pre dir="ltr">
intx   ThreadStackSize [ 0 ... 9007199254740987 ] {pd product}
</pre>
For the flags that don&rsquo;t have the range specified, the values aren&rsquo;t displayed in the print out. For example,:
<pre dir="ltr">
size_t NewSize         [   ...                  ] {product}
</pre>
This helps to identify the flags that need to be implemented. The automatic testing framework can skip those flags that don&rsquo;t have values and aren&rsquo;t implemented.</div>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-7BE7CD55-3AC3-4A96-BBDD-E4D9FC4FCCCB"></a>
<h2 id="JSWOR-GUID-7BE7CD55-3AC3-4A96-BBDD-E4D9FC4FCCCB" class="sect2">Large Pages</h2>
<div>
<p>You use large pages, also known as huge pages, as memory pages that are significantly larger than the standard memory page size (which varies depending on the processor and operating system). Large pages optimize processor Translation-Lookaside Buffers.</p>
<div class="section">
<p>A Translation-Lookaside Buffer (TLB) is a page translation cache that holds the most-recently used virtual-to-physical address translations. A TLB is a scarce system resource. A TLB miss can be costly because the processor must then read from the hierarchical page table, which may require multiple memory accesses. By using a larger memory page size, a single TLB entry can represent a larger memory range. This results in less pressure on a TLB, and memory-intensive applications may have better performance.</p>
<p>However, large pages page memory can negatively affect system performance. For example, when a large mount of memory is pinned by an application, it may create a shortage of regular memory and cause excessive paging in other applications and slow down the entire system. Also, a system that has been up for a long time could produce excessive fragmentation, which could make it impossible to reserve enough large page memory. When this happens, either the OS or JVM reverts to using regular pages.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2"></p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Large Pages Support</p>
<p>Oracle Solaris, Linux, and Windows Server 2003 support large pages.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Large Pages Support for Oracle Solaris</p>
<p>Oracle Solaris 9 and later include Multiple Page Size Support (MPSS). No additional configuration is necessary. See <a href="http://www.oracle.com/technetwork/server-storage/solaris10/overview/solaris9-features-scalability-135663.html" target="_blank">&nbsp;Features and Benefits - Scalability</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Large Pages Support for Linux</p>
<p>The 2.6 kernel supports large pages. Some vendors have backported the code to their 2.4-based releases. To check if your system can support large page memory, try the following:</p>
<pre dir="ltr">
# cat /proc/meminfo | grep Huge
HugePages_Total: 0
HugePages_Free: 0
Hugepagesize: 2048 kB
</pre>
<p>If the output shows the three "Huge" variables, then your system can support large page memory but it needs to be configured. If the command prints nothing, then your system doesn&rsquo;t support large pages. To configure the system to use large page memory, login as <code class="codeph">root</code>, and then follow these steps:</p>
<ol>
<li>
<p>If you&rsquo;re using the option <code class="codeph">-XX:+UseSHM</code> (instead of <code class="codeph">-XX:+UseHugeTLBFS</code>), then increase the <code class="codeph">SHMMAX</code> value. It must be larger than the Java heap size. On a system with 4 GB of physical RAM (or less), the following makes all the memory sharable:</p>
<pre dir="ltr">
# echo 4294967295 &gt; /proc/sys/kernel/shmmax
</pre></li>
<li>
<p>If you&rsquo;re using the option <code class="codeph">-XX:+UseSHM</code> or <code class="codeph">-XX:+UseHugeTLBFS</code>, then specify the number of large pages. In the following example, 3 GB of a 4 GB system are reserved for large pages (assuming a large page size of 2048kB, then 3 GB = 3 * 1024 MB = 3072 MB = 3072 * 1024 kB = 3145728 kB and 3145728 kB / 2048 kB = 1536):</p>
<pre dir="ltr">
# echo 1536 &gt; /proc/sys/vm/nr_hugepages
</pre></li>
</ol>
<div class="infobox-note" id="GUID-7BE7CD55-3AC3-4A96-BBDD-E4D9FC4FCCCB__GUID-F3CD1677-37DC-4141-992A-804E03320981">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>Note that the values contained in <code class="codeph">/proc</code> resets after you reboot your system, so may want to set them in an initialization script (for example, <code class="codeph">rc.local</code> or <code class="codeph">sysctl.conf</code>).</p>
</li>
<li>
<p>If you configure (or resize) the OS kernel parameters <code class="codeph">/proc/sys/kernel/shmmax</code> or <code class="codeph">/proc/sys/vm/nr_hugepages</code>, Java processes may allocate large pages for areas in addition to the Java heap. These steps can allocate large pages for the following areas:</p>
<ul style="list-style-type: disc;">
<li>
<p>Java heap</p>
</li>
<li>
<p>Code cache</p>
</li>
<li>
<p>The marking bitmap data structure for the parallel GC</p>
</li>
</ul>
<p>Consequently, if you configure the <code class="codeph">nr_hugepages</code> parameter to the size of the Java heap, then the JVM can fail in allocating the code cache areas on large pages because these areas are quite large in size.</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Large Pages Support for Windows Server 2003</p>
<p>Only Windows Server 2003 supports large pages. To use this feature, the administrator must first assign additional privileges to the user who&rsquo;s running the application:</p>
<ol>
<li>
<p>Select <span class="bold">Control Panel</span>, <span class="bold">Administrative Tools</span>, and then <span class="bold">Local Security Policy</span>.</p>
</li>
<li>
<p>Select <span class="bold">Local Policies</span> and then <span class="bold">User Rights Assignment</span>.</p>
</li>
<li>
<p>Double-click <span class="bold">Lock pages in memory</span>, then add users and/or groups.</p>
</li>
<li>
<p>Reboot your system.</p>
</li>
</ol>
<p>Note that these steps are required even if it&rsquo;s the administrator who&rsquo;s running the application, because administrators by default don&rsquo;t have the privilege to lock pages in memory.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-31503FCE-93D0-4175-9B4F-F6A738B2F4C4"></a>
<h2 id="JSWOR-GUID-31503FCE-93D0-4175-9B4F-F6A738B2F4C4" class="sect2">Application Class Data Sharing</h2>
<div>
<p>Application Class Data Sharing (AppCDS) extends class data sharing to enable application classes to be placed in the shared archive.</p>
<div class="section" id="GUID-31503FCE-93D0-4175-9B4F-F6A738B2F4C4__APP_CLASS_DATA_SHARING">
<p>In addition to the core library classes, AppCDS supports <a class="olink JSJVM-GUID-7EAA3411-8CF0-4D19-BD05-DF5E1780AA91" target="_blank" href="../vm/class-data-sharing.htm#JSJVM-GUID-7EAA3411-8CF0-4D19-BD05-DF5E1780AA91">Class Data Sharing</a> from the following locations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Platform classes from the runtime image</p>
</li>
<li>
<p>Application classes from the runtime image</p>
</li>
<li>
<p>Application classes from the class path</p>
</li>
</ul>
<div class="infobox-note" id="GUID-31503FCE-93D0-4175-9B4F-F6A738B2F4C4__GUID-714EC0FD-6C0E-4F87-80C2-AEA7386E342F">
<p class="notep1">Note:</p>
<p>In JDK 9 and later, application classes from module path are not supported by AppCDS.</p>
<div class="p">Class Data Sharing (CDS)/AppCDS does not support archiving array classes in a class list. When an array in the class list is encountered, CDS dump time gives the explicit error message:
<pre dir="ltr">
Preload Warning: Cannot find &lt;<span class="variable">array_name</span>&gt;
</pre>
Although an array in the class list is not allowed, some array classes can still be created at CDS/AppCDS dump time. Those arrays are created during the execution of the Java code used by the Java class loaders (<code class="codeph">PlatformClassLoader</code> and the system class loader) to load classes at dump time. The created arrays are archived with the rest of the loaded classes.</div>
</div>
<p>Archiving application classes provides better start up time at runtime. When running multiple JVM processes, AppCDS also reduces the runtime footprint with memory sharing for read-only metadata.</p>
<p>To use this feature, you must specify <code class="codeph">-XX:+UnlockCommercialFeatures</code> in the command.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Creating a Shared Archive File and Using It to Run an Application</p>
<p>The following steps create a shared archive file that contains all the classes used by the <code class="codeph">test.Hello</code> application. The last step runs the application with the shared archive file.</p>
<ol>
<li>
<p>Create a list of all classes used by the <code class="codeph">test.Hello</code> application. The following command creates a file named <code class="codeph">hello.classlist</code> that contains a list of all classes used by this application:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -Xshare:off -XX:DumpLoadedClassList=hello.classlist -XX:+UseAppCDS -cp hello.jar test.Hello
</pre>
<p>Note that the classpath specified by the <code class="codeph">-cp</code> parameter must contain only JAR files. The <code class="codeph">-XX:+UseAppCDS</code> option doesn&rsquo;t support class paths that contain directory names.</p>
</li>
<li>
<p>Create a shared archive, named <code class="codeph">hello.jsa</code>, that contains all the classes in <code class="codeph">hello.classlist</code>:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -Xshare:dump -XX:+UseAppCDS -XX:SharedArchiveFile=hello.jsa -XX:SharedClassListFile=hello.classlist -cp hello.jar
</pre>
<p>Note that the classpath used at archive creation time must be the same as (or a prefix of) the classpath used at run time.</p>
</li>
<li>
<p>Run the application <code class="codeph">test.Hello</code> with the shared archive <code class="codeph">hello.jsa</code>:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -Xshare:on -XX:+UseAppCDS -XX:SharedArchiveFile=hello.jsa -cp hello.jar test.Hello
</pre>
<p>Ensure that you have specified the option <code class="codeph">-Xshare:on</code> or <code class="codeph">-Xshare:auto</code>. If the option is not specified,<code class="codeph">-Xshare:auto</code> is the default .</p>
</li>
<li>
<p><span class="bold">Optional:</span> Verify that the <code class="codeph">test.Hello</code> application is using the class contained in the <code class="codeph">hello.jsa</code> shared archive:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -Xshare:on -XX:+UseAppCDS -XX:SharedArchiveFile=hello.jsa -cp hello.jar -verbose:class test.Hello
</pre>
<p>The output of this command should contain the following text:</p>
<pre dir="ltr">
Loaded test.Hello from shared objects file by sun/misc/Launcher$AppClassLoader
</pre></li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Sharing a Shared Archive Across Multiple Application Processes</p>
<p>You can share the same archive file across multiple applications processes. This reduces memory usage because the archive is memory-mapped into the address space of the processes. The operating system automatically shares the read-only pages across these processes.</p>
<p>The following steps demonstrate how to create a common archive that can be shared by different applications. Only the classes from <code class="codeph">common.jar</code> are archived in the <code class="codeph">common.jsa</code> (step 3). Classes from <code class="codeph">hello.jar</code> and <code class="codeph">hi.jar</code> are not archived in this particular example because they are not in the classpath during the archiving step (step 3).</p>
<p>To include classes from <code class="codeph">hello.jar</code> and <code class="codeph">hi.jar</code>, the <code class="codeph">.jar</code> files must be added to the classpath specified by the<code class="codeph">-cp</code> parameter.</p>
<ol>
<li>
<p>Create a list of all classes used by the <code class="codeph">Hello</code> application and another list for the <code class="codeph">Hi</code> application:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -XX:DumpLoadedClassList=hello.classlist -XX:+UseAppCDS -cp common.jar:hello.jar Hello
</pre>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -XX:DumpLoadedClassList=hi.classlist -XX:+UseAppCDS -cp common.jar:hi.jar Hi
</pre></li>
<li>
<p>Create a single list of classes used by all the applications that will share the shared archive file.</p>
<p><span class="bold"><span>Oracle Solaris, Linux, and OS X</span>:</span> The following commands combine the files <code class="codeph">hello.classlist</code> and <code class="codeph">hi.classlist</code> into one file, <code class="codeph">common.classlist</code>:</p>
<pre dir="ltr">
cat hello.classlist hi.classlist &gt; common.classlist
</pre>
<p><span class="bold">Windows:</span> The following commands combine the files <code class="codeph">hello.classlist</code> and <code class="codeph">hi.classlist</code> into one file, <code class="codeph">common.classlist</code>:</p>
<pre dir="ltr">
type hello.classlist hi.classlist &gt; common.classlist
</pre></li>
<li>
<p>Create a shared archive named <code class="codeph">common.jsa</code> that contains all the classes in <code class="codeph">common.classlist</code>:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -Xshare:dump -XX:SharedArchiveFile=common.jsa -XX:+UseAppCDS -XX:SharedClassListFile=common.classlist -cp common.jar:hello.jar:hi.jar
</pre>
<p>The classpath parameter used is the common class path prefix shared by the <code class="codeph">Hello</code> and <code class="codeph">Hi</code> applications.</p>
</li>
<li>
<p>Run the <code class="codeph">Hello</code> and <code class="codeph">Hi</code> applications with the same shared archive:</p>
<pre dir="ltr">
java -XX:+UnlockCommercialFeatures -Xshare:on -XX:SharedArchiveFile=common.jsa -XX:+UseAppCDS -cp common.jar:hello.jar:hi.jar Hello 
</pre>
<pre dir="ltr">
java -Xshare:on -XX:SharedArchiveFile=common.jsa -XX:+UseAppCDS -cp common.jar:hello.jar:hi.jar Hi
</pre></li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Specifying Additional Shared Data Added to an Archive File</p>
<p>The <code class="codeph">SharedArchiveConfigFile</code> option is used to specify additional shared data to add to the archive file.</p>
<pre dir="ltr">
-XX:SharedArchiveConfigFile=<span class="variable">shared_config_file</span>
</pre>
<p>JDK 9 and later supports adding both symbols and&nbsp;string objects to an archive for memory sharing&nbsp;when you have multiple JVM processes running on the same host. An example of this is having multiple JVM processes that use the same set of Java EE classes. When these common classes are loaded and used, new symbols and strings may be created and added to the JVM's internal "symbol" and "string" tables.&nbsp;At runtime, the symbols or string objects mapped from the archive file can be shared across multiple JVM processes, resulting in a reduction of overall memory usage.&nbsp;In addition, archiving strings also provides added performance benefits in both startup time and runtime execution.</p>
<p>In JDK 10 and later, all CONSTANT_String entries in archived classes are resolved to interned String objects at dump time, and all interned String objects are archived. It is no longer necessary to specify additional strings in the <code class="codeph">SharedArchiveConfigFile</code>. The <code class="codeph">@SECTION: String</code> section that adds the string literals specified in <code class="codeph">SharedArchiveConfigFile</code> are ignored.</p>
<p>Symbol data should be generated by the <code class="codeph">jcmd</code> tool attaching to a running JVM process. See <a href="jcmd.htm#GUID-59153599-875E-447D-8D98-0078A5778F05" title="You use the jcmd utility to send diagnostic command requests to a running Java Virtual Machine (JVM).">jcmd</a>.</p>
<p>The following is an example of the symbol dumping command in <code class="codeph">jcmd</code>:&nbsp;</p>
<pre dir="ltr">
jcmd <span class="variable">pid</span> VM.symboltable -verbose
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example of a Configuration File</p>
<p>The following is an example of a configuration file:</p>
<pre dir="ltr">
VERSION: 1.0
@SECTION: Symbol
10 -1: linkMethod
</pre>
<p>In the configuration file example, the <code class="codeph">@SECTION: Symbol</code> entry uses the following format:</p>
<pre dir="ltr">
length refcount: symbol
</pre>
<p>The <code class="codeph"><span class="variable">refcount</span></code> for a shared symbol is always <code class="codeph">-1</code>.</p>
<p><code class="codeph">@SECTION</code> specifies the type of the section that follows it. All data within the section must be the same type that's specified by <code class="codeph">@SECTION</code>. Different types of data can&rsquo;t be mixed. Multiple separated data sections for the same type specified by different <code class="codeph">@SECTION</code> are allowed within one <code class="codeph"><span class="variable">shared_config_file</span></code> .</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-EE6BD9FA-EF6D-4C3E-AC5C-30B8762CDC1B"></a>
<h2 id="JSWOR-GUID-EE6BD9FA-EF6D-4C3E-AC5C-30B8762CDC1B" class="sect2">Performance Tuning Examples</h2>
<div>
<p>You can use the Java advanced runtime options to optimize the performance of your applications.</p>
<div class="section">
<p class="subhead2">Tuning for Higher Throughput</p>
<p>Use the following commands and advanced runtime options to achieve higher throughput performance for your application:</p>
<pre dir="ltr">
java -d64 -server -XX:+UseParallelGC -XX:+AggressiveOpts -XX:+UseLargePages -Xmn10g  -Xms26g -Xmx26g
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Tuning for Lower Response Time</p>
<p>Use the following commands and advanced runtime options to achieve lower response times for your application:</p>
<pre dir="ltr">
java -d64 -XX:+UseG1GC -Xms26g Xmx26g -XX:MaxGCPauseMillis=500 -XX:+PrintGCTimeStamp 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Keeping the Java Heap Small and Reducing the Dynamic Footprint of Embedded Applications</p>
<p>Use the following advanced runtime options to keep the Java heap small and reduce the dynamic footprint of embedded applications:</p>
<pre dir="ltr">
-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5
</pre>
<div class="infobox-note" id="GUID-EE6BD9FA-EF6D-4C3E-AC5C-30B8762CDC1B__GUID-55866564-4AA3-4283-9A0C-19D23D308633">
<p class="notep1">Note:</p>
<p>The defaults for these two options are 70% and 40% respectively. Because performance sacrifices can occur when using these small settings, you should optimize for a small footprint by reducing these settings as much as possible without introducing unacceptable performance degradation.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-741FC470-AA3E-494A-8D2B-1B1FE4A990D1"></a>
<h2 id="JSWOR-GUID-741FC470-AA3E-494A-8D2B-1B1FE4A990D1" class="sect2">Exit Status</h2>
<div>
<div class="section">
<p>The following exit values are typically returned by the launcher when the launcher is called with the wrong arguments, serious errors, or exceptions thrown by the JVM. However, a Java application may choose to return any value by using the API call <code class="codeph">System.exit(exitValue)</code>. The values are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">0</code>: Successful completion</p>
</li>
<li>
<p><code class="codeph">&gt;0</code>: An error occurred</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment186">
<tr>
<td class="cellalignment198">
<table class="cellalignment191">
<tr>
<td class="cellalignment190"><a href="javadoc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment190"><a href="appletviewer.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment200">
<table class="cellalignment189">
<tr>
<td class="cellalignment190"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment190"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment190"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
