<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Lookup Services</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="The lookup services allow JMX technology clients to find and connect to connector servers that have registered with the lookup services." />
<meta name="dcterms.created" content="2018-03-13T13:07:03Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Management Extensions Guide" />
<meta name="dcterms.identifier" content="E91147-01" />
<meta name="dcterms.isVersionOf" content="JSJMX" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="jmx-connectors.htm" title="Previous" type="text/html" />
<link rel="Next" href="security.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSJMX.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-4F31260F-C8EF-466D-96AF-2DC7C0ABF776"></a> <span id="PAGE" style="display:none;">17/95</span> <!-- End Header -->
<h1 id="JSJMX-GUID-4F31260F-C8EF-466D-96AF-2DC7C0ABF776" class="sect1"><span class="enumeration_chapter">12</span> Lookup Services</h1>
<div>
<p>The lookup services allow JMX technology clients to find and connect to connector servers that have registered with the lookup services.</p>
<p>The Java Management Extensions (JMX) Specification defines three bindings to lookup services, using existing lookup technologies, as described in the following sections:</p>
<ul style="list-style-type: disc;">
<li><a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a> provides configuration information that applies to all three types of lookup service.</li>
<li><a href="lookup-services.htm#GUID-4F759996-3FE4-43EE-8651-11C7AA88C54A">Service Location Protocol (SLP) Lookup Service</a> presents the SLP lookup example.</li>
<li><a href="lookup-services.htm#GUID-9926AA06-560E-46C7-AA27-8C71EED4F811">Jini Lookup Service</a> presents an Jini lookup example.</li>
<li><a href="lookup-services.htm#GUID-258E2025-16D3-4D22-A19F-F6FA0833018D">Java Naming and Directory Interface (JNDI) / LDAP Lookup Service</a> presents a JNDI/LDAP lookup example.</li>
</ul>
</div>
<div class="sect2"><a id="GUID-5E7A4F97-EA73-42AD-A539-D63327192B30"></a>
<h2 id="JSJMX-GUID-5E7A4F97-EA73-42AD-A539-D63327192B30" class="sect2">Initial Configuration</h2>
<div>
<p>As shown in <a href="jmx-connectors.htm#GUID-681F18DA-8B9B-4FC2-8164-5BE0864A239C">Accessing Standard and Dynamic MBeans By Using the RMI Connector</a>, if you are using remote method invocation (RMI) connectors, you can choose to use an external directory to register the connector server stubs you want to look up. The following cases are presented in the lookup service examples relating to RMI connectors:</p>
<ul style="list-style-type: disc;">
<li>
<p>RMI connectors that use one of the following external directories:</p>
<ul style="list-style-type: disc;">
<li>
<p>An RMI registry, for RMI connectors that implement the default Java Remote Method Protocol (JRMP) transport</p>
</li>
<li>
<p>Lightweight Directory Access Protocol (LDAP), for JRMP transports</p>
</li>
</ul>
</li>
<li>
<p>RMI connectors that do not use an external directory</p>
</li>
</ul>
<p>If you register the RMI connector stubs in an external directory, some initial configuration is required. You must to set up your RMI registry or LDAP server. If you do not use an external directory, the RMI connector stub is encoded into the JMX service URL.</p>
<p>The following sections describe the external directories that you can use in conjunction with the lookup service examples that use RMI connectors. These external directories are referred to when running the three examples of lookup services that are given in the subsequent sections in this chapter.</p>
</div>
<div class="sect3"><a id="GUID-B734AA09-9CAE-4656-826D-DE4266A13D20"></a>
<h3 id="JSJMX-GUID-B734AA09-9CAE-4656-826D-DE4266A13D20" class="sect3">External RMI Registry</h3>
<div>
<p>To register the RMI connector server stubs in an external RMI registry, for use by connectors implementing the JRMP transport, perform the following actions:</p>
<ol>
<li>
<p>Start the RMI registry on port 9999 of the local host.</p>
<p>As in <a href="jmx-connectors.htm#GUID-A4CA2A4D-49EE-4DA8-871F-DD633C28DAD9">JMX Connectors</a>, the RMI registry is used to store the RMI connector stubs for RMI connectors implementing the JRMP transport.</p>
<div class="p">
<pre dir="ltr">
$ rmiregistry 9999 &amp;
</pre></div>
</li>
<li>
<p>For your convenience when typing commands, create an environment variable for the address of the RMI registry.</p>
<p>To shorten the commands that you will type when you run the examples, set the service URL for the RMI registry as an environment variable, <code class="codeph">jndirmi</code>. In these examples, the service URL is given in JNDI form. See the API documentation for the <code class="codeph">javax.management.remote.rmi</code> package for an explanation of JNDI form. If you want to run the external directories on a machine other than the local machine, you must specify that machine&rsquo;s host name instead of localhost.</p>
<div class="p">
<pre dir="ltr">
$ jndirmi="rmi://localhost:9999"
</pre></div>
</li>
</ol>
</div>
</div>
<div class="sect3"><a id="GUID-08ED790A-3FCC-4436-8056-0FBD805F02D9"></a>
<h3 id="JSJMX-GUID-08ED790A-3FCC-4436-8056-0FBD805F02D9" class="sect3">External LDAP Registry</h3>
<div>
<p>To register the RMI connector server stubs in an external LDAP registry, for use by connectors implementing the JRMP transport:</p>
<ol>
<li>
<p>Start an LDAP Server.</p>
<p>The LDAP server you use is your choice, although the schema for representing Java objects in an LDAP directory must be known to the server. See the relevant Request For Comments (RFC) document for details:</p>
<p><code class="codeph"><a href="http://www.ietf.org/rfc/rfc2713.txt" target="_blank">http://www.ietf.org/rfc/rfc2713.txt</a></code></p>
</li>
<li>
<p>Create a domain component suffix.</p>
<p>These examples require that you create the following domain component suffix:</p>
<div class="p">
<pre dir="ltr">
dc=Test
</pre></div>
<p>See the documentation accompanying your LDAP server for details of how to configure the server and create this suffix.</p>
</li>
<li>
<p>For your convenience, set the following LDAP parameters as environment variables.</p>
<p>These variables are used to shorten the commands you type when starting the Server and Client classes in the lookup service examples that register RMI connector stubs in the external LDAP server.</p>
<ul style="list-style-type: disc;">
<li>
<p>The name of the machine running your LDAP server (<code class="codeph"><span class="variable">ldap_host</span></code>)</p>
<pre dir="ltr">
$ ldaphost=<span class="variable">ldap_host</span>
</pre></li>
<li>
<p>The port the LDAP server is running on (<code class="codeph"><span class="variable">ldap_port</span></code>)</p>
<pre dir="ltr">
$ ldapport=<span class="variable">ldap_port</span>
</pre></li>
<li>
<p>The LDAP common name attribute, which in these examples is &ldquo;Directory Manager&rdquo;</p>
<pre dir="ltr">
$ principal=&rdquo;cn=Directory Manager&rdquo;
</pre></li>
<li>
<p>The password required by your LDAP server . Supply the password for your LDAP server.</p>
<pre dir="ltr">
$ credentials=<span class="variable">your_ldap_password</span>
</pre></li>
<li>
<p>The address of the LDAP server. In this example, the service URL for the LDAP server is given in JNDI form and is identified by the variable jndildap.</p>
<pre dir="ltr">
$ jndildap="ldap://$ldaphost:$ldapport"
</pre></li>
</ul>
</li>
</ol>
<p>You are now ready to run the different lookup service examples.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-4F759996-3FE4-43EE-8651-11C7AA88C54A"></a>
<h2 id="JSJMX-GUID-4F759996-3FE4-43EE-8651-11C7AA88C54A" class="sect2">Service Location Protocol (SLP) Lookup Service</h2>
<div>
<p>The JMX technology specifies how to register RMI connectors with the SLP lookup service.</p>
<p>This example demonstrates how a JMX Remote API connector client can find and connect to a connector server that has registered with the SLP lookup service. This example performs the following operations:</p>
<ul style="list-style-type: disc;">
<li>
<p>The agent:</p>
<ul style="list-style-type: disc;">
<li>
<p>Creates an MBean server</p>
</li>
<li>
<p>Gets a pointer to the SLP lookup service</p>
</li>
<li>
<p>Creates a connector server</p>
</li>
<li>
<p>Registers the connector address with the SLP lookup service</p>
</li>
</ul>
</li>
<li>
<p>The client:</p>
<ul style="list-style-type: disc;">
<li>
<p>Gets a pointer to the SLP lookup service</p>
</li>
<li>
<p>Looks for any connector servers registered in the SLP lookup service</p>
</li>
<li>
<p>Creates a JMX Remote API connector</p>
</li>
<li>
<p>Retrieves information about the MBeans in the MBean server</p>
</li>
</ul>
</li>
</ul>
<p>This example assumes that you are already familiar with <a href="http://www.ietf.org/rfc/rfc2614.txt" target="_blank">SLP technology</a>. The code provided for this example conforms to Oracle&rsquo;s implementation of SLP, as defined by RFC 2614 (see <a href="http://www.ietf.org/rfc/rfc2614.txt" target="_blank">http://www.ietf.org/rfc/rfc2614.txt)</a>. Oracle&rsquo;s implementation of SLP is available in the Solaris operating environment in the directory<code class="codeph">/usr/share/lib/slp</code>. If you are not running the Solaris operating environment, you must obtain a version of SLP that is compliant with RFC 2614, section 5. You can download the OpenSLP Java implementation from <a href="http://www.openslp.org/" target="_blank">http://www.openslp.org/.</a></p>
<div class="section">
<p class="subhead2">Analyzing the SLP Lookup Example Classes</p>
<ol>
<li>
<p>Copy the source code from <a href="service-location-protocol-slp-lookup-service-example.htm">Service Location Protocol (SLP) Lookup Service</a> to the <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Lookup/slp</code>. The files inside this directory should include:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">README</code></li>
<li><code class="codeph">Server.java</code></li>
<li><code class="codeph">Client.java</code></li>
</ul>
</li>
<li>
<p>Open the <code class="codeph">*.java</code> files, in your IDE or text editor.</p>
</li>
</ol>
<p>The following sections analyze each of these classes and explain how they perform the operations described in the example.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-BE193215-C7B5-426C-8454-B110A42F899E"></a>
<h3 id="JSJMX-GUID-BE193215-C7B5-426C-8454-B110A42F899E" class="sect3">Server.java in the SLP Lookup Example</h3>
<div>
<p>Due to its size, the SLP lookup service <code class="codeph">Server.java</code> class is shown in the following code excerpts:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="lookup-services.htm#GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-1SLPLOOKUPSERVICEEXAMP-BFC0C449">&nbsp;EXAMPLE&nbsp;4-1 SLP Lookup Service Example Class Server.java (Excerpt 1)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-2SLPLOOKUPSERVICEEXAMP-BFC0C80A">&nbsp;EXAMPLE&nbsp;4-2 SLP Lookup Service Example Class Server.java (Excerpt 2)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-3SLPLOOKUPSERVICEEXAMP-BFC0CB65">&nbsp;EXAMPLE&nbsp;4-3 SLP Lookup Service Example Class Server.java (Excerpt 3)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-4SLPLOOKUPSERVICEEXAMP-BFC0CFC8">&nbsp;EXAMPLE&nbsp;4-4 SLP Lookup Service Example Class Server.java (Excerpt 4)</a></p>
</li>
</ul>
<p>For explanations of the SLP code used in this example, see RFC 2614 and the API documentation for SLP.</p>
<div class="section" id="GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-1SLPLOOKUPSERVICEEXAMP-BFC0C449">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-1 SLP Lookup Service Example Class Server.java (Excerpt 1)</p>
<pre dir="ltr">
 
public class Server { 
   public final static int <span class="bold">JMX_DEFAULT_LEASE = 300</span>; 
   public final static String JMX_SCOPE = "DEFAULT"; 
 
   private final MBeanServer mbs; 
   public Server() { 
       mbs = <span class="bold">MBeanServerFactory.createMBeanServer()</span>; 
   } 
    
[...] 
 
</pre>
<p><span class="bold">&nbsp;EXAMPLE&nbsp;4-1</span> sets the default SLP lease <code class="codeph">JMX_DEFAULT_LEASE</code> to a default lease of 300 seconds, corresponding to the length of time the URL is registered, and shows the initial creation of the MBean server <code class="codeph">mbs</code>.</p>
<p>In code that is not shown in the example, you then define an SLP advertiser <code class="codeph">slpAdvertiser</code>, and an SLP service URL <code class="codeph">url</code>. The <code class="codeph">slpAdvertiser</code> is used to register the service URL in the SLP lookup service. The <code class="codeph">SCOPE</code> and the <code class="codeph">agentName</code> are registered in SLP as lookup attributes.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-2SLPLOOKUPSERVICEEXAMP-BFC0C80A">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-2 SLP Lookup Service Example Class Server.java (Excerpt 2)</p>
<pre dir="ltr">
 
[...] 
 
   public static void register(JMXServiceURL jmxUrl, String name) 
     throws ServiceLocationException { 
     <span class="bold">ServiceURL serviceURL =</span> 
<span class="bold">          new ServiceURL(jmxUrl.toString(),</span> 
<span class="bold">                         JMX_DEFAULT_LEASE)</span>; 
     debug("ServiceType is: " + serviceURL.getServiceType()); 
     Vector attributes = new Vector(); 
     Vector attrValues = new Vector(); 
     attrValues.add(JMX_SCOPE); 
     ServiceLocationAttribute attr1 = 
          new ServiceLocationAttribute("SCOPE", attrValues); 
     attributes.add(attr1); 
     attrValues.removeAllElements(); 
     <span class="bold">attrValues.add(name);</span> 
<span class="bold">     ServiceLocationAttribute attr2 =</span> 
<span class="bold">          new ServiceLocationAttribute("AgentName", attrValues);</span> 
     attributes.add(attr2); 
     final <span class="bold">Advertiser</span> slpAdvertiser = 
          ServiceLocationManager.getAdvertiser(Locale.US); 
     slpAdvertiser.<span class="bold">register(serviceURL, attributes)</span>; 
      
   }  
 
[...] 
 
</pre>
<p><span class="bold">&nbsp;EXAMPLE&nbsp;4-2</span> shows the registration of the JMX connector server&rsquo;s URL with the SLP lookup service.</p>
<p>The JMX service URL <code class="codeph">jmxUrl</code> is the address of the connector server, and is obtained by a call to the <code class="codeph">getAddress()</code> method of <code class="codeph">JMXConnectorServer</code> when the connector server is started.</p>
<p>The SLP lookup attributes, namely the scope and the agent name under which the connector server address is to be registered (<code class="codeph">name</code>), are then specified by the SLP class <code class="codeph">ServiceLocationAttribute</code>. The <code class="codeph">AgentName</code> attribute is mandatory, but other optional attributes, such as <code class="codeph">ProtocolType</code>, <code class="codeph">AgentHost</code>, and <code class="codeph">Property</code> can also be registered in the SLP lookup service.</p>
<p>Finally, the JMX connector server address is registered in the SLP service with a call to the <code class="codeph">register()</code> method of the <code class="codeph">Advertiser</code> interface, with the <code class="codeph">serviceURL</code> and the <code class="codeph">attributes</code> passed in as parameters.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-3SLPLOOKUPSERVICEEXAMP-BFC0CB65">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-3 SLP Lookup Service Example Class Server.java (Excerpt 3)</p>
<pre dir="ltr">
 
[...] 
 
   public JMXConnectorServer rmi(String url) throws 
     IOException, 
     JMException, 
     NamingException, 
     ClassNotFoundException, 
     ServiceLocationException { 
     JMXServiceURL jurl = new JMXServiceURL(url); 
     final HashMap env = new HashMap(); 
     // Environment map attributes 
     [...] 
 
  
     <span>JMXConnectorServer rmis =</span> 
<span>        JMXConnectorServerFactory</span>.newJMXConnectorServer(jurl, env, mbs); 
     final String agentName = System.getProperty("agent.name", 
                                                 "DefaultAgent"); 
     start(rmis, agentName); 
 
     return rmis; 
  } 
[...] 
 
</pre>
<p><span class="bold">&nbsp;EXAMPLE&nbsp;4-3</span> shows the creation of an RMI connector server. The JMX service URL <code class="codeph">jurl</code> is constructed from the string <code class="codeph">url</code> that is included in the command used to launch the <code class="codeph">Server</code> at the command line. An RMI connector server named <code class="codeph">rmis</code> is then created with the system properties defined by the environment <code class="codeph">map</code> and the address <code class="codeph">jurl</code>.</p>
<p>The connector server is then started, and the RMI connector server address is registered in the SLP lookup service under the name <code class="codeph">agentName</code>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-BE193215-C7B5-426C-8454-B110A42F899E__CODEEXAMPLE4-4SLPLOOKUPSERVICEEXAMP-BFC0CFC8">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-4 SLP Lookup Service Example Class Server.java (Excerpt 4)</p>
<pre dir="ltr">
 
[...] 
 
   public void start(JMXConnectorServer server, String agentName) 
      throws IOException, ServiceLocationException { 
      server.start(); 
      final JMXServiceURL address = server.getAddress(); 
      register(address,agentName); 
   } 
    
[...] 
 
</pre>
<p><span class="bold">&nbsp;EXAMPLE&nbsp;4-4</span> shows the launching of the connector server <code class="codeph">server</code> and the registration of <code class="codeph">server</code> in the SLP lookup service with the given address <code class="codeph">address</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D"></a>
<h3 id="JSJMX-GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D" class="sect3">Client.java in the SLP Lookup Example</h3>
<div>
<p>The SLP lookup service <code class="codeph">Client.java</code> class is analyzed in the following series of code excerpts:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="lookup-services.htm#GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D__CODEEXAMPLE4-1SLPLOOKUPSERVICEEXAMP-BFBAFA35">&nbsp;EXAMPLE&nbsp;4-5 SLP Lookup Service Example Class Client.java (Excerpt 1)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D__CODEEXAMPLE4-2SLPLOOKUPSERVICEEXAMP-BFBAFE9D">&nbsp;EXAMPLE&nbsp;4-6 SLP Lookup Service Example Class Client.java (Excerpt 2)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D__CODEEXAMPLE4-7SLPLOOKUPSERVICEEXAMP-BFC2ACEA">&nbsp;EXAMPLE&nbsp;4-7 SLP Lookup Service Example Class Client.java (Excerpt 3)</a></p>
</li>
</ul>
<div class="section" id="GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D__CODEEXAMPLE4-1SLPLOOKUPSERVICEEXAMP-BFBAFA35">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-5 SLP Lookup Service Example Class Client.java (Excerpt 1)</p>
<pre dir="ltr">
 
public class Client { 
 
    public final static String JMX_SCOPE = "DEFAULT"; 
 
    public static Locator <span>getLocator()</span> throws ServiceLocationException { 
      final Locator slpLocator = 
          <span>ServiceLocationManager.getLocator(Locale.US)</span>; 
      return slpLocator; 
    } 
     
      public static List lookup(Locator slpLocator, String name) 
          throws IOException, ServiceLocationException { 
 
   
          final ArrayList list = new ArrayList(); 
          Vector scopes = new Vector(); 
 
          scopes.add(JMX_SCOPE); 
          <span>String query = </span> 
<span>              "(&amp;(AgentName=" + ((name!=null)?name:"*") + "))"</span>; 
 
          <span>ServiceLocationEnumeration result =</span> 
<span>              slpLocator.findServices(new ServiceType("service:jmx"),</span> 
<span>                                      scopes, query)</span>; 
 
          while(result.hasMoreElements()) { 
                <span>final ServiceURL surl = (ServiceURL) result.next()</span>; 
                 
 
             <span>JMXServiceURL jmxUrl = new JMXServiceURL(surl.toString())</span>; 
             try { 
                  <span>JMXConnector client =</span> 
<span>                     JMXConnectorFactory.newJMXConnector(jmxUrl,null)</span>; 
                  if (client != null) list.add(client); 
             } catch (IOException x ) {  
             [...] 
             } 
          } 
      } 
      return list; 
    } 
 
</pre>
<p><span class="bold">&nbsp;EXAMPLE&nbsp;4-5</span> obtains the SLP service ,<code class="codeph">Locator</code> by calling the <code class="codeph">getLocator</code> method of the SLP class <code class="codeph">ServiceLocationManager</code>. The <code class="codeph">Client</code> then retrieves all the connector servers registered in the SLP service under a given agent name, or under agent names that match a certain pattern. If no agent name is specified when <code class="codeph">Client</code> is started, all agent names will be considered.</p>
<p>A JMX technology service URL, <code class="codeph">jmxUrl</code>, is generated for each of the agents retrieved by SLP, with each agent&rsquo;s SLP service URL, <code class="codeph">surl</code>, passed as a parameter into the <code class="codeph">JMXServiceURL</code> instance. The URL ,<code class="codeph">jmxUrl</code>, is then passed to the <code class="codeph">newJMXConnector()</code> method of <code class="codeph">JMXConnectorFactory</code>, to create a new connector client named <code class="codeph">client</code> for each agent that is registered in the SLP service.</p>
<p>The connector clients that are retrieved are stored in an array list called <code class="codeph">list</code>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D__CODEEXAMPLE4-2SLPLOOKUPSERVICEEXAMP-BFBAFE9D">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-6 SLP Lookup Service Example Class Client.java (Excerpt 2)</p>
<pre dir="ltr">
 
<span class="bold">public static void listMBeans(MBeanServerConnection server)</span> 
     throws IOException { 
 
     final Set names = server.queryNames(null,null); 
     for (final Iterator i=names.iterator(); i.hasNext(); ) { 
          ObjectName name = (ObjectName)i.next(); 
          System.out.println("Got MBean: "+name); 
          try { 
               MBeanInfo info = 
                  server.getMBeanInfo((ObjectName)name); 
               MBeanAttributeInfo[] attrs = info.getAttributes(); 
               if (attrs == null) continue; 
               for (int j=0; j&lt;attrs.length; j++) { 
                    try { 
                         Object o = 
                         server.getAttribute(name,attrs[j].getName()); 
                         System.out.println("\t\t" + attrs[j].getName() + 
                         " = "+o); 
                    } catch (Exception x) { 
                         System.err.println("JmxClient failed to get " + 
                                             attrs[j].getName() + x); 
                         x.printStackTrace(System.err); 
                    } 
     } 
} 
 
</pre>
<p>In <span class="bold">&nbsp;EXAMPLE&nbsp;4-6</span>, a reference to the <code class="codeph">MBeanServerConnection</code> is retrieved for every connector client that is created from the connector server address stored in the SLP service. A list of all the MBeans and their attributes is retrieved.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47106B0D-94D5-4F0F-995F-1B2291E8711D__CODEEXAMPLE4-7SLPLOOKUPSERVICEEXAMP-BFC2ACEA">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-7 SLP Lookup Service Example Class Client.java (Excerpt 3)</p>
<pre dir="ltr">
 
public static void main(String[] args) { 
      try { 
           <span>final String agentName = System.getProperty("agent.name")</span>; 
           <span>final Locator slpLocator = getLocator()</span>; 
           List l = lookup(slpLocator,agentName); 
           int j = 1; 
           for (Iterator i=l.iterator();i.hasNext();j++) { 
                JMXConnector c1 = (JMXConnector) i.next(); 
                if (c1 != null) { 
                    try { 
                         c1.connect(env); 
                    } catch (IOException x) { 
                         System.err.println ("Connection failed: " + x); 
                         x.printStackTrace(System.err); 
                         continue; 
                    } 
 
                    <span>MBeanServerConnection conn =</span> 
<span>                         c1.getMBeanServerConnection()</span>; 
 
                    try { 
                         listMBeans(conn); 
                    } catch (IOException x) { 
                         x.printStackTrace(System.err); 
                    } 
                    try { 
                         c1.close(); 
                    } catch (IOException x) { 
                         x.printStackTrace(System.err); 
                    } 
                } 
           } 
      } catch (Exception x) { 
           x.printStackTrace(System.err); 
      } 
} 
 
</pre>
<p>In <span class="bold">&nbsp;EXAMPLE&nbsp;4-7</span>, the <code class="codeph">agent.name</code> property is retrieved by calling the <code class="codeph">getProperty()</code> method of the <code class="codeph">System</code> class, and the SLP lookup service is found by calling the <code class="codeph">getLocator()</code> method of <code class="codeph">Locator</code>.</p>
<p>All the agents named <code class="codeph">agentName</code> are then looked up, and connections are made to the agents that are discovered. If no agent is specified, then all agents are looked up. Connections are made to the MBean server created by <code class="codeph">Server</code>, and all the MBeans in it are listed, before the connection is closed down.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158"></a>
<h3 id="JSJMX-GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158" class="sect3">Running the SLP Lookup Service Example</h3>
<div>
<p>This example demonstrates the use of the SLP lookup service to look up RMI connector servers that use RMI&rsquo;s default transport, JRMP. As described in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>, different external directories are used to register the RMI connector stubs.</p>
<p>The following combinations of transports and external directories are demonstrated:</p>
<ul style="list-style-type: disc;">
<li>
<p>RMI connector over the JRMP transport, with:</p>
<ul style="list-style-type: disc;">
<li>
<p>No external directory</p>
</li>
<li>
<p>An RMI registry</p>
</li>
<li>
<p>An LDAP registry</p>
</li>
</ul>
</li>
</ul>
<p>In addition to the actions you performed in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>, you must perform additional actions specific to this example before you can run the examples that use the SLP. You can then start looking up connectors using SLP in conjunction with the two connectors supported by the JMX technology.</p>
<div class="infobox-note" id="GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__GUID-18F37B96-5D5C-4B75-B6D4-5A85EF2C3CBB">
<p class="notep1">Note:</p>
<p>When you run the examples, to help you keep track of which agent has been created with which transport, the agent names include a letter suffix that is the same as the lettering of the corresponding section. For example, the agent from <a href="lookup-services.htm#GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__STARTTHESERVER-BFC76E5E">Starting the Server</a>, substep a. <span class="bold">RMI connector over JRMP, without an external directory</span>. is called <code class="codeph">example-server-a</code>.</p>
</div>
<p>To run the example, perform the sequence of steps described in:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="lookup-services.htm#GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__SETTINGUPTHESLPLOOKUPSERVICEEXAMPLE-BFC5DF65">Setting up the SLP Lookup Service Example</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__STARTTHESERVER-BFC76E5E">Starting the Server</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__STARTTHECLIENT-BFC77262">Starting the Client</a></p>
</li>
</ul>
<div class="section" id="GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__SETTINGUPTHESLPLOOKUPSERVICEEXAMPLE-BFC5DF65">
<p class="subhead3">Setting up the SLP Lookup Service Example</p>
<p>The following steps are required by all the different transports you can run in this example.</p>
<ol>
<li>
<p>For convenience when compiling and running the classes, define an additional environment variable. In addition to the common environment variables that were set in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>, you need to add the path to the SLP service.</p>
<p>If you are using the Solaris operating environment, add the following variable:</p>
<pre dir="ltr">
$ SLPLIB=/usr/share/lib/slp
</pre>
<p>If you are using another platform, set <code class="codeph">SLPLIB</code> appropriately for that platform you are using.</p>
</li>
<li>
<p>Define and export the <code class="codeph">classp</code> environment variable. This example requires a classpath that includes the Java archive (JAR) files for SLP:</p>
<pre dir="ltr">
$ classp=$SLPLIB/slp.jar
</pre></li>
<li>
<p>Compile the example <code class="codeph">Client</code> and <code class="codeph">Server</code> classes by typing the following command:</p>
<pre dir="ltr">
$ javac -d . -classpath $classp Server.java Client.java
</pre></li>
<li>
<p>Start the SLP daemon.</p>
<p>If you are using the Solaris operating environment, type the following command, which requires you to know your super user password:</p>
<pre dir="ltr">
$ su root -c "java -cp $SLPLIB/slpd.jar com.sun.slp.slpd &amp;"
Password:[<span class="variable">type superuser password</span>]
</pre>
<p>If you are not running a Solaris system, start the SLP daemon according to the implementation of SLP you are using.</p>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section" id="GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__STARTTHESERVER-BFC76E5E">
<p class="subhead3">Starting the Server</p>
<p>The command you use to start the <code class="codeph">Server</code> varies according to which external directory you are using. Before starting the <code class="codeph">Client</code>, start one or more of the following instances of the <code class="codeph">Server</code> . You can start instances of the <code class="codeph">Server</code> with different transports and external registries.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">RMI connector over JRMP, that does not use an external directory:</span> Start the <code class="codeph">Server</code> by typing the following command.</p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \ 
  -Dagent.name=example-server-a \ 
  -Durl ="service:jmx:rmi://" \ 
  slp.Server &amp; 
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>The value for <code class="codeph">debug</code> is set to true to provide more complete screen output when the <code class="codeph">Server</code> runs.</li>
<li>The name of the agent is <code class="codeph">example-server-a</code>.</li>
<li>The service URL specifies that the selected connector is an RMI connector, running over the RMI default transport JRMP.</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the SLP service.</p>
</li>
<li>
<p><span class="bold">RMI connector over JRMP, using an RMI registry as an external directory:</span> Start the <code class="codeph">Server</code> by typing the following command.</p>
<pre dir="ltr">
 $ java -classpath .:$classp -Ddebug=true \ 
  -Dagent.name=example-server-b \ 
  -Durl="service:jmx:rmi:///jndi/${jndirmi}/server" \ 
  slp.Server &amp; 
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>The name of the agent that is created is <code class="codeph">example-server-b</code>.</li>
<li>The service URL specifies the selected connector as RMI over JRMP, and the external directory in which the RMI connector stub, server, is stored is the RMI registry you identified as jndirmi in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the SLP service.</p>
</li>
<li>
<p><span class="bold">RMI connector over JRMP, using LDAP as the external directory:</span> Start the <code class="codeph">Server</code> by typing the following command.</p>
<pre dir="ltr">
 $ java -classpath .:$classp -Ddebug=true \ 
  -Dagent.name=example-server-c \ 
  -Durl="service:jmx:rmi:///jndi/${jndildap}/cn=x,dc=Test" \ 
  -Djava.naming.security.principal="$principal" \ 
  -Djava.naming.security.credentials="$credentials" \ 
  slp.Server &amp; 
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>The name of the agent created is <code class="codeph">example-server-c</code>.</li>
<li>The service URL specifies the selected connector as RMI over JRMP, and the external directory in which the RMI connector stub is stored is the LDAP server you identified as <code class="codeph">jndildap</code> in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.</li>
<li>The stub is registered in the <code class="codeph">Test</code> domain component in the LDAP server.</li>
<li>The common name attribute, <code class="codeph">principal</code>, and password <code class="codeph">credentials</code>, are given to gain access to the LDAP server.</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the SLP service under the agent name <code class="codeph">example-server-c</code>.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-A70EB27A-8C8A-4DAC-9E56-282D8B753158__STARTTHECLIENT-BFC77262">
<p class="subhead3">Starting the Client</p>
<p>After you start the <code class="codeph">Server</code>by using the transport and external directory of your choice, start the <code class="codeph">Client</code></p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \ 
     -Djava.naming.security.principal="$principal" \ 
     -Djava.naming.security.credentials="$credentials" \ 
     slp.Client 
</pre>
<p>You will see output confirming the detection of the agents created by the <code class="codeph">Server</code> and registered in the lookup service. You will also see the identification and confirmation of the connection made to the agents.</p>
<p>To look up a specific agent, type the following command:</p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \  
     -Djava.naming.security.principal="$principal" \ 
     -Djava.naming.security.credentials="$credentials" \ 
     -Dagent.name="agentName" \ 
    slp.Client 
</pre>
<p>In this command shown above, <span class="italic">agentName</span> is the name of the agent you want to look up. You can specify a partial agent name by using <code class="codeph">*</code>; for example, <code class="codeph">x*</code> for all agent names beginning with the letter x.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-9926AA06-560E-46C7-AA27-8C71EED4F811"></a>
<h2 id="JSJMX-GUID-9926AA06-560E-46C7-AA27-8C71EED4F811" class="sect2">Jini Lookup Service</h2>
<div>
<p>This example demonstrates how a JMX technology connector client can find and connect to a connector server that is registered with the Jini lookup service. This example performs the following operations:</p>
<ul style="list-style-type: disc;">
<li>The agent:
<ul style="list-style-type: disc;">
<li>Creates an MBean server</li>
<li>Creates a connector server</li>
<li>Registers the connector address with the Jini lookup service</li>
</ul>
</li>
<li>The client:
<ul style="list-style-type: disc;">
<li>Gets a pointer to the Jini lookup service</li>
<li>Looks for any connector servers registered in the Jini lookup service</li>
<li>Creates a JMX Remote API connector</li>
<li>Retrieves information about the MBeans in the MBean server</li>
</ul>
</li>
</ul>
<div class="section">
<p class="subhead2">Analyzing the Example Classes</p>
<ol>
<li>
<p>Copy the source code from <a href="jini-lookup-service-example.htm">Jini Lookup Service</a> to the <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Lookup/jini</code> directory. The files inside this directory should include:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">README</code></li>
<li><code class="codeph">Server.java</code></li>
<li><code class="codeph">Client.java</code></li>
<li><code class="codeph">java.policy</code></li>
<li><code class="codeph">jini.properties.template</code></li>
</ul>
</li>
<li>Open the <code class="codeph">*.java</code>, files in your IDE or text editor.</li>
</ol>
<p>The following sections analyze each of the classes used in the Jini lookup service example, and explain how they perform the operations described above.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471"></a>
<h3 id="JSJMX-GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471" class="sect3">Server.java in the Jini Lookup Service Example</h3>
<div>
<p>Due to its size, the Jini lookup service <code class="codeph">Server.java</code> class is analyzed in the following code excerpts:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="lookup-services.htm#GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471__CODEEXAMPLE4-8JINILOOKUPSERVICEEXAM-C1BAB206">&nbsp;EXAMPLE&nbsp;4-8 Jini Lookup Service Example Class Server.java (Excerpt 1)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471__CODEEXAMPLE4-9JINILOOKUPSERVICEEXAM-C1BAB5D7">&nbsp;EXAMPLE&nbsp;4-9 Jini Lookup Service Example Class Server.java (Excerpt 2)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471__CODEEXAMPLE4-10JINILOOKUPSERVICEEXA-C1BAC2AA">&nbsp;EXAMPLE&nbsp;4-10 Jini Lookup Service Example Class Server.java (Excerpt 3)</a></p>
</li>
</ul>
<div class="section" id="GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471__CODEEXAMPLE4-8JINILOOKUPSERVICEEXAM-C1BAB206">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-8 Jini Lookup Service Example Class Server.java (Excerpt 1)</p>
<pre dir="ltr">
public class Server { 
   private final MBeanServer mbs; 
   private static boolean debug = false; 
   public Server() { 
     mbs = <span class="bold">MBeanServerFactory.createMBeanServer()</span>; 
   } 
 
[...] 
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-8 shows the creation of an MBean server <code class="codeph">mbs</code>. As was the case for the SLP examples, the JMX service URL and the agent name are passed to <code class="codeph">Server</code> when it is launched at the command line.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471__CODEEXAMPLE4-9JINILOOKUPSERVICEEXAM-C1BAB5D7">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-9 Jini Lookup Service Example Class Server.java (Excerpt 2)</p>
<pre dir="ltr">
[...] 
 
   public JMXConnectorServer rmi(String url) 
      throws IOException, JMException, ClassNotFoundException { 
      JMXServiceURL jurl = new JMXServiceURL(url); 
      final HashMap env = new HashMap(); 
      // Environment map attributes 
     [...] 
     JMXConnectorServer rmis = 
        JMXConnectorServerFactory.newJMXConnectorServer(jurl, env, mbs); 
 
     final String agentName = System.getProperty("agent.name", 
                                                 "DefaultAgent"); 
 
     start(rmis,env,agentName); 
 
     return rmis; 
   } 
    
[...] 
 
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-9 shows the creation of an RMI connector server named <code class="codeph">rmis</code>, using the system properties defined by the environment map, <code class="codeph">env,</code> and the address , <code class="codeph">jurl</code>.</p>
<p>The RMI connector server, <code class="codeph">rmis,</code> is started. The RMI connector server address is registered in the Jini lookup service under the name <code class="codeph">agentName</code>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-CFB6BE50-E982-47FF-BABE-8A4F9A505471__CODEEXAMPLE4-10JINILOOKUPSERVICEEXA-C1BAC2AA">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-10 Jini Lookup Service Example Class Server.java (Excerpt 3)</p>
<pre dir="ltr">
 [...] 
 
   public void start(<span class="bold">JMXConnectorServer server, Map env, String agentName</span>) 
      throws IOException, ClassNotFoundException { 
      server.start(); 
      final ServiceRegistrar registrar=getRegistrar(); 
      final <span class="bold">JMXConnector proxy = server.toJMXConnector(env);</span> 
      <span class="bold">register</span>(registrar,proxy,agentName); 
   } 
    
   public static ServiceRegistrar getRegistrar() 
      throws IOException, ClassNotFoundException, 
         MalformedURLException { 
      final String jurl = 
         System.getProperty("jini.lookup.url","jini://localhost"); 
      final <span class="bold">LookupLocator lookup = new LookupLocator(jurl);</span> 
      final <span class="bold">ServiceRegistrar registrar = lookup.getRegistrar();</span> 
      if (registrar instanceof Administrable) 
          debug("Registry is administrable."); 
      return registrar; 
   } 
    
   public static ServiceRegistration <span class="bold">register(ServiceRegistrar registrar,</span> 
<span class="bold">                                              JMXConnector proxy, String name)</span> 
      throws IOException { 
      Entry[] serviceAttrs = new Entry[] { 
              new net.jini.lookup.entry.Name(name) 
                       }; 
                        
      System.out.println("Registering proxy: AgentName=" + name ); 
      debug("" + proxy); 
      ServiceItem <span class="bold">srvcItem</span> = new ServiceItem(null, proxy, serviceAttrs); 
      ServiceRegistration srvcRegistration = 
             registrar.register(srvcItem, Lease.ANY); 
      debug("Registered ServiceID: " + 
                              srvcRegistration.getServiceID().toString()); 
      return <span class="bold">srvcRegistration</span>; 
   } 
    
[...] 
 
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-10 shows the creation of a connector server named <code class="codeph">server</code> with the environment map , <code class="codeph">env,</code> and the service URL, <code class="codeph">jurl</code>. The connector server instance server gets a pointer to the Jini lookup service by calling the Jini lookup service method <code class="codeph">LookupLocator.getRegistrar()</code>.</p>
<p>The connector server is registered in the Jini lookup service in the form of a proxy, that is using the Jini lookup service locator , <code class="codeph">registrar,</code> and the agent name under which the connector server will be registered. The proxy is in fact a client stub for the connector server, obtained by a call to the <code class="codeph">toJMXConnector()</code> method of <code class="codeph">JMXConnectorServer</code>.</p>
<p>The registration itself is performed by a call to the <code class="codeph">register()</code> method of the Jini lookup service class <code class="codeph">ServiceRegistrar</code>, with an array of service items.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-EBCBD5FA-A2FC-4DAD-9EE2-B2CE0B8AB3AE"></a>
<h3 id="JSJMX-GUID-EBCBD5FA-A2FC-4DAD-9EE2-B2CE0B8AB3AE" class="sect3">Client.java in the Jini Lookup Service Example</h3>
<div>
<p>The Jini lookup service example class <code class="codeph">Client.java</code> is shown in CODE&nbsp;EXAMPLE&nbsp;4-11.</p>
<div class="section">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-11 Jini Lookup Service Example Class Client.java</p>
<pre dir="ltr">
public class Client { 
 
   private static boolean debug = false; 
   public static ServiceRegistrar getRegistrar() 
       throws IOException, ClassNotFoundException, MalformedURLException { 
       final String jurl = 
                  System.getProperty("jini.lookup.url","jini://localhost"); 
       final LookupLocator lookup = new LookupLocator(jurl); 
       final ServiceRegistrar registrar = <span>lookup.getRegistrar()</span>; 
       if (registrar instanceof Administrable) 
               debug("Registry is administrable."); 
       return registrar; 
 } 
 
   public static List lookup(ServiceRegistrar registrar, 
           String name) throws IOException { 
       final ArrayList list = new ArrayList(); 
       final Class[] classes = new Class[] {JMXConnector.class}; 
       final Entry[] serviceAttrs = new Entry[] { 
           new net.jini.lookup.entry.Name(name) 
   }; 
    
   ServiceTemplate template = 
        new ServiceTemplate(null,classes,serviceAttrs); 
   ServiceMatches matches = 
        registrar.lookup(template, Integer.MAX_VALUE); 
   for(int i = 0; i &lt; matches.totalMatches; i++) { 
        debug("Found Service: " + matches.items[i].serviceID); 
        if (debug) { 
           if (matches.items[i].attributeSets != null) { 
                   final Entry[] attrs = matches.items[i].attributeSets; 
                   for (int j = 0; j &lt; attrs.length ; j++) { 
                       debug("Attribute["+j+"]=" + attrs[j]); 
               } 
           } 
        } 
 
 
        if(matches.items[i].service != null) { 
            JMXConnector c = (JMXConnector)(matches.items[i].service); 
            debug("Found a JMXConnector: " + c); 
            list.add(c); 
        } 
   } 
   return list; 
} 
 
[...] 
 
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-11 shows how the connector client obtains a pointer to the Jini lookup service with a call to <code class="codeph">lookup.getRegistrar()</code>. The client then obtains the list of the connectors registered as entries in the Jini lookup service with the agent name, <code class="codeph">name</code>. Unlike in the SLP example, the agent name you pass to <code class="codeph">Client</code> when it is launched must be either an exact match of an existing agent name, or null, in which case the Jini lookup service will look up all the agents.</p>
<p>After the list of connectors has been obtained, in code that is not shown here, the client connects to the MBean server started by <code class="codeph">Server</code>, and retrieves the list of all the MBeans registered in it.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-56F8EB12-0BA0-43EE-9A79-0435AB0B03CD"></a>
<h3 id="JSJMX-GUID-56F8EB12-0BA0-43EE-9A79-0435AB0B03CD" class="sect3">java.policy in the Jini Lookup Service Example</h3>
<div>
<p>The <code class="codeph">java.policy</code> file is a Java technology security policy file that is configured for this example.</p>
</div>
</div>
<div class="sect3"><a id="GUID-BD99DA1D-A9F5-4D9E-84B7-C1CDD75CCA12"></a>
<h3 id="JSJMX-GUID-BD99DA1D-A9F5-4D9E-84B7-C1CDD75CCA12" class="sect3">jini.properties.template</h3>
<div>
<p>The <code class="codeph">jini.properties.template</code> file is a template Jini networking technology properties file. You must configure it for this example. To use this file, change <code class="codeph">@INSTALL_HOME_FOR_JINI@</code> and rename the file to <code class="codeph">jini.properties</code>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-EB45E697-04FD-4461-A3A4-358ECB170946"></a>
<h3 id="JSJMX-GUID-EB45E697-04FD-4461-A3A4-358ECB170946" class="sect3">Running the Jini Lookup Service Example</h3>
<div>
<p>This example demonstrates how to use the Jini lookup service to look up RMI connector servers that use RMI&rsquo;s default transport, JRMP.</p>
<p>The following combinations of transports and external directories are demonstrated:</p>
<ul style="list-style-type: disc;">
<li>
<p>RMI connector over the JRMP transport, with:</p>
<ul style="list-style-type: disc;">
<li>
<p>No external directory</p>
</li>
<li>
<p>An RMI registry</p>
</li>
<li>
<p>An LDAP registry</p>
</li>
</ul>
</li>
</ul>
<p>Before you can run the examples that use the Jini lookup service, you must complete the actions in the <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a> section and the actions that are specific to this example.</p>
<div class="infobox-note" id="GUID-EB45E697-04FD-4461-A3A4-358ECB170946__GUID-B8229B0C-5210-46DF-B6C5-1556422CEDCD">
<p class="notep1">Note:</p>
<p>When you run the examples, to help you keep track of which agent is created with which transport, the agent names include a letter suffix that is the same as the lettering of the corresponding section. For example, the agent from <a href="lookup-services.htm#GUID-EB45E697-04FD-4461-A3A4-358ECB170946__RUNNINGTHEJINILOOKUPSERVICEEXAMPLE-C1E12527">Starting the Server</a>, substep a. <span class="bold">RMI connector over JRMP, without an external directory</span>. is named <code class="codeph">example-server-a</code>.</p>
</div>
<p>To run the example, perform the sequence of steps described in:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="lookup-services.htm#GUID-EB45E697-04FD-4461-A3A4-358ECB170946__SETTINGUPTHEJINILOOKUPSERVICEEXAMPL-C1E11F49">Setting up the Jini Lookup Service Example</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-EB45E697-04FD-4461-A3A4-358ECB170946__RUNNINGTHEJINILOOKUPSERVICEEXAMPLE-C1E12527">Starting the Server</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-EB45E697-04FD-4461-A3A4-358ECB170946__STARTTHECLIENT-C1E27ADE">Starting the Client</a></p>
</li>
</ul>
<div class="section" id="GUID-EB45E697-04FD-4461-A3A4-358ECB170946__SETTINGUPTHEJINILOOKUPSERVICEEXAMPL-C1E11F49">
<p class="subhead3">Setting up the Jini Lookup Service Example</p>
<p>The following steps are required by all of the different transports you can run in this example.</p>
<ol>
<li>
<p>For your convenience when compiling and running the example classes, you can define some additional environment variables. In addition to the common environment variables that you set in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a> you can add the path to the Jini lookup service.</p>
<p>The directory where you have installed the Jini networking technology is referred to as <code class="codeph"><span class="variable">jini_dir</span></code>.</p>
<pre dir="ltr">
$ JINI_HOME=<span class="variable">jini_dir</span>
</pre>
<pre dir="ltr">
$ JINILIB=$JINI_HOME/lib
</pre></li>
<li>
<p>Define the <code class="codeph">classp</code> environment variable. This example requires the JAR files for the Jini lookup services core and extensions.</p>
<pre dir="ltr">
$ classp=$JINILIB/jini-core.jar:$JINILIB/jini-ext.jar
</pre></li>
<li>
<p>Create a <code class="codeph">jini.properties</code> file. A properties file for Solaris, Linux, or Mac OS X platforms is provided in the same directory as the classes for this example. If you are not running a Solaris, Linux, or Mac OS X platform, you can obtain a properties file for your platform in the following directory:</p>
<pre dir="ltr">
$JINI_HOME/example/launcher/jini12_<span class="variable">platform</span>.properties
</pre></li>
<li>
<p>Update the <code class="codeph">jini.properties</code> file to include all the necessary paths, host names and port numbers for your system. Even if you are not running a Solaris, Linux, or Mac OS X platform, you can use the template as a guide.</p>
</li>
<li>
<p>Start the Jini networking technology <code class="codeph">StartService</code> by entering:</p>
<pre dir="ltr">
$ java -cp $JINILIB/jini-examples.jar com.sun.jini.example.launcher.StartService &amp;
</pre>
<p>This opens the <code class="codeph">StartService</code> graphical user interface.</p>
</li>
<li>
<p>Load your <code class="codeph">jini.properties</code> file into <code class="codeph">StartService</code> by clicking <span class="bold">File</span>, <span class="bold">Open Property File</span> and then selecting your properties file from the following directory:</p>
<pre dir="ltr">
<span class="variable">work_dir</span>/jmx_examples/Lookup/jini.
</pre></li>
<li>
<p>Start the Jini lookup services by clicking the <span class="bold">Run</span> tab, and then click the <span class="bold">START</span> button for each of the following:</p>
<ul style="list-style-type: disc;">
<li>RMID</li>
<li>WebServer</li>
<li>Reggie</li>
<li>LookupBrowser</li>
</ul>
<p>You will see a confirmation that the services are running.</p>
</li>
<li>
<p>Compile the <code class="codeph">Client</code> and <code class="codeph">Server</code> classes by typing the following command:</p>
<pre dir="ltr">
$ javac -d . -classpath $classp Server.java Client.java
</pre></li>
</ol>
</div>
<!-- class="section" -->
<div class="section" id="GUID-EB45E697-04FD-4461-A3A4-358ECB170946__RUNNINGTHEJINILOOKUPSERVICEEXAMPLE-C1E12527">
<p class="subhead3">Starting the Server</p>
<p>The command you use to start the <code class="codeph">Server</code> varies according to which external directory you are using. You can start one or more of the following instances of <code class="codeph">Server</code> with different transports and external registries before you start the <code class="codeph">Client</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">RMI connector over JRMP, that does not use an external directory:</span> Start the Server by typing the following command:</p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \ 
  -Dagent.name=example-server-a \ 
  -Durl="service:jmx:rmi://" \ 
  -Djava.security.policy=java.policy \ 
  jini.Server &amp; 
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">debug</code>value is set to <code class="codeph">true</code> to provide more complete screen output when the <code class="codeph">Server</code> runs.</p>
</li>
<li>
<p>The security policy is provided, to allow access to the Jini lookup service.</p>
</li>
<li>
<p>The name of the agent created is <code class="codeph">example-server-a</code>.</p>
</li>
<li>
<p>The service URL specifies that the selected connector is an RMI connector, running over the RMI default transport JRMP.</p>
</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the Jini lookup service.</p>
</li>
<li>
<p><span class="bold">RMI connector over JRMP, that uses an RMI registry as an external directory:</span> Start the Server by typing the following command:</p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \ 
  -Dagent.name=example-server-b \ 
  -Durl="service:jmx:rmi:///jndi/${jndirmi}/server" \ 
  -Djava.security.policy=java.policy \ 
  jini.Server &amp;
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>
<p>The security policy is provided, to allow access to the Jini lookup service.</p>
</li>
<li>The name of the agent created is <code class="codeph">example-server-b</code>.</li>
<li>The service URL specifies the selected connector as RMI over JRMP, and the external directory in which the RMI connector stub, <code class="codeph">server</code>, is stored is the RMI registry you identified as <code class="codeph">jndirmi</code> in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.</li>
</ul>
<p>When <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the Jini lookup service.</p>
</li>
<li>
<p><span class="bold">RMI connector over JRMP, that uses LDAP as the external directory:</span> Start the <code class="codeph">Server</code> by typing the following command:</p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \ 
  -Dagent.name=example-server-c \ 
  -Durl="service:jmx:rmi:///jndi/${jndildap}/cn=x,dc=Test" \ 
  -Djava.security.policy=java.policy \ 
  -Djava.naming.security.principal="$principal" \ 
  -Djava.naming.security.credentials="$credentials" \ 
  jini.Server &amp;
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>
<p>The security policy is provided, to allow access to the Jini lookup service.</p>
</li>
<li>
<p>The name of the agent created is <code class="codeph">example-server-c</code>.The service URL specifies the selected connector as RMI over JRMP, and the external directory in which the RMI connector stub is stored is the LDAP server you identified as <code class="codeph">jndildap</code> in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.</p>
</li>
<li>
<p>The stub is registered in the <code class="codeph">Test</code> domain component in the LDAP server.</p>
</li>
<li>
<p>The common name attribute, <code class="codeph">principal</code>, and password, <code class="codeph">credentials</code>, are given to gain access to the LDAP server.</p>
</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the Jini lookup service under the agent name <code class="codeph">example-server-c</code>.</p>
</li>
</ul>
<p>When <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the Jini lookup service under the agent name <code class="codeph">example-server-f</code>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-EB45E697-04FD-4461-A3A4-358ECB170946__STARTTHECLIENT-C1E27ADE">
<p class="subhead3">Starting the Client</p>
<p>After you start the <code class="codeph">Server</code>by using the transport and external directory of your choice, start the <code class="codeph">Client</code> by entering:</p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \ 
  -Djava.security.policy=java.policy \ 
  jini.Client 
</pre>
<p>You will see output confirming the detection of the agents created by the <code class="codeph">Server</code> and registered in the lookup service. You will also see the identification and confirmation of the connection made to the agents.</p>
<p>To look up a specific agent, you can do so by typing the following command:</p>
<pre dir="ltr">
$ java -classpath .:$classp -Ddebug=true \ 
  -Djava.security.policy=java.policy \ 
  -Dagent.name=<span class="variable">agentName</span> \ 
  jini.Client
</pre>
<p>In the command shown above, <code class="codeph"><span class="variable">agentName</span></code> is the name of the agent you want to look up. You can also specify a partial agent name by using <code class="codeph">*</code>; for example, <code class="codeph">x*</code> for all agent names beginning with the letter <code class="codeph">x</code>.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-258E2025-16D3-4D22-A19F-F6FA0833018D"></a>
<h2 id="JSJMX-GUID-258E2025-16D3-4D22-A19F-F6FA0833018D" class="sect2">Java Naming and Directory Interface (JNDI) / LDAP Lookup Service</h2>
<div>
<p>JMX technology allows you to register RMI connectors with a JNDI lookup service using an LDAP registry as a back end. This example performs the following operations:</p>
<ul style="list-style-type: disc;">
<li>
<p>The agent:</p>
<ul style="list-style-type: disc;">
<li>
<p>Creates an MBean server</p>
</li>
<li>
<p>Creates a connector server</p>
</li>
<li>
<p>Registers the connector address with the LDAP server</p>
</li>
</ul>
</li>
<li>
<p>The client:</p>
<ul style="list-style-type: disc;">
<li>
<p>Gets a pointer to the JNDI/LDAP lookup Service</p>
</li>
<li>
<p>Looks for any connector servers registered in the JNDI/LDAP lookup service</p>
</li>
<li>
<p>Creates a JMX Remote API connector</p>
</li>
<li>
<p>Retrieves information about the MBeans in the MBean server</p>
</li>
</ul>
</li>
</ul>
<div class="section">
<p class="subhead2">Analyzing the Example Classes</p>
<ol>
<li>
<p>Copy the source code from <a href="java-naming-and-directory-interface-jndi-ldap-lookup-service-example.htm">Java Naming and Directory Interface (JNDI)/LDAP Lookup Service</a> to the <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Lookup/ldap</code> directory. The files inside this directory should include:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">README</code></li>
<li><code class="codeph">Server.java</code></li>
<li><code class="codeph">Client.java</code></li>
<li><code class="codeph">jmx-schema.txt</code></li>
<li><code class="codeph">60jmx-schema.ldif</code></li>
</ul>
</li>
<li>Open the <code class="codeph">*.java</code> files, in your IDE or text editor.</li>
</ol>
<p>The following sections analyze each of the classes used in the JNDI/LDAP lookup service example, and explain how they perform the operations described above.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D"></a>
<h3 id="JSJMX-GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D" class="sect3">Server.java in the JNDI/LDAP Lookup Service Example</h3>
<div>
<p>Due to its size, the JNDI/LDAP lookup service <code class="codeph">Server.java</code> class is analyzed in the following code excerpts:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="lookup-services.htm#GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-1JNDILDAPLOOKUPSERVICE-C45BA32D">&nbsp;EXAMPLE&nbsp;4-12 JNDI/LDAP Lookup Service Example Server.java (Excerpt 1)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-13JNDILDAPLOOKUPSERVIC-C45D0795">&nbsp;EXAMPLE&nbsp;4-13 JNDI/LDAP Lookup Service Example Class Server.java (Excerpt 2)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-14JNDILDAPLOOKUPSERVIC-C45D0E1F">&nbsp;EXAMPLE&nbsp;4-14 JNDI/LDAP Lookup Service Example Class Server.java (Excerpt 3)</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-15JNDILDAPLOOKUPSERVIC-C45FBA93">&nbsp;EXAMPLE&nbsp;4-15 JNDI/LDAP Lookup Service Example Class Server.java (Excerpt 4)</a></p>
</li>
</ul>
<div class="section" id="GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-1JNDILDAPLOOKUPSERVICE-C45BA32D">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-12 JNDI/LDAP Lookup Service Example Server.java (Excerpt 1)</p>
<pre dir="ltr">
[...]

public class Server {
   public final static int JMX_DEFAULT_LEASE = 60;
   private static boolean debug = false;
   private final MBeanServer mbs;
   public Server() {
      mbs = MBeanServerFactory.createMBeanServer();
   }

  public static DirContext getRootContext() throws NamingException {
      final Hashtable env = new Hashtable();

      final String factory =
        System.getProperty(Context.INITIAL_CONTEXT_FACTORY,
                           "com.sun.jndi.ldap.LdapCtxFactory");
      final String ldapServerUrl =
        System.getProperty(Context.PROVIDER_URL);
      final String ldapUser =
        System.getProperty(Context.SECURITY_PRINCIPAL,
                           "cn=Directory Manager");
      final String ldapPasswd =
        System.getProperty(Context.SECURITY_CREDENTIALS);
      debug(Context.PROVIDER_URL + "=" + ldapServerUrl);
      debug(Context.SECURITY_PRINCIPAL + "=" + ldapUser);
      if (debug) {
                  System.out.print(Context.SECURITY_CREDENTIALS + "=");
                  final int len = (ldapPasswd==null)?0:ldapPasswd.length();
                  for (int i=0;i&lt;len;i++) System.out.print("*");
                  System.out.println();
      }
      env.put(Context.INITIAL_CONTEXT_FACTORY,factory);
      env.put(Context.SECURITY_PRINCIPAL, ldapUser);
      if (ldapServerUrl != null)
           env.put(Context.PROVIDER_URL, ldapServerUrl);
      if (ldapPasswd != null)
           env.put(Context.SECURITY_CREDENTIALS, ldapPasswd);
      InitialContext root = new InitialLdapContext(env,null);
      return (DirContext)(root.lookup(""));
  }
[...]
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-12 shows the initial creation of an MBean server, <code class="codeph">mbs</code> , and obtains a pointer to the root context of the LDAP directory tree in which the connector server address is registered. All the relevant LDAP access variables, such as the provider URL, the LDAP user name, and the security credentials, are given here and passed into the environment map, <code class="codeph">env</code>. The environment map, <code class="codeph">env</code>, is then passed as a parameter into a call to the <code class="codeph">InitialLdapContext</code>, from which the initial LDAP context is obtained.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-13JNDILDAPLOOKUPSERVIC-C45D0795">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-13 JNDI/LDAP Lookup Service Example Class Server.java (Excerpt 2)</p>
<pre dir="ltr">
[...]

public static void register(DirContext root,
                           JMXServiceURL jmxUrl,
                           String name)
   throws NamingException, IOException {

   final String mydn = System.getProperty("dn","cn="+name);

   debug("dn: " + mydn );

   Object o = null;
   try {
       o = root.lookup(mydn);
   } catch (NameNotFoundException n) {
       Attributes attrs = new BasicAttributes();
       Attribute objclass = new BasicAttribute("objectClass");
       objclass.add("top");
       objclass.add("javaContainer");
       objclass.add("jmxConnector");
       attrs.put(objclass);
       attrs.put("jmxAgentName", name);
       o = root.createSubcontext(mydn,attrs);
   }
   if (o == null) throw new NameNotFoundException();
   final Attributes attrs = root.getAttributes(mydn);
   final Attribute oc = attrs.get("objectClass");
   if (!oc.contains("jmxConnector")) {
       final String msg = "The supplied node [" + mydn + 
         "] does not contain the jmxConnector objectclass";
       throw new NamingException(msg);
   }
   final Attributes newattrs = new BasicAttributes();
   newattrs.put("jmxAgentName",name);
   newattrs.put("jmxServiceURL",jmxUrl.toString());
   newattrs.put("jmxAgentHost",InetAddress.getLocalHost().getHostName());
   newattrs.put("jmxProtocolType",jmxUrl.getProtocol());
   newattrs.put("jmxExpirationDate",
                getExpirationDate(JMX_DEFAULT_LEASE));
   root.modifyAttributes(mydn,DirContext.REPLACE_ATTRIBUTE,newattrs);
}

[...]
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-13 shows the registration of the JMX connector server service URL in the LDAP directory. You can specify the DN where the URL will be registered can be passed on the command line through the <code class="codeph">dn</code> System property, that is, <code class="codeph">-Ddn=<span class="variable">mydn</span></code> . See the commands used start the server for a description. If the <code class="codeph">dn</code> System property is not specified, then you can use the<code class="codeph">DN: cn=<span class="variable">name</span></code> where <code class="codeph"><span class="variable">name</span></code> is the <code class="codeph">agentName</code>. However, this is not mandatory. The location where the URL is registered does not matter, because the client code never uses that DN directly, but instead performs an LDAP search to find the nodes which have an auxiliary <code class="codeph">jmxConnector ObjectClass</code> . What is important is that each URL is registered in its own LDAP node. How to name these nodes is left to the LDAP administrator, who in this case is you. In this example, it is assumed that you have configured your LDAP server by creating a root context under which the node <code class="codeph">cn=<span class="variable">name</span></code> can be created, and that this <code class="codeph">root</code> context has been passed to the LDAP initial context through the <code class="codeph">Context.PROVIDER_URL</code> property. See <a href="lookup-services.htm#GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-1JNDILDAPLOOKUPSERVICE-C45BA32D">&nbsp;EXAMPLE&nbsp;4-12 JNDI/LDAP Lookup Service Example Server.java (Excerpt 1)</a>).</p>
<p>The code in &nbsp;EXAMPLE&nbsp;4-13 checks whether the node in which you will register the server URL already exists. If it does not, you try to create it. This will fail if the parent node does not exist. The <code class="codeph">jmxConnector ObjectClass</code> is a simple auxiliary class, you will use the <code class="codeph">javaContainer ObjectClass</code> as structural class if you need to create a new context. This is completely optional. Any structural class to which the <code class="codeph">jmxConnector</code> auxiliary class can be added is acceptable. It then checks whether the node in which you will register the server already has the <code class="codeph">jmxConnector</code> auxiliary class. If not, an exception is thrown.</p>
<p>At this point, you are sure that the node in which you will register the URL exists and has the appropriate <code class="codeph">jmxConnector</code> auxiliary class. You only need to replace the values of the attributes defined by JMX Remote API for LDAP lookup. See jmx-schema.txt.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">jmxServiceUrl</code>: Contains the String form of the server URL, as obtained from <code class="codeph">server.getAddress()</code> after the server was started</p>
</li>
<li>
<p><code class="codeph">jmxAgentName</code>: Contains the JMX agent name</p>
</li>
<li>
<p><code class="codeph">jmxProtocolType</code>: Contains the JMX protocol type, as returned by <code class="codeph">jmxUrl.getProtocolType()</code></p>
</li>
<li>
<p><code class="codeph">jmxAgentHost</code>: Contains the name of the agent host</p>
</li>
<li>
<p><code class="codeph">jmxExpirationDate</code>: Contains the date at which the URL will be considered obsolete</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-14JNDILDAPLOOKUPSERVIC-C45D0E1F">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-14 JNDI/LDAP Lookup Service Example Class Server.java (Excerpt 3)</p>
<pre dir="ltr">
 [...]

   public JMXConnectorServer rmi(String url)
     throws IOException, JMException,
        NamingException, ClassNotFoundException {

     JMXServiceURL jurl = new JMXServiceURL(url);
     final HashMap env = new HashMap();
     // Prepare the environment Map
[...]

     JMXConnectorServer rmis =
JMXConnectorServerFactory.newJMXConnectorServer(jurl, env, mbs)

     final String agentName = System.getProperty("agent.name",
                                                 "DefaultAgent");
     start(rmis,env,agentName);
     return rmis;
   }
[...]
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-14 creates a new RMI connector server named <code class="codeph">rmis</code> with the JMX service URL <code class="codeph">jurl</code> and the appropriate LDAP properties passed to its environment map <code class="codeph">env</code>. The connector server <code class="codeph">rmis</code> is launched by calling <code class="codeph">JMXConnectorServer.start()</code> and is registered in the LDAP server..</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-E392AB91-6214-495C-BBAE-BAD60657CE4D__CODEEXAMPLE4-15JNDILDAPLOOKUPSERVIC-C45FBA93">
<p class="subhead3">&nbsp;EXAMPLE&nbsp;4-15 JNDI/LDAP Lookup Service Example Class Server.java (Excerpt 4)</p>
<pre dir="ltr">
[...]

    public void start(JMXConnectorServer server, Map env, String agentName)
       throws IOException, NamingException {server.start()
       final DirContext root=getRootContext();
       final JMXServiceURL address = server.getAddress();register(root,address,agentName)
    }
[...]
</pre>
<p>&nbsp;EXAMPLE&nbsp;4-15 creates a JMX connector server server, obtains a pointer to the LDAP server root directory root, and creates a URL for the server named address. The root directory, the URL, and an agent name are passed as parameters to <code class="codeph">register()</code> and are registered in the LDAP server.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-1C2BF6D6-2FF5-44DA-9F1D-7AE941E884CA"></a>
<h3 id="JSJMX-GUID-1C2BF6D6-2FF5-44DA-9F1D-7AE941E884CA" class="sect3">Client.java in the JNDI/LDAP Lookup Service Example</h3>
<div>
<p>The JNDI/LDAP lookup service example class <code class="codeph">Client.java</code> is shown in CODE&nbsp;EXAMPLE&nbsp;4-16.</p>
<div class="section" id="GUID-1C2BF6D6-2FF5-44DA-9F1D-7AE941E884CA__CODEEXAMPLE4-16JNDILDAPLOOKUPSERVIC-C46122C7">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;4-16 JNDI/LDAP Lookup Service Example Class Client.java</p>
<pre dir="ltr">
[...]

public class Client {

   private static boolean debug = false;

   public static void listAttributes(DirContext root, String dn)
     throws NamingException {
     final Attributes attrs = root.getAttributes(dn);
     System.out.println("dn: " + dn);
     System.out.println("attributes: " + attrs);
   }
   public static DirContext getRootContext() throws NamingException {
      final Hashtable env = new Hashtable();
      // Prepare environment map
      [...]
      InitialContext root = new InitialLdapContext(env,null);
      return (DirContext)(root.lookup(""));
   }
   // Confirm URL has not expired 
  [...] 

   public static List lookup(DirContext root, String protocolType,
                             String name)
      throws IOException, NamingException {
      final ArrayList list = new ArrayList();
      String queryProtocol =
         (protocolType==null)?"":"(jmxProtocolType="+protocolType+")";
      String query =
          "(&amp;" + "(objectClass=jmxConnector) " +
          "(jmxServiceURL=*) " +
          queryProtocol +
          "(jmxAgentName=" + ((name!=null)?name:"*") + "))";

      SearchControls ctrls = new SearchControls();
      ctrls.setSearchScope(SearchControls.SUBTREE_SCOPE);
      final NamingEnumeration results = root.search("", query, ctrls);
      while (results.hasMore()) { 
           final SearchResult r = (SearchResult) results.nextElement();
           debug("Found node: " + r.getName());
           final Attributes attrs = r.getAttributes();
           final Attribute attr = attrs.get("jmxServiceURL");
           if (attr == null) continue;
           final Attribute exp = attrs.get("jmxExpirationDate");
           if ((exp != null) &amp;&amp; hasExpired((String)exp.get())) {
               System.out.print(r.getName() + ": ");
               System.out.println("URL expired since: " + exp.get());
               continue;}
           final String urlStr = (String)attr.get();
           if (urlStr.length() == 0) continue;

           debug("Found URL: "+ urlStr);

           final JMXServiceURL url = new JMXServiceURL(urlStr);
           final JMXConnector conn =
               JMXConnectorFactory.newJMXConnector(url,null);
           list.add(conn);
           if (debug) listAttributes(root,r.getName());
      }

      return list;
}
}
</pre>
<p>In CODE&nbsp;EXAMPLE&nbsp;4-16, the <code class="codeph">Client</code> first returns a pointer, <code class="codeph">root</code>, to the LDAP directory <code class="codeph">DirContext</code>, and then it searches through the directory for object classes of the type <code class="codeph">jmxConnector</code>. The service URL and expiry date attributes, <code class="codeph">attr</code> and <code class="codeph">exp</code> respectively, for the <code class="codeph">jmxConnector</code> object classes are obtained, <code class="codeph">exp</code> is checked to make sure that the URL has not expired and a call is made to <code class="codeph">JMXConnectorFactory</code> to create a new connector <code class="codeph">conn</code>. The connector <code class="codeph">conn</code> is added to the list of connectors and is used to access the MBeans in the MBean server created by the <code class="codeph">Server</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-B64797D1-9C1E-4781-9EF1-A9070878C746"></a>
<h3 id="JSJMX-GUID-B64797D1-9C1E-4781-9EF1-A9070878C746" class="sect3">jmx-schema.txt</h3>
<div>
<p>The <code class="codeph">jmx-schema.txt</code> file is the LDAP schema file for the JMX Remote API.</p>
</div>
</div>
<div class="sect3"><a id="GUID-A7B31115-E440-48FA-AD7C-984733CC4D7E"></a>
<h3 id="JSJMX-GUID-A7B31115-E440-48FA-AD7C-984733CC4D7E" class="sect3">60jmx-schema.ldif</h3>
<div>
<p>The <code class="codeph">60jmx-schema.ldif</code> file is an <code class="codeph">ldif</code> file that corresponds to the LDAP schema file, <code class="codeph">jmx-schema.txt</code>, for JMX technology.</p>
</div>
</div>
<div class="sect3"><a id="GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3"></a>
<h3 id="JSJMX-GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3" class="sect3">Running the JNDI/LDAP Lookup Service Example</h3>
<div>
<p>This example demonstrates the use of the JNDI/LDAP lookup service to look up RMI connector servers that implement the default JRMP transport as well as the IIOP transport. In addition, as described in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>, different external directories are used to register the RMI connector stubs.</p>
<p>The combinations of transports and external directories are demonstrated here are:</p>
<ul style="list-style-type: disc;">
<li>
<p>RMI connector over the JRMP transport, with:</p>
<ul style="list-style-type: disc;">
<li>
<p>No external directory</p>
</li>
<li>
<p>An RMI registry</p>
</li>
<li>
<p>An LDAP registry</p>
</li>
</ul>
</li>
</ul>
<p>Before you can run the examples that use the JNDI/LDAP lookup service, you must complete the actions in the <span class="bold">Initial Configuration</span>, section and the actions that are specific to this example. You can then start looking up connectors using the JNDI/LDAP network technology, in conjunction with the two connectors supported by the JMX technology</p>
<div class="infobox-note" id="GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__GUID-7FDF80BB-48AD-4FE4-87CF-377E00ED4943">
<p class="notep1">Note:</p>
<p>When you run the examples, to help you keep track of which agent is created with which transport, the agent names include a letter suffix that is the same as the lettering of the corresponding section. For example, the agent from Start the Server, substep a. <span class="bold">RMI connector over JRMP, without an external directory</span>. is named <code class="codeph">example-server-a</code>.</p>
</div>
<p>To run the example, perform the sequence of steps described in:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="lookup-services.htm#GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__SETTINGUPTHEJNDILDAPLOOKUPSERVICEEX-C46E5D5B">Setting up the JNDI/LDAP Lookup Service Example</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__STARTTHESERVER-C46E6398">Starting the Server</a></p>
</li>
<li>
<p><a href="lookup-services.htm#GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__STARTTHECLIENT-C46E678B">Starting the Client</a></p>
</li>
</ul>
<div class="section" id="GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__SETTINGUPTHEJNDILDAPLOOKUPSERVICEEX-C46E5D5B">
<p class="subhead3">Setting up the JNDI/LDAP Lookup Service Example</p>
<p>The following steps are required by all the different connector/transport combinations you can run in this example.</p>
<div class="infobox-note" id="GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__GUID-4959F1F8-3F9B-4E8F-BEF0-0F740EC0EEB8">
<p class="notep1">Note:</p>
<p>Complete the following steps according to the type of LDAP server that you are using.</p>
</div>
<ol>
<li>
<p>Stop the LDAP server you started in the <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.</p>
</li>
<li>
<p>Copy the JMX technology schema into your LDAP server&rsquo;s schema directory.</p>
</li>
<li>
<p>Restart the LDAP server</p>
</li>
<li>Define the root under which the Server will register its service URL. You must provide the Server with the path to the domain component suffix <code class="codeph">dc=Test</code> that you created in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.
<pre dir="ltr">
$ provider="ldap://$ldaphost:$ldapport/dc=Test"
</pre></li>
<li>
<p>Compile the example <code class="codeph">Client</code> and <code class="codeph">Server</code> classes by typing the following command:</p>
<pre dir="ltr">
$ javac -d . -classpath $classp Server.java Client.java
</pre></li>
</ol>
</div>
<!-- class="section" -->
<div class="section" id="GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__STARTTHESERVER-C46E6398">
<p class="subhead3">Starting the Server</p>
<p>The command you use to start the <code class="codeph">Server</code> varies according to which external directory you are using. You can start one or more of the following instances of <code class="codeph">Server</code> with different transports and external registries before starting the <code class="codeph">Client</code>.</p>
<p>The combinations of transports and external directories are demonstrated here:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">RMI connector over JRMP, without an external directory:</span> Start the <code class="codeph">Server</code> by typing the following command.</p>
<pre dir="ltr">
$ java -classpath . -Ddebug=true \
  -Dagent.name=example-server-a \
  -Durl="service:jmx:rmi://" \
  -Djava.naming.provider.url="$provider" \
  -Djava.naming.security.principal="$principal" \
  -Djava.naming.security.credentials="$credentials" \
  jndi.Server &amp;
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>The
<p><code class="codeph">debug</code>, is set to true to provide more complete screen output when the <code class="codeph">Server</code> runs.</p>
</li>
<li>
<p>The name of the agent to be created is <code class="codeph">example-server-a</code>.</p>
</li>
<li>
<p>The URL, <code class="codeph">provider</code>, that points to the domain component suffix in which the agent will be registered, is given.</p>
</li>
<li>
<p>The common name attribute, <code class="codeph">principal</code>, and password, <code class="codeph">credentials</code>, are given to gain access to the LDAP server.</p>
</li>
<li>
<p>The service URL specifies that the chosen connector is an RMI connector, running over the RMI default JRMP transport.</p>
</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see confirmation of the creation of the RMI connector, and the registration of its URL in the JNDI/LDAP lookup service.</p>
</li>
<li>
<p><span class="bold">RMI connector over JRMP, that uses an RMI registry as an external directory:</span> Start the <code class="codeph">Server</code> by typing the following command.</p>
<pre dir="ltr">
$ java -classpath . -Ddebug=true \ 
  -Dagent.name=example-server-b \ 
  -Durl="service:jmx:rmi:///jndi/${jndirmi}/server" \ 
  -Djava.naming.provider.url="$provider" \ 
  -Djava.naming.security.principal="$principal" \ 
  -Djava.naming.security.credentials="$credentials" \ 
  jndi.Server &amp;
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>
<p>The name of the agent that is created is <code class="codeph">example-server-b</code>.</p>
</li>
<li>
<p>The URL, <code class="codeph">provider</code>, that points to the domain component suffix in which the agent will be registered, is given.</p>
</li>
<li>
<p>The common name attribute, <code class="codeph">principal</code>, and password, <code class="codeph">credentials</code>, are given to gain access to the LDAP server.</p>
</li>
<li>
<p>The service URL specifies the selected connector as RMI over JRMP, and the external directory in which the RMI connector stub, server, is stored is the RMI registry you identified as <code class="codeph">jndirmi</code> in <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.</p>
</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see the confirmation of the creation of the RMI connector and the registration of its URL in the JNDI/LDAP lookup service.</p>
</li>
<li>
<p><span class="bold">RMI connector over JRMP, that uses LDAP as the external directory:</span> Start the <code class="codeph">Server</code> by typing the following command.</p>
<pre dir="ltr">
$ java -classpath . -Ddebug=true \ 
  -Dagent.name=example-server-c \ 
  -Durl="service:jmx:rmi:///jndi/${jndildap}/cn=x,dc=Test" \ 
  -Djava.naming.provider.url="$provider" \ 
  -Djava.naming.security.principal="$principal" \ 
  -Djava.naming.security.credentials="$credentials" \ 
  jndi.Server &amp;
</pre>
<p>In this command:</p>
<ul style="list-style-type: disc;">
<li>
<p>The name of the agent, created is <code class="codeph">example-server-c</code>.</p>
</li>
<li>
<p>The URL, <code class="codeph">provider</code>, that points to the domain component suffix in which the agent will be registered, is given.</p>
</li>
<li>
<p>The common name attribute, <code class="codeph">principal</code>, and password, <code class="codeph">credentials</code>, are given to gain access to the LDAP server.</p>
</li>
<li>
<p>The service URL specifies the chosen connector as RMI over JRMP, and the external directory in which the RMI connector stub, server, is stored is the RMI registry that you identified as <code class="codeph">jndildap</code> in the <a href="lookup-services.htm#GUID-5E7A4F97-EA73-42AD-A539-D63327192B30">Initial Configuration</a>.</p>
</li>
</ul>
<p>When the <code class="codeph">Server</code> is launched, you will see the confirmation of the creation of the RMI connector and the registration of its URL in the JNDI/LDAP lookup service under the agent name <code class="codeph">example-server-c</code>.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-CDB5A299-C863-42FC-A669-D77F2483ABD3__STARTTHECLIENT-C46E678B">
<p class="subhead3">Starting the Client</p>
<p>After you start the Server that is using the transport and external directory of your choice, start the Client by typing the following command:</p>
<pre dir="ltr">
$ java -classpath . -Ddebug=true \ 
  -Djava.naming.provider.url="$provider" \ 
  -Djava.naming.security.principal="$principal" \ 
  -Djava.naming.security.credentials="$credentials" \ 
  jndi.Client
</pre>
<p>You will see the output that confirms the detection of the agents that are created by the <code class="codeph">Server</code> and registered in the lookup service. You will also see the identification and confirmation of the connection made to the agents.</p>
<p>To look up a specific agent, type the following command:</p>
<pre dir="ltr">
$ java -classpath . -Ddebug=true \ 
  -Djava.naming.provider.url="$provider" \ 
  -Djava.naming.security.principal="$principal" \ 
  -Djava.naming.security.credentials="$credentials" \ 
  -Dagent.name=<span class="variable">agentName</span> \ 
  jndi.Client 
</pre>
<p>In the command shown above, <code class="codeph"><span class="variable">agentName</span></code> is the name of the agent you want to look up. You can also specify a partial agent name by using *; for example, <code class="codeph">x*</code> for all agent names beginning with the letter x.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment263">
<tr>
<td class="cellalignment270">
<table class="cellalignment268">
<tr>
<td class="cellalignment267"><a href="jmx-connectors.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment267"><a href="security.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment272">
<table class="cellalignment266">
<tr>
<td class="cellalignment267"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment267"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment267"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
