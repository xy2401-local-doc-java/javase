<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Security</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-03-13T13:07:03Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Management Extensions Guide" />
<meta name="dcterms.identifier" content="E91147-01" />
<meta name="dcterms.isVersionOf" content="JSJMX" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="lookup-services.htm" title="Previous" type="text/html" />
<link rel="Next" href="java-management-extensions-examples.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSJMX.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-2945088A-F715-4BC9-B8AD-6C56BC3BDF55"></a> <span id="PAGE" style="display:none;">18/95</span> <!-- End Header -->
<h1 id="JSJMX-GUID-2945088A-F715-4BC9-B8AD-6C56BC3BDF55" class="sect1"><span class="enumeration_chapter">13</span> Security</h1>
<div>
<p>This chapter gives examples of how to set up the JMX technology security features, as described in the following sections:</p>
<ul style="list-style-type: disc;">
<li><a href="security.htm#GUID-EFC2A37D-307F-4001-9D2F-6F0A2A3BC51D">Simple Security</a> presents examples of connectors that implement straightforward security that is based on password authentication and file access control.</li>
<li><a href="security.htm#GUID-6D30665A-E576-4A9E-943C-2DA022F7A62D">Subject Delegation</a> presents examples of connectors that use the subject delegation model to perform operations on a given authenticated connection on behalf of several different identities.</li>
<li><a href="security.htm#GUID-2A161539-E347-4CF1-84B9-482BC0C621C7">Fine-Grained Security</a> presents examples of connectors that implement more sophisticated security mechanisms, in which permission to perform individual operations is controlled.</li>
</ul>
<p><span class="bold">Caution:</span></p>
<ul style="list-style-type: disc;">
<li>Applications should prompt the user to enter passwords rather than expecting the user to provide them at the command line.</li>
<li>Use secure authentication mechanisms in production systems. In particular, use both SSL client certificates to authenticate the client host, and password authentication for user management. See <span class="italic">Using SSL</span> and <span class="italic">Using LDAP Authentication</span> in the <span><cite>Java Platform, Standard Edition Management Developer&rsquo;s Guide</cite></span>.</li>
</ul>
</div>
<div class="sect2"><a id="GUID-EFC2A37D-307F-4001-9D2F-6F0A2A3BC51D"></a>
<h2 id="JSJMX-GUID-EFC2A37D-307F-4001-9D2F-6F0A2A3BC51D" class="sect2">Simple Security</h2>
<div>
<p>The simplest type of security you can use with the JMX technology is based upon encryption, user name and password authentication, and file access control.</p>
<div class="section">
<p class="subhead2">Analyzing the RMI Connectors with Simple Security Example Classes</p>
<ol>
<li>
<p>Copy the source code from <a href="simple-security-example.htm">Simple Security</a> to the following <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Security/simple</code> subdirectories and files:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">/server/Server.java</code></li>
<li><code class="codeph">/config/access.properties</code></li>
<li><code class="codeph">/config/keystore</code></li>
<li><code class="codeph">/config/password.properties</code></li>
<li><code class="codeph">/config/truststore</code></li>
<li><code class="codeph">/mbeans/SimpleStandardMBean.java</code></li>
<li><code class="codeph">/mbeans/SimpleStandard.java</code></li>
<li><code class="codeph">/client/Client.java</code></li>
<li><code class="codeph">/client/ClientListener.java</code></li>
</ul>
</li>
<li>
<p>Open the <code class="codeph">*.java</code> and <code class="codeph">*.properties</code> files, in your IDE or text editor.</p>
</li>
</ol>
<p>The following sections analyze these files and explain how they perform the security operations described above.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-BB34C33D-4F06-48CF-A239-8489A55CCF84"></a>
<h3 id="JSJMX-GUID-BB34C33D-4F06-48CF-A239-8489A55CCF84" class="sect3">Server.java in the Simple Security Example</h3>
<div>
<p>The <code class="codeph">Server.java</code> class is shown in CODE&nbsp;EXAMPLE&nbsp;5-1.</p>
<div class="section" id="GUID-BB34C33D-4F06-48CF-A239-8489A55CCF84__CODEEXAMPLE5-1RMICONNECTOREXAMPLESI-CB039FB8">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;5-1 RMI Connector Example (Simple Security) Class Server.java</p>
<pre dir="ltr">
public class Server { 
 
  public static void main(String[] args) { 
  try { 
       MBeanServer mbs = MBeanServerFactory.createMBeanServer(); 
 
       HashMap env = new HashMap(); 
 
       SslRMIClientSocketFactory csf =  
                  new SslRMIClientSocketFactory(); 
       SslRMIServerSocketFactory ssf =  
                  new SslRMIServerSocketFactory(); 
       env.put(RMIConnectorServer. 
                  RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE,csf); 
       env.put(RMIConnectorServer. 
                  RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE,ssf); 
 
       env.put("jmx.remote.x.password.file", 
                 "config" + File.separator + "password.properties"); 
       env.put("jmx.remote.x.access.file", 
                 "config" + File.separator + "access.properties"); 
 
       JMXServiceURL url = new JMXServiceURL( 
        "service:jmx:rmi:///jndi/rmi://localhost:9999/server"); 
         JMXConnectorServer cs = 
            JMXConnectorServerFactory.newJMXConnectorServer(url,  
                                                            env,  
                                                            mbs); 
       cs.start(); 
     } catch (Exception e) { 
       e.printStackTrace(); 
     } 
  } 
}
</pre>
<p>The <code class="codeph">Server</code> class shown in CODE&nbsp;EXAMPLE&nbsp;5-1 creates an MBean server <code class="codeph">mbs</code>, and populates an environment map <code class="codeph">env</code> with a secure RMI client socket factory <code class="codeph">csf</code>, a secure RMI server socket factory <code class="codeph">ssf</code>, and the properties files <code class="codeph">password.properties</code> and <code class="codeph">access.properties</code>.</p>
<p>The properties file <code class="codeph">password.properties</code> contains a username and password and is accessed using the JMX Remote API interface <code class="codeph">JMXAuthenticator</code>. Using the property <code class="codeph">jmx.remote.x.</code><code class="codeph">password.file</code> is the same as creating a password-based <code class="codeph">JMXAuthenticator</code> and passing it into the environment map through the <code class="codeph">jmx.remote.authenticator</code> property.</p>
<p>The properties file <code class="codeph">access.properties</code> contains a username and a level of access permission that can be either <code class="codeph">readwrite</code> or <code class="codeph">readonly</code>. This represents the level of access this user can have to MBean server operations. This file-based access control is implemented using the JMX technology interface <code class="codeph">MBeanServerForwarder</code>, which wraps the real MBean server inside an access controller MBean server. The access controller MBean server only forwards requests to the real MBean server after performing the appropriate checks.</p>
<p><code class="codeph">Server</code> creates a JMX service URL, named <code class="codeph">url</code>, for an RMI connector that will operate over the default JRMP transport, and register an RMI connector stub in an RMI registry on port <code class="codeph">9999</code> of the local host.</p>
<p>The MBean server <code class="codeph">mbs</code>, the environment map env and the service URL <code class="codeph">url</code> are all passed to <code class="codeph">JMXConnectorServer</code> to create a new, secure JMX connector server named <code class="codeph">cs</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-6D10FB9B-1F8F-4727-93D4-09E0AE2B8FEB"></a>
<h3 id="JSJMX-GUID-6D10FB9B-1F8F-4727-93D4-09E0AE2B8FEB" class="sect3">SimpleStandardMBean.java in the Simple Security Example</h3>
<div>
<p>The <code class="codeph">SimpleStandardMBean</code> class defines the same straightforward MBean interface used in <a href="jmx-connectors.htm#GUID-4F4C3AAF-B3A5-4165-A30F-963A88DF01CA">SimpleStandardMBean.java in the MBean Example</a>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-F1E9EB84-C874-403A-A88B-A8D4CBBF985F"></a>
<h3 id="JSJMX-GUID-F1E9EB84-C874-403A-A88B-A8D4CBBF985F" class="sect3">SimpleStandard.java in the Simple Security Example</h3>
<div>
<p>The <code class="codeph">SimpleStandard</code> class defines the same straightforward MBean used in <a href="jmx-connectors.htm#GUID-3DF0EA75-3F2E-4218-8A6D-08DC4D3BC4CC">SimpleStandard.java in the MBean Example</a>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-7137FE50-4559-4758-8DE2-69A8F2E473D9"></a>
<h3 id="JSJMX-GUID-7137FE50-4559-4758-8DE2-69A8F2E473D9" class="sect3">ClientListener.java in the Simple Security Example</h3>
<div>
<p>The <code class="codeph">ClientListener</code> class defines the same straightforward notification listener used in <a href="jmx-connectors.htm#GUID-871B0138-49A6-462D-8CC0-981C595822D0">ClientListener.java in the MBean Example</a>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-C95094F9-EF92-4896-9AC3-CB739FF6881E"></a>
<h3 id="JSJMX-GUID-C95094F9-EF92-4896-9AC3-CB739FF6881E" class="sect3">Client.java in the Simple Security Example</h3>
<div>
<p>The <code class="codeph">Client.java</code> class is shown in CODE&nbsp;EXAMPLE&nbsp;5-2.</p>
<div class="section" id="GUID-C95094F9-EF92-4896-9AC3-CB739FF6881E__CODEEXAMPLE5-2RMICONNECTOREXAMPLESI-CB055F65">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;5-2 RMI Connector Example (Simple Security) Class Client.java</p>
<pre dir="ltr">
public class Client { 
 
  public static void main(String[] args) { 
  try { 
      HashMap env = new HashMap(); 
 
      String[] credentials = new String[] { "username" , "password" }; 
      env.put("jmx.remote.credentials", credentials); 
      JMXServiceURL url = new JMXServiceURL( 
         "service:jmx:rmi:///jndi/rmi://localhost:9999/server");       
      JMXConnector jmxc = JMXConnectorFactory.connect(url, env); 
      MBeanServerConnection mbsc = jmxc.getMBeanServerConnection(); 
      String domains[] = mbsc.getDomains(); 
      for (int i = 0; i &lt; domains.length; i++) { 
         System.out.println("Domain[" + i + "] = " + domains[i]); 
      } 
       
      ObjectName mbeanName =  
          new ObjectName("MBeans:type=SimpleStandard"); 
      mbsc.createMBean("SimpleStandard", mbeanName, null, null); 
      // Perform MBean operations 
      [...] 
      
      mbsc.removeNotificationListener(mbeanName, listener); 
      mbsc.unregisterMBean(mbeanName); 
      jmxc.close(); 
    }  catch (Exception e) { 
      e.printStackTrace(); 
    } 
  } 
} 
</pre>
<p>The <code class="codeph">Client</code> class shown in CODE&nbsp;EXAMPLE&nbsp;5-2 populates an environment map <code class="codeph">env</code> with a set of credentials, namely the <code class="codeph">username</code> and <code class="codeph">password</code> expected by the <code class="codeph">Server</code>. These credentials are then given to an instance of <code class="codeph">JMXConnector</code> named <code class="codeph">jmxc</code> when the service URL of the connector stub and the environment map are passed to <code class="codeph">JMXConnectorFactory.connect()</code>. Through <code class="codeph">jmxc</code>, the <code class="codeph">Client</code> connects to the MBean server started by <code class="codeph">Server</code>, and performs MBean operations.</p>
<p>When the connection is established, the credentials supplied in the environment map <code class="codeph">env</code> are sent to the server. The server then calls the <code class="codeph">authenticate()</code> method of the <code class="codeph">JMXAuthenticator</code> interface, passing the client credentials as parameters. The <code class="codeph">authenticate()</code> method authenticates the client and returns a subject that contains the set of principals upon which the access control checks will be performed.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-F86AE7C1-D6C1-4095-8E71-4EECFB46B760"></a>
<h3 id="JSJMX-GUID-F86AE7C1-D6C1-4095-8E71-4EECFB46B760" class="sect3">Running the RMI Connector Example With Simple Security</h3>
<div>
<p>To run the RMI connector example with simple security, perform the following steps:</p>
<ol>
<li>
<p>Run the RMI connector example:</p>
<pre dir="ltr">
$ javac 
      mbeans/SimpleStandard.java \ 
      mbeans/SimpleStandardMBean.java \ 
      server/Server.java \ 
      client/Client.java \ 
      client/ClientListener.java 
</pre></li>
<li>Start an RMI registry on port <span class="bold">9999</span> of the local host.
<pre dir="ltr">
$ export CLASSPATH=server ; rmiregistry 9999 &amp; 
</pre></li>
<li>Start the <code class="codeph">Server</code>.
<pre dir="ltr">
$ java -classpath server:mbeans \ 
     -Djavax.net.ssl.keyStore=config/keystore \ 
     -Djavax.net.ssl.keyStorePassword=password \ 
     Server &amp; 
</pre>
<p>You will see confirmation of the creation of the MBean server and of the RMI connector.</p>
</li>
<li>Start the <code class="codeph">Client</code>.
<pre dir="ltr">
$java -classpath client:server:mbeans \ 
     -Djavax.net.ssl.trustStore=config/truststore \ 
     -Djavax.net.ssl.trustStorePassword=trustword \ 
     Client 
</pre>
<p>You will see confirmation of the creation of the connector client, the various MBean operations followed by the closure of the connection.</p>
</li>
</ol>
<p>As you can see, all the above appears to proceed in exactly the same manner as the basic RMI connector example described in <a href="jmx-connectors.htm#GUID-A4CA2A4D-49EE-4DA8-871F-DD633C28DAD9">JMX Connectors</a>. However, if you were to open <code class="codeph">password.properties</code> and change the password, you would see a <code class="codeph">java.lang.SecurityException</code> when you launched the <code class="codeph">Client</code>, and the connection would fail.</p>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-6D30665A-E576-4A9E-943C-2DA022F7A62D"></a>
<h2 id="JSJMX-GUID-6D30665A-E576-4A9E-943C-2DA022F7A62D" class="sect2">Subject Delegation</h2>
<div>
<p>If your implementation requires the client end of the connection to perform different operations on behalf of multiple users or applications, and if you use the security mechanisms demonstrated in <a href="security.htm#GUID-EFC2A37D-307F-4001-9D2F-6F0A2A3BC51D">Simple Security</a> , then each different user would requires one secure connection for every operation it performs. If you expect your connector clients to interact with numerous users, then you can reduce the load on your system by implementing <span class="italic">subject delegation</span>. Subject delegation establishes a single secure connection for a user. This connection can be used to perform related operations on behalf of any number of users. The connection itself is made by an <span class="italic">authenticated</span> user. If the authenticated user granted a <code class="codeph">SubjectDelegationPermission</code> that allows it to act on behalf of other users, then operations can be performed over the connection on behalf of that user.</p>
<div class="section">
<p class="subhead2">Analyzing the Secure RMI Connectors With Subject Delegation Example Classes</p>
<ol>
<li>
<p>Copy the source code from <a href="security-subject-delegation-example.htm">Security with Subject Delegation</a> to the following <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Security/subject_delegation</code> subdirectories and files:</p>
<ul style="list-style-type: disc;">
<li><code class="codeph">/server/Server.java</code>:</li>
<li><code class="codeph">/config/access.properties</code></li>
<li><code class="codeph">/config/java.policy</code></li>
<li><code class="codeph">/config/password.properties</code></li>
<li><code class="codeph">/mbeans/SimpleStandardMBean.java</code></li>
<li><code class="codeph">/mbeans/SimpleStandard.java</code></li>
<li><code class="codeph">/client/Client.java</code></li>
<li><code class="codeph">/client/ClientListener.java</code></li>
</ul>
</li>
<li>
<p>Open all the <code class="codeph">*.java</code> and <code class="codeph">*.properties</code> files in your IDE or text editor.</p>
</li>
</ol>
<p>The following sections contain the analysis of these files.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-AC42678F-30FF-4211-A547-2E46C13B38D0"></a>
<h3 id="JSJMX-GUID-AC42678F-30FF-4211-A547-2E46C13B38D0" class="sect3">Server.java in the Subject Delegation Example</h3>
<div>
<p>The <code class="codeph">Server.java</code> class is shown in CODE&nbsp;EXAMPLE&nbsp;5-3.</p>
<div class="section" id="GUID-AC42678F-30FF-4211-A547-2E46C13B38D0__CODEEXAMPLE5-2SECURERMICONNECTORSUB-CB0F3E34">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;5-3 Secure RMI Connector (Subject Delegation) Example Class Server.java</p>
<pre dir="ltr">
public class Server { 
 
   public static void main(String[] args) { 
     try { 
          MBeanServer mbs = MBeanServerFactory.createMBeanServer(); 
          HashMap env = new HashMap(); 
          env.put("jmx.remote.x.password.file", 
                  "config" + File.separator + "password.properties"); 
          env.put("jmx.remote.x.access.file", 
                  "config" + File.separator + "access.properties"); 
 
          JMXServiceURL url = new JMXServiceURL( 
             "service:jmx:rmi:///jndi/rmi://localhost:9999/server"); 
          JMXConnectorServer cs = 
              JMXConnectorServerFactory.newJMXConnectorServer(url, env, mbs); 
          cs.start(); 
     } catch (Exception e) { 
          e.printStackTrace(); 
     } 
   } 
} 
</pre>
<p>CODE&nbsp;EXAMPLE&nbsp;5-3 begins with the creation of an MBean server <code class="codeph">mbs</code>, and the population of an environment map <code class="codeph">env</code> with a password file and an access file, called <code class="codeph">password.properties</code> and <code class="codeph">access.properties</code> respectively:</p>
<ul style="list-style-type: disc;">
<li>The password file contains a username and password combination that is used to authenticate users that try to make connections.</li>
<li>The access file contains a user name and access level combination that is used to authorize access to the MBeans in the MBean server. The access level is either readwrite or readonly.</li>
</ul>
<p>The <code class="codeph">Server</code> then creates a connector server named <code class="codeph">cs</code>, and starts it in exactly the same way as in the previous RMI connector examples.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-70D3FD66-4A10-4640-9A78-722C046CD9EB"></a>
<h3 id="JSJMX-GUID-70D3FD66-4A10-4640-9A78-722C046CD9EB" class="sect3">java.policy in the Subject Delegation Example</h3>
<div>
<p>The <code class="codeph">java.policy</code> file grants to <code class="codeph">username</code> a <code class="codeph">SubjectDelegationPermission</code> so it can perform operations on behalf of the user <code class="codeph">delegate</code>, an instance of <code class="codeph">JMXPrincipal</code> created by the <code class="codeph">Client</code> class. The <code class="codeph">java.policy</code> file is required when launching the <code class="codeph">Server</code> class.</p>
</div>
</div>
<div class="sect3"><a id="GUID-BBEDE9C9-5C81-4845-A307-2B402DE2E122"></a>
<h3 id="JSJMX-GUID-BBEDE9C9-5C81-4845-A307-2B402DE2E122" class="sect3">SimpleStandardMBean.java in the Subject Delegation Example</h3>
<div>
<p>The <code class="codeph">SimpleStandardMBean</code> class defines the same straightforward MBean interface used in previous examples.</p>
</div>
</div>
<div class="sect3"><a id="GUID-20646635-48E2-4EE5-9061-9D68057E31CE"></a>
<h3 id="JSJMX-GUID-20646635-48E2-4EE5-9061-9D68057E31CE" class="sect3">SimpleStandard.java in the Subject Delegation Example</h3>
<div>
<p>The <code class="codeph">SimpleStandard</code> class defines the same, straightforward MBean used in previous examples.</p>
</div>
</div>
<div class="sect3"><a id="GUID-7F9DDC38-0EFE-4A45-B38F-72ABAF50A486"></a>
<h3 id="JSJMX-GUID-7F9DDC38-0EFE-4A45-B38F-72ABAF50A486" class="sect3">ClientListener.java in the Subject Delegation Example</h3>
<div>
<p>The <code class="codeph">ClientListener</code> class defines the same, straightforward notification listener used in previous examples.</p>
</div>
</div>
<div class="sect3"><a id="GUID-393CA4EB-3C30-4812-94B4-8D421B3115AF"></a>
<h3 id="JSJMX-GUID-393CA4EB-3C30-4812-94B4-8D421B3115AF" class="sect3">Client.java in the Subject Delegation Example</h3>
<div>
<p>The <code class="codeph">Client.java</code> class is shown in CODE&nbsp;EXAMPLE&nbsp;5-4.</p>
<div class="section">
<p class="subhead3">CODE&nbsp;EXAMPLE&nbsp;5-4 Secure RMI Connector (Subject Delegation) Example Class Client.java</p>
<pre dir="ltr">
public class Client { 
 
  public static void main(String[] args) { 
    try { 
         HashMap env = new HashMap(); 
         String[] credentials = new String[] { "username" , "password" }; 
         env.put("jmx.remote.credentials", credentials); 
         JMXServiceURL url = new JMXServiceURL( 
            "service:jmx:rmi:///jndi/rmi://localhost:9999/server"); 
         JMXConnector jmxc = JMXConnectorFactory.connect(url, env); 
         Subject delegationSubject = 
            new Subject(true, 
                Collections.singleton(new JMXPrincipal("delegate")), 
                Collections.EMPTY_SET, 
                Collections.EMPTY_SET); 
 
         MBeanServerConnection mbsc = 
            jmxc.getMBeanServerConnection(delegationSubject); 
         String domains[] = mbsc.getDomains(); 
         ObjectName mbeanName = 
            new ObjectName("MBeans:type=SimpleStandard"); 
         mbsc.createMBean("SimpleStandard", mbeanName, null, null); 
         // Perform MBean operations 
         // 
 
[...] 
         mbsc.removeNotificationListener(mbeanName, listener); 
         mbsc.unregisterMBean(mbeanName); 
         jmxc.close(); 
     } catch (Exception e) { 
         e.printStackTrace(); 
     } 
  } 
} 
 
</pre>
<p>CODE&nbsp;EXAMPLE&nbsp;5-4 begins with the creation of an environment map <code class="codeph">env</code> that is populated with a user name <code class="codeph">username</code> and a password <code class="codeph">password</code>. These strings match the user name and password stored in the <code class="codeph">password.properties</code> file that is held by the <code class="codeph">Server</code> to authenticate users accessing the connector server.</p>
<p>A JMX technology connector client <code class="codeph">jmxc</code> is created in the same way as in the previous RMI connector examples, with the user name and password passed into the environment map <code class="codeph">env</code>.</p>
<p>The <code class="codeph">Client</code> then creates an instance of <code class="codeph">Subject</code>, called <code class="codeph">delegationSubject</code>, with a <code class="codeph">Principal</code> that is an instance of <code class="codeph">JMXPrincipal</code>, named <code class="codeph">delegate</code>.</p>
<p>An MBean server connection, named <code class="codeph">mbsc</code>, is created by calling the <code class="codeph">getMBeanServerConnection()</code> method of <code class="codeph">JMXConnector</code>, with <code class="codeph">delegationSubject</code> passed in as a parameter. This MBean server connection therefore allows operations to be performed on the remote MBean server on behalf of the principals stored in the <code class="codeph">delegationSubject</code>, which in this example is the <code class="codeph">JMXPrincipal</code> named <code class="codeph">delegate</code>.</p>
<p>The example continues by creating and registering the <code class="codeph">SimpleStandard</code> MBean in the MBean server, and performing operations on it, in exactly the same way as in the previous examples.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect3"><a id="GUID-43E31352-4E57-401E-A785-79698BFC50CF"></a>
<h3 id="JSJMX-GUID-43E31352-4E57-401E-A785-79698BFC50CF" class="sect3">Running the Secure RMI Connector Example With Subject Delegation</h3>
<div>
<p>To run the secure RMI connector example with subject delegation, perform the following steps:</p>
<ol>
<li>Run the secure RMI connector example:
<pre dir="ltr">
$ javac  mbeans/SimpleStandard.java \ 
  mbeans/SimpleStandardMBean.java \ 
  server/Server.java \ 
  client/Client.java \ 
  client/ClientListener.java 
 
</pre></li>
<li>Start an RMI registry on port <span class="bold">9999</span> of the local host.
<pre dir="ltr">
$ export CLASSPATH=server ; rmiregistry 9999 &amp;
</pre></li>
<li>Start the <code class="codeph">Server</code>.
<pre dir="ltr">
$ java -classpath server:mbeans \ 
  -Djava.security.policy=config/java.policy Server &amp; 
 
</pre>
<p>You will see confirmation of the creation of the MBean server, the initialization of the environment map, the creation of the RMI connector, and the registration of the connector in the MBean server.</p>
</li>
<li>Start the <code class="codeph">Client</code>.
<pre dir="ltr">
$java -classpath client:server:mbeans Client
</pre>
<p>You will see confirmation of the creation of the connector client, the creation of the delegation subject, the connection to the MBean server and the various MBean operations followed by the closure of the connection.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-2A161539-E347-4CF1-84B9-482BC0C621C7"></a>
<h2 id="JSJMX-GUID-2A161539-E347-4CF1-84B9-482BC0C621C7" class="sect2">Fine-Grained Security</h2>
<div>
<p>You can implement a more fine-grained level of security in your connectors by managing user access through the Java Authentication and Authorization Service (JAAS) and Java platform Standard Edition (Java SE) Security Architecture. JAAS and Java SE security is based on the use of security managers and policy files to allocate different levels of access to different users. You can specify which users are allowed to perform which operations.</p>
<p>The two examples in this section are very similar to those shown in <a href="security.htm#GUID-EFC2A37D-307F-4001-9D2F-6F0A2A3BC51D">Simple Security</a>, with the difference that policy-based access control replaces the simple, file-based access control.</p>
<div class="section">
<p class="subhead2">Analyzing the Secure RMI Connectors With Fine-Grained Security Example Classes</p>
<ol>
<li>
<div class="p">Copy the source code from <a href="fine-grained-security-example.htm">Fine-Grained Security</a> to the <code class="codeph"><span class="variable">work_dir</span>/jmx_examples/Security/fine_grained</code> subdirectories and files:
<ul style="list-style-type: disc;">
<li><code class="codeph">/server/Server.java</code></li>
<li><code class="codeph">/config/java.policy</code></li>
<li><code class="codeph">/config/keystore</code></li>
<li><code class="codeph">/config/password.properties</code></li>
<li><code class="codeph">/config/truststore</code></li>
<li><code class="codeph">/mbeans/SimpleStandard.java</code></li>
<li><code class="codeph">/mbeans/SimpleStandardMBean.java</code></li>
<li><code class="codeph">/client/ClientListener.java</code></li>
<li><code class="codeph">/client/Client.java</code></li>
</ul>
</div>
</li>
<li>Open all of the <code class="codeph">*.java</code> and <code class="codeph">*.properties</code> files in your IDE or text editor.</li>
</ol>
<p>The following sections contain the analysis of these files.</p>
</div>
<!-- class="section" --></div>
<div class="sect3"><a id="GUID-2B52C953-4851-4F8A-A63B-24279CB76ED0"></a>
<h3 id="JSJMX-GUID-2B52C953-4851-4F8A-A63B-24279CB76ED0" class="sect3">Server.java in the Fine-Grained Security Example</h3>
<div>
<p>The <code class="codeph">Server.java</code> class in this example is very similar to the one used in <a href="security.htm#GUID-AC42678F-30FF-4211-A547-2E46C13B38D0">Server.java in the Subject Delegation Example</a>. The only difference is that there is no <code class="codeph">access.properties</code> file to map into the environment map in the fine-grained example. Otherwise, the two classes are identical.</p>
</div>
</div>
<div class="sect3"><a id="GUID-D70D2360-DCA8-41C7-84A7-D2E3896495DF"></a>
<h3 id="JSJMX-GUID-D70D2360-DCA8-41C7-84A7-D2E3896495DF" class="sect3">java.policy in the Fine-Grained Security Example</h3>
<div>
<p>The <code class="codeph">java.policy</code> file grants the following permissions:</p>
<ul style="list-style-type: disc;">
<li>All permissions to the <code class="codeph">server</code> code base, so that the connector server can create the connectors, and then perform the operations requested by remote user calls</li>
<li><code class="codeph">MBeanTrustPermission</code> to the <code class="codeph">mbeans</code> code base, allowing trusted MBeans to register in the MBean server</li>
<li>Permission to perform the various MBean and MBean server operations for the user represented by a <code class="codeph">JMXPrincipal</code> named <code class="codeph">username.</code></li>
</ul>
</div>
</div>
<div class="sect3"><a id="GUID-8A599F3A-D505-4CA6-8FD5-ADA43EDB97A1"></a>
<h3 id="JSJMX-GUID-8A599F3A-D505-4CA6-8FD5-ADA43EDB97A1" class="sect3">SimpleStandardMBean.java in the Fine-Grained Security Example</h3>
<div>
<p>The <code class="codeph">SimpleStandardMBean</code> class defines the same straightforward MBean interface used in previous examples.</p>
</div>
</div>
<div class="sect3"><a id="GUID-EB298AF7-E702-4DFB-BCB3-3F60AA706192"></a>
<h3 id="JSJMX-GUID-EB298AF7-E702-4DFB-BCB3-3F60AA706192" class="sect3">SimpleStandard.java in the Fine-Grained Security Example</h3>
<div>
<p>The <code class="codeph">SimpleStandard</code> class defines the same straightforward MBean used in previous examples.</p>
</div>
</div>
<div class="sect3"><a id="GUID-8DDA6F9D-D791-46D6-B9CC-EAC4ECA4AA69"></a>
<h3 id="JSJMX-GUID-8DDA6F9D-D791-46D6-B9CC-EAC4ECA4AA69" class="sect3">ClientListener.java in the Fine-Grained Security Example</h3>
<div>
<p>The <code class="codeph">ClientListener</code> class defines the same straightforward notification listener used in previous examples.</p>
</div>
</div>
<div class="sect3"><a id="GUID-B70B9869-AA3F-42E7-BF20-5F60419508B2"></a>
<h3 id="JSJMX-GUID-B70B9869-AA3F-42E7-BF20-5F60419508B2" class="sect3">Client.java in the Fine-Grained Security Example</h3>
<div>
<p>The <code class="codeph">Client.java</code> class is exactly the same as the one used in <a href="security.htm#GUID-393CA4EB-3C30-4812-94B4-8D421B3115AF">Client.java in the Subject Delegation Example</a> .</p>
</div>
</div>
<div class="sect3"><a id="GUID-EDF837EA-A993-4000-9700-1700DD516455"></a>
<h3 id="JSJMX-GUID-EDF837EA-A993-4000-9700-1700DD516455" class="sect3">Running the RMI Connector Example With Fine-Grained Security</h3>
<div>
<p>To run the RMI connector example with fine-grained security, perform the following steps:</p>
<ol>
<li>Run the RMI connector example:
<pre dir="ltr">
$ javac 
      mbeans/SimpleStandard.java \ 
      mbeans/SimpleStandardMBean.java \ 
      server/Server.java \ 
      client/Client.java \ 
      client/ClientListener.java 
 
</pre></li>
<li>Start an RMI registry on port <span class="bold">9999</span> of the local host.
<pre dir="ltr">
$ export CLASSPATH=server ; rmiregistry 9999 &amp;
</pre></li>
<li>Start the <code class="codeph">Server</code>.
<pre dir="ltr">
$ java -classpath server:mbeans \ 
     -Djavax.net.ssl.keyStore=config/keystore \ 
     -Djavax.net.ssl.keyStorePassword=password \ 
     -Djava.security.manager \ 
     -Djava.security.policy=config/java.policy \ 
     Server &amp; 
 
</pre>
<p>You will see confirmation of the initialization of the environment map, the creation of the MBean server and of the RMI connector.</p>
</li>
<li>Start the <code class="codeph">Client</code>.
<pre dir="ltr">
 
$ java -classpath client:server:mbeans \ 
     -Djavax.net.ssl.trustStore=config/truststore \ 
     -Djavax.net.ssl.trustStorePassword=trustword \ 
     Client 
 
</pre>
<p>You will see confirmation of the creation of the connector client, the connection to the RMI server and the various MBean operations followed by the closure of the connection.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment263">
<tr>
<td class="cellalignment270">
<table class="cellalignment268">
<tr>
<td class="cellalignment267"><a href="lookup-services.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment267"><a href="java-management-extensions-examples.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment272">
<table class="cellalignment266">
<tr>
<td class="cellalignment267"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment267"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment267"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
