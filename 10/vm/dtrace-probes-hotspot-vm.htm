<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>DTrace Probes in HotSpot VM</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This chapter describes DTrace support in Oracle&rsquo;s HotSpot VM. The hotspot and hotspot_jni providers let you access probes that you can use to monitor the Java application that is running together with the internal state and activities of the Java Virtual Machine (JVM). All of the probes are USDT probes and you can access them by using the process-id of the JVM process." />
<meta name="dcterms.created" content="2018-03-13T05:24:14Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Virtual Machine Guide" />
<meta name="dcterms.identifier" content="E91108-01" />
<meta name="dcterms.isVersionOf" content="JSJVM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="native-memory-tracking.htm" title="Previous" type="text/html" />
<link rel="Next" href="error-reporting.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSJVM.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-78348097-CD1C-4D1D-BE34-CB24EEC982C4"></a> <span id="PAGE" style="display:none;">15/17</span> <!-- End Header -->
<h1 id="JSJVM-GUID-78348097-CD1C-4D1D-BE34-CB24EEC982C4" class="sect1"><span class="enumeration_chapter">9</span> DTrace Probes in HotSpot VM</h1>
<div>
<p>This chapter describes DTrace support in Oracle&rsquo;s HotSpot VM. The <span class="variable">hotspot</span> and <span class="variable">hotspot_jni</span> providers let you access probes that you can use to monitor the Java application that is running together with the internal state and activities of the Java Virtual Machine (JVM). All of the probes are USDT probes and you can access them by using the process-id of the JVM process.</p>
<div class="section">
<p class="subhead1">Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-FBB6EA98-FBFC-4C56-A410-C14CF1713134">Using the hotspot Provider</a></p>
<ul style="list-style-type: disc;">
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-637021E5-A5C3-404D-809C-2AB54CA828B4">VM Lifecycle Probes</a></p>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-B98E8502-BDC8-4D33-A256-81F0DE8565D1">Thread Lifecycle Probes</a></p>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-1E289763-9FE5-4ACC-AF11-A4EB6682DAEE">Classloading Probes</a></p>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-16E5C42A-D4D4-4504-B59D-B7BB5BE4073F">Garbage Collection Probes</a></p>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-41C19CC9-C1E2-446D-843E-97A8CAEE943F">Method Compilation Probes</a></p>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-DF98247D-7872-4AFE-9711-230528457893">Monitor Probes</a></p>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-93BD214C-2A6A-47AE-BDA3-47CA8632EED9">Application Tracking Probes</a></p>
</li>
</ul>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-DBCB1A6F-D9EC-46AC-8E54-A7DEA2CBE560">Using the hotspot_jni Provider</a></p>
</li>
<li>
<p><a href="dtrace-probes-hotspot-vm.htm#GUID-9F5AB9C5-AD86-4BE3-B52B-AEE6FE0AF025">Sample DTrace Probes</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<div class="sect2"><a id="GUID-FBB6EA98-FBFC-4C56-A410-C14CF1713134"></a>
<h2 id="JSJVM-GUID-FBB6EA98-FBFC-4C56-A410-C14CF1713134" class="sect2">Using the hotspot Provider</h2>
<div>
<p>The <span class="variable">hotspot</span> provider lets you access probes that you can use to track the lifespan of the VM, thread start and stop events, garbage collector (GC) and memory pool statistics, method compilations, and monitor activity. A startup flag can enable additional probes that you can use to monitor the running Java program, such as object allocations and method enter and return probes. The <span class="variable">hotspot</span> probes originate in the VM library (libjvm.so), so they are provided from programs that embed the VM.</p>
<p>Many of the probes in the provider have arguments for providing further details on the state of the VM. Many of these arguments are opaque IDs which can be used to link probe firings to each other. However, strings and other data are also provided. When string values are provided, they are always present as a pair: a pointer to unterminated modified UTF-8 data (see the <a href="https://docs.oracle.com/javase/specs/" target="_blank">JVM Specification</a>) , and a length value which indicates the extent of that data. The string data is not guaranteed to be terminated by a NUL character, and it is necessary to use the length-terminated <code class="codeph">copyinstr()</code> intrinsic to read the string data. This is true even when none of the characters are outside the ASCII range.</p>
</div>
<div class="sect3"><a id="GUID-637021E5-A5C3-404D-809C-2AB54CA828B4"></a>
<h3 id="JSJVM-GUID-637021E5-A5C3-404D-809C-2AB54CA828B4" class="sect3">VM Lifecycle Probes</h3>
<div>
<p>The following probes are available for tracking VM lifecycle activities. None have any arguments.</p>
<div class="tblformalwide" id="GUID-637021E5-A5C3-404D-809C-2AB54CA828B4__GUID-5F03B937-C252-44AF-8F72-BF1BE2226346">
<p class="titleintable">Table 9-1 VM Lifecycle Probes</p>
<table class="cellalignment107" title="VM Lifecycle Probes" summary="Probes that relate to the VM lifecycle">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e125">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e127">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e131" headers="d9317e125"><code class="codeph">vm-init-begin</code></td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e131 d9317e127">
<p>Probe that starts when the VM initialization begins</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e138" headers="d9317e125"><code class="codeph">vm-init-end</code></td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e138 d9317e127">
<p>Probe that starts when the VM initialization finishes, and the VM is ready to start running application code</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e145" headers="d9317e125"><code class="codeph">vm-shutdown</code></td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e145 d9317e127">
<p>Probe that starts as the VM is shuts down due to program termination or an error</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="sect3"><a id="GUID-B98E8502-BDC8-4D33-A256-81F0DE8565D1"></a>
<h3 id="JSJVM-GUID-B98E8502-BDC8-4D33-A256-81F0DE8565D1" class="sect3">Thread Lifecycle Probes</h3>
<div>
<p>The following probes are available for tracking thread start and stop events.</p>
<div class="tblformalwide" id="GUID-B98E8502-BDC8-4D33-A256-81F0DE8565D1__GUID-4BD923D6-B2EA-43A3-92F3-8E63502F31F1">
<table class="cellalignment107" summary="Probes available for tracking thread start and stop events">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e176">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e179">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e184" headers="d9317e176">
<p><code class="codeph">thread-start</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e184 d9317e179">
<p>Probe that starts when a thread starts.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e192" headers="d9317e176">
<p><code class="codeph">thread-stop</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e192 d9317e179">
<p>Probe that starts when the thread has completed.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following argument are available for the thread lifecycle probes:</p>
<div class="tblformalwide" id="GUID-B98E8502-BDC8-4D33-A256-81F0DE8565D1__GUID-C744B6CB-90A9-4781-BE72-0E8D78885F82">
<table class="cellalignment107" summary="Arguments for thread-start and thread-stop">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e209">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e212">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e217" headers="d9317e209">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e217 d9317e212">
<p>A pointer to UTF-8 string data that contains the thread name.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e225" headers="d9317e209">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e225 d9317e212">
<p>The length of the thread name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e233" headers="d9317e209">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e233 d9317e212">
<p>The Java thread ID. This value matches other HotSpot VM probes that contain a thread argument.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e241" headers="d9317e209">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e241 d9317e212">
<p>The native or OS thread ID. This ID is assigned by the host operating system.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e249" headers="d9317e209">
<p><code class="codeph">args[4]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e249 d9317e212">
<p>A boolean value that indicates whether this thread is a daemon or not. A value of 0 indicates a non-daemon thread.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="sect3"><a id="GUID-1E289763-9FE5-4ACC-AF11-A4EB6682DAEE"></a>
<h3 id="JSJVM-GUID-1E289763-9FE5-4ACC-AF11-A4EB6682DAEE" class="sect3">Classloading Probes</h3>
<div>
<p>The following probes are available for tracking class loading and unloading activity.</p>
<div class="tblformalwide" id="GUID-1E289763-9FE5-4ACC-AF11-A4EB6682DAEE__GUID-39A3A7DB-D200-4DD1-BE6C-E3C886D4DEC0">
<table class="cellalignment107" summary="Probes available for tracking class loading and unloading activity">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e282">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e285">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e290" headers="d9317e282">
<p><code class="codeph">class-loaded</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e290 d9317e285">
<p>Probe that fires when a class is loaded</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e298" headers="d9317e282">
<p><code class="codeph">class-unloaded</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e298 d9317e285">
<p>Probe that fires when a class is unloaded from the system</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following arguments are available for the <code class="codeph">classloading</code> probes:</p>
<div class="tblformalwide" id="GUID-1E289763-9FE5-4ACC-AF11-A4EB6682DAEE__GUID-5E61C198-FD72-4EE9-9F4B-C6F611DE8D17">
<table class="cellalignment107" summary="Arguments for class-loaded and class-unloaded">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e318">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e321">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e326" headers="d9317e318">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e326 d9317e321">
<p>A pointer to UTF-8 string data that contains the name of the class that is loaded</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e334" headers="d9317e318">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e334 d9317e321">
<p>The length of the class name data (in bytes)</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e342" headers="d9317e318">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e342 d9317e321">
<p>The class loader ID, which is a unique identifier for a class loader in the VM. (This is the class loader that loaded the class.)</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e350" headers="d9317e318">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e350 d9317e321">
<p>A boolean value that indicates whether the class is a shared class (if the class was loaded from the shared archive)</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="sect3"><a id="GUID-16E5C42A-D4D4-4504-B59D-B7BB5BE4073F"></a>
<h3 id="JSJVM-GUID-16E5C42A-D4D4-4504-B59D-B7BB5BE4073F" class="sect3">Garbage Collection Probes</h3>
<div>
<p>Probes are available that you can use to measure the duration of a system-wide garbage collection cycle (for those garbage collectors that have a defined begin and end). Each memory pool is tracked independently. The probes for individual pools pass the memory manager's name, the pool name, and pool usage information at both the beginning and ending of pool collection.</p>
<p>The following probes are available for garbage collecting activities:</p>
<div class="tblformalwide" id="GUID-16E5C42A-D4D4-4504-B59D-B7BB5BE4073F__GUID-1834B11E-F34F-4A66-81A4-6445A47CD3B2">
<table class="cellalignment107" summary="GC-related probes">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e384">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e387">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e392" headers="d9317e384">
<p><code class="codeph">gc-begin</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e392 d9317e387">
<p>Probe that starts when a system-wide collection starts. The one argument available for this probe, (<code class="codeph">arg[0]</code>), is a boolean value that indicates whether to perform a Full GC.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e403" headers="d9317e384">
<p><code class="codeph">gc-end</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e403 d9317e387">
<p>Probe that starts when a system-wide collection is completed. No arguments.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e411" headers="d9317e384">
<p><code class="codeph">mem-pool-gc-begin</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e411 d9317e387">
<p>Probe that starts when an individual memory pool is collected.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e419" headers="d9317e384">
<p><code class="codeph">mem-pool-gc-end</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e419 d9317e387">
<p>Probe that starts after an individual memory pool is collected.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following arguments are available for the memory pool probes:</p>
<div class="tblformalwide" id="GUID-16E5C42A-D4D4-4504-B59D-B7BB5BE4073F__GUID-56472C3B-7397-4E8C-95FB-675CABD71F45">
<table class="cellalignment107" summary="Memory pool probe arguments">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e436">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e439">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e444" headers="d9317e436">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e444 d9317e439">
<p>A pointer to the UTF-8 string data that contains the name of the manager that manages this memory pool.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e452" headers="d9317e436">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e452 d9317e439">
<p>The length of the manager name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e460" headers="d9317e436">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e460 d9317e439">
<p>A pointer to the UTF-8 string data that contains the name of the memory pool.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e468" headers="d9317e436">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e468 d9317e439">
<p>The length of the memory pool name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e476" headers="d9317e436">
<p><code class="codeph">args[4]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e476 d9317e439">
<p>The initial size of the memory pool (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e484" headers="d9317e436">
<p><code class="codeph">args[5]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e484 d9317e439">
<p>The amount of memory in use in the memory pool (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e492" headers="d9317e436">
<p><code class="codeph">args[6]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e492 d9317e439">
<p>The number of committed pages in the memory pool.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e500" headers="d9317e436">
<p><code class="codeph">args[7]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e500 d9317e439">
<p>The maximum size of the memory pool.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="sect3"><a id="GUID-41C19CC9-C1E2-446D-843E-97A8CAEE943F"></a>
<h3 id="JSJVM-GUID-41C19CC9-C1E2-446D-843E-97A8CAEE943F" class="sect3">Method Compilation Probes</h3>
<div>
<p>Probes are available to indicate which methods are being compiled and by which compiler, and to track when the compiled methods are installed or uninstalled.</p>
<p>The following probes are available to mark the beginning and ending of method compilation:</p>
<div class="tblformalwide" id="GUID-41C19CC9-C1E2-446D-843E-97A8CAEE943F__GUID-34F5D41A-2224-40D1-BBA7-5E3D93869811">
<table class="cellalignment107" summary="Probes that mark the begin and end of method compilation">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e534">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e537">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e542" headers="d9317e534">
<p><code class="codeph">method-compile-begin</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e542 d9317e537">
<p>Probe that starts when the method compilation begins.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e550" headers="d9317e534">
<p><code class="codeph">method-compile-end</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e550 d9317e537">
<p>Probe that starts when method compilation is completed. In addition to the following arguments, the <code class="codeph">argv[8]</code> argument is a boolean value that indicates whether the compilation was successful.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following arguments are available for the method compilation probes:</p>
<div class="tblformalwide" id="GUID-41C19CC9-C1E2-446D-843E-97A8CAEE943F__GUID-324A29FC-544C-42DB-873E-C1EBB1EB5F5B">
<table class="cellalignment107" summary="Method compilation probe arguments">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e570">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e573">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e578" headers="d9317e570">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e578 d9317e573">
<p>A pointer to UTF-8 string data that contains the name of the compiler that is compiling this method.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e586" headers="d9317e570">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e586 d9317e573">
<p>The length of the compiler name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e594" headers="d9317e570">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e594 d9317e573">
<p>A pointer to UTF-8 string data that contains the name of the class of the method being compiled.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e602" headers="d9317e570">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e602 d9317e573">
<p>The length of the class name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e610" headers="d9317e570">
<p><code class="codeph">args[4]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e610 d9317e573">
<p>A pointer to UTF-8 string data that contains the name of the method being compiled.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e618" headers="d9317e570">
<p><code class="codeph">args[5]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e618 d9317e573">
<p>The length of the method name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e626" headers="d9317e570">
<p><code class="codeph">args[6]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e626 d9317e573">
<p>A pointer to UTF-8 string data that contains the signature of the method being compiled.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e634" headers="d9317e570">
<p><code class="codeph">args[7]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e634 d9317e573">
<p>The length of the signature data (in bytes).</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following probes are available when compiled methods are installed for execution or uninstalled:</p>
<div class="tblformalwide" id="GUID-41C19CC9-C1E2-446D-843E-97A8CAEE943F__GUID-77287151-F3E8-424C-B302-4E284EB98019">
<table class="cellalignment107" summary="Probes fired when compiled methods are installed for execution or uninstalled">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e651">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e654">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e659" headers="d9317e651">
<p><code class="codeph">compiled-method-load</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e659 d9317e654">
<p>Probe that starts when a compiled method is installed. The additional argument, <code class="codeph">argv[6]</code> contains a pointer to the compiled code, and the <code class="codeph">argv[7]</code> is the size of the compiled code.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e673" headers="d9317e651">
<p><code class="codeph">compiled-method-unload</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e673 d9317e654">
<p>Probe that starts when a compiled method is uninstalled.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following arguments are available for the compiled method loading probe:</p>
<div class="tblformalwide" id="GUID-41C19CC9-C1E2-446D-843E-97A8CAEE943F__GUID-0A91FABF-5745-4A53-92F2-BAF7D42A7C56">
<table class="cellalignment107" summary="Compiled method loading probe arguments">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e690">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e693">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e698" headers="d9317e690">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e698 d9317e693">
<p>A pointer to UTF-8 string data that contains the name of the class of the method being installed.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e706" headers="d9317e690">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e706 d9317e693">
<p>The length of the class name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e714" headers="d9317e690">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e714 d9317e693">
<p>A pointer to UTF-8 string data that contains the name of the method being installed.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e722" headers="d9317e690">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e722 d9317e693">
<p>The length of the method name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e730" headers="d9317e690">
<p><code class="codeph">args[4]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e730 d9317e693">
<p>A pointer to UTF-8 string data that contains the signature of the method being installed.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e738" headers="d9317e690">
<p><code class="codeph">args[5]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e738 d9317e693">
<p>The length of the signature data (in bytes).</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="sect3"><a id="GUID-DF98247D-7872-4AFE-9711-230528457893"></a>
<h3 id="JSJVM-GUID-DF98247D-7872-4AFE-9711-230528457893" class="sect3">Monitor Probes</h3>
<div>
<p>When your Java application runs, threads enter and exit monitors, wait on monitors, and perform notifications. Probes are available for all wait and notification events, and for contended monitor entry and exit events.</p>
<p>A contended monitor entry occurs when a thread attempts to enter a monitor while another thread is in the monitor. A contended monitor exit event occurs when a thread leaves a monitor while other threads are waiting to enter to the monitor. The contended monitor entry and contended monitor exit events might not match each other in relation to the thread that encounters these events, athough a contended exit from one thread is expected to match up to a contended enter on another thread (the thread waiting to enter the monitor).</p>
<p>Monitor events provide the thread ID, a monitor ID, and the type of the class of the object as arguments. The thread ID and the class type can map back to the Java program, while the monitor ID can provide matching information between probe firings.</p>
<p>The existence of these probes in the VM degrades performance and they start only when the <code class="codeph">-XX:+ExtendedDTraceProbes</code> flag is set on the Java command line. This flag is turned on and off dynamically at runtime by using the <code class="codeph">jinfo</code> utility.</p>
<p>If the flag is off, the monitor probes are present in the probe listing that is obtainable from Dtrace, but the probes remain dormant and don&rsquo;t start. Removal of this restriction is planned for future releases of the VM, and these probes will be enabled with no impact to performance.</p>
<p>The following probes are available for monitoring events:</p>
<div class="tblformalwide" id="GUID-DF98247D-7872-4AFE-9711-230528457893__GUID-C66F1212-1D95-4951-A7AB-68B3909AC198">
<table class="cellalignment107" summary="Monitor probes">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e787">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e790">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e795" headers="d9317e787">
<p><code class="codeph">monitor-contended-enter</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e795 d9317e790">
<p>Probe that starts when a thread attempts to enter a contended monitor</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e803" headers="d9317e787">
<p><code class="codeph">monitor-contended-entered</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e803 d9317e790">
<p>Probe that starts when a thread successfully enters the contended monitor</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e811" headers="d9317e787">
<p><code class="codeph">monitor-contended-exit</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e811 d9317e790">
<p>Probe that starts when a thread leaves a monitor and other threads are waiting to enter</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e819" headers="d9317e787">
<p><code class="codeph">monitor-wait</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e819 d9317e790">
<p>Probe that starts when a thread begins a wait on a monitor by using the <code class="codeph">Object.wait()</code>. The additional argument, <code class="codeph">args[4]</code> is a long value that indicates the timeout being used.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e833" headers="d9317e787">
<p><code class="codeph">monitor-waited</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e833 d9317e790">
<p>Probe that starts when a thread completes an <code class="codeph">Object.wait()</code> action.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e844" headers="d9317e787">
<p><code class="codeph">monitor-notify</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e844 d9317e790">
<p>Probe that starts when a thread calls <code class="codeph">Object.notify()</code> to notify waiters on a monitor.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e855" headers="d9317e787">
<p><code class="codeph">monitor-notifyAll</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e855 d9317e790">
<p>Probe that starts when a thread calls <code class="codeph">Object.notifyAll()</code> to notify waiters on a monitor.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following arguments are available for the monitor:</p>
<div class="tblformalwide" id="GUID-DF98247D-7872-4AFE-9711-230528457893__GUID-3F482400-3312-4DDE-8327-39F0CCD220CB">
<table class="cellalignment107" summary="Monitor probe arguments">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e875">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e878">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e883" headers="d9317e875">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e883 d9317e878">
<p>The Java thread identifier for the thread performing the monitor operation.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e891" headers="d9317e875">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e891 d9317e878">
<p>A unique, but opaque identifier for the specific monitor that the action is performed upon.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e899" headers="d9317e875">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e899 d9317e878">
<p>A pointer to UTF-8 string data which contains the class name of the object being acted upon.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e907" headers="d9317e875">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e907 d9317e878">
<p>The length of the class name data (in bytes).</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="sect3"><a id="GUID-93BD214C-2A6A-47AE-BDA3-47CA8632EED9"></a>
<h3 id="JSJVM-GUID-93BD214C-2A6A-47AE-BDA3-47CA8632EED9" class="sect3">Application Tracking Probes</h3>
<div>
<p>You can use probes to allow fine-grained examination of Java thread execution. Application tracking probes start when a method is entered or returned from, or when a Java object has been allocated.</p>
<p>The existence of these probes in the VM degrades performance and they start only when the VM has the <code class="codeph">ExtendedDTraceProbes</code> flag enabled. By default, the probes are present in any listing of the probes in the VM, but are dormant without the appropriate flag. Removal of this restriction is planned in future releases of the VM, and these probes will be enabled no impact to performance.</p>
<p>The following probes are available for the method entry and exit:</p>
<div class="tblformalwide" id="GUID-93BD214C-2A6A-47AE-BDA3-47CA8632EED9__GUID-2A369F0D-D7E4-41F6-B822-6ED8E0595096">
<table class="cellalignment107" summary="Method entry and return probes">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e946">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e949">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e954" headers="d9317e946">
<p><code class="codeph">method-entry</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e954 d9317e949">
<p>Probe that starts when a method is being entered.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e962" headers="d9317e946">
<p><code class="codeph">method-return</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e962 d9317e949">
<p>Probe that starts when a method returns, either normally or due to an exception.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following arguments are available for the method entry and exit:</p>
<div class="tblformalwide" id="GUID-93BD214C-2A6A-47AE-BDA3-47CA8632EED9__GUID-0607B9F2-E3DB-4AA3-9273-28163D047E47">
<table class="cellalignment107" summary="Method probe arguments">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e979">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e982">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e987" headers="d9317e979">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e987 d9317e982">
<p>The Java thread ID of the thread that is entering or leaving the method.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e995" headers="d9317e979">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e995 d9317e982">
<p>A pointer to UTF-8 string data that contains the name of the class of the method.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1003" headers="d9317e979">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1003 d9317e982">
<p>The length of the class name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1011" headers="d9317e979">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1011 d9317e982">
<p>A pointer to UTF-8 string data that contains the name of the method.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1019" headers="d9317e979">
<p><code class="codeph">args[4]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1019 d9317e982">
<p>The length of the method name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1027" headers="d9317e979">
<p><code class="codeph">args[5]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1027 d9317e982">
<p>A pointer to UTF-8 string data that contains the signature of the method.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1035" headers="d9317e979">
<p><code class="codeph">args[6]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1035 d9317e982">
<p>The length of the signature data (in bytes).</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following probe is available for the object allocation:</p>
<div class="tblformalwide" id="GUID-93BD214C-2A6A-47AE-BDA3-47CA8632EED9__GUID-436AECC2-8764-4B1F-91C3-D49329C8C693">
<table class="cellalignment107" summary="Allocation probe">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e1052">Probe</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e1055">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1060" headers="d9317e1052">
<p><code class="codeph">object-alloc</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1060 d9317e1055">
<p>Probe that starts when any object is allocated, provided that the <code class="codeph">ExtendedDTraceProbes</code> flag is enabled.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following arguments are available for the object allocation probe:</p>
<div class="tblformalwide" id="GUID-93BD214C-2A6A-47AE-BDA3-47CA8632EED9__GUID-C5F672E9-1E1F-4B54-81B5-ECF8028D5BD8">
<table class="cellalignment107" summary="Allocation probe arguments">
<thead>
<tr class="cellalignment83">
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e1080">Probe Arguments</th>
<th class="cellalignment108" rowspan="1" colspan="1" id="d9317e1083">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1088" headers="d9317e1080">
<p><code class="codeph">args[0]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1088 d9317e1083">
<p>The Java thread ID of the thread that is allocating the object.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1096" headers="d9317e1080">
<p><code class="codeph">args[1]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1096 d9317e1083">
<p>A pointer to UTF-8 string data that contains the class name of the object being allocated.</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1104" headers="d9317e1080">
<p><code class="codeph">args[2]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1104 d9317e1083">
<p>The length of the class name data (in bytes).</p>
</td>
</tr>
<tr class="cellalignment83">
<td class="cellalignment83" rowspan="1" colspan="1" id="d9317e1112" headers="d9317e1080">
<p><code class="codeph">args[3]</code></p>
</td>
<td class="cellalignment83" rowspan="1" colspan="1" headers="d9317e1112 d9317e1083">
<p>The size of the object being allocated.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
<div class="sect2"><a id="GUID-DBCB1A6F-D9EC-46AC-8E54-A7DEA2CBE560"></a>
<h2 id="JSJVM-GUID-DBCB1A6F-D9EC-46AC-8E54-A7DEA2CBE560" class="sect2">Using the hotspot_jni Provider</h2>
<div>
<p>In order to call from native code to Java code, due to embedding of the VM in an application or execution of native code within a Java application, the native code must make a call through the Java Native Interface (JNI). The JNI provides a number of methods for invoking Java code and examining the state of the VM. DTrace probes are provided at the entry point and return point for each of these methods. The probes are provided by the <span class="variable">hotspot_jni</span> provider. The name of the probe is the name of the JNI method, appended with <code class="codeph">-entry</code> for entry probes, and <code class="codeph">-return</code> for return probes. The arguments available at each entry probe are the arguments that were provided to the function, with the exception of the <code class="codeph">Invoke*</code> methods, which omit the arguments that are passed to the Java method. The return probes have the return value of the method as an argument (if available).</p>
</div>
</div>
<div class="sect2"><a id="GUID-9F5AB9C5-AD86-4BE3-B52B-AEE6FE0AF025"></a>
<h2 id="JSJVM-GUID-9F5AB9C5-AD86-4BE3-B52B-AEE6FE0AF025" class="sect2">Sample DTrace Probes</h2>
<div>
<pre dir="ltr">
provider hotspot {
  probe vm-init-begin();
  probe vm-init-end();
  probe vm-shutdown();
  probe class-loaded(
      char* class_name, uintptr_t class_name_len, uintptr_t class_loader_id, bool is_shared);
  probe class-unloaded(
      char* class_name, uintptr_t class_name_len, uintptr_t class_loader_id, bool is_shared);
  probe gc-begin(bool is_full);
  probe gc-end();
  probe mem-pool-gc-begin(
      char* mgr_name, uintptr_t mgr_name_len, char* pool_name, uintptr_t pool_name_len, 
      uintptr_t initial_size, uintptr_t used, uintptr_t committed, uintptr_t max_size);
  probe mem-pool-gc-end(
      char* mgr_name, uintptr_t mgr_name_len, char* pool_name, uintptr_t pool_name_len, 
      uintptr_t initial_size, uintptr_t used, uintptr_t committed, uintptr_t max_size);
  probe thread-start(
      char* thread_name, uintptr_t thread_name_length, 
      uintptr_t java_thread_id, uintptr_t native_thread_id, bool is_daemon);
  probe thread-stop(
      char* thread_name, uintptr_t thread_name_length, 
      uintptr_t java_thread_id, uintptr_t native_thread_id, bool is_daemon);
  probe method-compile-begin(
      char* class_name, uintptr_t class_name_len, 
      char* method_name, uintptr_t method_name_len,
      char* signature, uintptr_t signature_len);
  probe method-compile-end(
      char* class_name, uintptr_t class_name_len, 
      char* method_name, uintptr_t method_name_len,
      char* signature, uintptr_t signature_len,
      bool is_success);
  probe compiled-method-load(
      char* class_name, uintptr_t class_name_len, 
      char* method_name, uintptr_t method_name_len,
      char* signature, uintptr_t signature_len,
      void* code, uintptr_t code_size);
  probe compiled-method-unload(
      char* class_name, uintptr_t class_name_len, 
      char* method_name, uintptr_t method_name_len,
      char* signature, uintptr_t signature_len);
  probe monitor-contended-enter(
      uintptr_t java_thread_id, uintptr_t monitor_id, 
      char* class_name, uintptr_t class_name_len);
  probe monitor-contended-entered(
      uintptr_t java_thread_id, uintptr_t monitor_id, 
      char* class_name, uintptr_t class_name_len);
  probe monitor-contended-exit(
      uintptr_t java_thread_id, uintptr_t monitor_id, 
      char* class_name, uintptr_t class_name_len);
  probe monitor-wait(
      uintptr_t java_thread_id, uintptr_t monitor_id, 
      char* class_name, uintptr_t class_name_len,
      uintptr_t timeout);
  probe monitor-waited(
      uintptr_t java_thread_id, uintptr_t monitor_id, 
      char* class_name, uintptr_t class_name_len);
  probe monitor-notify(
      uintptr_t java_thread_id, uintptr_t monitor_id, 
      char* class_name, uintptr_t class_name_len);
  probe monitor-notifyAll(
      uintptr_t java_thread_id, uintptr_t monitor_id, 
      char* class_name, uintptr_t class_name_len);
  probe method-entry(
      uintptr_t java_thread_id, char* class_name, uintptr_t class_name_len,
      char* method_name, uintptr_t method_name_len,
      char* signature, uintptr_t signature_len);
  probe method-return(
      uintptr_t java_thread_id, char* class_name, uintptr_t class_name_len,
      char* method_name, uintptr_t method_name_len,
      char* signature, uintptr_t signature_len);
  probe object-alloc(
      uintptr_t java_thread_id, char* class_name, uintptr_t class_name_len,
      uintptr_t size);
};

provider hotspot_jni {
  probe AllocObject-entry(void*, void*);
  probe AllocObject-return(void*);
  probe AttachCurrentThreadAsDaemon-entry(void*, void**, void*);
  probe AttachCurrentThreadAsDaemon-return(uint32_t);
  probe AttachCurrentThread-entry(void*, void**, void*);
  probe AttachCurrentThread-return(uint32_t);
  probe CallBooleanMethodA-entry(void*, void*, uintptr_t);
  probe CallBooleanMethodA-return(uintptr_t);
  probe CallBooleanMethod-entry(void*, void*, uintptr_t);
  probe CallBooleanMethod-return(uintptr_t);
  probe CallBooleanMethodV-entry(void*, void*, uintptr_t);
  probe CallBooleanMethodV-return(uintptr_t);
  probe CallByteMethodA-entry(void*, void*, uintptr_t);
  probe CallByteMethodA-return(char);
  probe CallByteMethod-entry(void*, void*, uintptr_t);
  probe CallByteMethod-return(char);
  probe CallByteMethodV-entry(void*, void*, uintptr_t);

  probe CallByteMethodV-return(char);
  probe CallCharMethodA-entry(void*, void*, uintptr_t);
  probe CallCharMethodA-return(uint16_t);
  probe CallCharMethod-entry(void*, void*, uintptr_t);
  probe CallCharMethod-return(uint16_t);
  probe CallCharMethodV-entry(void*, void*, uintptr_t);
  probe CallCharMethodV-return(uint16_t);
  probe CallDoubleMethodA-entry(void*, void*, uintptr_t);
  probe CallDoubleMethodA-return(double);
  probe CallDoubleMethod-entry(void*, void*, uintptr_t);
  probe CallDoubleMethod-return(double);
  probe CallDoubleMethodV-entry(void*, void*, uintptr_t);
  probe CallDoubleMethodV-return(double);
  probe CallFloatMethodA-entry(void*, void*, uintptr_t);
  probe CallFloatMethodA-return(float);
  probe CallFloatMethod-entry(void*, void*, uintptr_t);
  probe CallFloatMethod-return(float);
  probe CallFloatMethodV-entry(void*, void*, uintptr_t);
  probe CallFloatMethodV-return(float);
  probe CallIntMethodA-entry(void*, void*, uintptr_t);
  probe CallIntMethodA-return(uint32_t);
  probe CallIntMethod-entry(void*, void*, uintptr_t);
  probe CallIntMethod-return(uint32_t);
  probe CallIntMethodV-entry(void*, void*, uintptr_t);
  probe CallIntMethodV-return(uint32_t);
  probe CallLongMethodA-entry(void*, void*, uintptr_t);
  probe CallLongMethodA-return(uintptr_t);
  probe CallLongMethod-entry(void*, void*, uintptr_t);
  probe CallLongMethod-return(uintptr_t);
  probe CallLongMethodV-entry(void*, void*, uintptr_t);
  probe CallLongMethodV-return(uintptr_t);
  probe CallNonvirtualBooleanMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualBooleanMethodA-return(uintptr_t);
  probe CallNonvirtualBooleanMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualBooleanMethod-return(uintptr_t);
  probe CallNonvirtualBooleanMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualBooleanMethodV-return(uintptr_t);
  probe CallNonvirtualByteMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualByteMethodA-return(char);
  probe CallNonvirtualByteMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualByteMethod-return(char);
  probe CallNonvirtualByteMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualByteMethodV-return(char);
  probe CallNonvirtualCharMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualCharMethodA-return(uint16_t);
  probe CallNonvirtualCharMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualCharMethod-return(uint16_t);
  probe CallNonvirtualCharMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualCharMethodV-return(uint16_t);
  probe CallNonvirtualDoubleMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualDoubleMethodA-return(double);
  probe CallNonvirtualDoubleMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualDoubleMethod-return(double);
  probe CallNonvirtualDoubleMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualDoubleMethodV-return(double);
  probe CallNonvirtualFloatMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualFloatMethodA-return(float);
  probe CallNonvirtualFloatMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualFloatMethod-return(float);
  probe CallNonvirtualFloatMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualFloatMethodV-return(float);
  probe CallNonvirtualIntMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualIntMethodA-return(uint32_t);
  probe CallNonvirtualIntMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualIntMethod-return(uint3t);
  probe CallNonvirtualIntMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualIntMethodV-return(uint32_t);
  probe CallNonvirtualLongMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualLongMethodA-return(uintptr_t);
  probe CallNonvirtualLongMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualLongMethod-return(uintptr_t);
  probe CallNonvirtualLongMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualLongMethodV-return(uintptr_t);
  probe CallNonvirtualObjectMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualObjectMethodA-return(void*);
  probe CallNonvirtualObjectMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualObjectMethod-return(void*);
  probe CallNonvirtualObjectMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualObjectMethodV-return(void*);
  probe CallNonvirtualShortMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualShortMethodA-return(uint16_t);
  probe CallNonvirtualShortMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualShortMethod-return(uint16_t);
  probe CallNonvirtualShortMethodV-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualShortMethodV-return(uint16_t);
  probe CallNonvirtualVoidMethodA-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualVoidMethodA-return();
  probe CallNonvirtualVoidMethod-entry(void*, void*, void*, uintptr_t);
  probe CallNonvirtualVoidMethod-return();
  probe CallNonvirtualVoidMethodV-entry(void*, void*, void*, uintptr_t);  
  probe CallNonvirtualVoidMethodV-return();
  probe CallObjectMethodA-entry(void*, void*, uintptr_t);
  probe CallObjectMethodA-return(void*);
  probe CallObjectMethod-entry(void*, void*, uintptr_t);
  probe CallObjectMethod-return(void*);
  probe CallObjectMethodV-entry(void*, void*, uintptr_t);
  probe CallObjectMethodV-return(void*);
  probe CallShortMethodA-entry(void*, void*, uintptr_t);
  probe CallShortMethodA-return(uint16_t);
  probe CallShortMethod-entry(void*, void*, uintptr_t);
  probe CallShortMethod-return(uint16_t);
  probe CallShortMethodV-entry(void*, void*, uintptr_t);
  probe CallShortMethodV-return(uint16_t);
  probe CallStaticBooleanMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticBooleanMethodA-return(uintptr_t);
  probe CallStaticBooleanMethod-entry(void*, void*, uintptr_t);
  probe CallStaticBooleanMethod-return(uintptr_t);
  probe CallStaticBooleanMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticBooleanMethodV-return(uintptr_t);
  probe CallStaticByteMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticByteMethodA-return(char);
  probe CallStaticByteMethod-entry(void*, void*, uintptr_t);
  probe CallStaticByteMethod-return(char);
  probe CallStaticByteMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticByteMethodV-return(char);
  probe CallStaticCharMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticCharMethodA-return(uint16_t);
  probe CallStaticCharMethod-entry(void*, void*, uintptr_t);
  probe CallStaticCharMethod-return(uint16_t);
  probe CallStaticCharMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticCharMethodV-return(uint16_t);
  probe CallStaticDoubleMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticDoubleMethodA-return(double);
  probe CallStaticDoubleMethod-entry(void*, void*, uintptr_t);
  probe CallStaticDoubleMethod-return(double);
  probe CallStaticDoubleMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticDoubleMethodV-return(double);
  probe CallStaticFloatMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticFloatMethodA-return(float);
  probe CallStaticFloatMethod-entry(void*, void*, uintptr_t);
  probe CallStaticFloatMethod-return(float);
  probe CallStaticFloatMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticFloatMethodV-return(float);
  probe CallStaticIntMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticIntMethodA-return(uint32_t);
  probe CallStaticIntMethod-entry(void*, void*, uintptr_t);
  probe CallStaticIntMethod-return(uint32_t);
  probe CallStaticIntMethodentry(void*, void*, uintptr_t);
  probe CallStaticIntMethodV-return(uint32_t);
  probe CallStaticLongMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticLongMethodA-return(uintptr_t);
  probe CallStaticLongMethod-entry(void*, void*, uintptr_t);
  probe CallStaticLongMethod-return(uintptr_t);
  probe CallStaticLongMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticLongMethodV-return(uintptr_t);
  probe CallStaticObjectMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticObjectMethodA-return(void*);
  probe CallStaticObjectMethod-entry(void*, void*, uintptr_t);
  probe CallStaticObjectMethod-return(void*);
  probe CallStaticObjectMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticObjectMethodV-return(void*);
  probe CallStaticShortMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticShortMethodA-return(uint16_t);
  probe CallStaticShortMethod-entry(void*, void*, uintptr_t);
  probe CallStaticShortMethod-return(uint16_t);
  probe CallStaticShortMethodV-entry(void*, void*, uintptr_t);
  probe CallStaticShortMethodV-return(uint16_t);
  probe CallStaticVoidMethodA-entry(void*, void*, uintptr_t);
  probe CallStaticVoidMethodA-return();
  probe CallStaticVoidMethod-entry(void*, void*, uintptr_t);
  probe CallStaticVoidMethod-return(); 
  probe CallStaticVoidMethodV-entry(void*, void*, uintptr_t);  
  probe CallStaticVoidMethodV-return();
  probe CallVoidMethodA-entry(void*, void*, uintptr_t);  
  probe CallVoidMethodA-return();
  probe CallVoidMethod-entry(void*, void*, uintptr_t);  
  probe CallVoidMethod-return(); 
  probe CallVoidMethodV-entry(void*, void*, uintptr_t);  
  probe CallVoidMethodV-return();
  probe CreateJavaVM-entry(void**, void**, void*);
  probe CreateJavaVM-return(uint32_t);
  probe DefineClass-entry(void*, const char*, void*, char, uintptr_t);
  probe DefineClass-return(void*);
  probe DeleteGlobalRef-entry(void*, void*);
  probe DeleteGlobalRef-return();
  probe DeleteLocalRef-entry(void*, void*);
  probe DeleteLocalRef-return();
  probe DeleteWeakGlobalRef-entry(void*, void*);
  probe DeleteWeakGlobalRef-return();
  probe DestroyJavaVM-entry(void*);
  probe DestroyJavaVM-return(uint32_t);
  probe DetachCurrentThread-entry(void*);
  probe DetachCurrentThread-return(uint32_t);
  probe EnsureLocalCapacity-entry(void*, uint32_t);
  probe EnsureLocalCapacity-return(uint32_t);
  probe ExceptionCheck-entry(void*);
  probe ExceptionCheck-return(uintptr_t);
  probe ExceptionClear-entry(void*);
  probe ExceptionClear-return();
  probe ExceptionDescribe-entry(void*);  
  probe ExceptionDescribe-return();
  probe ExceptionOccurred-entry(void*);
  probe ExceptionOccurred-return(void*);
  probe FatalError-entry(void* env, const char*);
  probe FindClass-entry(void*, const char*);
  probe FindClass-return(void*);
  probe FromReflectedField-entry(void*, void*);
  probe FromReflectedField-return(uintptr_t);
  probe FromReflectedMethod-entry(void*, void*);
  probe FromReflectedMethod-return(uintptr_t);
  probe GetArrayLength-entry(void*, void*);
  probe GetArrayLength-return(uintptr_t);
  probe GetBooleanArrayElements-entry(void*, void*, uintptr_t*);
  probe GetBooleanArrayElements-return(uintptr_t*);
  probe GetBooleanArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, uintptr_t*);
  probe GetBooleanArrayRegion-return();
  probe GetBooleanField-entry(void*, void*, uintptr_t);
  probe GetBooleanField-return(uintptr_t);
  probe GetByteArrayElements-entry(void*, void*, uintptr_t*);
  probe GetByteArrayElements-return(char*);
  probe GetByteArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, char*);
  probe GetByteArrayRegion-return();
  probe GetByteField-entry(void*, void*, uintptr_t);
  probe GetByteField-return(char);
  probe GetCharArrayElements-entry(void*, void*, uintptr_t*);
  probe GetCharArrayElements-return(uint16_t*);
  probe GetCharArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, uint16_t*);
  probe GetCharArrayRegion-return();
  probe GetCharField-entry(void*, void*, uintptr_t);
  probe GetCharField-return(uint16_t);
  probe GetCreatedJavaVMs-eintptr_t*);
  probe GetCreatedJavaVMs-return(uintptr_t);
  probe GetCreateJavaVMs-entry(void*, uintptr_t, uintptr_t*);
  probe GetCreateJavaVMs-return(uint32_t);
  probe GetDefaultJavaVMInitArgs-entry(void*);
  probe GetDefaultJavaVMInitArgs-return(uint32_t);
  probe GetDirectBufferAddress-entry(void*, void*);
  probe GetDirectBufferAddress-return(void*);
  probe GetDirectBufferCapacity-entry(void*, void*);
  probe GetDirectBufferCapacity-return(uintptr_t);
  probe GetDoubleArrayElements-entry(void*, void*, uintptr_t*);
  probe GetDoubleArrayElements-return(double*);
  probe GetDoubleArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, double*);
  probe GetDoubleArrayRegion-return();
  probe GetDoubleField-entry(void*, void*, uintptr_t);
  probe GetDoubleField-return(double);
  probe GetEnv-entry(void*, void*, void*);
  probe GetEnv-return(uint32_t);
  probe GetFieldID-entry(void*, void*, const char*, const char*);
  probe GetFieldID-return(uintptr_t);
  probe GetFloatArrayElements-entry(void*, void*, uintptr_t*);
  probe GetFloatArrayElements-return(float*);
  probe GetFloatArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, float*);
  probe GetFloatArrayRegion-return();
  probe GetFloatField-entry(void*, void*, uintptr_t);
  probe GetFloatField-return(float);
  probe GetIntArrayElements-entry(void*, void*, uintptr_t*);
  probe GetIntArrayElements-return(uint32_t*);
  probe GetIntArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, uint32_t*);
  probe GetIntArrayRegion-return();
  probe GetIntField-entry(void*, void*, uintptr_t);
  probe GetIntField-return(uint32_t);
  probe GetJavaVM-entry(void*, void**);
  probe GetJavaVM-return(uint32_t);
  probe GetLongArrayElements-entry(void*, void*, uintptr_t*);
  probe GetLongArrayElements-return(uintptr_t*);
  probe GetLongArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, uintptr_t*);
  probe GetLongArrayRegion-return();
  probe GetLongField-entry(void*, void*, uintptr_t);
  probe GetLongField-return(uintptr_t);
  probe GetMethodID-entry(void*, void*, const char*, const char*);
  probe GetMethodID-return(uintptr_t);
  probe GetObjectArrayElement-entry(void*, void*, uintptr_t);
  probe GetObjectArrayElement-return(void*);
  probe GetObjectClass-entry(void*, void*);
  probe GetObjectClass-return(void*);
  probe GetObjectField-entry(void*, void*, uintptr_t);
  probe GetObjectField-return(void*);
  probe GetObjectRefType-entry(void*, void*);
  probe GetObjectRefType-return(void*);
  probe GetPrimitiveArrayCritical-entry(void*, void*, uintptr_t*);
  probe GetPrimitiveArrayCritical-return(void*);
  probe GetShortArrayElements-entry(void*, void*, uintptr_t*);
  probe GetShortArrayElements-return(uint16_t*);
  probe GetShortArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, uint16_t*);
  probe GetShortArrayRegion-return();
  probe GetShortField-entry(void*, void*, uintptr_t);
  probe GetShortField-return(uint16_t);
  probe GetStaticBooleanField-entry(void*, void*, uintptr_t);
  probe GetStaticBooleanField-return(uintptr_t);
  probe GetStaticByteField-entry(void*, void*, uintptr_t);
  probe GetStaticByteField-return(char);
  probe GetStaticCharField-entry(void*, void*, uintptr_t);
  probe GetStaticCharField-return(uint16_t);
  probe GetStaticDoubleField-entry(void*, void*, uintptr_t);
  probe GetStaticDoubleField-return(double);
  probe GetStaticFieldID-entry(void*, void*, const char*, const char*);
  probe GetStaticFieldID-return(uintptr_t);
  probe GetStaticFloatField-entry(void*, void*, uintptr_t);
  probe GetStaticFloatField-return(float);
  probe GetStaticIntField-entry(void*, void*, uintptr_t);
  probe GetStaticIntField-return(uint32_t);
  probe GetStaticLongField-entry(void*, void*, uintptr_t);
  probe GetStaticLongField-return(uintptr_t);
  probe GetStaticMethodID-entry(void*, void*, const char*, const char*);
  probe GetStaticMethodID-return(uintptr_t);
  probe GetStaticObjectField-entry(void*, void*, uintptr_t);
  probe GetStaticObjectField-return(void*);
  probe GetStaticShortField-entry(void*, void*, uintptr_t);
  probe GetStaticShortField-return(uint16_t);
  pro GetStringChars-entry(void*, void*, uintptr_t*);
  probe GetStringChars-return(const uint16_t*);
  probe GetStringCritical-entry(void*, void*, uintptr_t*);
  probe GetStringCritical-return(const uint16_t*);
  probe GetStringLength-entry(void*, void*);
  probe GetStringLength-return(uintptr_t);
  probe GetStringRegion-entry(void*, void*, uintptr_t, uintptr_t, uint16_t*);
  probe GetStringRegion-return();
  probe GetStringUTFChars-entry(void*, void*, uintptr_t*);
  probe GetStringUTFChars-return(const char*);
  probe GetStringUTFLength-entry(void*, void*);
  probe GetStringUTFLength-return(uintptr_t);
  probe GetStringUTFRegion-entry(void*, void*, uintptr_t, uintptr_t, char*);
  probe GetStringUTFRegion-return();
  probe GetSuperclass-entry(void*, void*);
  probe GetSuperclass-return(void*);
  probe GetVersion-entry(void*);
  probe GetVersion-return(uint32_t);
  probe IsAssignableFrom-entry(void*, void*, void*);
  probe IsAssignableFrom-return(uintptr_t);
  probe IsInstanceOf-entry(void*, void*, void*);
  probe IsInstanceOf-return(uintptr_t);
  probe IsSameObject-entry(void*, void*, void*);
  probe IsSameObject-return(uintptr_t);
  probe MonitorEnter-entry(void*, void*);
  probe MonitorEnter-return(uint32_t);
  probe MonitorExit-entry(void*, void*);
  probe MonitorExit-return(uint32_t);
  probe NewBooleanArray-entry(void*, uintptr_t);
  probe NewBooleanArray-return(void*);
  probe NewByteArray-entry(void*, uintptr_t);
  probe NewByteArray-return(void*);
  probe NewCharArray-entry(void*, uintptr_t);
  probe NewCharArray-return(void*);
  probe NewDirectByteBuffer-entry(void*, void*, uintptr_t);
  probe NewDirectByteBuffer-return(void*);
  probe NewDoubleArray-entry(void*, uintptr_t);
  probe NewDoubleArray-return(void*);
  probe NewFloatArray-entry(void*, uintptr_t);
  probe NewFloatArray-return(void*);
  probe NewGlobalRef-entry(void*, void*);
  probe NewGlobalRef-return(void*);
  probe NewIntArray-entry(void*, uintptr_t);
  probe NewIntArray-return(void*);
  probe NewLocalRef-entry(void*, void*);
  probe NewLocalRef-return(void*);
  probe NewLongArray-entry(void*, uintptr_t);
  probe NewLongArray-return(void*);
  probe NewObjectA-entry(void*, void*, uintptr_t);  
  probe NewObjectA-return(void*);
  probe NewObjectArray-entry(void*, uintptr_t, void*, void*);
  probe NewObjectArray-return(void*);
  probe NewObject-entry(void*, void*, uintptr_t); 
  probe NewObject-return(void*);
  probe NewObjectV-entry(void*, void*, uintptr_t);  
  probe NewObjectV-return(void*);
  probe NewShortArray-entry(void*, uintptr_t);
  probe NewShortArray-return(void*);
  probe NewString-entry(void*, const uint16_t*, uintptr_t);
  probe NewString-return(void*);
  probe NewStringUTF-entry(void*, const char*);
  probe NewStringUTF-return(void*);
  probe NewWeakGlobalRef-entry(void*, void*);
  probe NewWeakGlobalRef-return(void*);
  probe PopLocalFrame-entry(void*, void*);
  probe PopLocalFrame-return(void*);
  probe PushLocalFrame-entry(void*, uint32_t);
  probe PushLocalFrame-return(uint32_t);
  probe RegisterNatives-entry(void*, void*, const void*, uint32_t);  
  probe RegisterNatives-return(uint32_t);
  probe ReleaseBooleanArrayElements-entry(void*, void*, uintptr_t*, uint32_t);
  probe ReleaseBooleanArrayElements-return();
  probe ReleaseByteArrayElements-entry(void*, void*, char*, uint32_t);
  probe ReleaseByteArrayElements-return();
  probe ReleaseCharArrayElements-entry(void*, void*, uint16_t*, uint32_t);
  probe ReleaseCharArrayElements-return();
  probe ReleaseDoubleArrayElements-entry(void*, void*, double*, uint32_t);
  probe ReleaseDoubleArrayElements-return();
  probe ReleaseFloatArrayElements-entry(void*, void*, float*, uint32_t);
  probe ReleaseFloatArrayElements-return();
  probe ReleaseIntArrayElements-entry(void*, void*, uint32_t*, uint32_t);
  probe ReleaseIntArrayElements-return();
  probe ReleaseLongArrayElements-entry(void*, void*, uintptr_t*, uint32_t);
  probe ReleaseLongArrayElements-return();
  probe ReleaseObjectArrayElements-entry(void*, void*, void**, uint32_t);
  probe ReleaseObjectArrayElements-return();
  probe Releasey(void*, void*, void*, uint32_t);
  probe ReleasePrimitiveArrayCritical-return();
  probe ReleaseShortArrayElements-entry(void*, void*, uint16_t*, uint32_t);
  probe ReleaseShortArrayElements-return();
  probe ReleaseStringChars-entry(void*, void*, const uint16_t*);
  probe ReleaseStringChars-return();
  probe ReleaseStringCritical-entry(void*, void*, const uint16_t*);
  probe ReleaseStringCritical-return();
  probe ReleaseStringUTFChars-entry(void*, void*, const char*);
  probe ReleaseStringUTFChars-return();
  probe SetBooleanArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const uintptr_t*);
  probe SetBooleanArrayRegion-return();
  probe SetBooleanField-entry(void*, void*, uintptr_t, uintptr_t);
  probe SetBooleanField-return();
  probe SetByteArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const char*);
  probe SetByteArrayRegion-return();
  probe SetByteField-entry(void*, void*, uintptr_t, char);
  probe SetByteField-return();
  probe SetCharArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const uint16_t*);
  probe SetCharArrayRegion-return();
  probe SetCharField-entry(void*, void*, uintptr_t, uint16_t);
  probe SetCharField-return();
  probe SetDoubleArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const double*);
  probe SetDoubleArrayRegion-return();
  probe SetDoubleField-entry(void*, void*, uintptr_t, double);
  probe SetDoubleField-return();
  probe SetFloatArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const float*);
  probe SetFloatArrayRegion-return();
  probe SetFloatField-entry(void*, void*, uintptr_t, float);
  probe SetFloatField-return();
  probe SetIntArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const uint32_t*);
  probe SetIntArrayRegion-return();
  probe SetIntField-entry(void*, void*, uintptr_t, uint32_t);
  probe SetIntField-return();
  probe SetLongArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const uintptr_t*);
  probe SetLongArrayRegion-return();
  probe SetLongField-entry(void*, void*, uintptr_t, uintptr_t);
  probe SetLongField-return();
  probe SetObjectArrayElement-entry(void*, void*, uintptr_t, void*);
  probe SetObjectArrayElement-return();
  probe SetObjectField-entry(void*, void*, uintptr_t, void*);
  probe SetObjectField-return();
  probe SetShortArrayRegion-entry(void*, void*, uintptr_t, uintptr_t, const uint16_t*);
  probe SetShortArrayRegion-return();
  probe SetShortField-entry(void*, void*, uintptr_t, uint16_t);
  probe SetShortField-return();
  probe SetStaticBooleanField-entry(void*, void*, uintptr_t, uintptr_t);
  probe SetStaticBooleanField-return();
  probe SetStaticByteField-entry(void*, void*, uintptr_t, char);
  probe SetStaticByteField-return();
  probe SetStaticCharField-entry(void*, void*, uintptr_t, uint16_t);
  probe SetStaticCharField-return();
  probe SetStaticDoubleField-entry(void*, void*, uintptr_t, double);
  probe SetStaticDoubleField-return();
  probe SetStaticFloatField-entry(void*, void*, uintptr_t, float);
  probe SetStaticFloatField-return();
  probe SetStaticIntField-entry(void*, void*, uintptr_t, uint32_t);
  probe SetStaticIntField-return();
  probe SetStaticLongField-entry(void*, void*, uintptr_t, uintptr_t);
  probe SetStaticLongField-return();
  probe SetStaticObjectField-entry(void*, void*, uintptr_t, void*);
  probe SetStaticObjectField-return();
  probe SetStaticShortField-entry(void*, void*, uintptr_t, uint16_t);
  probe SetStaticShortField-return();
  probe Throw-entry(void*, void*);
  probe ThrowNew-entry(void*, void*, const char*);  
  probe ThrowNew-return(uint32_t);
  probe Throw-return(uint32_t);
  probe ToReflectedField-entry(void*, void*, uintptr_t, uintptr_t);
  probe ToReflectedField-return(void*);
  probe ToReflectedMethod-entry(void*, void*, uintptr_t, uintptr_t);
  probe ToReflectedMethod-return(void*);
  probe UnregisterNatives-entry(void*, void*);  
  probe UnregisterNatives-return(uint32_t);
};
</pre></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment82">
<tr>
<td class="cellalignment89">
<table class="cellalignment87">
<tr>
<td class="cellalignment86"><a href="native-memory-tracking.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment86"><a href="error-reporting.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment91">
<table class="cellalignment85">
<tr>
<td class="cellalignment86"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment86"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment86"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
