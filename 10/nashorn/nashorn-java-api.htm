<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>The Nashorn Java API</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This section describes how to access Java from a script interpreted by the Nashorn engine." />
<meta name="dcterms.created" content="2018-03-13T07:54:55Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Nashorn User's Guide" />
<meta name="dcterms.identifier" content="E91080-01" />
<meta name="dcterms.isVersionOf" content="JSNUG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2014, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="introduction.htm" title="Previous" type="text/html" />
<link rel="Next" href="nashorn-and-javafx.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSNUG.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-0C8FD2AD-6000-425F-BC22-25AAC6A14225"></a> <span id="PAGE" style="display:none;">5/8</span> <!-- End Header -->
<a id="JSNUG113"></a><a id="JSNUG112"></a>
<h1 id="JSNUG-GUID-0C8FD2AD-6000-425F-BC22-25AAC6A14225" class="sect1"><span class="enumeration_chapter">2</span> The Nashorn Java API</h1>
<div>
<div><span>This section describes how to access Java from a script interpreted by the Nashorn engine.</span></div>
<p>This section contains examples of script statements interpreted by the Nashorn engine in interactive language shell mode. This interactive shell is started by running the <a class="olink JSWOR-GUID-0F3625BB-9E0E-46C3-8FF1-CEFDD91EDF85" target="_blank" href="../tools/jjs.htm#JSWOR-GUID-0F3625BB-9E0E-46C3-8FF1-CEFDD91EDF85"><code class="codeph">jjs</code></a> command without any scripts passed to it. This is useful for trying things out, but the main purpose of the Nashorn Java API is to write Java applications as scripts that can be interpreted by the Nashorn engine.</p>
<div class="section">
<p class="subhead1">Topics</p>
<ul style="list-style-type: disc;">
<li><a href="nashorn-java-api.htm#GUID-336B7904-ABCF-4588-A640-C2F7746F8333" title="There are two approaches to access packages and classes using Nashorn: the traditional approach is to use the Packages global object, and the recommended approach is to use the Java global object. This section describes both approaches.">Accessing Java Classes</a></li>
<li><a href="nashorn-java-api.htm#GUID-5EB82F41-6871-4896-8495-6D3DA373DE13" title="To instantiate a class, pass the JavaClass function object to the new operator. Nashorn invokes the corresponding constructor based on the arguments passed to the function.">Creating Java Objects</a></li>
<li><a href="nashorn-java-api.htm#GUID-5ED04A1E-9269-463A-AFB8-7A6C365ABC9F" title="You can use the standard dot notation to access static fields, methods, and inner classes as follows.">Accessing Class and Instance Members</a></li>
<li><a href="nashorn-java-api.htm#GUID-594ED1F7-993A-433F-A2AE-B1B8B12E1690" title="Nashorn enables you to treat accessor and mutator methods in JavaBeans as equivalent JavaScript properties. The name of the property is the name of the JavaBean method without the get or set suffix, and starts with a lowecase letter.">Using JavaBeans</a></li>
<li><a href="nashorn-java-api.htm#GUID-B63F085D-82E0-4B45-AC85-B0F78A213E9D" title="To access a Java array class, pass to the Java.type() function the type of objects that comprise the array followed by a pair of brackets (similar to Java syntax).">Working with Java Arrays</a></li>
<li><a href="nashorn-java-api.htm#GUID-1674531B-4008-4871-B47E-D13628616C66" title="Nashorn represents strings as java.lang.String objects. When you concatenate two strings, you get a String instance.">Working with Java Strings</a></li>
<li><a href="nashorn-java-api.htm#GUID-191A697D-23F8-4F73-BAAD-FCE653BECF36" title="Nashorn interprets numbers as java.lang.Double, java.lang.Long, or java.lang.Integer objects, depending on the computation performed. You can use the Number() function to force a number to be a Double object, as shown in the following example.">Working with Java Numbers</a></li>
<li><a href="nashorn-java-api.htm#GUID-D1C84FB4-33D6-4584-843A-FD3356C4D11F" title="Nashorn interprets Java lists as arrays; iterate over the values of a list with the for each statement. To iterate over keys and values in a map, use the keySet() and values() methods.">Working with Java Lists and Maps</a></li>
<li><a href="nashorn-java-api.htm#GUID-B631F440-2320-47D7-8012-85A70A40F986" title="You can extend a class using the Java.extend() function that takes a Java type as the first argument and method implementations (in the form of JavaScript functions) as the other arguments.">Extending Java Classes</a></li>
<li><a href="nashorn-java-api.htm#GUID-44255E9F-8FAE-4FFD-84BA-90A572AFC51B" title="The jdk.nashorn.api.scripting.ClassFilter interface provides fine-grained control over access to Java classes from JavaScript code by restricting access to specified Java classes from scripts run by a Nashorn script engine.">Restricting Script Access to Specified Java Classes</a></li>
</ul>
</div>
<!-- class="section" --></div>
<a id="JSNUG114"></a>
<div class="props_rev_3"><a id="GUID-336B7904-ABCF-4588-A640-C2F7746F8333"></a>
<h2 id="JSNUG-GUID-336B7904-ABCF-4588-A640-C2F7746F8333" class="sect2">Accessing Java Classes</h2>
<div>
<p>There are two approaches to access packages and classes using Nashorn: the traditional approach is to use the <code class="codeph">Packages</code> global object, and the recommended approach is to use the <code class="codeph">Java</code> global object. This section describes both approaches.</p>
<p>The predefined top-level <code class="codeph">Packages</code> object enables you to access Java packages and classes using their fully qualified names, as if they are properties of the <code class="codeph">Packages</code> object. The following example shows how you can access the <code class="codeph">MyPackage</code> package and its <code class="codeph">MyClass</code> class if <code class="codeph">MyPackage.jar</code> is in your class path:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">Packages.MyPackage</span>
[JavaPackage MyPackage]
jjs&gt; <span class="bold">Packages.MyPackage.MyClass</span>
[JavaClass MyPackage.MyClass]
</pre>
<p>Accessing standard Java packages and classes is more straightforward than accessing custom packages and classes. For your convenience, there are global objects defined for each of the standard Java packages: <code class="codeph">com</code>, <code class="codeph">edu</code>, <code class="codeph">java</code>, <code class="codeph">javafx</code>, <code class="codeph">javax</code>, and <code class="codeph">org</code>. They have aliases that correspond to properties of the <code class="codeph">Packages</code> object. The following example shows how you can access the <code class="codeph">java.lang</code> package and the <code class="codeph">java.lang.System</code> class:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">java.lang</span>
[JavaPackage java.lang]
jjs&gt; <span class="bold">typeof java.lang</span>
object
jjs&gt; <span class="bold">java.lang.System</span>
[JavaClass java.lang.System]
jjs&gt; <span class="bold">typeof java.lang.System</span>
function
</pre>
<p>As you can see from the previous example, Nashorn interprets Java packages as <code class="codeph">JavaPackage</code> objects, and Java classes as <code class="codeph">JavaClass</code> function objects, which can be used as constructors for the classes. <a href="nashorn-java-api.htm#GUID-5EB82F41-6871-4896-8495-6D3DA373DE13" title="To instantiate a class, pass the JavaClass function object to the new operator. Nashorn invokes the corresponding constructor based on the arguments passed to the function.">Creating Java Objects</a> describes how to instantiate a class.</p>
<p>The traditional approach for accessing Java packages and classes is intuitive and straightforward, but at the same time, it can be inefficient, limited, and error-prone for the following reasons:</p>
<ul style="list-style-type: disc;">
<li>
<p>Each property access has a cost, so accessing a package or class in a deep hierarchy can be slow.</p>
</li>
<li>
<p>There is no special syntax for creating Java arrays. You must use the <code class="codeph">java.lang.reflect.Array</code> class as a workaround.</p>
</li>
<li>
<p>If you misspell a class name, Nashorn assumes that you provided a package name, and interprets it as a <code class="codeph">JavaPackage</code> object instead of a <code class="codeph">JavaClass</code> function object. You might not be aware of this until an error is thrown when you attempt to use it as a class. To avoid this, use the <code class="codeph">typeof</code> operator to conditionally test that the construct you are trying to access is interpreted as a function object. The following example shows how this conditional check works:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">typeof java.lang.System == "function"</span>
true
jjs&gt; <span class="bold">typeof java.lang.Zyztem == "function"</span>
false
</pre></li>
</ul>
<p>To avoid the disadvantages of the approach previously described, Nashorn defines the <code class="codeph">Java</code> global object that has several functions for working with Java classes. The <code class="codeph">Java.type()</code> function takes a string with the fully qualified Java class name, and returns the corresponding <code class="codeph">JavaClass</code> function object. The following example shows how you can access the <code class="codeph">java.lang.System</code> class:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">Java.type("java.lang.System")</span>
[JavaClass java.lang.System]
</pre>
<p>Similar to importing classes in Java, it is a good practice to declare variables of <code class="codeph">JavaClass</code> type at the beginning of a script. The following example shows how you can declare the <code class="codeph">System</code> variable and give it a value of the <code class="codeph">java.lang.System</code> class:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var System = Java.type("java.lang.System")</span>
jjs&gt; <span class="bold">System</span>
[JavaClass java.lang.System]
</pre></div>
</div>
<a id="JSNUG115"></a>
<div class="props_rev_3"><a id="GUID-5EB82F41-6871-4896-8495-6D3DA373DE13"></a>
<h2 id="JSNUG-GUID-5EB82F41-6871-4896-8495-6D3DA373DE13" class="sect2">Creating Java Objects</h2>
<div>
<p>To instantiate a class, pass the <code class="codeph">JavaClass</code> function object to the <code class="codeph">new</code> operator. Nashorn invokes the corresponding constructor based on the arguments passed to the function.</p>
<div class="section">
<p>The following example shows how you can instantiate the <code class="codeph">java.util.HashMap</code> class with the default initial capacity and with the initial capacity set to 100:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var HashMap = Java.type("java.util.HashMap")</span>
jjs&gt; <span class="bold">var mapDef = new HashMap()</span>
jjs&gt; <span class="bold">var map100 = new HashMap(100)</span>
</pre></div>
<!-- class="section" --></div>
</div>
<a id="JSNUG116"></a>
<div class="props_rev_3"><a id="GUID-5ED04A1E-9269-463A-AFB8-7A6C365ABC9F"></a>
<h2 id="JSNUG-GUID-5ED04A1E-9269-463A-AFB8-7A6C365ABC9F" class="sect2">Accessing Class and Instance Members</h2>
<div>
<p>You can use the standard dot notation to access static fields, methods, and inner classes as follows.</p>
<div class="section">
<pre dir="ltr">
jjs&gt; <span class="bold">Java.type("java.lang.Math").PI</span>
3.141592653589793
jjs&gt; <span class="bold">Java.type("java.lang.System").currentTimeMillis()</span>
1375813353330
jjs&gt; <span class="bold">Java.type("java.util.Map").Entry</span>
[JavaClass java.util.Map$Entry]
</pre>
<p>An inner class can also be accessed using internal representation with the dollar sign (<code class="codeph">$</code>) as the separator, or a dot, which is consistent with Java:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">Java.type("java.util.Map$Entry")</span>
[JavaClass java.util.Map$Entry]
jjs&gt; <span class="bold">Java.type("java.util.Map.Entry")</span>
[JavaClass java.util.Map$Entry]
</pre>
<p>To invoke an instance method or access an instance field of an object, use the dot operator, similar to how it is done in Java. The following example shows how you can call the <code class="codeph">toUpperCase()</code> method on a <code class="codeph">String</code> object:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var String = Java.type("java.lang.String")</span>
jjs&gt; <span class="bold">var str = new String("Hello")</span>
jjs&gt; str
Hello
jjs&gt; <span class="bold">var upper = str.toUpperCase()</span>
jjs&gt; <span class="bold">upper</span>
HELLO
</pre>
<p>Nashorn also supports member access using the bracket notation, where you specify the name of the member as a string between brackets (<code class="codeph">[]</code>) that immediately follow the class (in case of a static member) or object (in case of an instance member). This method is defined by the ECMAScript as an alternative to the dot notation, and is not intuitive for Java developers. However, it can be used to resolve method overload ambiguity. By default, Nashorn uses the overloaded method that best matches the arguments, and this is not always what you expect. For example, if you want to print a <code class="codeph">double</code> value, you must use the <code class="codeph">java.lang.System.out.println(double)</code> method overload, as shown in the following example:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">Java.type("java.lang.System").out.println(10)</span>
10
jjs&gt; <span class="bold">Java.type("java.lang.System").out["println(double)"](10)</span>
10.0
</pre></div>
<!-- class="section" --></div>
</div>
<a id="JSNUG117"></a>
<div class="props_rev_3"><a id="GUID-594ED1F7-993A-433F-A2AE-B1B8B12E1690"></a>
<h2 id="JSNUG-GUID-594ED1F7-993A-433F-A2AE-B1B8B12E1690" class="sect2">Using JavaBeans</h2>
<div>
<p>Nashorn enables you to treat accessor and mutator methods in JavaBeans as equivalent JavaScript properties. The name of the property is the name of the JavaBean method without the <code class="codeph">get</code> or <code class="codeph">set</code> suffix, and starts with a lowecase letter.</p>
<div class="section">
<p>For example you can call the <code class="codeph">getYear()</code> and <code class="codeph">setYear()</code> methods in a <code class="codeph">java.util.Date</code> object using the <code class="codeph">year</code> property as follows:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var Date = Java.type("java.util.Date")</span>
jjs&gt; <span class="bold">var date = new Date()</span>
jjs&gt; <span class="bold">date.year + 1900</span>
2013
jjs&gt; <span class="bold">date.year = 2014 - 1900</span>
114
jjs&gt; <span class="bold">date.year + 1900</span>
2014
</pre></div>
<!-- class="section" --></div>
</div>
<a id="JSNUG118"></a>
<div class="props_rev_3"><a id="GUID-B63F085D-82E0-4B45-AC85-B0F78A213E9D"></a>
<h2 id="JSNUG-GUID-B63F085D-82E0-4B45-AC85-B0F78A213E9D" class="sect2">Working with Java Arrays</h2>
<div>
<p>To access a Java array class, pass to the <code class="codeph">Java.type()</code> function the type of objects that comprise the array followed by a pair of brackets (similar to Java syntax).</p>
<div class="section">
<p>The following example shows how you can access a Java array of integers and a Java array of <code class="codeph">String</code> objects:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">Java.type("int[]")</span>
[JavaClass [I]
jjs&gt; <span class="bold">Java.type("java.lang.String[]")</span>
[JavaClass [Ljava.lang.String;]
</pre>
<p>After you have the array type object, you can use it to instantiate an array as you do any other class. You can access array entries by their indexes, and use the dot or bracket notation to access members (similar to Java syntax), as shown in the following example:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var IntArrayType = Java.type("int[]")</span>
jjs&gt; <span class="bold">var arr = new IntArrayType(10)</span>
jjs&gt; <span class="bold">arr[1] = 123</span>
123
jjs&gt; <span class="bold">arr[2] = 321</span>
321
jjs&gt; <span class="bold">arr[1] + arr[2]</span>
444
jjs&gt; <span class="bold">arr[10]</span>
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 10
jjs&gt; <span class="bold">arr.length</span>
10
</pre>
<p>If you have an existing JavaScript array, you can convert it to a Java array using the <code class="codeph">Java.to()</code> function. The following example shows how you can convert a JavaScript array of strings <code class="codeph">"a"</code>, <code class="codeph">"b"</code>, and <code class="codeph">"c"</code>, to a <code class="codeph">java.lang.String[]</code> array with the same values:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var jsArr = ["a","b","c"]</span>
jjs&gt; <span class="bold">var strArrType = Java.type("java.lang.String[]")</span>
jjs&gt; <span class="bold">var javaArr = Java.to(jsArr, strArrType)</span>
jjs&gt; <span class="bold">javaArr.class</span>
class [Ljava.lang.String;
jjs&gt; <span class="bold">javaArr[0]</span>
a
</pre>
<p>You can iterate through a Java array's indexes and values using the <code class="codeph">for</code> and <code class="codeph">for each</code> statements as follows:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">for (var i in javaArr) print(i)</span>
0
1
2
jjs&gt; <span class="bold">for each (var i in javaArr) print(i)</span>
a
b
c
</pre></div>
<!-- class="section" --></div>
</div>
<a id="JSNUG119"></a>
<div class="props_rev_3"><a id="GUID-1674531B-4008-4871-B47E-D13628616C66"></a>
<h2 id="JSNUG-GUID-1674531B-4008-4871-B47E-D13628616C66" class="sect2">Working with Java Strings</h2>
<div>
<p>Nashorn represents strings as <code class="codeph">java.lang.String</code> objects. When you concatenate two strings, you get a <code class="codeph">String</code> instance.</p>
<div class="section">
<pre dir="ltr">
jjs&gt; <span class="bold">var a = "abc"</span>
jjs&gt; <span class="bold">a.class</span>
class java.lang.String
jjs&gt; <span class="bold">var b = a + "def"</span>
jjs&gt; <span class="bold">b.class</span>
class java.lang.String
jjs&gt; <span class="bold">var c = String(b)</span>
jjs&gt; <span class="bold">c.class</span>
class java.lang.String
</pre></div>
<!-- class="section" --></div>
</div>
<a id="JSNUG120"></a>
<div class="props_rev_3"><a id="GUID-191A697D-23F8-4F73-BAAD-FCE653BECF36"></a>
<h2 id="JSNUG-GUID-191A697D-23F8-4F73-BAAD-FCE653BECF36" class="sect2">Working with Java Numbers</h2>
<div>
<p>Nashorn interprets numbers as <code class="codeph">java.lang.Double</code>, <code class="codeph">java.lang.Long</code>, or <code class="codeph">java.lang.Integer</code> objects, depending on the computation performed. You can use the <code class="codeph">Number()</code> function to force a number to be a <code class="codeph">Double</code> object, as shown in the following example.</p>
<div class="section">
<pre dir="ltr">
jjs&gt; <span class="bold">var intNum = 10</span>
jjs&gt; <span class="bold">intNum.class</span>
class java.lang.Integer
jjs&gt; <span class="bold">var dblNum = Number(intNum)</span>
jjs&gt; <span class="bold">dblNum.class</span>
class java.lang.Double
</pre></div>
<!-- class="section" --></div>
</div>
<a id="JSNUG121"></a>
<div class="props_rev_3"><a id="GUID-D1C84FB4-33D6-4584-843A-FD3356C4D11F"></a>
<h2 id="JSNUG-GUID-D1C84FB4-33D6-4584-843A-FD3356C4D11F" class="sect2">Working with Java Lists and Maps</h2>
<div>
<p>Nashorn interprets Java lists as arrays; iterate over the values of a list with the <code class="codeph">for each</code> statement. To iterate over keys and values in a map, use the <code class="codeph">keySet()</code> and <code class="codeph">values()</code> methods.</p>
<div class="section">
<p>You can access list elements by using the index in brackets (<code class="codeph">[]</code>) and iterate over the values of a list using the <code class="codeph">for each</code> statement, as shown in the following example.</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var ArrayList = Java.type("java.util.ArrayList")</span>
jjs&gt; <span class="bold">var alist = new ArrayList()</span>
jjs&gt; <span class="bold">alist.add("a")</span>
true
jjs&gt; <span class="bold">alist.add("b")</span>
true
jjs&gt; <span class="bold">alist.add("c")</span>
true
jjs&gt; <span class="bold">alist[1]</span>
b
jjs&gt; <span class="bold">for each (var i in alist) print(i)</span>
a
b
c
</pre>
<div class="infobox-note" id="GUID-D1C84FB4-33D6-4584-843A-FD3356C4D11F__GUID-312AC634-ED0F-4BDF-9F3A-23D0A3872720">
<p class="notep1">Note:</p>
You can only access list and map elements by using the index in brackets; in particular, you cannot access queue and set elements by using this syntax.</div>
<p>The following example shows how you can create a <code class="codeph">HashMap</code> object and iterate over its keys and values with the <code class="codeph">keySet()</code> and <code class="codeph">values()</code> methods.</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var HashMap = Java.type("java.util.HashMap")</span>
jjs&gt; <span class="bold">var hm = new HashMap()</span>
jjs&gt; <span class="bold">hm.put("name", "Bob")</span>
jjs&gt; <span class="bold">hm.put("age", 40)</span>
jjs&gt; <span class="bold">hm.put("weight", 180)</span>
jjs&gt; <span class="bold">for each (var i in hm.keySet()) print(i)</span>
weight
age
name
jjs&gt; <span class="bold">for each (var i in hm.values()) print(i)</span>
180
40
Bob
</pre>
<p>Alternatively, you can iterate over the values of a map the same way you iterate over the values of a list, as shown in the following example:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">for each (var i in hm) print(i)</span>
180
40
Bob
</pre></div>
<!-- class="section" --></div>
</div>
<a id="JSNUG123"></a><a id="JSNUG124"></a><a id="JSNUG122"></a>
<div class="props_rev_3"><a id="GUID-B631F440-2320-47D7-8012-85A70A40F986"></a>
<h2 id="JSNUG-GUID-B631F440-2320-47D7-8012-85A70A40F986" class="sect2">Extending Java Classes</h2>
<div>
<p>You can extend a class using the <code class="codeph">Java.extend()</code> function that takes a Java type as the first argument and method implementations (in the form of JavaScript functions) as the other arguments.</p>
<div class="section">
<p>The following script extends the <code class="codeph">java.lang.Runnable</code> interface and uses it to construct a new <code class="codeph">java.lang.Thread</code> object:</p>
<pre dir="ltr">
var Run = Java.type("java.lang.Runnable");
var MyRun = Java.extend(Run, {
    run: function() {
        print("Run in separate thread");
    }
});
var Thread = Java.type("java.lang.Thread");
var th = new Thread(new MyRun());
</pre>
<p>Nashorn can automatically extend functional interfaces (see the annotation type <a href="http://docs.oracle.com/javase/9/docs/api/java/lang/FunctionalInterface.html" target="_blank"><span class="apiname">FunctionalInterface</span></a>) if you provide the function for implementing the method as the argument to the constructor. The following script extends the <code class="codeph">java.lang.Runnable</code> interface and uses it to construct a new <code class="codeph">java.lang.Thread</code> object, but it uses fewer lines of code than in <a href="nashorn-java-api.htm#GUID-B631F440-2320-47D7-8012-85A70A40F986__CDEFGJBD">Example 2-1</a>, because the <code class="codeph">Java.extend()</code> function is called automatically for a functional interface.</p>
<pre dir="ltr">
var Thread = Java.type("java.lang.Thread")
var th = new Thread(function() print("Run in a separate thread"))
</pre>
<p><a class="olink JSJSG-GUID-B631F440-2320-47D7-8012-85A70A40F986" target="_blank" href="http://www.oracle.com/pls/topic/lookup?ctx=E92405-01&amp;id=JSJSG-GUID-B631F440-2320-47D7-8012-85A70A40F986">Extending Java Classes</a> in <span><cite>Java Platform, Standard Edition Java Scripting Programmer's Guide</cite></span> describes the capabilities of the <code class="codeph">Java.extend()</code> function.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B631F440-2320-47D7-8012-85A70A40F986__CDEFGJBD">
<p class="titleinexample">Example 2-1 Extending a Java Class</p>
<pre dir="ltr">
var Run = Java.type("java.lang.Runnable");
var MyRun = Java.extend(Run, {
    run: function() {
        print("Run in separate thread");
    }
});
var Thread = Java.type("java.lang.Thread");
var th = new Thread(new MyRun());
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B631F440-2320-47D7-8012-85A70A40F986__CDEHEEHG">
<p class="titleinexample">Example 2-2 Extending a Functional Interface</p>
<pre dir="ltr">
var Thread = Java.type("java.lang.Thread")
var th = new Thread(function() print("Run in a separate thread"))
</pre></div>
<!-- class="example" --></div>
</div>
<a id="JSNUG125"></a>
<div class="props_rev_3"><a id="GUID-44255E9F-8FAE-4FFD-84BA-90A572AFC51B"></a>
<h2 id="JSNUG-GUID-44255E9F-8FAE-4FFD-84BA-90A572AFC51B" class="sect2">Restricting Script Access to Specified Java Classes</h2>
<div>
<p>The <code class="codeph">jdk.nashorn.api.scripting.ClassFilter</code> interface provides fine-grained control over access to Java classes from JavaScript code by restricting access to specified Java classes from scripts run by a Nashorn script engine.</p>
<p>Applications that embed Nashorn, in particular, server-side JavaScript frameworks, often have to run scripts from untrusted sources and therefore must limit access to Java APIs. These applications can implement the <a href="https://docs.oracle.com/javase/9/docs/api/jdk/nashorn/api/scripting/ClassFilter.html" target="_blank"><span class="apiname">ClassFilter</span></a> interface to restrict Java class access to a subset of Java classes. To do so, client applications must use Nashorn APIs to instantiate the Nashorn script engine.</p>
<div class="infobox-note" id="GUID-44255E9F-8FAE-4FFD-84BA-90A572AFC51B__GUID-38BC71CE-A2BD-4519-85B1-0721B004B440">
<p class="notep1">Note:</p>
While the <span class="apiname">ClassFilter</span> interface can prevent access to Java classes, it is not enough to run untrusted scripts securely. The <span class="apiname">ClassFilter</span> interface is not a replacement for a security manager. Applications should still run with a security manager before evaluating scripts from untrusted sources. Class filtering provides finer control beyond what a security manager provides. For example, an application that embeds Nashorn may prevent the spawning of threads from scripts or other resource-intensive operations that may be allowed by security manager.</div>
</div>
<a id="JSNUG126"></a>
<div class="props_rev_3"><a id="GUID-8C6BE273-E3D3-475F-B56B-14458DE9F33F"></a>
<h3 id="JSNUG-GUID-8C6BE273-E3D3-475F-B56B-14458DE9F33F" class="sect3">Using Class Filters</h3>
<div>
<p>To use a class filter, implement the <code class="codeph">ClassFilter</code> interface and define the method <code class="codeph">boolean exposeToScripts(String)</code>.</p>
<div class="section">
<p>The <code class="codeph">String</code> argument is the name of the Java class or package that the Nashorn script engine encounters when it runs a script. Define the method <code class="codeph">exposeToScripts</code> such that it returns <code class="codeph">false</code> for those classes and packages you want to prevent scripts from accessing. Then, create a Nashron script engine with your class filter with the method <code class="codeph">NashornScriptEngineFactory.getScriptEngine(ClassFilter)</code> or <code class="codeph">NashornScriptEngineFactory.getScriptEngine(String[], ClassLoader, ClassFilter)</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSNUG127"></a>
<div class="props_rev_3"><a id="GUID-FBB32DB3-CF59-4016-B690-9581E1406594"></a>
<h3 id="JSNUG-GUID-FBB32DB3-CF59-4016-B690-9581E1406594" class="sect3">Restricting Access to Java Reflection APIs</h3>
<div>
<p>If you are using a security manager, then Nashorn allows a script to use the Java Reflection APIs (for example, the <code class="codeph">java.lang.reflect</code> and <code class="codeph">java.lang.invoke</code> packages) only if the script has the <code class="codeph">nashorn.javaReflection</code> run time permission.</p>
<div class="section">
<p>If you are using a class filter, then Nashorn prevents access to Java Reflection APIs even when a security manager is not present. Note that you do not need to use a class filter if the Java Reflection APIs are available because a script can use the <code class="codeph">Class.forName(String)</code> to circumvent the class filter.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSNUG129"></a><a id="JSNUG128"></a>
<div class="props_rev_3"><a id="GUID-AEA63402-EE9B-42B4-95E6-BACAC990C04D"></a>
<h3 id="JSNUG-GUID-AEA63402-EE9B-42B4-95E6-BACAC990C04D" class="sect3">Example of Using the ClassFilter Interface</h3>
<div>
<p>This example, <code class="codeph">MyClassFilterTest.java</code>, demonstrates the <code class="codeph">ClassFilter</code> interface. It restricts scripts&rsquo; access to the class <span class="apiname">java.io.File</span>.</p>
<div class="section">
<pre dir="ltr">
import javax.script.ScriptEngine;
import jdk.nashorn.api.scripting.ClassFilter;
import jdk.nashorn.api.scripting.NashornScriptEngineFactory;
 
public class MyClassFilterTest {
 
  class MyCF implements ClassFilter {
    @Override
    public boolean exposeToScripts(String s) {
      if (s.compareTo("java.io.File") == 0) return false;
      return true;
    }
  }
 
  public void testClassFilter() {
 
    final String script =
      "print(java.lang.System.getProperty(\"java.home\"));" +
      "print(\"Create file variable\");" +
      "var File = Java.type(\"java.io.File\");";
 
    NashornScriptEngineFactory factory = new NashornScriptEngineFactory();
 
    ScriptEngine engine = factory.getScriptEngine(
      new MyClassFilterTest.MyCF());
    try {
      engine.eval(script);
    } catch (Exception e) {
      System.out.println("Exception caught: " + e.toString());
    }
  }
 
  public static void main(String[] args) {
    MyClassFilterTest myApp = new MyClassFilterTest();
    myApp.testClassFilter();
  }
}
</pre>
<p>This example prints the following:</p>
<pre dir="ltr">
C:\Java\jre8
Create file variable
Exception caught: java.lang.RuntimeException: java.lang.ClassNotFoundException:
java.io.File
</pre>
<p>The <code class="codeph">MyClassFilterTest.java</code> example does the following:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Implements the <code class="codeph">ClassFilter</code> with the inner class <code class="codeph">MyCF</code> by defining the method <code class="codeph">exposeToScripts</code>. In this example, the method <code class="codeph">exposeToScripts</code> returns false if its <code class="codeph">String</code> argument is <code class="codeph">java.io.File</code>; otherwise it returns <code class="codeph">true</code>.</span></li>
<li class="stepexpand"><span>Creates a Nashorn script engine, <code class="codeph">engine</code>, with the method <code class="codeph">NashornScriptEngineFactory.getScriptEngine(ClassFilter)</code>. The example invokes <code class="codeph">getScriptEgnine</code> with an instance of <code class="codeph">MyCF</code>.</span></li>
<li class="stepexpand"><span>Runs the following script with the Nashorn script engine <code class="codeph">engine</code>:</span>
<div>
<pre dir="ltr">
print(java.lang.System.getProperty(\"java.home\"));
print(\"Create file variable\");
var File = Java.type(\"java.io.File\");
</pre>
<p>The class filter in <code class="codeph">engine</code> checks each Java package and class in the script. When the class filter encounters the class <code class="codeph">java.io.File</code>, the class filter returns <code class="codeph">false</code>, and the <code class="codeph">Java.type</code> function throws a <code class="codeph">ClassNotFoundException</code>.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment505">
<tr>
<td class="cellalignment512">
<table class="cellalignment510">
<tr>
<td class="cellalignment509"><a href="introduction.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment509"><a href="nashorn-and-javafx.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2014, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment514">
<table class="cellalignment508">
<tr>
<td class="cellalignment509"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment509"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment509"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
