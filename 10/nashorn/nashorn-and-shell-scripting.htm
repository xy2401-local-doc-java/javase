<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Nashorn and Shell Scripting</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This section describes the extensions of the Nashorn engine that enable you to use UNIX shell scripting features for JavaScript scripts." />
<meta name="dcterms.created" content="2018-03-13T07:54:55Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Nashorn User's Guide" />
<meta name="dcterms.identifier" content="E91080-01" />
<meta name="dcterms.isVersionOf" content="JSNUG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2014, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="nashorn-and-javafx.htm" title="Previous" type="text/html" />
<link rel="Next" href="javafx-script-application-examples.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSNUG.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C6DCDAEC-67AA-49F3-9143-9181C681E2E6"></a> <span id="PAGE" style="display:none;">7/8</span> <!-- End Header -->
<a id="JSNUG155"></a><a id="JSNUG154"></a>
<h1 id="JSNUG-GUID-C6DCDAEC-67AA-49F3-9143-9181C681E2E6" class="sect1"><span class="enumeration_chapter">4</span> Nashorn and Shell Scripting</h1>
<div>
<div><span>This section describes the extensions of the Nashorn engine that enable you to use UNIX shell scripting features for JavaScript scripts.</span></div>
<p>You can enable shell scripting extensions in Nashorn using the <a class="olink JSWOR-GUID-0F3625BB-9E0E-46C3-8FF1-CEFDD91EDF85" target="_blank" href="../tools/jjs.htm#JSWOR-GUID-0F3625BB-9E0E-46C3-8FF1-CEFDD91EDF85"><code>jjs</code></a> command with the <code class="codeph">-scripting</code> option. For example, the following command invokes Nashorn in interactive mode with shell scripting extensions enabled:</p>
<pre dir="ltr">
jjs -scripting
</pre>
<p>In addition to the standard JavaScript comments (<code class="codeph">//</code> and <code class="codeph">/*</code> <code class="codeph">*/</code>), Nashorn supports shell-style comments using the number sign (<code class="codeph">#</code>). If the number sign is the first character in a script, then the Nashorn shell scripting extensions are automatically enabled when you interpret the script, even if you use the <code class="codeph">jjs</code> tool without the <code class="codeph">-scripting</code> option. This is useful when specifying the shebang (<code class="codeph">#!</code>) at the beginning of a script to run it as a shell executable. See <a href="nashorn-and-shell-scripting.htm#GUID-BB003552-BF07-4029-9E68-745A8A235827" title="You can use the shebang (#!) at the beginning of a script file to enable the script file to run as a shell executable. If you specify the path to the jjs tool in the shebang, then when you execute the script, the shell runs the jjs tool instead, and passes the script file to it.">Shebang</a>.</p>
<div class="section">
<p class="subhead1">Topics</p>
<ul style="list-style-type: disc;">
<li><a href="nashorn-and-shell-scripting.htm#GUID-BB003552-BF07-4029-9E68-745A8A235827" title="You can use the shebang (#!) at the beginning of a script file to enable the script file to run as a shell executable. If you specify the path to the jjs tool in the shebang, then when you execute the script, the shell runs the jjs tool instead, and passes the script file to it.">Shebang</a></li>
<li><a href="nashorn-and-shell-scripting.htm#GUID-D51BDF86-4221-4199-98BC-CDA0BC237B85" title="String interpolation is used in UNIX shells to construct strings that contain values of variables or expressions. With shell scripting features enabled, Nashorn enables you to embed variables and expressions into string literals in the same way.">String Interpolation</a></li>
<li><a href="nashorn-and-shell-scripting.htm#GUID-C6FDE05C-EBD4-47AE-9C67-0DA76C9DE771" title="A here document (heredoc) specifies strings in UNIX shells that preserve line breaks and indentations. With shell scripting features enabled, you can use Nashorn to evaluate scripts with heredocs.">Here Document</a></li>
<li><a href="nashorn-and-shell-scripting.htm#GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1" title="With shell scripting features enabled, Nashorn defines several global objects.">Global Objects</a></li>
<li><a href="nashorn-and-shell-scripting.htm#GUID-9D5E4301-C777-465D-887E-654E6D7A42FA" title="Nashorn defines several built-in functions: echo, readLine and readFully functions are defined only for -scripting mode. Other extensions like quit, exit, load, loadWithNewGlobal, Object.bindProperties are always available.">Additional Nashorn Built-in Functions</a></li>
</ul>
</div>
<!-- class="section" --></div>
<a id="JSNUG157"></a><a id="JSNUG156"></a>
<div class="props_rev_3"><a id="GUID-BB003552-BF07-4029-9E68-745A8A235827"></a>
<h2 id="JSNUG-GUID-BB003552-BF07-4029-9E68-745A8A235827" class="sect2">Shebang</h2>
<div>
<p>You can use the shebang (<code class="codeph">#!</code>) at the beginning of a script file to enable the script file to run as a shell executable. If you specify the path to the <code class="codeph">jjs</code> tool in the shebang, then when you execute the script, the shell runs the <code class="codeph">jjs</code> tool instead, and passes the script file to it.</p>
<p>The <code class="codeph">jjs</code> tool is located in the <code class="codeph">JAVA_HOME/bin</code> directory, where <code class="codeph">JAVA_HOME</code> is the installation directory of the JDK (or the JRE). When you install the JDK, the <code class="codeph">JAVA_HOME</code> environment variable is usually set up automatically. If it was not set up automatically, or if you have several versions of the JDK installed, set the <code class="codeph">JAVA_HOME</code> environment variable to the correct path of the JDK installation directory manually.</p>
<p>You can specify the direct path to the <code class="codeph">jjs</code> tool in the shebang, but it is a good practice to create a symbolic link in the <code class="codeph">/usr/bin</code> directory as follows:</p>
<pre dir="ltr">
&gt;&gt; <span class="bold">cd /usr/bin</span>
&gt;&gt; <span class="bold">ln -s $JAVA_HOME/bin/jjs jjs</span>
&gt;&gt; 
</pre>
<div class="infobox-note" id="GUID-BB003552-BF07-4029-9E68-745A8A235827__GUID-DFB813BA-510C-4112-8285-C9A80E52B888">
<p class="notep1">Note:</p>
<p>You might have to run the <code class="codeph">ln</code> command with root privileges using <code class="codeph">sudo</code>.</p>
</div>
<p>After you set up the symbolic link, you can create Nashorn scripts that can be run as executables. Also, it is possible to add command-line options directly to the shebang statement. The following example, <code>scriptArgs.js</code>, shows an executable script that prints the version of the Nashorn engine and then the arguments passed to the script.</p>
<pre dir="ltr">
#!/usr/bin/jjs -fv
print("Arguments: " + arguments);
</pre>
<p>If you run the <code class="codeph">scriptArgs.js</code> file as a shell executable, it is interpreted by the Nashorn engine as follows:</p>
<pre dir="ltr">
&gt;&gt; <span class="bold">./scriptArgs.js -- arg1 arg2 arg3</span>
nashorn full version 1.8.0
Arguments: arg1,arg2,arg3
&gt;&gt;
</pre>
<p>Alternatively, if the path to the <code class="codeph">jjs</code> tool is in the <code class="codeph">PATH</code> environment variable, you can point the shebang to <code class="codeph">jjs</code> as follows:</p>
<pre dir="ltr">
#!/usr/bin/env jjs
</pre></div>
</div>
<a id="JSNUG158"></a>
<div class="props_rev_3"><a id="GUID-D51BDF86-4221-4199-98BC-CDA0BC237B85"></a>
<h2 id="JSNUG-GUID-D51BDF86-4221-4199-98BC-CDA0BC237B85" class="sect2">String Interpolation</h2>
<div>
<p>String interpolation is used in UNIX shells to construct strings that contain values of variables or expressions. With shell scripting features enabled, Nashorn enables you to embed variables and expressions into string literals in the same way.</p>
<p>For example, you can assign the result of the <code class="codeph">Date()</code> constructor to the <code class="codeph">date</code> variable, and then pass this variable to the string using the dollar sign (<code class="codeph">$</code>) and braces (<code class="codeph">{}</code>) as follows:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var date = Date()</span>
jjs&gt; <span class="bold">"Date and time: ${date}"</span>
Date and time: Mon Aug 19 2013 19:43:08 GMT+0400 (MSK)
</pre>
<p>The preceding example displays the date and time when the <code class="codeph">date</code> variable was assigned the value returned by the <code class="codeph">Date()</code> constructor. If you want to display the current date and time when the expression is evaluated, you can pass the <code class="codeph">Date()</code> constructor directly as follows:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">"Current date and time: ${Date()}"</span>
Current date and time: Mon Aug 19 2013 19:49:53 GMT+0400 (MSK)
</pre>
<p>String interpolation works only for strings within double quotation marks. Strings within single quotation marks are not interpolated:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">'The variable is ${date}'</span>
The variable is ${date}
</pre></div>
</div>
<a id="JSNUG160"></a><a id="JSNUG159"></a>
<div class="props_rev_3"><a id="GUID-C6FDE05C-EBD4-47AE-9C67-0DA76C9DE771"></a>
<h2 id="JSNUG-GUID-C6FDE05C-EBD4-47AE-9C67-0DA76C9DE771" class="sect2">Here Document</h2>
<div>
<p>A here document (<span class="italic">heredoc</span>) specifies strings in UNIX shells that preserve line breaks and indentations. With shell scripting features enabled, you can use Nashorn to evaluate scripts with heredocs.</p>
<p>The following example, <code class="codeph">scriptHereArgs.js</code>, shows an executable script that prints the first passed-in argument on the first line, then the second argument indented on the second line, and the third argument on the forth line (after one blank line).</p>
<pre dir="ltr">
#!/usr/bin/jjs
print(&lt;&lt;EOD);
${arguments[0]} is normal
    ${arguments[1]} is indented

${arguments[2]} is separated by a blank line
EOD
</pre>
<p>If you run the <code class="codeph">scriptHereArgs.js</code> file as a shell executable, it is interpreted by the Nashorn engine as follows:</p>
<pre dir="ltr">
&gt;&gt; <span class="bold">./scriptHereArgs.js -- Line1 Line2 Line3</span>
Line1 is normal
    Line2 is indented

Line3 is separated by a blank line
</pre></div>
</div>
<a id="JSNUG161"></a>
<div class="props_rev_3"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1"></a>
<h2 id="JSNUG-GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1" class="sect2">Global Objects</h2>
<div>
<p>With shell scripting features enabled, Nashorn defines several global objects.</p>
<dl>
<dt class="dlterm"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-FA766FF0-66F4-4C54-9129-D961EB6CA24D"><!-- --></a><code class="codeph">$ARG</code></dt>
<dd>
<p>This global object can be used to access the arguments passed to the script, similar to how the <code class="codeph">arguments</code> object is used, for example:</p>
<pre dir="ltr">
&gt;&gt; <span class="bold">jjs -scripting -- arg1 arg2 arg3</span>
jjs&gt; <span class="bold">$ARG</span>
arg1,arg2,arg3
jjs&gt; <span class="bold">$ARG[1]</span>
arg2
</pre></dd>
<dt class="dlterm"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-92ECF48E-2C2A-4CDB-8D5B-9C567F626DC8"><!-- --></a><code class="codeph">$ENV</code></dt>
<dd>
<p>This global object maps all the current environment variables, for example:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">$ENV.USER</span>
johndoe
jjs&gt; <span class="bold">$ENV.PWD</span>
/foo/bar
</pre></dd>
<dt class="dlterm"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-BA34D3A5-2721-4540-8BE4-495D0DE3250C"><!-- --></a><code class="codeph">$EXEC()</code></dt>
<dd>
<p>This global function launches processes to run commands, for example:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">$EXEC("ls -l")</span>
total 0
drwxr-xr-x+ 1 johndoe staff 4096 Aug 18 11:03 dir
-rwxrw-r--  1 johndoe staff  168 Aug 19 17:44 file.txt

jjs&gt; 
</pre>
<p>The <code class="codeph">$EXEC()</code> function can also take a second argument, which is a string to be used as standard input (<code class="codeph">stdin</code>) for the process:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">$EXEC("cat", "Send this to stdout")</span>
Send this to stdout
jjs&gt; 
</pre>
<div class="infobox-note" id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-0F537DCD-D571-4C4C-9BF0-A41F2C7CF248">
<p class="notep1">Note:</p>
<p>If the command does not require any input, you can launch a process using the backtick string notation. For example, instead of <code class="codeph">$EXEC("ls -l")</code>, you can use <code class="codeph">`ls -l`</code>.</p>
</div>
</dd>
<dt class="dlterm"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-19AA08A1-88DC-4693-A39C-77F778D746D2"><!-- --></a><code class="codeph">$OPTIONS</code></dt>
<dd>
<p>This object exposes command line options passed to nashorn "command line". For example:</p>
<pre dir="ltr">
jjs&gt; print("-scripting=" + $OPTIONS_scripting);
jjs&gt; print("--compile-only=" + $OPTIONS_compile_only);
jjs&gt; print("-timezone="+ $OPTIONS_timezone.ID);
</pre></dd>
<dt class="dlterm"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-CF2A4C53-FCF0-4005-A6E4-3611EA5FD380"><!-- --></a><code class="codeph">$OUT</code></dt>
<dd>
<p>This global object is used to store the latest standard output (<code class="codeph">stdout</code>) of the process. For example, the result of <code class="codeph">$EXEC()</code> is saved to <code class="codeph">$OUT</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-E6D92614-7B58-4DF0-A3BF-A8D5B3DAC1D0"><!-- --></a><code class="codeph">$ERR</code></dt>
<dd>
<p>This global object is used to store the latest standard error (<code class="codeph">stderr</code>) of the process.</p>
</dd>
<dt class="dlterm"><a id="GUID-FFA9ED03-1481-45AF-AA64-341EB3C89BD1__GUID-CAD2728C-DA2F-4CBB-9E26-C8009D3CB665"><!-- --></a><code class="codeph">$EXIT</code></dt>
<dd>
<p>This global object is used to store the exit code of the process. If the exit code is not zero, then the process failed.</p>
</dd>
</dl>
</div>
</div>
<a id="JSNUG162"></a>
<div class="props_rev_3"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA"></a>
<h2 id="JSNUG-GUID-9D5E4301-C777-465D-887E-654E6D7A42FA" class="sect2">Additional Nashorn Built-in Functions</h2>
<div>
<p>Nashorn defines several built-in functions: <code class="codeph">echo</code>, <code class="codeph">readLine</code> and <code class="codeph">readFully</code> functions are defined only for <code class="codeph">-scripting</code> mode. Other extensions like <code class="codeph">quit</code>, <code class="codeph">exit</code>, <code class="codeph">load</code>, <code class="codeph">loadWithNewGlobal</code>, <code class="codeph">Object.bindProperties</code> are always available.</p>
<div class="section">
<dl>
<dt class="dlterm"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA__GUID-A5F8D379-29BA-493D-9054-4557060A7443"><!-- --></a><span class="apiname">quit()</span></dt>
<dt class="dlterm"><span class="apiname">exit()</span></dt>
<dd>
<p>These functions are synonymous, causing the current script process to exit to the system. You can pass an integer value as the argument that represents the exit code to be returned to the system. By default, without an argument, the exit code is set to 0, meaning that the process terminated correctly.</p>
</dd>
<dt class="dlterm"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA__GUID-55DF408F-D627-4CB9-A410-5632EF5395F5"><!-- --></a><span class="apiname">print()</span></dt>
<dt class="dlterm"><span class="apiname">echo()</span></dt>
<dd>
<p>These functions are synonymous, causing the values passed in as arguments to be converted to strings, printed to <code class="codeph">stdout</code> separated by spaces, and followed by a new line. The implementation involves calls to <code class="codeph">java.lang.System.out.print(string)</code> followed by <code class="codeph">java.lang.System.out.println()</code>.</p>
<pre dir="ltr">
&gt;&gt; <span class="bold">jjs -scripting -- arg1</span>
jjs&gt; <span class="bold">var a = "Hello"</span>
jjs&gt; <span class="bold">print(123, $ARG[0], a, "World")</span>
123 arg1 Hello World
jjs&gt; 
</pre></dd>
<dt class="dlterm"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA__GUID-7050BBD1-79C4-46BD-8189-7AFDAB9F0CD0"><!-- --></a><span class="apiname">readLine()</span></dt>
<dd>
<p>This function reads one line of input from <code class="codeph">stdin</code> and sends it to <code class="codeph">stdout</code>, or you can assign the result to a variable. You can also pass a string to the <code class="codeph">readLine()</code> function to get a prompt line as in the following example:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var name = readLine("What is your name? ")</span>
What is your name? <span class="bold">Bob</span>
jjs&gt; <span class="bold">print("Hello, ${name}!")</span>
Hello, Bob!
jjs&gt; 
</pre></dd>
<dt class="dlterm"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA__GUID-FEDD8747-1ACB-4839-868E-66F1D07D0DE0"><!-- --></a><span class="apiname">readFully()</span></dt>
<dd>
<p>This function reads the entire contents of a file passed in as a string argument and sends it to <code class="codeph">stdout</code>, or you can assign the result to a variable.</p>
<pre dir="ltr">
jjs&gt; <span class="bold">readFully("text.txt")</span>
This is the contents of the text.txt file located in the current working directory.

jjs&gt; 
</pre>
<p>The <span class="apiname">readFully()</span> function reads data with the method <a href="https://docs.oracle.com/javase/9/docs/api/java/nio/file/Files.html#readAllBytes-java.nio.file.Path-" target="_blank"><span class="apiname">byte[] Files.readAllBytes(Path)</span></a>, then performs byte order mark (BOM) detection on the returned byte array to determine whether the data read is Unicode-encoded.</p>
</dd>
<dt class="dlterm"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA__GUID-B3EA58AA-38DB-4F12-905B-7B648546B5A0"><!-- --></a><span class="apiname">load()</span></dt>
<dd>
<p>This function loads and evaluates a script from a path, URL, or script object.</p>
<pre dir="ltr">
jjs&gt; load("/foo/bar/script.js")
jjs&gt; load("http://example.com/script.js")
jjs&gt; load({name:"script.js", script:"var x = 1 + 1; x;"})
</pre></dd>
<dt class="dlterm"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA__GUID-DB164B7A-9AC2-4660-BB58-A05E858ED80C"><!-- --></a><span class="apiname">loadWithNewGlobal()</span></dt>
<dd>
<p>This function is similar to the <code class="codeph">load()</code> function, but the script is evaluated with a new global object. This is the primary method for creating a fresh context for evaluating scripts. Additional arguments (after the script) passed to <code class="codeph">loadWithNewGlobal()</code> are stored in the <code class="codeph">arguments</code> global variable of the new context.</p>
</dd>
<dt class="dlterm"><a id="GUID-9D5E4301-C777-465D-887E-654E6D7A42FA__GUID-D506F863-212E-4796-A240-79C112630D78"><!-- --></a><code class="codeph">Object.bindProperties(<span class="variable">target</span>, <span class="variable">source</span>)</code></dt>
<dd>
<p>This function is used to bind the <code class="codeph"><span class="variable">source</span></code> object's properties to the object <code class="codeph"><span class="variable">target</span></code>. The function enables sharing of global properties. For example, in a Document Object Model (DOM) simulation, you can share properties between the global object and the document. In a multithreading application, you can share functions across global objects of threads.</p>
<p>The following example shows how you can bind the <code class="codeph">obj</code> object's properties to the global object:</p>
<pre dir="ltr">
jjs&gt; <span class="bold">var obj = {x:34,y:100}</span>
jjs&gt; <span class="bold">obj.x</span>
34
jjs&gt; <span class="bold">obj.y</span>
100
jjs&gt; <span class="bold">x</span>
&lt;shell&gt;:1 ReferenceError: "x" is not defined
jjs&gt; <span class="bold">Object.bindProperties(this,obj)</span>
[object global]
jjs&gt; <span class="bold">x</span>
34
jjs&gt; <span class="bold">y = Math.PI</span>
3.141592653589793
jjs&gt; <span class="bold">obj.y</span>
3.141592653589793
jjs&gt; 
</pre>
<p>Note that the function <span class="apiname">Object.bindProperties(target, source)</span> only binds properties of <span class="variable">source</span> that do not exist in <span class="variable">target</span>. In the following example, the function <span class="apiname">bindProperties</span> tries to bind the&nbsp;properties of the <code class="codeph">obj</code> object to the global object. However, the <code class="codeph">x</code> property already exists in the global object. Therefore, the function <span class="apiname">bindProperties</span> does not bind <code class="codeph">obj.x</code> to global <code class="codeph">x</code>. Thus, changing the value of <code class="codeph">obj.x</code> does not change the value of global <code class="codeph">x</code>.</p>
<pre dir="ltr">
jjs&gt; <span class="bold">x = 2</span>
2
jjs&gt; <span class="bold">var obj = {x:3}</span>
jjs&gt; <span class="bold">Object.bindProperties(this,obj)</span>
[object global]
jjs&gt; <span class="bold">x</span>
2
jjs&gt; <span class="bold">x = 4</span>
4
jjs&gt; <span class="bold">obj.x</span>
3
jjs&gt; <span class="bold">x</span>
4
</pre></dd>
</dl>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment505">
<tr>
<td class="cellalignment512">
<table class="cellalignment510">
<tr>
<td class="cellalignment509"><a href="nashorn-and-javafx.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment509"><a href="javafx-script-application-examples.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2014, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment514">
<table class="cellalignment508">
<tr>
<td class="cellalignment509"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment509"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment509"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
