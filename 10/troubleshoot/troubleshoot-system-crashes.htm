<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Troubleshoot System Crashes</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="Information and guidance about some specific procedures for troubleshooting system crashes." />
<meta name="dcterms.created" content="2018-03-12T22:27:13Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Troubleshooting Guide" />
<meta name="dcterms.identifier" content="E91156-01" />
<meta name="dcterms.isVersionOf" content="JSTGD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="debug-jvm-issues.htm" title="Previous" type="text/html" />
<link rel="Next" href="troubleshoot-process-hangs-and-loops.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSTGD.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-BDA1D041-355C-4C85-9ED0-E2AC46D67BED"></a> <span id="PAGE" style="display:none;">10/31</span> <!-- End Header -->
<a id="JSTGD315"></a><a id="JSTGD314"></a>
<h1 id="JSTGD-GUID-BDA1D041-355C-4C85-9ED0-E2AC46D67BED" class="sect1"><span class="enumeration_chapter">5</span> Troubleshoot System Crashes</h1>
<div>
<p>Information and guidance about some specific procedures for troubleshooting system crashes.</p>
<p>A crash, or fatal error, causes a process to terminate abnormally. There are various possible reasons for a crash. For example, a crash can occur due to a bug in the Java HotSpot VM, in a system library, in a Java SE library or an API, in application native code, or even in the operating system (OS). External factors, such as resource exhaustion in the OS can also cause a crash.</p>
<p>Crashes caused by bugs in the Java HotSpot VM or in the Java SE library code are rare. This chapter provides suggestions about how to examine a crash and work around some of the issues (if possible) until the cause of the bug is diagnosed and fixed.</p>
<p>In general, the first step with any crash is to locate the fatal error log. This is a text file that the Java HotSpot VM generates in the event of a crash. See <a href="fatal-error-log.htm#GUID-2AE5EE08-A68F-4514-9618-A581C0EDFB1B" title="Describes the fatal error log, its location, and contents.">Fatal Error Log</a> for an explanation of how to locate this file, as well as a detailed description of the file.</p>
<p>This chapter contains the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-153DA983-743E-4839-9984-8863D4E6C943" title="Examples that demonstrate how the error log can be used to find the cause of the crash, and suggests some tips for troubleshooting the problem depending on the cause.">Determine Where the Crash Occurred</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-59018F70-70E1-4BDE-AA42-9680773E585F" title="Possible workarounds if a crash occurs with a critical application.">Find a Workaround</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-9C81B6BA-4A0A-47D8-8ACA-6AF2925C6CEB" title="The JDK software is built on Windows using Microsoft Visual Studio 2013.">Microsoft Visual C++ Version Considerations</a></p>
</li>
</ul>
</div>
<a id="JSTGD316"></a>
<div class="props_rev_3"><a id="GUID-153DA983-743E-4839-9984-8863D4E6C943"></a>
<h2 id="JSTGD-GUID-153DA983-743E-4839-9984-8863D4E6C943" class="sect2">Determine Where the Crash Occurred</h2>
<div>
<p>Examples that demonstrate how the error log can be used to find the cause of the crash, and suggests some tips for troubleshooting the problem depending on the cause.</p>
<p>The error log header indicates the type of error and the problematic frame, while the thread stack indicates the current thread and stack trace. See <a href="fatal-error-log.htm#GUID-DDFA3BD4-49F6-44EC-AD22-F7B93463D1F9" title="The header section at the beginning of every fatal error log file contains a brief description of the problem.">Header Format</a>.</p>
<p>The following are possible causes for the crash.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-035D93F9-7F3F-4F00-898C-0467D137FE7C" title="Analyze the crash dump file or core file to identify if the crash occurred in the native code or the Java Native Interface (JNI) library code.">Crash the Native Code</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-8786A1C9-7260-45AC-A195-5D0387677F8C" title="Analyze the fatal error log to identify if the crash occurred in the compiled code.">Crash in the Compiled Code</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-59387D99-26F5-4834-84DD-6A67246959AB" title="Analyze the fatal error log to identify if the crash occurred in the HotSpot compiler thread.">Crash in the HotSpot Compiler Thread</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-E755361B-68F4-4474-802C-B90793474A04" title="Analyze the fatal error log to identify if the crash occurred in the VMThread.">Crash in the VM Thread</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-CFBD30A1-5840-4D97-8880-0603F3862EEA" title="A stack overflow in the Java language code will normally result in the offending thread throwing the java.lang.StackOverflowError exception.">Crash Due to Stack Overflow</a></p>
</li>
</ul>
</div>
<a id="JSTGD317"></a>
<div class="props_rev_3"><a id="GUID-035D93F9-7F3F-4F00-898C-0467D137FE7C"></a>
<h3 id="JSTGD-GUID-035D93F9-7F3F-4F00-898C-0467D137FE7C" class="sect3">Crash the Native Code</h3>
<div>
<p>Analyze the crash dump file or core file to identify if the crash occurred in the native code or the Java Native Interface (JNI) library code.</p>
<div class="section">
<p>If the fatal error log indicates the problematic frame to be a native library, then there might be a bug in the native code or the Java Native Interface (JNI) library code. The crash could be caused by something else, but analysis of the library and any core file or crash dump is a good starting place. Consider the extract in the following example from the header of a fatal error log.</p>
<pre dir="ltr">
# An unexpected error has been detected by HotSpot Virtual Machine:
#
#  SIGSEGV (0xb) at pc=0x417789d7, pid=21139, tid=1024
#
# Java VM: Java HotSpot(TM) Server VM (6-beta2-b63 mixed mode)
# Problematic frame:
# C  [libApplication.so+0x9d7]
</pre>
<p>In this case a <code class="codeph">SIGSEGV</code> occurred with a thread executing in the library <code class="codeph">libApplication.so</code>.</p>
<p>In some cases a bug in a native library manifests itself as a crash in Java VM code. Consider the crash in the following example where a <code class="codeph">JavaThread</code> fails while in the <code class="codeph">_thread_in_vm</code> state (meaning that it is executing in Java VM code).</p>
<pre dir="ltr">
# An unexpected error has been detected by HotSpot Virtual Machine:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x08083d77, pid=3700, tid=2896
#
# Java VM: Java HotSpot(TM) Client VM (1.5-internal mixed mode)
# Problematic frame:
# V  [jvm.dll+0x83d77]

---------------  T H R E A D  ---------------

Current thread (0x00036960):  JavaThread "main" [_thread_in_vm, id=2896]
 :
Stack: [0x00040000,0x00080000),  sp=0x0007f9f8,  free space=254k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x83d77]
C  [App.dll+0x1047]          &lt;========= C/native frame
j  Test.foo()V+0
j  Test.main([Ljava/lang/String;)V+0
v  ~StubRoutines::call_stub
V  [jvm.dll+0x80f13]
V  [jvm.dll+0xd3842]
V  [jvm.dll+0x80de4]
V  [jvm.dll+0x87cd2]
C  [java.exe+0x14c0]
C  [java.exe+0x64cd]
C  [kernel32.dll+0x214c7]
 :
</pre>
<p>In this case, although the problematic frame is a VM frame, the thread stack shows that a native routine in <code class="codeph">App.dll</code> has called into the VM (probably with JNI).</p>
<p>The first step to solving a crash in a native library is to investigate the source of the native library where the crash occurred.</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>If the native library is provided by your application, then investigate the source code of your native library. A significant number of issues with JNI code can be identified by running the application with the <code>-Xcheck:jni</code> option added to the command line. See <a href="command-line-options1.htm#GUID-DE9FAAAF-DCD4-4974-A86F-C6B8907CCE9A__CHDDEGBI">The -Xcheck:jni Option</a>.</p>
</li>
<li>
<p>If the native library has been provided by another vendor and is used by your application, then file a bug report against this third-party application and provide the fatal error log information.</p>
</li>
<li>
<p>If the native library where the crash occurred is part of the Java Runtime Environment (JRE) (for example awt.dll, net.dll, and so forth), then it is possible that you encountered a library or API bug. If so, gather as much data as possible, and submit a bug or report, indicating the library name. You can find JRE libraries in the <code>jre/lib</code> or <code>jre/bin</code> directories of the JRE distribution. See <a href="submit-bug-report.htm#GUID-DB465A9C-03FA-4324-BFF9-45BF9699F349" title="Guidance about how to submit a bug report. It includes suggestions about what to try before submitting a report and which data to collect for the report.">Submit a Bug Report</a>.</p>
</li>
</ul>
<p>You can troubleshoot a crash in a native application library by attaching the native debugger to the core file or crash dump, if it is available. Depending on the OS, the native debugger is <code class="codeph">dbx</code>, <code class="codeph">gdb</code>, or <code class="codeph">windbg</code>. See <a href="diagnostic-tools.htm#GUID-08957176-5459-4CEA-A141-D325D1204D54" title="List of native tools available on Windows, Linux, and Oracle Solaris operating systems that are useful for troubleshooting or monitoring purposes.">Native Operating System Tools</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD320"></a>
<div class="props_rev_3"><a id="GUID-8786A1C9-7260-45AC-A195-5D0387677F8C"></a>
<h3 id="JSTGD-GUID-8786A1C9-7260-45AC-A195-5D0387677F8C" class="sect3">Crash in the Compiled Code</h3>
<div>
<p>Analyze the fatal error log to identify if the crash occurred in the compiled code.</p>
<div class="section">
<p>If the fatal error log indicates that the crash occurred in compiled code, then it is possible that you encountered a compiler bug that resulted in incorrect code generation. You can recognize a crash in compiled code if the type of the problematic frame is <code class="codeph">J</code> (meaning a compiled Java frame). The following example shows such a crash.</p>
<pre dir="ltr">
# An unexpected error has been detected by HotSpot Virtual Machine:
#
#  SIGSEGV (0xb) at pc=0x0000002a99eb0c10, pid=6106, tid=278546
#
# Java VM: Java HotSpot(TM) 64-Bit Server VM (1.6.0-beta-b51 mixed mode)
# Problematic frame:
# J  org.foobar.Scanner.body()V
#
:
Stack: [0x0000002aea560000,0x0000002aea660000),  sp=0x0000002aea65ddf0,
  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
J  org.foobar.Scanner.body()V

[error occurred during error reporting, step 120, id 0xb]
</pre>
<div class="p">
<div class="infobox-note" id="GUID-8786A1C9-7260-45AC-A195-5D0387677F8C__GUID-230E5C8C-D31C-4727-A7A7-2F21026E9E85">
<p class="notep1">Note:</p>
A complete thread stack is not available. The output line "error occurred during error reporting" means that a problem arose trying to get the stack trace (this might indicate stack corruption).</div>
</div>
<p>It might be possible to temporarily work around the issue by switching the compiler or by excluding from compilation the method that provoked the crash.</p>
<p>See <a href="troubleshoot-system-crashes.htm#GUID-473B0F71-9C29-47E0-A17A-38E3F85FA033" title="Possible workarounds if the crash occurred in the hotspot compiler thread.">Working Around Crashes in the HotSpot Compiler Thread or Compiled Code</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD322"></a>
<div class="props_rev_3"><a id="GUID-59387D99-26F5-4834-84DD-6A67246959AB"></a>
<h3 id="JSTGD-GUID-59387D99-26F5-4834-84DD-6A67246959AB" class="sect3">Crash in the HotSpot Compiler Thread</h3>
<div>
<p>Analyze the fatal error log to identify if the crash occurred in the HotSpot compiler thread.</p>
<div class="section">
<p>If the fatal error log output shows that the current thread is a <code class="codeph">JavaThread</code> named <code class="codeph">CompilerThread0</code>, <code class="codeph">CompilerThread1</code>, or <code class="codeph">AdapterCompiler</code>, then it is possible that you encountered a compiler bug. In this case, it might be necessary to temporarily work around the issue by switching the compiler (for example, by using the HotSpot Client VM instead of the HotSpot Server VM, or vice versa), or by excluding from compilation the method that provoked the crash.</p>
<p>See <a href="troubleshoot-system-crashes.htm#GUID-473B0F71-9C29-47E0-A17A-38E3F85FA033" title="Possible workarounds if the crash occurred in the hotspot compiler thread.">Working Around Crashes in the HotSpot Compiler Thread or Compiled Code</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD323"></a>
<div class="props_rev_3"><a id="GUID-E755361B-68F4-4474-802C-B90793474A04"></a>
<h3 id="JSTGD-GUID-E755361B-68F4-4474-802C-B90793474A04" class="sect3">Crash in the VM Thread</h3>
<div>
<p>Analyze the fatal error log to identify if the crash occurred in the <code class="codeph">VMThread</code>.</p>
<div class="section">
<p>If the fatal error log output shows that the current thread is a <code class="codeph">VMThread</code>, then look for the line containing <code class="codeph">VM_Operation</code> in the <code class="codeph">THREAD</code> section. A <code class="codeph">VMThread</code> is a special thread in the HotSpot VM. It performs special tasks in the VM such as garbage collection (GC). If the <code class="codeph">VM_Operation</code> suggests that the operation is a GC, then it is possible that you encountered an issue such as heap corruption.</p>
<p>Beside a GC issue, it could be something else (such as a compiler or runtime bug) that leaves object references in the heap in an inconsistent or incorrect state. In this case, collect as much information as possible about the environment and try possible workarounds. If the issue is related to GC, then you might be able to temporarily work around the issue by changing the GC configuration.</p>
<p>See <a href="troubleshoot-system-crashes.htm#GUID-F364244B-ABC0-4FAF-AFA5-35BABA346E48" title="Possible workaround if the crash occurs during garbage collection.">Working Around Crashes During Garbage Collection</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD324"></a>
<div class="props_rev_3"><a id="GUID-CFBD30A1-5840-4D97-8880-0603F3862EEA"></a>
<h3 id="JSTGD-GUID-CFBD30A1-5840-4D97-8880-0603F3862EEA" class="sect3">Crash Due to Stack Overflow</h3>
<div>
<p>A stack overflow in the Java language code will normally result in the offending thread throwing the <code class="codeph">java.lang.StackOverflowError</code> exception.</p>
<div class="section">
<p>On the other hand, C and C++ write beyond the end of the stack and cause a stack overflow. This is a fatal error that causes the process to terminate.</p>
<p>In the HotSpot implementation, Java methods share stack frames with C/C++ native code, namely user native code and the virtual machine itself. Java methods generate code that checks whether the stack space is available at a fixed distance towards the end of the stack so that the native code can be called without exceeding the stack space. The distance toward the end of the stack is called shadow pages. The size of the shadow pages is between 3 and 20 pages, depending on the platform. This distance is tunable, so that applications with native code needing more than the default distance can increase the shadow page size. The option to increase shadow pages is <code>-XX:StackShadowPages=</code><span class="variable">n</span>, where <span class="variable">n</span> is greater than the default stack shadow pages for the platform.</p>
<p>If your application gets a segmentation fault without a core file or fatal error log file, see <a href="fatal-error-log.htm#GUID-2AE5EE08-A68F-4514-9618-A581C0EDFB1B" title="Describes the fatal error log, its location, and contents.">Fatal Error Log</a>. Or if you application gets a <code class="codeph">STACK_OVERFLOW_ERROR</code> on Windows or the message "An irrecoverable stack overflow has occurred," then this indicates that the value of <code class="codeph">StackShadowPages</code> was exceeded, and more space is needed.</p>
<p>If you increase the value of <code class="codeph">StackShadowPages</code>, you might also need to increase the default thread stack size using the <code class="codeph">-Xss</code> parameter. Increasing the default thread stack size might decrease the number of threads that can be created, so be careful in choosing a value for the thread stack size. The thread stack size varies by platform from 256 KB to 1024 KB.</p>
<pre dir="ltr">
# An unexpected error has been detected by HotSpot Virtual Machine:
#
#  EXCEPTION_STACK_OVERFLOW (0xc00000fd) at pc=0x10001011, pid=296, tid=2940
#
# Java VM: Java HotSpot(TM) Client VM (1.6-internal mixed mode, sharing)
# Problematic frame:
# C  [App.dll+0x1011]
#

---------------  T H R E A D  ---------------

Current thread (0x000367c0):  JavaThread "main" [_thread_in_native, id=2940]
:
Stack: [0x00040000,0x00080000),  sp=0x00041000,  free space=4k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [App.dll+0x1011]
C  [App.dll+0x1020]
C  [App.dll+0x1020]
:
C  [App.dll+0x1020]
C  [App.dll+0x1020]
...&lt;more frames&gt;...

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  Test.foo()V+0
j  Test.main([Ljava/lang/String;)V+0
v  ~StubRoutines::call_stub
</pre>
<p>You can interpret the following information from the above example.</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The exception is <code class="codeph">EXCEPTION_STACK_OVERFLOW</code>.</p>
</li>
<li>
<p>The thread state is <code class="codeph">_thread_in_native,</code> which means that the thread is executing native or JNI code.</p>
</li>
<li>
<p>In the stack information, the free space is only 4 KB (a single page on a Windows system). In addition, the stack pointer (<code class="codeph">sp</code>) is at <code class="codeph">0x00041000</code>, which is close to the end of the stack at <code class="codeph">0x00040000</code>.</p>
</li>
<li>
<p>The printout of the native frames shows that a recursive native function is the issue in this case. The output notation <code class="codeph">...&lt;more frames&gt;...</code> indicates that additional frames exist but were not printed. The output is limited to 100 frames.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="JSTGD326"></a>
<div class="props_rev_3"><a id="GUID-59018F70-70E1-4BDE-AA42-9680773E585F"></a>
<h2 id="JSTGD-GUID-59018F70-70E1-4BDE-AA42-9680773E585F" class="sect2">Find a Workaround</h2>
<div>
<p>Possible workarounds if a crash occurs with a critical application.</p>
<p>If a crash occurs with a critical application, and the crash appears to be caused by a bug in the HotSpot VM, then it might be desirable to quickly find a temporary workaround. If the crash occurs with an application that is deployed with the most recent release of the JDK, then the crash should be reported to Oracle.</p>
<div class="infobox-note" id="GUID-59018F70-70E1-4BDE-AA42-9680773E585F__GUID-F065A498-45C6-43E5-8287-922BE985A115">
<p class="notep1">Important:</p>
<p>Even if a workaround in this section successfully eliminates a crash, the workaround is <span class="bold">not</span> a fix for the problem, but merely a temporary solution. Place a support call or file a bug report with the original configuration that demonstrated the issue.</p>
</div>
<p>The following are three scenarios to find workarounds for system crashes.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-473B0F71-9C29-47E0-A17A-38E3F85FA033" title="Possible workarounds if the crash occurred in the hotspot compiler thread.">Working Around Crashes in the HotSpot Compiler Thread or Compiled Code</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-F364244B-ABC0-4FAF-AFA5-35BABA346E48" title="Possible workaround if the crash occurs during garbage collection.">Working Around Crashes During Garbage Collection</a></p>
</li>
<li>
<p><a href="troubleshoot-system-crashes.htm#GUID-40D9724D-8FDB-49AB-82A7-B4A433FA32F3">Working Around Crashes Caused by Class Data Sharing</a></p>
</li>
</ul>
</div>
<a id="JSTGD327"></a>
<div class="props_rev_3"><a id="GUID-473B0F71-9C29-47E0-A17A-38E3F85FA033"></a>
<h3 id="JSTGD-GUID-473B0F71-9C29-47E0-A17A-38E3F85FA033" class="sect3">Working Around Crashes in the HotSpot Compiler Thread or Compiled Code</h3>
<div>
<p>Possible workarounds if the crash occurred in the hotspot compiler thread.</p>
<div class="section">
<p>If the fatal error log indicates that the crash occurred in a compiler thread, then it is possible (but not always the case) that you encountered a compiler bug. Similarly, if the crash is in compiled code, then it is possible that the compiler generated incorrect code.</p>
<p>In the case of the HotSpot Client VM (<code>-client</code> option), the compiler thread appears in the error log as <code class="codeph">CompilerThread0</code>. With the HotSpot Server VM, there are multiple compiler threads, and these appear in the error log file as <code class="codeph">CompilerThread0</code>, <code class="codeph">CompilerThread1</code>, and <code class="codeph">AdapterThread</code>.</p>
<p>Since the JDK 7u5 release, the HotSpot compiler is ignored by default. A command-line option is available to simulate the old behavior, which is useful when multiple methods were excluded. See <a href="http://www.oracle.com/technetwork/java/javase/7u5-relnotes-1653274.html" target="_blank">notable bug fixes in JDK 7u5</a>.</p>
<p>To exclude methods from being compiled by using a JVM flag instead of the <code class="codeph">.hotspot_compile</code> file, see <a class="olink JSWOR624" target="_blank" href="../tools/java.htm#JSWOR624"><code>-XX:CompileCommand</code> in Advanced JIT Compiler Options</a> in the <span><cite>Java Platform, Standard Edition Tools Reference</cite></span>.</p>
<p>The following example shows a fragment of an error log for a compiler bug that was encountered and fixed during development. The log file shows that the HotSpot Server VM is used, and the crash occurred in <code class="codeph">CompilerThread1</code>. In addition, the log file shows that the current <code class="codeph">CompileTask</code> was the compilation of the <code class="codeph">java.lang.Thread.setPriority</code> method.</p>
<pre dir="ltr">
# An unexpected error has been detected by HotSpot Virtual Machine:
#
:
# Java VM: Java HotSpot(TM) Server VM (1.5-internal-debug mixed mode)
:
---------------  T H R E A D  ---------------

Current thread (0x001e9350): JavaThread "CompilerThread1" daemon [_thread_in_vm, id=20]

Stack: [0xb2500000,0xb2580000),  sp=0xb257e500,  free space=505k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc3b13c]
:

Current CompileTask:
opto: 11      java.lang.Thread.setPriority(I)V (53 bytes)

---------------  P R O C E S S  ---------------

Java Threads: ( =&gt; current thread )
  0x00229930 JavaThread "Low Memory Detector" daemon [_thread_blocked, id=21]
=&gt;0x001e9350 JavaThread "CompilerThread1" daemon [_thread_in_vm, id=20]
 :
</pre></div>
<!-- class="section" -->
<div class="section">
<p>In this case, there are two potential workarounds:</p>
<ul style="list-style-type: disc;">
<li>
<p>The brute force approach: Change the configuration so that the application is run with the <code>-client</code> option to specify the HotSpot Client VM.</p>
</li>
<li>
<p>The subtle approach: Assume that the bug only occurs during the compilation of the <code class="codeph">java.lang.Thread.setPriority</code> method, and exclude this method from compilation.</p>
</li>
</ul>
<p>The first approach (to use the <code>-client</code> option) might be trivial to configure in some environments. In others, it might be more difficult if the configuration is complex or if the command line to configure the VM is not readily accessible. In general, switching from the HotSpot Server VM to the HotSpot Client VM also reduces the peak performance of an application. Depending on the environment, this might be acceptable until the issue is diagnosed and fixed.</p>
<p>The second approach (exclude the method from compilation) requires creating the file <code class="codeph">.hotspot_compiler</code> in the working directory of the application. The following example shows this approach.</p>
<pre dir="ltr">
exclude java/lang/Thread setPriority
</pre>
<p>In general, the format of this file is <code class="codeph">exclude<span class="variable">class</span><span class="variable">method</span></code>, where <code class="codeph"><span class="variable">class</span></code> is the class (fully qualified with the package name) and <code class="codeph"><span class="variable">method</span></code> is the name of the method. Constructor methods are specified as <code class="codeph">&lt;init&gt;</code> and static initializers are specified as <code class="codeph">&lt;clinit&gt;</code>.</p>
<div class="infobox-note" id="GUID-473B0F71-9C29-47E0-A17A-38E3F85FA033__GUID-8FA211A1-0BE2-467D-A187-AF7250F0334B">
<p class="notep1">Note:</p>
<p>The<code class="codeph">.hotspot_compiler</code> file is an unsupported interface. It is documented here solely for the purposes of troubleshooting and finding a temporary workaround.</p>
</div>
<p>After the application is restarted, the compiler will not attempt to compile any of the methods excluded in the <code class="codeph">.hotspot_compiler</code> file. In some cases this can provide temporary relief until the root cause of the crash is diagnosed and the bug is fixed.</p>
<p>In order to verify that the HotSpot VM correctly located and processed the <code class="codeph">.hotspot_compiler</code> file that is shown in the previous example from the second approach, look for the log information at runtime.</p>
<div class="infobox-note" id="GUID-473B0F71-9C29-47E0-A17A-38E3F85FA033__GUID-7C682E82-EB45-42FA-840D-919A8E7C67D4">
<p class="notep1">Note:</p>
The file name separator is a dot, not a slash.</div>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD330"></a>
<div class="props_rev_3"><a id="GUID-F364244B-ABC0-4FAF-AFA5-35BABA346E48"></a>
<h3 id="JSTGD-GUID-F364244B-ABC0-4FAF-AFA5-35BABA346E48" class="sect3">Working Around Crashes During Garbage Collection</h3>
<div>
<p>Possible workaround if the crash occurs during garbage collection.</p>
<div class="section">
<p>If a crash occurs during garbage collection (GC), then the fatal error log reports that a <code class="codeph">VM_Operation</code> is in progress. For the purpose of this discussion, assume that the mostly concurrent GC (<code>-XX:+UseConcMarkSweep</code>) is not in use. The <code class="codeph">VM_Operation</code> is shown in the <code class="codeph">THREAD</code> section of the log and indicates one of the following situations:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Generation collection for allocation</p>
</li>
<li>
<p>Full generation collection</p>
</li>
<li>
<p>Parallel GC failed allocation</p>
</li>
<li>
<p>Parallel GC failed permanent allocation</p>
</li>
<li>
<p>Parallel GC system GC</p>
</li>
</ul>
<p>Most likely, the current thread reported in the log is the <code class="codeph">VMThread</code>. This is the special thread used to execute special tasks in the HotSpot VM. The following example is a fragment of the fatal error log from a crash in the serial garbage collector.</p>
<pre dir="ltr">
---------------  T H R E A D  ---------------

Current thread (0x002cb720):  VMThread [id=3252]

siginfo: ExceptionCode=0xc0000005, reading address 0x00000000

Registers:
EAX=0x0000000a, EBX=0x00000001, ECX=0x00289530, EDX=0x00000000
ESP=0x02aefc2c, EBP=0x02aefc44, ESI=0x00289530, EDI=0x00289530
EIP=0x0806d17a, EFLAGS=0x00010246

Top of Stack: (sp=0x02aefc2c)
0x02aefc2c:   00289530 081641e8 00000001 0806e4b8
0x02aefc3c:   00000001 00000000 02aefc9c 0806e4c5
0x02aefc4c:   081641e8 081641c8 00000001 00289530
0x02aefc5c:   00000000 00000000 00000001 00000001
0x02aefc6c:   00000000 00000000 00000000 08072a9e
0x02aefc7c:   00000000 00000000 00000000 00035378
0x02aefc8c:   00035378 00280d88 00280d88 147fee00
0x02aefc9c:   02aefce8 0806e0f5 00000001 00289530
Instructions: (pc=0x0806d17a)
0x0806d16a:   15 08 83 3d c0 be 15 08 05 53 56 57 8b f1 75 0f
0x0806d17a:   0f be 05 00 00 00 00 83 c0 05 a3 c0 be 15 08 8b 

Stack: [0x02ab0000,0x02af0000),  sp=0x02aefc2c,  free space=255k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6d17a]
V  [jvm.dll+0x6e4c5]
V  [jvm.dll+0x6e0f5]
V  [jvm.dll+0x71771]
V  [jvm.dll+0xfd1d3]
V  [jvm.dll+0x6cd99]
V  [jvm.dll+0x504bf]
V  [jvm.dll+0x6cf4b]
V  [jvm.dll+0x1175d5]
V  [jvm.dll+0x1170a0]
V  [jvm.dll+0x11728f]
V  [jvm.dll+0x116fd5]
C  [MSVCRT.dll+0x27fb8]
C  [kernel32.dll+0x1d33b]

VM_Operation (0x0373f71c): generation collection for allocation, mode:
 safepoint, requested by thread 0x02db7108
</pre>
<div class="infobox-note" id="GUID-F364244B-ABC0-4FAF-AFA5-35BABA346E48__GUID-FC941FA9-004D-434A-9C3F-EB0A1FDDC0F4">
<p class="notep1">Note:</p>
<p>A crash during garbage collection does not suggest a bug in the garbage collection implementation. It could also indicate a compiler or runtime bug, or some other issue.</p>
</div>
<p>You can try the following workarounds if you repeatedly get a crash during garbage collection:</p>
<ul style="list-style-type: disc;">
<li>
<p>Switch GC configuration. For example, if you are using the serial collector, then try the throughput collector, or vice versa.</p>
</li>
<li>
<p>If you are using the HotSpot Server VM, then try the HotSpot Client VM.</p>
</li>
</ul>
<p>If you are not sure which garbage collector is in use, then you can use the <code class="codeph">jmap</code> utility on the Oracle Solaris and Linux operating systems. See <a href="diagnostic-tools.htm#GUID-2E915FE8-A8A6-47C5-BA1D-4CC85174E818" title="The jmap command-line utility prints memory-related statistics for a running VM or core file.">The jmap Utility</a> to get the heap information from the core file, if the core file is available. In general, if the GC configuration is not specified on the command line, then the serial collector will be used on Windows. On the Oracle Solaris and Linux operating systems, it depends on the machine configuration. If the machine has at least 2 GB of memory and has at least 2 CPUs, then the throughput collector (Parallel GC) will be used. For smaller machines, the serial collector is the default. The option to select the serial collector is <code>-XX:+UseSerialGC</code> and the option to select the throughput collector is <code>-XX:+UseParallelGC</code>. If, as a workaround, you switch from the throughput collector to the serial collector, then you might experience some performance degradation on multiprocessor systems. This might be acceptable until the root issue is diagnosed and fixed.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD332"></a>
<div class="props_rev_3"><a id="GUID-40D9724D-8FDB-49AB-82A7-B4A433FA32F3"></a>
<h3 id="JSTGD-GUID-40D9724D-8FDB-49AB-82A7-B4A433FA32F3" class="sect3">Working Around Crashes Caused by Class Data Sharing</h3>
<div>
<div class="section">
<p>When the JRE is installed, the installer loads a set of classes from the system JAR file into a private internal representation and dumps that representation to a file called a shared archive. When the JVM starts, the shared archive is memory-mapped to allow sharing of read-only JVM metadata for these classes among multiple JVM processes. The startup time is reduced thus saving the cost because restoring the shared archive is faster than loading the classes. Class data sharing is supported with the Java HotSpot VM. The G1, serial, parallel, and parallelOldGC garbage collectors are supported. The shared string feature (part of class data sharing) supports only the G1 garbage collector on non-Windows platforms.</p>
<p>The fatal error log prints the version string in the header of the log. If sharing is enabled, it is indicated by the text "sharing," as shown in the following example.</p>
<pre dir="ltr">
# An unexpected error has been detected by HotSpot Virtual Machine:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x08083d77, pid=3572, tid=784
#
# Java VM: Java HotSpot(TM) Client VM (1.5-internal mixed mode, sharing)
# Problematic frame:
# V  [jvm.dll+0x83d77]
</pre>
<p>CDS can be disabled by providing the <code>-Xshare:off</code> option on the command line. If the crash only occurs with sharing enabled, then it is possible that you encountered a bug in this feature. In that case, gather as much information as possible and submit a bug report.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="JSTGD334"></a>
<div class="props_rev_3"><a id="GUID-9C81B6BA-4A0A-47D8-8ACA-6AF2925C6CEB"></a>
<h2 id="JSTGD-GUID-9C81B6BA-4A0A-47D8-8ACA-6AF2925C6CEB" class="sect2">Microsoft Visual C++ Version Considerations</h2>
<div>
<p>The JDK software is built on Windows using Microsoft Visual Studio 2013.</p>
<p>If you experience a crash with a Java application and if you have native or JNI libraries that are compiled with a different release of the compiler, then you must consider compatibility issues between the runtimes. Specifically, your environment is supported only if you follow the Microsoft guidelines when dealing with multiple runtimes. For example, if you allocate memory using one runtime, then you must release it using the same runtime. Unpredictable behavior or crashes can happen if you release a resource using a different library than the one that allocated the resource.</p>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment340">
<tr>
<td class="cellalignment347">
<table class="cellalignment345">
<tr>
<td class="cellalignment344"><a href="debug-jvm-issues.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment344"><a href="troubleshoot-process-hangs-and-loops.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment349">
<table class="cellalignment343">
<tr>
<td class="cellalignment344"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment344"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment344"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
