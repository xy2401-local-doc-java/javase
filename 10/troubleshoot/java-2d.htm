<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Java 2D</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="Information and guidance for troubleshooting some of the most common issues that might be found in the Java 2D API." />
<meta name="dcterms.created" content="2018-03-12T22:27:13Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Troubleshooting Guide" />
<meta name="dcterms.identifier" content="E91156-01" />
<meta name="dcterms.isVersionOf" content="JSTGD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="java-2d-pipeline-rendering-and-properties.htm" title="Previous" type="text/html" />
<link rel="Next" href="swing.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSTGD.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-63FAD092-E3E7-416D-9CA3-25BBACFC46E9"></a> <span id="PAGE" style="display:none;">19/31</span> <!-- End Header -->
<a id="JSTGD447"></a><a id="JSTGD446"></a>
<h1 id="JSTGD-GUID-63FAD092-E3E7-416D-9CA3-25BBACFC46E9" class="sect1"><span class="enumeration_chapter">12</span> Java 2D</h1>
<div>
<p>Information and guidance for troubleshooting some of the most common issues that might be found in the Java 2D API.</p>
<p>This chapter contains the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java-2d.htm#GUID-74778D56-6201-4A60-B1CA-C304CD0B8A71" title="Generic performance issues related to Java 2D hardware-accelerated rendering primitives, and how to detect primitive tracing and avoid non-accelerated rendering.">Generic Performance Issues</a></p>
</li>
<li>
<p><a href="java-2d.htm#GUID-02BB2984-92CA-40E6-ACF6-CB8EB065F8B9" title="Possible issues and crashes that are related to text rendering and describes tips to overcome such issues.">Text-Related Issues</a></p>
</li>
<li>
<p><a href="java-2d.htm#GUID-17CCB9A9-F9A6-4541-A536-7259AAF90044" title="List of issues that can happen with Java 2D printing.">Java 2D Printing</a></p>
</li>
</ul>
<p>For a summary of Java 2D properties, see <a href="java-2d-properties.htm#GUID-2DC38ED7-7F26-4489-B3B5-C3B0B31E2786" title="This appendix presents properties that can be useful in troubleshooting Java 2D.">Java 2D Properties</a>.</p>
</div>
<a id="JSTGD448"></a>
<div class="props_rev_3"><a id="GUID-74778D56-6201-4A60-B1CA-C304CD0B8A71"></a>
<h2 id="JSTGD-GUID-74778D56-6201-4A60-B1CA-C304CD0B8A71" class="sect2">Generic Performance Issues</h2>
<div>
<p>Generic performance issues related to Java 2D hardware-accelerated rendering primitives, and how to detect primitive tracing and avoid non-accelerated rendering.</p>
<p>There could be many causes for poor rendering performance. The following topics identify the cause for your applications poor rendering performance and suggests some approaches to improve performance of software-only rendering.</p>
<p>This topic contains the following subsections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java-2d.htm#GUID-4576F21A-3BA5-4284-8AA1-C9A57E67EAE4" title="In order to better understand what could be causing performance problems, take a look at what hardware acceleration means.">Hardware-Accelerated Rendering Primitives</a></p>
</li>
<li>
<p><a href="java-2d.htm#GUID-35400B5A-A20D-4AFE-8A2C-1E1BD8AA5687" title="To detect a non-accelerated rendering, you can use Java 2D primitive tracing.">Primitive Tracing to Detect and Avoid Non-Accelerated Rendering</a></p>
</li>
<li>
<p><a href="java-2d.htm#GUID-974F86E9-8DFD-4551-9AF7-1D91D7F71403" title="List of causes of poor rendering performance and possible alternatives.">Causes of Poor Rendering Performance</a></p>
</li>
<li>
<p><a href="java-2d.htm#GUID-D5849E59-9EB6-46FA-BA47-EA5C52DFA077" title="Methods to improve performance of software-only rendering.">Improve Performance of Software-only Rendering</a></p>
</li>
</ul>
</div>
<a id="JSTGD449"></a>
<div class="props_rev_3"><a id="GUID-4576F21A-3BA5-4284-8AA1-C9A57E67EAE4"></a>
<h3 id="JSTGD-GUID-4576F21A-3BA5-4284-8AA1-C9A57E67EAE4" class="sect3">Hardware-Accelerated Rendering Primitives</h3>
<div>
<p>In order to better understand what could be causing performance problems, take a look at what hardware acceleration means.</p>
<p>In general, hardware-accelerated rendering could be divided into two categories.</p>
<ul style="list-style-type: disc;">
<li>
<p>Hardware-accelerated rendering to an "accelerated" destination. Examples of rendering destinations that can be hardware-accelerated are <code class="codeph">VolatileImage</code>, screen and <code class="codeph">BufferStrategy</code>. If a destination is accelerated, then rendering goes to a surface may be performed by video hardware. So, if you issue a <code class="codeph">drawRect</code> call, Java 2D redirects this call to the underlying native API (such as GDI, DirectDraw, Direct3D or OpenGL, or X11), which performs the operation using hardware.</p>
</li>
<li>
<p>Caching images in accelerated memory (video memory or pixmaps) so that they can be copied very fast to another accelerated surface. These images are known as managed images.</p>
</li>
</ul>
<p>Ideally, all operations performed on an accelerated surface are hardware-accelerated. In this case, the application takes full advantage of what is offered by the platform.</p>
<p>Unfortunately in many cases the default pipelines are not able to use the hardware for rendering. This can happen due to the pipeline limitations, or the underlying native API. For example, most X servers do not support rendering antialiased primitives, or alpha compositing.</p>
<p>One cause of performance issues is when operations performed are not hardware-accelerated. Even in cases when a destination surface is accelerated, some primitives may not be.</p>
<p>It is important to know how to detect the cases when hardware acceleration is not being used. Knowing this may help in improving performance.</p>
</div>
</div>
<a id="JSTGD450"></a>
<div class="props_rev_3"><a id="GUID-35400B5A-A20D-4AFE-8A2C-1E1BD8AA5687"></a>
<h3 id="JSTGD-GUID-35400B5A-A20D-4AFE-8A2C-1E1BD8AA5687" class="sect3">Primitive Tracing to Detect and Avoid Non-Accelerated Rendering</h3>
<div>
<p>To detect a non-accelerated rendering, you can use Java 2D primitive tracing.</p>
<div class="section">
<p>Java 2D has built-in primitive tracing.</p>
<p>Run your application with <code class="codeph">-Dsun.java2d.trace=count</code>. When the application exits, a list of primitives and their counts is printed to the console.</p>
<p>Any time you see a <code class="codeph">MaskBlit</code> or any of the <code class="codeph">General*</code> primitives, it typically means that some of your rendering is going through software loops. Here is the output from performing <code class="codeph">drawImage</code> on a translucent <code class="codeph">BufferedImage</code> to a <code class="codeph">VolatileImage</code> on Linux:</p>
<pre dir="ltr">
sun.java2d.loops.Blit$GeneralMaskBlit::Blit(IntArgb, SrcOverNoEa, "Integer BGR Pixmap")sun.java2d.loops.MaskBlit::MaskBlit(IntArgb, SrcOver, IntBgr)
</pre>
<div class="p">Here are some of the common non-accelerated primitives in the default pipelines, and their signatures in the tracing output.
<div class="infobox-note" id="GUID-35400B5A-A20D-4AFE-8A2C-1E1BD8AA5687__GUID-E707A89B-FE5A-4775-909D-C38645FBBC25">
<p class="notep1">Note:</p>
Most of this tracing was taken on Linux; you may see some differences depending on your platform and configuration.</div>
</div>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span>Translucent images (images with <span class="apiname">ColorModel.getTranslucency()</span> return<code class="codeph">Translucency.TRANSLUCENT</code>), or images with <code class="codeph">AlphaCompositing</code>. Sample primitive tracing output:</span>
<div>
<pre dir="ltr">
sun.java2d.loops.Blit$GeneralMaskBlit::Blit(IntArgb,SrcOverNoEa, "Integer BGR Pixmap")sun.java2d.loops.MaskBlit::MaskBlit(IntArgb, SrcOver, IntBgr)
</pre></div>
</li>
<li class="stepexpand"><span>Use of antialiasing (by setting the antialiasing hint). Sample primitive tracing output:</span>
<div>
<pre dir="ltr">
sun.java2d.loops.MaskFill::MaskFill(AnyColor, Src, IntBgr)
</pre></div>
</li>
<li class="stepexpand"><span>Rendering antialiased text (setting the text antialising hint). Sample output can be one of the following:</span>
<div>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
sun.java2d.loops.DrawGlyphListAA::DrawGlyphListAA(OpaqueColor, SrcNoEa, AnyInt)
</pre></li>
<li>
<pre dir="ltr">
sun.java2d.loops.DrawGlyphListLCD::DrawGlyphListLCD(AnyColor, SrcNoEa, IntBgr)
</pre></li>
</ul>
</div>
</li>
<li class="stepexpand"><span>Alpha compositing, either by rendering with translucent color (a color with an alpha value that is not <code class="codeph">0xff</code>) or by setting a non-default <code class="codeph">AlphaCompositing</code> mode with <code class="codeph">Graphics2D.setComposite()</code>:</span>
<div>
<pre dir="ltr">
sun.java2d.loops.Blit$GeneralMaskBlit::Blit(IntArgb, SrcOver, IntRgb)sun.java2d.loops.MaskBlit::MaskBlit(IntArgb, SrcOver, IntRgb)
]
</pre></div>
</li>
<li class="stepexpand"><span>Non-trivial transforms (if the transform is more than only translation). Rendering a transformed opaque image to a <code class="codeph">VolatileImage</code>:</span>
<div>
<pre dir="ltr">
sun.java2d.loops.TransformHelper::TransformHelper(IntBgr, SrcNoEa, IntArgbPre)
</pre></div>
</li>
<li class="stepexpand"><span>Rendering a rotated line:</span>
<div>
<pre dir="ltr">
sun.java2d.loops.DrawPath::DrawPath(AnyColor, SrcNoEa, AnyInt)
</pre>
<p>Run your application with tracing and ensure that you do not use unaccelerated primitives unless they are needed.</p>
</div>
</li>
</ul>
</div>
</div>
<a id="JSTGD451"></a>
<div class="props_rev_3"><a id="GUID-974F86E9-8DFD-4551-9AF7-1D91D7F71403"></a>
<h3 id="JSTGD-GUID-974F86E9-8DFD-4551-9AF7-1D91D7F71403" class="sect3">Causes of Poor Rendering Performance</h3>
<div>
<p>List of causes of poor rendering performance and possible alternatives.</p>
<div class="section">
<p>Some of the possible causes of poor rendering performance and possible alternatives are described as follows:</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span><span class="bold">Mixing accelerated and non-accelerated rendering</span>:</span>
<div>
<p>A situation when only part of the primitives rendered by an application could be accelerated by the particular pipeline when rendering to an accelerated surface can cause thrashing, because the pipelines will be constantly trying to adjust for better rendering performance but with possibly little success.</p>
<p>If it is known beforehand that most of the rendering primitives will not be accelerated, then it could be better to either render to a <code class="codeph">BufferedImage</code> and then copy it to the back buffer or the screen, or switch to a non-hardware accelerated pipeline using one of the flags discussed.</p>
<div class="infobox-note" id="GUID-974F86E9-8DFD-4551-9AF7-1D91D7F71403__GUID-3C0A6989-2431-457B-BFF3-8D35CF0D35CF">
<p class="notep1">Note:</p>
<p>This approach may limit your application's ability to take advantage of future improvements in Java 2D's use of hardware acceleration.</p>
</div>
<div class="p">For example, if your application is often used in remote X server cases, but it heavily uses antialiasing, alpha compositing, and so forth, then the performance can be severely degraded. To avoid this, disable the use of pixmaps by setting the <code>-Dsun.java2d.pmoffscreen=false</code> property either by passing it to the Java runtime, or by setting it programmatically using the <span class="apiname">System.setProperty()</span> API.
<div class="infobox-note" id="GUID-974F86E9-8DFD-4551-9AF7-1D91D7F71403__GUID-EC3F73DF-4964-4E3F-8032-C3D30447AC86">
<p class="notep1">Note:</p>
This property must be set before any GUI-related operations because it is read only once.</div>
</div>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Non-optimal rendering primitives</span>:</span>
<div>
<p>It is preferable to use the simplest primitive possible to achieve the desired visual effect.</p>
<p>For example, use <span class="apiname">Graphics.drawLine()</span> instead of new <span class="apiname">Line2D().draw()</span>. The result looks the same. However, the second operation is much more computationally intensive because it is rendered as a generic shape, which is typically much more expensive to render. Shapes show up in different ways in the primitive tracing, depending on antialiasing settings and the specific pipeline, but most likely they will show up as many <code class="codeph">*FillSpans</code> or <code class="codeph">DrawPath</code> primitives.</p>
<p>Another example of complicated attributes is <code class="codeph">GradientPaint</code>. Although it may be hardware accelerated by some of the non-default pipelines (such as OpenGL), it is not hardware accelerated by the default pipelines. Therefore, you can restrict the use of <code class="codeph">GradientPaint</code> if it causes performance problems.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Heap-based destination surface</span> <code class="codeph">BufferedImage</code>:</span>
<div>
<p>Rendering to a <code class="codeph">BufferedImage</code> almost always uses software loops.</p>
<p>An exception on some SPARC systems is that the VIS instruction set can be used for accelerating certain imaging operations. See <a href="http://docs.oracle.com/cd/E19120-01/open.solaris/816-1681/sparcv9-tbl-26/" target="_blank">VIS Instruction Set</a>.</p>
<p>To ensure that the rendering has the opportunity of being hardware accelerated, choose a <code class="codeph">BufferStrategy</code> or a <code class="codeph">VolatileImage</code> object as the rendering destination.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Defeat built-in acceleration mechanism</span>:</span>
<div>
<p>Java 2D attempts to accelerate certain types of images. The contents of images can be cached in video memory for faster copying to accelerated destinations such as <code class="codeph">VolatileImages</code>. These mechanisms can be unknowingly defeated by the application.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Get direct access</span> to pixels with <code class="codeph">getDataBuffer()</code>:</span>
<div>
<p>If an application gets access to <code class="codeph">BufferedImage</code> pixels by using the <span class="apiname">getRaster().getDataBuffer()</span> API, then Java 2D will not be able to guarantee that the data in the cache is up to date, so it will disable any acceleration attempts of this type of image.</p>
<p>To avoid this, do not call <span class="apiname">getDataBuffer()</span>. Instead, work with <code class="codeph">WriteableRaster</code>, which can be obtained with the <span class="apiname">BufferedImage.getRaster()</span> method.</p>
<p>If you need to modify the pixels directly, then you can manually cache your image in video memory by maintaining the cached copy of your image in a <code class="codeph">VolatileImage</code>, and updating the cached data when the original image is touched.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Render to a sprite before every copy</span>:</span>
<div>
<p>If an application renders to an image before copying it to an accelerated surface (<code class="codeph">VolatileImage</code>, <code class="codeph">BufferStrategy</code>), then the image cannot take advantage of being cached in accelerated memory. This is because the cached copy must be updated every time the original image is updated, and therefore only the default system-memory-based surface is used, and this means no acceleration.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Exhausted accelerated memory resources</span>:</span>
<div>
<p>If the application uses many images, then it can exhaust the available accelerated memory. If this is the cause of performance issues for your application, then you might need to handle the resources.</p>
<p>The following API can be used to request the amount of available accelerated memory: <span class="apiname">GraphicsDevice.getAvailableAcceleratedMemory()</span>.</p>
<p>In addition, the following API can be used to determine if your image is being accelerated: <span class="apiname">Image.getCapabilities()</span>.</p>
<p>If you determined that your application is exhausting the resources, you can handle the problem by not holding images you no longer need. For example, if your game advanced to the next level, release all images from the previous levels. You can also release accelerated resources associated with an image by using the <span class="apiname">Image.flush()</span> API.</p>
<p>You can also use the acceleration priority API <span class="apiname">Image.getAccelerationPriority()</span> and <span class="apiname">setAccelerationPriority()</span> to specify the acceleration priority for your images. It is a good idea to make sure that at least your back-buffer is accelerated, so create it first, and with acceleration priority of 1 (default). You can also prohibit certain images from being accelerated if needed by setting the acceleration priority to 0.0.</p>
</div>
</li>
</ul>
</div>
</div>
<a id="JSTGD452"></a>
<div class="props_rev_3"><a id="GUID-D5849E59-9EB6-46FA-BA47-EA5C52DFA077"></a>
<h3 id="JSTGD-GUID-D5849E59-9EB6-46FA-BA47-EA5C52DFA077" class="sect3">Improve Performance of Software-only Rendering</h3>
<div>
<p>Methods to improve performance of software-only rendering.</p>
<p>If your application relies on software-only rendering (by only rendering to a <code class="codeph">BufferedImage</code>, or changing the default pipeline to an unaccelerated one), or even if it does mixed rendering, then the following are certain approaches to improving performance:</p>
<ol>
<li>
<p><span class="bold">Image types or operations with optimized support</span>:</p>
<p>Due to overall platform size constraints, Java 2D has a limited number of optimized routines for converting from one image format to another. In situations where an optimized direct loop can not be found, Java 2D will do the conversion through an intermediate image format (<code class="codeph">IntArgb</code>). This results in performance degradation.</p>
<p>Java 2D primitive tracing can be used for detecting such situations.</p>
<p>For each <code class="codeph">drawImage</code> call there will be two primitives: the first one converting the image from the source format to an intermediate <code class="codeph">IntArgb</code> format and the second one converting from intermediate <code class="codeph">IntArgb</code> to the destination format.</p>
<p>Here are two ways to avoid such situations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use a different image format if possible.</p>
</li>
<li>
<p>Convert your image to an intermediate image of one of the better-supported formats, such as <code class="codeph">INT_RGB</code> or <code class="codeph">INT_ARGB</code>. In this way the conversion from the custom image format will happen only once instead of on every copy.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Transparency vs translucency</span>:</p>
<p>Consider using 1-bit transparent (<code class="codeph">BITMASK</code>) images for your sprites as opposed to images with full translucency (such as <code class="codeph">INT_ARGB</code>) if possible.</p>
<p>Processing images with full alpha is more CPU-intensive.</p>
<p>You can get a 1-bit transparent image using a call to <span class="apiname">GraphicsConfiguration.createCompatibleImage(w,h, Transparency.BITMASK)</span>.</p>
</li>
</ol>
</div>
</div>
</div>
<a id="JSTGD453"></a>
<div class="props_rev_3"><a id="GUID-02BB2984-92CA-40E6-ACF6-CB8EB065F8B9"></a>
<h2 id="JSTGD-GUID-02BB2984-92CA-40E6-ACF6-CB8EB065F8B9" class="sect2">Text-Related Issues</h2>
<div>
<p>Possible issues and crashes that are related to text rendering and describes tips to overcome such issues.</p>
<p>This section contains the following subsections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="java-2d.htm#GUID-D6B0F0B7-E080-4FFB-AB84-0271BBF644C7" title="If an application crashes during text rendering, first check the fatal error log file.">Application Crash During Text Rendering</a></p>
</li>
<li>
<p><a href="java-2d.htm#GUID-293BD82D-5073-469E-A3BA-2EEC0A30879A" title="Java has its own font rasterizer, and you can expect some small differences between the appearance of text in a Java application and in a native application.">Differences in Text Appearance</a></p>
</li>
<li>
<p><a href="java-2d.htm#GUID-313CA2E2-320A-48B6-BB16-625640E7A2B5">Metrics</a></p>
</li>
</ul>
</div>
<a id="JSTGD454"></a>
<div class="props_rev_3"><a id="GUID-D6B0F0B7-E080-4FFB-AB84-0271BBF644C7"></a>
<h3 id="JSTGD-GUID-D6B0F0B7-E080-4FFB-AB84-0271BBF644C7" class="sect3">Application Crash During Text Rendering</h3>
<div>
<p>If an application crashes during text rendering, first check the fatal error log file.</p>
<div class="section">
<p>See <a href="fatal-error-log.htm#GUID-2AE5EE08-A68F-4514-9618-A581C0EDFB1B" title="Describes the fatal error log, its location, and contents.">Fatal Error Log</a> for detailed information about this error log file. If the crash occurred in <code>fontmanager.dll</code> or if <code class="codeph">fontmanager</code> is present in the stack, then the crash occurred in the font processing code. The following example shows typical native stack frames (excerpt from the full log file).</p>
<pre dir="ltr">
Stack: [0x008a0000,0x008f0000),  sp=0x008ef52c,  free space=317k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [ntdll.dll+0x1888f]
C  [ntdll.dll+0x18238]
C  [ntdll.dll+0x11c76]
C  [MSVCR71.dll+0x16b3]
C  [MSVCR71.dll+0x16db]
C  [fontmanager.dll+0x21f9a]
C  [fontmanager.dll+0x22876]
C  [fontmanager.dll+0x1de40]
C  [fontmanager.dll+0x1da94]
C  [fontmanager.dll+0x48abb]
j  sun.font.FileFont.getGlyphImage(JI)J+0
j  sun.font.FileFontStrike.getGlyphImagePtrs([I[JI)V+92
j  sun.font.GlyphList.mapChars(Lsun/java2d/loops/FontInfo;I)Z+37
j  sun.font.GlyphList.setFromString(Lsun/java2d/loops/FontInfo;Ljava/lang/String;FF)Z+71
j  sun.java2d.pipe.GlyphListPipe.drawString(Lsun/java2d/SunGraphics2D;Ljava/lang/String;DD)V+148
j  sun.java2d.SunGraphics2D.drawString(Ljava/lang/String;II)V+60
j  FontCrasher.tryFont(Ljava/lang/String;)V+138
j  FontCrasher.main([Ljava/lang/String;)V+20
v  ~StubRoutines::call_stub
</pre>
<p>In this case, a particular font is probably the problem. If so, then removing this font from the system will likely resolve the problem.</p>
<p>To identify the font file, execute the application with <code>-Dsun.java2d.debugfonts=true</code>. The font that is mentioned last is usually the one that is causing problems, as shown in the following example.</p>
<pre dir="ltr">
INFO: Registered file C:\WINDOWS\Fonts\WINGDING.TTF as font ** TrueType Font: Family=Wingdings
 Name=Wingdings style=0 fileName=C:\WINDOWS\Fonts\WINGDING.TTF rank=2
Aug 16, 2006 10:59:06 PM sun.font.FontManager initialiseDeferredFont
INFO: Opening deferred font file SYMBOL.TTF
Aug 16, 2006 10:59:06 PM sun.font.FontManager addToFontList
INFO: Add to Family Symbol, Font Symbol rank=2
Aug 16, 2006 10:59:06 PM sun.font.FontManager registerFontFile
INFO: Registered file C:\WINDOWS\Fonts\SYMBOL.TTF as font ** TrueType Font: Family=Symbol
 Name=Symbol style=0 fileName=C:\WINDOWS\Fonts\SYMBOL.TTF rank=2
Aug 16, 2006 10:59:06 PM sun.font.FontManager findFont2D
INFO: Search for font: Dialog
Aug 16, 2006 10:59:06 PM sun.font.FontManager initialiseDeferredFont
INFO: Opening deferred font file ARIALBD.TTF
Aug 16, 2006 10:59:06 PM sun.font.FontManager addToFontList
INFO: Add to Family Arial, Font Arial Bold rank=2
Aug 16, 2006 10:59:06 PM sun.font.FontManager registerFontFile
INFO: Registered file C:\WINDOWS\Fonts\ARIALBD.TTF as font ** TrueType Font: Family=Arial
 Name=Arial Bold style=1 fileName=C:\WINDOWS\Fonts\ARIALBD.TTF rank=2
Aug 16, 2006 10:59:06 PM sun.font.FontManager initialiseDeferredFont
INFO: Opening deferred font file WINGDING.TTF
Aug 16, 2006 10:59:06 PM sun.font.FontManager initialiseDeferredFont
INFO: Opening deferred font file SYMBOL.TTF
Aug 16, 2006 10:59:06 PM sun.font.FontManager findFont2D
INFO: Search for font: Dialog
Aug 16, 2006 10:59:06 PM sun.font.FontManager initialiseDeferredFont
INFO: Opening deferred font file ARIAL.TTF
Aug 16, 2006 10:59:06 PM sun.font.FontManager addToFontList
INFO: Add to Family Arial, Font Arial rank=2
Aug 16, 2006 10:59:06 PM sun.font.FontManager registerFontFile
INFO: Registered file C:\WINDOWS\Fonts\ARIAL.TTF as font ** TrueType Font: Family=Arial
 Name=Arial style=0 fileName=C:\WINDOWS\Fonts\ARIAL.TTF rank=2
Aug 16, 2006 10:59:06 PM sun.font.FontManager initialiseDeferredFont
INFO: Opening deferred font file WINGDING.TTF
Aug 16, 2006 10:59:06 PM sun.font.FontManager initialiseDeferredFont
INFO: Opening deferred font file SYMBOL.TTF
</pre>
<div class="infobox-note" id="GUID-D6B0F0B7-E080-4FFB-AB84-0271BBF644C7__GUID-75647511-7DA2-4515-BA36-87F81C6727D9">
<p class="notep1">Note:</p>
<p>In some cases, the font that is last mentioned might not be the problem. Font names are printed when they are first used and subsequent uses are not shown.</p>
</div>
<p>To verify that this particular font is causing the problem, you can temporarily remove it from your system. You can easily find the file name associated with this particular family name from the output.</p>
<p>Another verification approach is to use the Font2DTest tool (<code>demo/jfc/Font2DTest</code>) to test fonts that you suspect. You can specify a particular font size, style, and rasterization mode. If the process of viewing a particular font with Font2DTest causes the JDK to crash, then it is very likely that it is the font that is causing the problems.</p>
<p>If you found a font causing the JDK to crash, it is very important to report this problem, including the particular font and the operating system in the <a href="http://bugs.java.com" target="_blank">Bugs Database</a>. See <a href="submit-bug-report.htm#GUID-DB465A9C-03FA-4324-BFF9-45BF9699F349" title="Guidance about how to submit a bug report. It includes suggestions about what to try before submitting a report and which data to collect for the report.">Submit a Bug Report</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD458"></a><a id="JSTGD457"></a>
<div class="props_rev_3"><a id="GUID-293BD82D-5073-469E-A3BA-2EEC0A30879A"></a>
<h3 id="JSTGD-GUID-293BD82D-5073-469E-A3BA-2EEC0A30879A" class="sect3">Differences in Text Appearance</h3>
<div>
<p>Java has its own font rasterizer, and you can expect some small differences between the appearance of text in a Java application and in a native application.</p>
<p>One of the typical sources of these differences is that the antialiasing settings can be different. In particular, a Swing application sometimes ignores the Linux desktop font antialiasing settings.</p>
<p>There are several likely reasons for this behavior:</p>
<ul style="list-style-type: disc;">
<li>
<p>Over the remote X11 antialiasing is not enabled by default for performance reasons. See <a href="http://www.oracle.com/technetwork/java/index-137037.html#Font_and_Text_questions" target="_blank">Font and Test questions in the Java 2D FAQ</a>.</p>
</li>
<li>
<p>CJK fonts that use embedded bitmaps may render using the bitmaps instead of subpixel text.</p>
</li>
<li>
<p>Some variants of unsupported desktops do not report their font smoothing settings properly. For example, KDE is unsupported but should generally work; however, some problem seems to prevent JDK from picking up the setting.</p>
</li>
</ul>
<p>The best way to ensure that the configuration is what you expect is to run Font2DTest, explicitly select the font used by the native application, and set other parameters as appropriate. <a href="java-2d.htm#GUID-293BD82D-5073-469E-A3BA-2EEC0A30879A__BABBJHAB">Figure 12-1</a> is a sample screen from the <span class="italic"><span class="bold">Font2DTest</span></span> tool.</p>
<div class="figure" id="GUID-293BD82D-5073-469E-A3BA-2EEC0A30879A__BABBJHAB">
<p class="titleinfigure">Figure 12-1 Sample Screen from Font2DTest Tool</p>
<img width="600" height="283" src="img/font2dtest.png" alt="Description of Figure 12-1 follows" title="Description of Figure 12-1 follows" /><br />
<a href="img_text/font2dtest.htm">Description of "Figure 12-1 Sample Screen from Font2DTest Tool"</a></div>
<!-- class="figure" -->
<div class="infoboxnotealso" id="GUID-293BD82D-5073-469E-A3BA-2EEC0A30879A__GUID-A5C67174-365D-4DA9-B7FC-CCBD011980BF">
<p class="notep1">Tip:</p>
<p>You can input your own string by choosing <span class="bold">User Text</span> in the drop-down list labeled <span class="bold">Text to use</span>.</p>
</div>
<p>The size of the font in the Java language is always expressed with 72 dpi. A native OS can use a different screen dpi, and therefore an adjustment must be made. Matching Java font size can be calculated as <code class="codeph">Toolkit.getScreenResolution()</code> divided by 72 multiplied by the size of the native font.</p>
<p>In all native Swing look and feel, such as the Windows look and feel or the GTK look and feel (for Oracle Solaris and Linux operating systems), Swing components perform this adjustment automatically, but if you are running <span class="italic"><span class="bold">Font2DTest,</span></span> the text display area will always use 72 dpi.</p>
<p>On operating systems other than Windows, the general recommendation is to use TrueType fonts instead of Type1 fonts. The easiest way to figure out the type of font is to look at the file extension: extensions pfa and pfb indicate Type1 fonts, and ttf, ttc, and tte represent TrueType fonts.</p>
</div>
</div>
<a id="JSTGD459"></a>
<div class="props_rev_3"><a id="GUID-313CA2E2-320A-48B6-BB16-625640E7A2B5"></a>
<h3 id="JSTGD-GUID-313CA2E2-320A-48B6-BB16-625640E7A2B5" class="sect3">Metrics</h3>
<div>
<p>If you find that text bounds are different from what you expect, then ensure that you are using the appropriate way to calculate them. For example, the height obtained from a <code class="codeph">FontMetrics</code> is not specific to a particular piece of text, and the <code class="codeph">stringWidth</code> indicates logical advance, which is not the same thing as <span class="italic"><span class="bold">wide.</span></span> For more details, see the <a href="http://www.oracle.com/technetwork/java/index-137037.html#Font_and_Text_questions" target="_blank">Font and Text questions in the Java 2D FAQ</a>.</p>
</div>
</div>
</div>
<a id="JSTGD460"></a>
<div class="props_rev_3"><a id="GUID-17CCB9A9-F9A6-4541-A536-7259AAF90044"></a>
<h2 id="JSTGD-GUID-17CCB9A9-F9A6-4541-A536-7259AAF90044" class="sect2">Java 2D Printing</h2>
<div>
<p>List of issues that can happen with Java 2D printing.</p>
<div class="section">
<p>This section describes some issues that can happen with Java 2D printing and suggests causes and solutions.</p>
<p>Also, see the <a href="http://www.oracle.com/technetwork/java/index-137037.html#Printing_questions" target="_blank">Printing questions in the Java 2D FAQ</a>.</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span><span class="bold">JRE crashes during printing on Windows</span>.</span>
<div>
<p><span class="bold">Cause:</span> The JRE uses Windows printer drivers, and they might have problems.</p>
<p><span class="bold">Solution:</span> Upgrade the Windows printer driver for the printer that is being used.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">The printing seems to be successful, but the job does not print on Windows.</span></span>
<div>
<p><span class="bold">Cause:</span> Some jobs fail to properly spool to the printer.</p>
<p><span class="bold">Solution:</span> In the printer driver properties, disable Advanced Printing Options.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">The print dialog box takes a long time to appear on Windows.</span></span>
<div>
<p><span class="bold">Cause:</span> Applications might cause the JRE to probe all printers, including those that are disconnected.</p>
<p><span class="bold">Solution:</span> Look for disconnected or unreachable network printers and remove them from the list of printers.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">PrintJob.printDialog() shows no service found error on Oracle Solaris and Linux.</span></span>
<div>
<p><span class="bold">Cause:</span> The cause is one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">lpc</code> utility is not in the <code>/usr/sbin</code> directory.</p>
</li>
<li>
<p>The <code class="codeph">lpstat</code> utility is not in the <code>/usr/sbin</code> directory.</p>
</li>
</ul>
<p><span class="bold">Solution:</span> Install <code class="codeph">lpc</code> and <code class="codeph">lpstat</code> in the standard location, as previously mentioned.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment340">
<tr>
<td class="cellalignment347">
<table class="cellalignment345">
<tr>
<td class="cellalignment344"><a href="java-2d-pipeline-rendering-and-properties.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment344"><a href="swing.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment349">
<table class="cellalignment343">
<tr>
<td class="cellalignment344"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment344"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment344"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
