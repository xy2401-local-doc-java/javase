<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Troubleshoot Process Hangs and Loops</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This chapter provides information and guidance about some specific procedures for troubleshooting hanging or looping processes." />
<meta name="dcterms.created" content="2018-03-12T22:27:13Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Troubleshooting Guide" />
<meta name="dcterms.identifier" content="E91156-01" />
<meta name="dcterms.isVersionOf" content="JSTGD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="troubleshoot-system-crashes.htm" title="Previous" type="text/html" />
<link rel="Next" href="handle-signals-and-exceptions.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSTGD.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-0777035D-123C-4DC5-A241-21560882C7BB"></a> <span id="PAGE" style="display:none;">11/31</span> <!-- End Header -->
<a id="JSTGD336"></a><a id="JSTGD335"></a>
<h1 id="JSTGD-GUID-0777035D-123C-4DC5-A241-21560882C7BB" class="sect1"><span class="enumeration_chapter">6</span> Troubleshoot Process Hangs and Loops</h1>
<div>
<div><span>This chapter provides information and guidance about some specific procedures for troubleshooting hanging or looping processes.</span></div>
<p>Problems can occur that involve hanging or looping processes. A hang can occur for many reasons, but often stems from a deadlock in an application code, API code, or library code. A hang can be due to a bug in the Java HotSpot VM.</p>
<p>Sometimes an apparent hang turns out to be, in fact, a loop. For example, a bug in a VM process that causes one or more threads to go into an infinite loop can consume all available CPU cycles.</p>
<p>The initial step when you diagnose a hang is to find out if the VM process is idle or consuming all available CPU cycles. You can do this using a native operating system (OS) utility. If the process appears to be busy and is consuming all available CPU cycles, then it is likely that the issue is a looping thread rather than a deadlock. On the Oracle Solaris operating system, for example, the command <code class="codeph">prstat -L -p <span class="variable">pid</span></code> can be used to report the statistics for all lightweight processes (LWPs) in the target process and therefore will identify the threads that are consuming a lot of CPU cycles.</p>
<p>This chapter contains the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="troubleshoot-process-hangs-and-loops.htm#GUID-8D398808-91BF-4AC5-B516-109E2DC41413" title="If a VM process appears to be looping, the first step is to try to get a thread dump. If a thread dump can be obtained, it will often be clear which thread is looping. If the looping thread can be identified, then the trace stack in the thread dump can provide the direction on where (and maybe why) the thread is looping.">Diagnose a Loop Process</a></p>
</li>
<li>
<p><a href="troubleshoot-process-hangs-and-loops.htm#GUID-E36E9610-5EC9-4AB4-8F6B-EB479205DDC3" title="Use the thread dump to diagnose a hung process.">Diagnose a Hung Process</a></p>
</li>
<li>
<p><a href="troubleshoot-process-hangs-and-loops.htm#GUID-CA219DD8-7862-4924-8353-6A9C76369E06">Oracle Solaris 8 Thread Library</a></p>
</li>
</ul>
</div>
<a id="JSTGD337"></a>
<div class="props_rev_3"><a id="GUID-8D398808-91BF-4AC5-B516-109E2DC41413"></a>
<h2 id="JSTGD-GUID-8D398808-91BF-4AC5-B516-109E2DC41413" class="sect2">Diagnose a Loop Process</h2>
<div>
<p>If a VM process appears to be looping, the first step is to try to get a thread dump. If a thread dump can be obtained, it will often be clear which thread is looping. If the looping thread can be identified, then the trace stack in the thread dump can provide the direction on where (and maybe why) the thread is looping.</p>
<div class="section">
<p>If the application console (standard input/output) is available, then press the Control+\ key combination (on Oracle Solaris or Linux) or the Control+Break key combination (on Windows) to cause the HotSpot VM to print a thread dump, including thread state. On Oracle Solaris and Linux operating systems the thread dump can also be obtained by sending a <code class="codeph">SIGQUIT</code> to the process (command <code class="codeph">kill -QUIT <span class="variable">pid</span></code>). In this case, the thread dump is printed to the standard output of the target process. The output might be directed to a file, depending on how the process was started.</p>
<p>If the Java process is started with the <code>-XX:+PrintClassHistogram</code> command-line option, then the Control+Break handler will produce a heap histogram.</p>
<p>If a thread dump can be obtained, then a good place to start is the thread stacks of the threads that are in the <code class="codeph">RUNNABLE</code> state. See <a href="diagnostic-tools.htm#GUID-489BB790-A7C7-4CF0-9A6B-63FA12230238" title="The thread dump consists of the thread stack, including the thread state, for all Java threads in the virtual machine.">Thread Dump</a>, for more information about the format of the thread dump, as well as a table of the possible thread states in the thread dump. In some cases, it might be necessary to get a sequence of thread dumps in order to determine which threads appear to be continuously busy.</p>
<p>If the application console is not available (for example, the process is running in the background, or the VM output is directed to an unknown location), then the <code class="codeph">jstack</code> utility can be used to get the stack thread. See <a href="diagnostic-tools.htm#GUID-36CBAF37-0B61-4455-9183-1268E6D497DD" title="Use the jcmd utility, instead of jcmd utility to diagnose problems with JVM and Java applications.">The jstack Utility</a> for more about the output of this utility. The <code class="codeph">jstack</code> utility should also be used if the thread dump does not provide any evidence that a Java thread is looping.</p>
<p>When reviewing the output of the <code class="codeph">jstack</code> utility, focus initially on the threads that are in the <code class="codeph">RUNNABLE</code> state. This is the most likely state for threads that are busy and possibly looping. It might be necessary to execute <code class="codeph">jstack</code> a number of times to get a better idea of which threads are looping. If a thread appears to be always in the <code class="codeph">RUNNABLE</code> state, then the <code>-m</code> option can be used to print the native frames and provide a further hint about what the thread is doing. If a thread appears to be looping continuously while in the <code class="codeph">RUNNABLE</code> state, then this situation can indicate a potential HotSpot VM bug that needs further investigation.</p>
<p>If the VM does not respond to Control+\, then this could indicate a VM bug rather than an issue with the application or library code. In this case, use <code class="codeph">jstack</code> with the <code>-m</code> option to get a thread stack for all threads. The output will include the thread stacks for VM internal threads. In this stack trace, identify threads that do not appear to be waiting. For example, on the Oracle Solaris operating system, you identify the threads that are not in functions such as <code class="codeph">__lwp_cond_wait</code>, <code class="codeph">__lwp_park</code>, <code class="codeph">___pollsys</code>, or other blocking functions. If it appears that the looping is caused by a VM bug, then collect as much data as possible and submit a bug report. See <a href="submit-bug-report.htm#GUID-DB465A9C-03FA-4324-BFF9-45BF9699F349" title="Guidance about how to submit a bug report. It includes suggestions about what to try before submitting a report and which data to collect for the report.">Submit a Bug Report</a> for more about data collection.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD338"></a>
<div class="props_rev_3"><a id="GUID-E36E9610-5EC9-4AB4-8F6B-EB479205DDC3"></a>
<h2 id="JSTGD-GUID-E36E9610-5EC9-4AB4-8F6B-EB479205DDC3" class="sect2">Diagnose a Hung Process</h2>
<div>
<p>Use the thread dump to diagnose a hung process.</p>
<div class="section">
<p>If the application appears to be hung and the process appears to be idle, then the first step is to try to get a thread dump. If the application console is available, then press Control+\ (on Oracle Solaris or Linux), or Control+Break (on Windows) to cause the HotSpot VM to print a thread dump. On the Oracle Solaris and Linux operating systems, the thread dump can also be obtained by sending a <code class="codeph">SIGQUIT</code> to the process (command <code class="codeph">kill -QUIT <span class="variable">pid</span></code>). If the hung process can generate a thread dump, then the output is printed to the standard output of the target process.</p>
<p>After printing the thread dump, the HotSpot VM executes a deadlock detection algorithm.</p>
<p>The following sections describe various situations for a hung process.</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="troubleshoot-process-hangs-and-loops.htm#GUID-5A88BA3D-D0FC-466F-B5B9-566ED0D62DF1" title="If a deadlock is detected, then it will be printed along with the stack trace of the threads involved in the deadlock.">Deadlock Detected</a></p>
</li>
<li>
<p><a href="troubleshoot-process-hangs-and-loops.htm#GUID-8B8DE8E0-D7E3-48A9-96EB-77BC1128100D" title="If the thread dump is printed and no deadlocks are found, then the issue might be a bug in which a thread is waiting for a monitor that is never notified. This could be a timing issue or a general logic bug.">Deadlock Not Detected</a></p>
</li>
<li>
<p><a href="troubleshoot-process-hangs-and-loops.htm#GUID-88307E36-5BA7-4EF7-B90D-5B8F028E7890" title="If the VM is deadlocked or hung, use the jstack command.">No Thread Dump</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="JSTGD339"></a>
<div class="props_rev_3"><a id="GUID-5A88BA3D-D0FC-466F-B5B9-566ED0D62DF1"></a>
<h3 id="JSTGD-GUID-5A88BA3D-D0FC-466F-B5B9-566ED0D62DF1" class="sect3">Deadlock Detected</h3>
<div>
<p>If a deadlock is detected, then it will be printed along with the stack trace of the threads involved in the deadlock.</p>
<p>The following example shows the stack trace for this situation.</p>
<pre dir="ltr">
Found one Java-level deadlock:
=============================
"AWT-EventQueue-0":
  waiting to lock monitor 0x000ffbf8 (object 0xf0c30560, a java.awt.Component$AWTTreeLock),
  which is held by "main"
"main":
  waiting to lock monitor 0x000ffe38 (object 0xf0c41ec8, a java.util.Vector),
  which is held by "AWT-EventQueue-0"

Java stack information for the threads listed above:
===================================================
"AWT-EventQueue-0":
        at java.awt.Container.removeNotify(Container.java:2503)
        - waiting to lock &lt;0xf0c30560&gt; (a java.awt.Component$AWTTreeLock)
        at java.awt.Window$1DisposeAction.run(Window.java:604)
        at java.awt.Window.doDispose(Window.java:617)
        at java.awt.Dialog.doDispose(Dialog.java:625)
        at java.awt.Window.dispose(Window.java:574)
        at java.awt.Window.disposeImpl(Window.java:584)
        at java.awt.Window$1DisposeAction.run(Window.java:598)
        - locked &lt;0xf0c41ec8&gt; (a java.util.Vector)
        at java.awt.Window.doDispose(Window.java:617)
        at java.awt.Window.dispose(Window.java:574)
        at javax.swing.SwingUtilities$SharedOwnerFrame.dispose(SwingUtilities.java:1743)
        at javax.swing.SwingUtilities$SharedOwnerFrame.windowClosed(SwingUtilities.java:1722)
        at java.awt.Window.processWindowEvent(Window.java:1173)
        at javax.swing.JDialog.processWindowEvent(JDialog.java:407)
        at java.awt.Window.processEvent(Window.java:1128)
        at java.awt.Component.dispatchEventImpl(Component.java:3922)
        at java.awt.Container.dispatchEventImpl(Container.java:2009)
        at java.awt.Window.dispatchEventImpl(Window.java:1746)
        at java.awt.Component.dispatchEvent(Component.java:3770)
        at java.awt.EventQueue.dispatchEvent(EventQueue.java:463)
        at java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:214)
        at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:163)
        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:157)
        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:149)
        at java.awt.EventDispatchThread.run(EventDispatchThread.java:110)
"main":
        at java.awt.Window.getOwnedWindows(Window.java:844)
        - waiting to lock &lt;0xf0c41ec8&gt; (a java.util.Vector)
        at javax.swing.SwingUtilities$SharedOwnerFrame.installListeners(SwingUtilities.java:1697)
        at javax.swing.SwingUtilities$SharedOwnerFrame.addNotify(SwingUtilities.java:1690)
        at java.awt.Dialog.addNotify(Dialog.java:370)
        - locked &lt;0xf0c30560&gt; (a java.awt.Component$AWTTreeLock)
        at java.awt.Dialog.conditionalShow(Dialog.java:441)
        - locked &lt;0xf0c30560&gt; (a java.awt.Component$AWTTreeLock)
        at java.awt.Dialog.show(Dialog.java:499)
        at java.awt.Component.show(Component.java:1287)
        at java.awt.Component.setVisible(Component.java:1242)
        at test01.main(test01.java:10)

Found 1 deadlock.
</pre>
<p>The default deadlock detection works with locks that are obtained using the synchronized keyword, as well as with locks that are obtained using the <code class="codeph">java.util.concurrent</code> package. If the Java VM flag <code>-XX:+PrintConcurrentLocks</code> is set, then the stack trace also shows a list of lock owners.</p>
<p>If a deadlock is detected, then you must examine the output in more detail in order to understand the deadlock. In the previous example, the thread <code class="codeph">main</code> is locking object <code class="codeph">0xf0c30560</code> and is waiting to enter <code class="codeph">0xf0c41ec8</code>, which is locked by thread <code class="codeph">AWT-EventQueue-0</code>. However, thread <code class="codeph">AWT-EventQueue-0</code> is waiting to enter <code class="codeph">0xf0c30560</code>, which is locked by <code class="codeph">main</code>.</p>
<p>The detail in the stack traces provides information to help you find the deadlock.</p>
</div>
</div>
<a id="JSTGD341"></a>
<div class="props_rev_3"><a id="GUID-8B8DE8E0-D7E3-48A9-96EB-77BC1128100D"></a>
<h3 id="JSTGD-GUID-8B8DE8E0-D7E3-48A9-96EB-77BC1128100D" class="sect3">Deadlock Not Detected</h3>
<div>
<p>If the thread dump is printed and no deadlocks are found, then the issue might be a bug in which a thread is waiting for a monitor that is never notified. This could be a timing issue or a general logic bug.</p>
<p>To find out more about the issue, examine each of the threads in the thread dump and each thread that is blocked in <code class="codeph">Object.wait()</code>. The caller frame in the stack trace indicates the class and method that is invoking the <code class="codeph">wait()</code> method. If the code was compiled with line number information (the default), then this provides a direction as to the code to examine. In most cases, you must have some knowledge of the application logic or library in order to diagnose this issue further. In general, you must understand how the synchronization works in the application and the details and conditions for when and where the monitors are notified.</p>
</div>
</div>
<a id="JSTGD342"></a>
<div class="props_rev_3"><a id="GUID-88307E36-5BA7-4EF7-B90D-5B8F028E7890"></a>
<h3 id="JSTGD-GUID-88307E36-5BA7-4EF7-B90D-5B8F028E7890" class="sect3">No Thread Dump</h3>
<div>
<p>If the VM is deadlocked or hung, use the <code class="codeph">jstack</code> command.</p>
<p>If the VM does not respond to Control+\ or Control+Break, then it is possible that the VM is deadlocked or hung for some other reason. In that case, use <a href="diagnostic-tools.htm#GUID-36CBAF37-0B61-4455-9183-1268E6D497DD" title="Use the jcmd utility, instead of jcmd utility to diagnose problems with JVM and Java applications.">The jstack Utility</a> to get a thread dump. This also applies in the case when the application is not accessible, or the output is directed to an unknown location.</p>
<p>In the <code class="codeph">jstack</code> output, examine each of the threads in the <code class="codeph">BLOCKED</code> state. The top frame can sometimes indicate why the thread is blocked (for example, <code class="codeph">Object.wait</code> or <code class="codeph">Thread.sleep</code>). The rest of the stack will give an indication of what the thread is doing. This is particularly true when the source is compiled with line number information (the default), and you can cross-reference the source code.</p>
<p>If a thread is in the <code class="codeph">BLOCKED</code> state and the reason is not clear, then use the <code class="codeph">-m</code> option to get a mixed stack. With the mixed stack output, it should be possible to identify why the thread is blocked. If a thread is blocked trying to enter a synchronized method or block, then you will see frames such as <code class="codeph">ObjectMonitor::enter</code> near the top of the stack. The following example shows a sample, mixed-stack output.</p>
<pre dir="ltr">
----------------- t@13 -----------------
0xff31e8b8      ___lwp_cond_wait + 0x4
0xfea8c810      void ObjectMonitor::EnterI(Thread*) + 0x2b8
0xfeac86b8      void ObjectMonitor::enter2(Thread*) + 0x250
:
</pre>
<p>Threads in the <code class="codeph">RUNNABLE</code> state might also be blocked. The top frames in the mixed stack should indicate what the thread is doing.</p>
<p>One specific thread to check is <code class="codeph">VMThread</code>. This is the special thread used to execute operations like garbage collection (GC). It can be identified as the thread that is executing <code class="codeph">VMThread::run()</code> in its initial frames. On the Oracle Solaris, it is typically <code class="codeph">t@4</code>. On Linux, it should be identifiable using the C++ mangled name <code class="codeph">_ZN8VMThread4loopEv</code>.</p>
<p>In general, the VM thread is in one of three states: waiting to execute a VM operation, synchronizing all threads in preparation for a VM operation, or executing a VM operation. If you suspect that a hang is a HotSpot VM bug rather than an application or class library deadlock, then pay special attention to the VM thread.</p>
<p>If the VM thread appears to be stuck in <code class="codeph">SafepointSynchronize::begin</code>, then this could indicate an issue bringing the VM to a safepoint. A safepoint indicates that all threads executing in the VM are blocked and waiting for a special operation, such as GC, to complete.</p>
<p>If the VM thread appears to be stuck in <code class="codeph">function</code>, where <code class="codeph">function</code> ends in <code class="codeph">doit</code>, then this could also indicate a VM problem.</p>
<p>In general, if you can execute the application from the command line, and you get to a state where the VM does not respond to Control+\ or Control+Break, it is more likely that you have uncovered a VM bug, a thread library issue, or a bug in another library. When this occurs, get a crash dump. See <a href="submit-bug-report.htm#GUID-597FDBF7-68A6-47CC-869D-F9B8849AB7DC" title="Procedure to generate and collect core dumps (also known as crash dumps). A core dump or a crash dump is a memory snapshot of a running process.">Collect Core Dumps</a> for instructions about gathering as much information as possible, and submit a bug report or call support.</p>
<p>One other tool to mention in the context of hung processes is the <code class="codeph">pstack</code> utility on the Oracle Solaris operating system. On the Oracle Solaris 8 and 9 operating systems, this utility prints the thread stacks for LWPs in the target process. On the Oracle Solaris 10 operating system and starting with the JDK 5.0 release, the output of <code class="codeph">pstack</code> is similar, though not identical, to the output from <code class="codeph">jstack -m</code>. As with <code class="codeph">jstack</code>, the Oracle Solaris 10 operating system implementation of <code class="codeph">pstack</code> prints the fully qualified class name, method name, and bytecode index (BCI). It will also print line numbers for cases where the source was compiled with line number information (the default). This is useful for developers and administrators who are familiar with the other utilities on the Oracle Solaris operating system that exercise features of the <code class="codeph">/proc</code> file system.</p>
<p>The equivalent tool of <code class="codeph">pstack</code> on Linux is <code class="codeph">lsstack</code>. This utility is included in some distributions and otherwise obtained from <a href="http://sourceforge.net" target="_blank">sourceforge</a>. At the time of this writing, <code class="codeph">lsstack</code> reported native frames only.</p>
</div>
</div>
</div>
<a id="JSTGD344"></a>
<div class="props_rev_3"><a id="GUID-CA219DD8-7862-4924-8353-6A9C76369E06"></a>
<h2 id="JSTGD-GUID-CA219DD8-7862-4924-8353-6A9C76369E06" class="sect2">Oracle Solaris 8 Thread Library</h2>
<div>
<p>The default thread library on the Oracle Solaris 8 operating system is often referred to as the T1 library. This thread library implemented the <span class="variable">m</span>:<span class="variable">n</span> threading model, where <span class="variable">m</span> user threads are mapped to <span class="variable">n</span> kernel-level threads (LWPs). The Oracle Solaris 8 operating system also shipped with an alternative and newer thread library in <code>/usr/lib/lwp</code>. The alternative thread library is often referred to as the T2 library, and it became the default thread library in the Oracle Solaris 9 and 10 operating systems. In older releases of J2SE (pre-1.4.0 in particular), there were a number of issues with the default thread library (for example, bugs in the thread library, LWP synchronization problems, or LWP starvation). LWP starvation is a scenario in which there are user threads in the <code class="codeph">RUNNABLE</code> state, but there are no kernel level threads available.</p>
<p>Although the issues cited are historical, it should be noted that when the JDK software is deployed on the Oracle Solaris 8 operating system, it still uses the T1 library by default. LWP starvation type issues do not happen because the JDK release uses "bound threads" so that each user thread is bound to a kernel thread. However, in the event that you encounter an issue, such as a hang, that you believe is a thread library issue, then you can instruct the HotSpot VM to use the T2 library by adding /usr/lib/lwp to the <code class="codeph">LD_LIBRARY_PATH</code>. To check if the T2 library is in use, issue the command <code class="codeph">pldd <span class="variable">pid</span></code> to list the libraries loaded by the specified process.</p>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment340">
<tr>
<td class="cellalignment347">
<table class="cellalignment345">
<tr>
<td class="cellalignment344"><a href="troubleshoot-system-crashes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment344"><a href="handle-signals-and-exceptions.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment349">
<table class="cellalignment343">
<tr>
<td class="cellalignment344"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment344"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment344"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
