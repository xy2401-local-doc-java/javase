<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>AWT</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This chapter provides information and guidance about some specific procedures for troubleshooting common issues that might occur in the Java SE Abstract Window Toolkit (AWT)." />
<meta name="dcterms.created" content="2018-03-12T22:27:13Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Troubleshooting Guide" />
<meta name="dcterms.identifier" content="E91156-01" />
<meta name="dcterms.isVersionOf" content="JSTGD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="introduction-client-issues.htm" title="Previous" type="text/html" />
<link rel="Next" href="java-2d-pipeline-rendering-and-properties.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSTGD.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>

                    <script>var w=window;if(w.performance||w.mozPerformance||w.msPerformance||w.webkitPerformance){var d=document;AKSB=w.AKSB||{},AKSB.q=AKSB.q||[],AKSB.mark=AKSB.mark||function(e,_){AKSB.q.push(["mark",e,_||(new Date).getTime()])},AKSB.measure=AKSB.measure||function(e,_,t){AKSB.q.push(["measure",e,_,t||(new Date).getTime()])},AKSB.done=AKSB.done||function(e){AKSB.q.push(["done",e])},AKSB.mark("firstbyte",(new Date).getTime()),AKSB.prof={custid:"322179",ustr:"",originlat:"0",clientrtt:"1",ghostip:"23.212.3.15",ipv6:false,pct:"10",clientip:"45.78.37.67",requestid:"2b29e8c3",region:"32996",protocol:"",blver:14,akM:"dsca",akN:"ae",akTT:"O",akTX:"1",akTI:"2b29e8c3",ai:"206465",ra:"false",pmgn:"",pmgi:"",pmp:"",qc:""},function(e){var _=d.createElement("script");_.async="async",_.src=e;var t=d.getElementsByTagName("script"),t=t[t.length-1];t.parentNode.insertBefore(_,t)}(("https:"===d.location.protocol?"https:":"http:")+"//ds-aksb-a.akamaihd.net/aksb.min.js")}</script>
                    <script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-E2C5A322-F6BA-4D25-BC2F-D946B10BC581"></a> <span id="PAGE" style="display:none;">17/31</span> <!-- End Header -->
<a id="JSTGD394"></a><a id="JSTGD393"></a>
<h1 id="JSTGD-GUID-E2C5A322-F6BA-4D25-BC2F-D946B10BC581" class="sect1"><span class="enumeration_chapter">10</span> AWT</h1>
<div>
<div><span>This chapter provides information and guidance about some specific procedures for troubleshooting common issues that might occur in the Java SE Abstract Window Toolkit (AWT).</span></div>
<p>This chapter contains the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="awt.htm#GUID-623C61BB-8E09-4918-A120-911CA5C92FC6" title="Helpful tips to debug issues related to AWT.">Debug Tips for AWT</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-7BE06BA5-0206-42FE-8AD2-468A1AFA8512" title="Possible problems with layout managers and provides workarounds when available.">Layout Manager Issues</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-861F1E94-1944-42C2-AD73-9E1E6C854321" title="Issues related to handling key events that do not have a solution in the current release.">Key Events</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-094860B0-DC42-428A-BE28-33ECB81C8C72" title="Information about issues related to using modality.">Modality Issues</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-130F872C-7F03-4AEF-BB02-72F1A3BECFAE" title="Identify and troubleshoot crashes related to AWT.">AWT Crashes</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-0448A5F0-F0C4-4943-BFB2-0D8C137B8212" title="Troubleshooting issues related to focus events.">Focus Events</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-DF31EA29-6196-405B-9B32-005D67395048" title="Possible problems with data transfer features, which allows you to add drag-and-drop (DnD) and cut, copy, and paste (CCP) operations to the application.">Data Transfer</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-986C2FB7-94D4-4201-9659-55F2461B6D34" title="Troubleshoot other issues such as splash screen issues, pop-up menu issues, and background color inheritance with AWT and provide information for troubleshooting them.">Other Issues</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-CE1BB907-78F8-48D4-9B02-A39BA2F7D3AD" title="Issues with the heavyweight or lightweight (HW/LW) component mixing feature.">Heavyweight or Lightweight Components Mix</a></p>
</li>
</ul>
</div>
<a id="JSTGD395"></a>
<div class="props_rev_3"><a id="GUID-623C61BB-8E09-4918-A120-911CA5C92FC6"></a>
<h2 id="JSTGD-GUID-623C61BB-8E09-4918-A120-911CA5C92FC6" class="sect2">Debug Tips for AWT</h2>
<div>
<p>Helpful tips to debug issues related to AWT.</p>
<div class="section">
<p>To dump the AWT component hierarchy, press Control+Shift+F1.</p>
<p>If the application hangs, get a stack trace by pressing Control+Break on Windows (which sends the SIGBREAK signal) or Control+\ on the Oracle Solaris and Linux operating systems (which sends the SIGQUIT signal).</p>
<p>To trace X11 errors on the Oracle Solaris and Linux operating systems, set the <code class="codeph">sun.awt.noisyerrorhandler</code> system property to <code class="codeph">true</code>. In Java SE 6 and earlier releases, the <code class="codeph">NOISY_AWT</code> environment variable was used for this purpose.</p>
<p>Before Java SE 8, exceptions thrown in the AWT Event Dispatch Thread (EDT) could be caught by setting the system property <code class="codeph">sun.awt.exception.handler</code> to the name of the class that implements the <code class="codeph">public void handle(Throwable)</code> method. This mechanism was updated in Java SE 8 to use the standard <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Thread.UncaughtExceptionHandler.html" target="_blank"><code class="codeph">Thread.UncaughtExceptionHandler</code></a> interface.</p>
<p>Loggers can produce helpful output when debugging AWT problems. See <a href="https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html" target="_blank"><code class="codeph">java.util.logging</code></a> package description.</p>
<p>The following loggers are available:</p>
<ul class="simple" style="list-style-type: none;padding-left:0;">
<li><code class="codeph">java.awt</code></li>
<li><code class="codeph">java.awt.focus</code></li>
<li><code class="codeph">java.awt.event</code></li>
<li><code class="codeph">java.awt.mixing</code></li>
<li><code class="codeph">sun.awt</code></li>
<li><code class="codeph">sun.awt.windows</code></li>
<li><code class="codeph">sun.awt.X11</code></li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD396"></a>
<div class="props_rev_3"><a id="GUID-7BE06BA5-0206-42FE-8AD2-468A1AFA8512"></a>
<h2 id="JSTGD-GUID-7BE06BA5-0206-42FE-8AD2-468A1AFA8512" class="sect2">Layout Manager Issues</h2>
<div>
<p>Possible problems with layout managers and provides workarounds when available.</p>
<div class="section">The following problems occur with layout managers and workarounds:</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span><span class="bold">Call to <span class="apiname">invalidate()</span> and</span> <span class="bold">validate()</span> <span class="bold">increases component size</span></span>
<div>
<p><span class="bold">Cause:</span> Due to some specifics of the <code class="codeph">GridBagLayout</code> layout manager, if <code class="codeph">ipadx</code> or <code class="codeph">ipady</code> is set, and <span class="apiname">invalidate()</span> and <span class="apiname">validate()</span> are called, then the size of the component increases to the value of <code class="codeph">ipadx</code> or <code class="codeph">ipady</code>. This happens because the <code class="codeph">GridBagLayout</code> layout manager iteratively calculates the amount of space needed to store the component within the container.</p>
<p><span class="bold">Workaround:</span> The JDK does not provide a reliable and simple way to detect if the layout manager should rearrange components or not in such a case, but there is a simple workaround. Use components with the overridden method <span class="apiname">getPreferredSize()</span>, which returns the current size needed, as shown in the following example.</p>
<pre dir="ltr">
public Dimension getPreferredSize(){
   return new Dimension(size+xpad*2+1, size+ypad*2+1); 
}
</pre></div>
</li>
<li class="stepexpand"><span><span class="bold">Infinite recursion with <span class="apiname">validate()</span> from any</span> <span class="bold">Container.doLayout()</span> <span class="bold">method</span></span>
<div>
<p><span class="bold">Cause:</span> Invoking <span class="apiname">validate()</span> from any <span class="apiname">Container.doLayout()</span> method can lead to infinite recursion because AWT itself invokes <span class="apiname">doLayout()</span> from <span class="apiname">validate()</span>.</p>
</div>
</li>
</ol>
</div>
</div>
<a id="JSTGD398"></a>
<div class="props_rev_3"><a id="GUID-861F1E94-1944-42C2-AD73-9E1E6C854321"></a>
<h2 id="JSTGD-GUID-861F1E94-1944-42C2-AD73-9E1E6C854321" class="sect2">Key Events</h2>
<div>
<p>Issues related to handling key events that do not have a solution in the current release.</p>
<div class="section">
<p class="subhead2">The following keyboard issues are currently unresolved:</p>
<ul style="list-style-type: disc;">
<li>
<p>On some non-English keyboards, certain accented keys are engraved on the key and therefore are primary layer characters. Nevertheless, they cannot be used for mnemonics because there is no corresponding Java keycode.</p>
</li>
<li>
<p>Changing the default locale at runtime does not change the text that is displayed for the menu accelerator keys.</p>
</li>
<li>
<p>On a standard 109-key Japanese keyboard, the yen key and the backslash key both generate a backslash, because they have the same character code for the <code class="codeph">WM_CHAR</code> message. AWT should distinguish them.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">The following keyboard issues concern the Oracle Solaris 10 and Linux x86 systems.</p>
<ul style="list-style-type: disc;">
<li>
<p>Keyboard input in these systems is usually based on the X keyboard extension (XKB) of the X Window System. Users can configure one keyboard layout (for instance, Danish: <code class="codeph">dk</code>) or several layouts to switch between (for example, <code class="codeph">us</code> and <code class="codeph">dk</code>).</p>
</li>
<li>
<p>With some keyboard layouts, for instance <code class="codeph">sk</code>, <code class="codeph">hu</code>, and <code class="codeph">cz</code>, pressing the decimal separator on the numeric keypad not only enters a delimiter but also deletes the previous character. This is due to a native bug. A workaround is to use two layouts, for example, <code class="codeph">us</code> and <code class="codeph">sk</code>. In this case, the numeric keypad works correctly in both layouts.</p>
</li>
<li>
<p>On UNIX systems that support dynamic keyboard changes, a running Java application does not recognize such a change. For instance, changing the keyboard from US to German does not change the keyboard mapping. Although the X server detects the change and sends out a <code class="codeph">MappingNotify</code> event to interested clients AWT does not refresh its notion of the keycode-keysym mapping.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD399"></a>
<div class="props_rev_3"><a id="GUID-094860B0-DC42-428A-BE28-33ECB81C8C72"></a>
<h2 id="JSTGD-GUID-094860B0-DC42-428A-BE28-33ECB81C8C72" class="sect2">Modality Issues</h2>
<div>
<p>Information about issues related to using modality.</p>
<div class="section">
<p>With the Java SE 6 release, many problems were fixed and many improvements were implemented in the area of AWT modality. If you see a modality problem with Java SE 1.5 or an earlier release, first upgrade to the latest Java SE release to see if the problem was already fixed.</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Some of the problems that were fixed in Java SE 6 are the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>A modal dialog box goes behind a blocked frame.</p>
</li>
<li>
<p>Two modal dialog boxes with the same parent window opened at the same time.</p>
</li>
</ul>
<p>The section addresses the following issues.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">UNIX window managers:</span></p>
<p>Many of the modality improvements are unavailable in some Oracle Solaris or Linux environments, for example, when using Common Desktop Environment (CDE) window managers. With Java SE 6 and later releases, to see if a modality type or modal exclusion type is supported in a particular configuration, use the following methods:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">Toolkit.isModalityTypeSupported()</code></p>
</li>
<li>
<p><code class="codeph">Toolkit.isModalExclusionTypeSupported()</code></p>
</li>
</ul>
<p>When a modal dialog box appears on the screen, the window manager might hide some of the Java top-level windows in the same application from the taskbar. This can confuse end users, but it does not affect their work much, because all the hidden windows are modal blocked and cannot be operated.</p>
</li>
<li>
<p><span class="bold">Applets:</span></p>
<p>When your application runs as an applet in a browser and shows a modal dialog box, the browser window might become blocked. The implementation of this blocking varies in different browsers and operating systems. For example, on Windows, both Internet Explorer and Mozilla Firefox work correctly, and on the Oracle Solaris and Linux operating systems, Mozilla Firefox windows are not blocked.</p>
</li>
<li>
<p><span class="bold">Other modality problems:</span></p>
<p>For more information about modality-related features and how to use them, see the <a href="https://docs.oracle.com/javase/8/docs/api/java/awt/doc-files/Modality.html" target="_blank">AWT Modality specification</a>.</p>
<p>One of the sections in that specification describes some AWT features that might be related to or affected by modal dialog boxes: always-on-top property, focus handling, window states, and so on. Application behavior in such cases is usually unspecified or depends on the platform; therefore, do not rely on any particular behavior.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD402"></a>
<div class="props_rev_3"><a id="GUID-130F872C-7F03-4AEF-BB02-72F1A3BECFAE"></a>
<h2 id="JSTGD-GUID-130F872C-7F03-4AEF-BB02-72F1A3BECFAE" class="sect2">AWT Crashes</h2>
<div>
<p>Identify and troubleshoot crashes related to AWT.</p>
<ul>
<li class="stepexpand"><span><span class="bold">Distinguish an AWT crash:</span></span>
<div>
<p>When a crash occurs, an error log is created with information and the state obtained at the time of the crash. See <a href="fatal-error-log.htm#GUID-2AE5EE08-A68F-4514-9618-A581C0EDFB1B" title="Describes the fatal error log, its location, and contents.">Fatal Error Log</a>.</p>
<p>A line near the top of the file indicates the library where the error occurred. The following example shows part of the error log file in the case when the crash was related to the AWT library.</p>
<pre dir="ltr">
...
# Java VM: Java HotSpot(TM) Client VM (1.6.0-beta2-b76 mixed mode, sharing)
# Problematic frame:
# C  [awt.dll+0x123456]
...
</pre>
<p>However, the crash can happen somewhere deep in the system libraries, although still caused by AWT. In such cases, the indication <code class="codeph">awt.dll</code> does not appear as a problematic frame, and you need to look further in the file, in the section <code class="codeph">Stack: Native frames: Java frames</code> as shown in the following example.</p>
<pre dir="ltr">
Stack: [0x0aeb0000,0x0aef0000),  sp=0x0aeefa44,  free space=254k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  0x00abc751
C  [USER32.dll+0x3a5f]
C  [USER32.dll+0x3b2e]
C  [USER32.dll+0x5874]
C  [USER32.dll+0x58a4]
C  [ntdll.dll+0x108f]
C  [USER32.dll+0x5e7e]
C  [awt.dll+0xec889]
C  [awt.dll+0xf877d]
j  sun.awt.windows.WToolkit.eventLoop()V+0
j  sun.awt.windows.WToolkit.run()V+69
j  java.lang.Thread.run()V+11
v  ~StubRoutines::call_stub
V  [jvm.dll+0x83c86]
V  [jvm.dll+0xd870f]
V  [jvm.dll+0x83b48]
V  [jvm.dll+0x838a5]
V  [jvm.dll+0x9ebc8]
V  [jvm.dll+0x108ba1]
V  [jvm.dll+0x108b6f]
C  [MSVCRT.dll+0x27fb8]
C  [kernel32.dll+0x202ed]

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  sun.awt.windows.WToolkit.eventLoop()V+0
j  sun.awt.windows.WToolkit.run()V+69
j  java.lang.Thread.run()V+11
v  ~StubRoutines::call_stub
</pre>
<p>If the text <code class="codeph">awt.dll</code> appears somewhere in the native frames, then the crash might be related to AWT.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Troubleshoot an AWT crash</span>:</span>
<div>
<p>Most of the AWT crashes occur on the Windows platform and are caused by thread traces. Many of these problems were fixed in Java SE 6, so if your crash occurred in an earlier release, then first try to determine if the problem is already fixed in the latest release.</p>
<p>One of the possible causes of crashes is that many AWT operations are asynchronous. For example, if you show a frame with a call to <span class="apiname">frame.setVisible(true)</span>, then you cannot be sure that it will be the active window after the return from this call.</p>
<p>Another example concerns native file dialogs. It takes some time for the operating system to initialize and show these dialogs, and if you dispose of them immediately after the call to <span class="apiname">setVisible(true)</span>, then a crash might occur. Therefore, if your application contains some AWT calls running simultaneously or immediately one after another, it is a good idea to insert some delays between them or add some synchronization.</p>
</div>
</li>
</ul>
</div>
</div>
<a id="JSTGD405"></a>
<div class="props_rev_3"><a id="GUID-0448A5F0-F0C4-4943-BFB2-0D8C137B8212"></a>
<h2 id="JSTGD-GUID-0448A5F0-F0C4-4943-BFB2-0D8C137B8212" class="sect2">Focus Events</h2>
<div>
<p>Troubleshooting issues related to focus events.</p>
<div class="section">
<p>The following sections discuss the troubleshooting issues related to focus events:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="awt.htm#GUID-22136A2E-1A0B-44B1-BBD1-89A484207C32" title="Troubleshoot problems with focus.">How to Trace Focus Events</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-6B26ECBC-DB97-47BC-89CE-40CABD221F9F" title="Sometimes, a problem can be caused by the native platform. To check this, investigate the native events that are related to focus.">Native Focus System</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-7F77A180-ED97-481E-8E9B-7FC2146CB447" title="An applet is embedded in a browser as a child (though not a direct child) of an EmbeddedFrame.">Focus System in Java Plug-in</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-3C2D2F6C-6A4E-4CFD-AB3E-D14079C8DD85" title="List of focus models supported by X window managers.">Focus Models Supported by X Window Managers</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-67FAB2F0-36DA-4A66-BBF1-FCC117ADA258" title="Issues related to focus in AWT that can occur and suggested solutions.">Miscellaneous Problems with Focus</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="JSTGD406"></a>
<div class="props_rev_3"><a id="GUID-22136A2E-1A0B-44B1-BBD1-89A484207C32"></a>
<h3 id="JSTGD-GUID-22136A2E-1A0B-44B1-BBD1-89A484207C32" class="sect3">How to Trace Focus Events</h3>
<div>
<p>Troubleshoot problems with focus.</p>
<div class="section">
<p>You can trace focus events by adding a focus listener to the toolkit, as shown in the following example.</p>
<pre dir="ltr">
Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener(
   public void eventDispatched(AWTEvent e) {
      System.err.println(e);
   }
), FocusEvent.FOCUS_EVENT_MASK | WindowEvent.WINDOW_FOCUS_EVENT_MASK |
   WindowEvent.WINDOW_EVENT_MASK);
</pre>
<p>The <code class="codeph">System.err</code> stream is used here because it does not buffer the output.</p>
<div class="infobox-note" id="GUID-22136A2E-1A0B-44B1-BBD1-89A484207C32__GUID-48553924-23E4-4A61-B7EE-4D4235257730">
<p class="notep1">Remember:</p>
The correct order of focus events is the following:
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">FOCUS_LOST</code> on component losing focus</p>
</li>
<li>
<p><code class="codeph">WINDOW_LOST_FOCUS</code> on top-level losing focus</p>
</li>
<li>
<p><code class="codeph">WINDOW_DEACTIVATED</code> on top-level losing activation</p>
</li>
<li>
<p><code class="codeph">WINDOW_ACTIVATED</code> on top-level becoming active widow</p>
</li>
<li>
<p><code class="codeph">WINDOW_GAINED_FOCUS</code> on top-level becoming focused window</p>
</li>
<li>
<p><code class="codeph">FOCUS_GAINED</code> on component gaining focus</p>
</li>
</ul>
<p>When focus is transferred between components inside the focused window, only <code class="codeph">FOCUS_LOST</code> and <code class="codeph">FOCUS_GAINED</code> events should be generated. When focus is transferred between owned windows of the same owner or between an owned window and its owner, then the following events should be generated:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">FOCUS_LOST</code></p>
</li>
<li>
<p><code class="codeph">WINDOW_LOST_FOCUS</code></p>
</li>
<li>
<p><code class="codeph">WINDOW_GAINED_FOCUS</code></p>
</li>
<li>
<p><code class="codeph">FOCUS_GAINED</code></p>
</li>
</ul>
</div>
<div class="p">
<div class="infobox-note" id="GUID-22136A2E-1A0B-44B1-BBD1-89A484207C32__GUID-450179D8-6EBB-4B44-B95A-7DC6D0513049">
<p class="notep1">Note:</p>
The events losing focus or activation should come first.</div>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD408"></a>
<div class="props_rev_3"><a id="GUID-6B26ECBC-DB97-47BC-89CE-40CABD221F9F"></a>
<h3 id="JSTGD-GUID-6B26ECBC-DB97-47BC-89CE-40CABD221F9F" class="sect3">Native Focus System</h3>
<div>
<p>Sometimes, a problem can be caused by the native platform. To check this, investigate the native events that are related to focus.</p>
<p>Ensure that the window you want to be focused gets activated and that the component you want to focus receives the native focus event.</p>
<p>On the Windows platform, the native focus events are the following:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">WM_ACTIVATE</code> for a top-level. <code class="codeph">WPARAM</code> is <code class="codeph">WA_ACTIVE</code> when activating and <code class="codeph">WA_INACTIVE</code> when deactivating.</p>
</li>
<li>
<p><code class="codeph">WM_SETFOCUS</code> and <code class="codeph">WM_KILLFOCUS</code> for a component.</p>
</li>
</ul>
<p>On the Windows platform, a concept of <strong class="term">synthetic focus</strong>was implemented. It means that a focus owner component only emulates its focusable state, whereas real native focus is set to a <strong class="term">focus proxy</strong> component. This component receives key and input method native messages and dispatches them to a focus owner. Before JDK7, a focus proxy component was a dedicated hidden child component inside a frame or dialog box. In the latest JDK releases a frame or dialog box serves as a focus proxy. Now, it proxies focus not only for components in an owned window but for all child components as well. A simple window never receives native focus and relies on the focus proxy of its owner. This mechanism is transparent for a user but should be taken into account when debugging.</p>
<p>On Oracle Solaris and Linux operating systems, XToolkit uses a focus model that allows AWT to manage focus itself. With this model the window manager does not directly set input focus on a top-level window, but instead it sends only the <code class="codeph">WM_TAKE_FOCUS</code> client message to indicate that focus should be set. AWT then explicitly sets focus on the top-level window if it is allowed.</p>
<div class="p">
<div class="infobox-note" id="GUID-6B26ECBC-DB97-47BC-89CE-40CABD221F9F__GUID-633F6422-A816-4327-A0E3-9BC694BAF424">
<p class="notep1">Note:</p>
The X server and some window managers may send focus events to a window. However, these events are discarded by AWT.</div>
</div>
<p>AWT does not generate the hierarchical chains of focus events when a component inside a top-level gains focus. Moreover, the native window mapped to the component does not get a native focus event. On the Oracle Solaris and Linux platforms, as well as on the Windows platform, AWT uses the focus proxy mechanism. Therefore, focus on the component is set by synthesizing a focus event, whereas the invisible focus proxy has native focus.</p>
<p>A native window that is mapped to a <code class="codeph">Window</code> object (not a <code class="codeph">Frame</code> or <code class="codeph">Dialog</code> object) has the <code class="codeph">override-redirect</code> flag set. Thus, the window manager does not notify the window about the focus change. Focus is requested on the window only in response to a mouse click. This window will not receive native focus events at all. Therefore, you can trace only <code class="codeph">FocusIn</code> or <code class="codeph">FocusOut</code> events on a frame or dialog box. Because the major processing of focus occurs at the Java level, debugging focus with XToolkit is simpler than with WToolkit.</p>
</div>
</div>
<a id="JSTGD409"></a>
<div class="props_rev_3"><a id="GUID-7F77A180-ED97-481E-8E9B-7FC2146CB447"></a>
<h3 id="JSTGD-GUID-7F77A180-ED97-481E-8E9B-7FC2146CB447" class="sect3">Focus System in Java Plug-in</h3>
<div>
<p>An applet is embedded in a browser as a child (though not a direct child) of an <code class="codeph">EmbeddedFrame</code>.</p>
<p>This is a special <code class="codeph">Frame</code> that has the ability to communicate with the plugin. From the applet's perspective, the <code class="codeph">EmbeddedFrame</code> is a full top-level <code class="codeph">Frame</code>.</p>
<p>Managing focus for an <code class="codeph">EmbeddedFrame</code> requires special actions. When an applet first starts, the <code class="codeph">EmbeddedFrame</code> does not get activated by default by the native system. The activation is performed by the plugin that triggers a special API provided by the <code class="codeph">EmbeddedFrame</code>. When focus leaves the applet, the <code class="codeph">EmbeddedFrame</code> is also deactivated in a synthesized manner.</p>
</div>
</div>
<a id="JSTGD410"></a>
<div class="props_rev_3"><a id="GUID-3C2D2F6C-6A4E-4CFD-AB3E-D14079C8DD85"></a>
<h3 id="JSTGD-GUID-3C2D2F6C-6A4E-4CFD-AB3E-D14079C8DD85" class="sect3">Focus Models Supported by X Window Managers</h3>
<div>
<p>List of focus models supported by X window managers.</p>
<p>The following focus models are supported by X window managers:</p>
<ul style="list-style-type: disc;">
<li>
<p><strong class="term">Click-to-focus</strong> is a commonly used focus model. (For example, Microsoft Windows uses this model.)</p>
</li>
<li>
<p><strong class="term">Focus-follows-mouse</strong> is a focus model in which focus goes to the window that the mouse hovers over.</p>
</li>
</ul>
<p>The <strong class="term">focus-follows-mouse</strong> model is not detected in XAWT in Java SE 7, and this causes problems for simple windows (objects of <code class="codeph">java.awt.Window</code> class). Such windows have the <code class="codeph">override-redirect</code> property, which means that they can be focused only when the mouse button is pressed, and not by hovering over the window. As a workaround, set <code class="codeph">MouseListener</code> on the window, and request focus on it when mouse crosses the window borders.</p>
</div>
</div>
<a id="JSTGD411"></a>
<div class="props_rev_3"><a id="GUID-67FAB2F0-36DA-4A66-BBF1-FCC117ADA258"></a>
<h3 id="JSTGD-GUID-67FAB2F0-36DA-4A66-BBF1-FCC117ADA258" class="sect3">Miscellaneous Problems with Focus</h3>
<div>
<p>Issues related to focus in AWT that can occur and suggested solutions.</p>
<ol>
<li class="stepexpand"><span><span class="bold">Linux + KDE, XToolkit cannot be switched between two frames when a frame's title is clicked.</span></span>
<div>
<p>Clicking a component inside a frame causes the focus to change.</p>
<p><span class="bold">Solution:</span> Check the version of your window manager and upgrade it to 3.0 or greater.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">You want to manage focus using <code class="codeph">KeyListener</code> to transfer the focus in response to Tab/Shift+Tab, but the key event doesn&rsquo;t appear.</span></span>
<div>
<p><span class="bold">Solution:</span> To catch traversal key events, you must enable them by calling <span class="apiname">Component.setFocusTraversalKeysEnabled(true)</span>.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">A window is set to modal excluded with <span class="apiname">Window.setModalExclusionType(ModalExclusionType)</span>.</span></span>
<div>
<p>The frame, its owner, is modal blocked. In this case, the window will also remain modal blocked.</p>
<p><span class="bold">Solution:</span> A window cannot become the focused window when its owner is not allowed to get focus. The solution is to exclude the owner from modality.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">On Windows, a component requests focus and is concurrently removed from its container.</span></span>
<div>
<p>Sometimes <code class="codeph">java.lang.NullPointerException: null pData</code> is thrown.</p>
<p><span class="bold">Solution:</span> The easiest way to avoid throwing the exception is to do the removal along with requesting focus on EDT. Another, more complicated approach is to synchronize the requesting focus and removal if you need to perform these actions on different threads.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">When focus is requested on a component and the focus owner is immediately removed, focus goes to the component after the removed component.</span></span>
<div>
<p>For example, Component A is the focus owner. Focus is requested on Component B, and immediately after this Component A is removed from its container. Eventually, focus goes to Component C, which is located after Component A in the container, but not to Component B.</p>
<p><span class="bold">Solution:</span> In this case, ensure that the requesting focus is executed after Component A is removed, not before.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">On Windows, when a window is set to <code class="codeph">alwaysOnTop</code> in an inactive frame, the window cannot receive key events.</span></span>
<div>
<p>For example, a frame is displayed with a window that it owns. The frame is inactive, so the window is not focused. Then, the window is set to <code class="codeph">alwaysOnTop</code>. The window gains focus, but its owner remains inactive. Therefore, the window cannot receive key events.</p>
<p><span class="bold">Solution:</span> Bring the frame to the front (the <span class="apiname">Frame.toFront()</span> method) before setting the window to <code class="codeph">alwaysOnTop</code>.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">When a splash screen is shown and a frame is shown after the splash screen window closes, the frame does not get activated.</span></span>
<div>
<p><span class="bold">Solution:</span> Bring the frame to the front (the <span class="apiname">Frame.toFront()</span> method) after showing it (the <span class="apiname">Frame.setVisible(true)</span> method).</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">The <span class="apiname">WindowFocusListener.windowGainedFocus(WindowEvent)</span> method does not return the frame's most-recent focus owner.</span></span>
<div>
<p>For example, a frame is the focused window, and one of its components is the focus owner. Another window is clicked, and then the frame is clicked again. <code class="codeph">WINDOW_GAINED_FOCUS</code> comes to the frame and the <span class="apiname">WindowFocusListener.windowGainedFocus(WindowEvent)</span> method is called. However, inside of this callback, you cannot determine the frame's most-recent focus owner, because <span class="apiname">Frame.getMostRecentFocusOwner()</span> returns <code class="codeph">null</code>.</p>
<p><span class="bold">Solution:</span> You can get the frame's most recent focus owner inside the <span class="apiname">WindowListener.windowActivated(WindowEvent)</span> callback. However, by this time, the frame will have become the focused window only if it does not have owned windows.</p>
<div class="infobox-note" id="GUID-67FAB2F0-36DA-4A66-BBF1-FCC117ADA258__GUID-7B38F638-8CA0-4F43-8C83-78FB91BB6588">
<p class="notep1">Note:</p>
<p>This approach does not work for the window, only for the frame or dialog box.</p>
</div>
</div>
</li>
<li class="stepexpand"><span><span class="bold">An Applet steals focus when it starts.</span></span>
<div>
<p><span class="bold">Solution:</span> This behavior is the default with JDK. However, you might need to prevent the applet from getting focus on startup, for example, if your applet is invisible and does not require focus. In this case, you can set the special parameter <code class="codeph">initial_focus</code> to <code class="codeph">false</code> in the HTML tag, as shown in the following example.</p>
<pre dir="ltr">
&lt;applet code="MyApplet" width=50 height=50&gt;
&lt;param name=initial_focus value="false"&gt;
&lt;/applet&gt;
</pre></div>
</li>
<li class="stepexpand"><span><span class="bold">A window is disabled with <span class="apiname">Component.setEnabled(false)</span>, but is not get completely unfocusable.</span></span>
<div>
<p><span class="bold">Solution:</span> Do not assume that the condition set by calling <span class="apiname">Component.setEnabled(false)</span> or <span class="apiname">Component.setFocusable(false)</span> will be maintained unfocusable along with all its content. Instead, use the <span class="apiname">Window.setFocusableWindowState(boolean)</span> method.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
<a id="JSTGD413"></a>
<div class="props_rev_3"><a id="GUID-DF31EA29-6196-405B-9B32-005D67395048"></a>
<h2 id="JSTGD-GUID-DF31EA29-6196-405B-9B32-005D67395048" class="sect2">Data Transfer</h2>
<div>
<p>Possible problems with data transfer features, which allows you to add <span class="italic">drag-and-drop</span> (DnD) and <span class="italic">cut, copy, and paste</span> (CCP) operations to the application.</p>
<p>The following sections discuss possible problems with data transfer features:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="awt.htm#GUID-B8D077F0-7BE8-40E4-9FAC-EEC071DDC081" title="Methods that can be used to troubleshoot issues with drag-and-drop (DnD) applications.">Debug Drag-and-Drop Applications</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-227FEA78-44C5-4560-96A4-3396DE443D97" title="Issues that frequently happen with data transfer operations in AWT and suggested troubleshooting solutions.">Frequent Issues with Data Transfer</a></p>
</li>
</ul>
</div>
<a id="JSTGD414"></a>
<div class="props_rev_3"><a id="GUID-B8D077F0-7BE8-40E4-9FAC-EEC071DDC081"></a>
<h3 id="JSTGD-GUID-B8D077F0-7BE8-40E4-9FAC-EEC071DDC081" class="sect3">Debug Drag-and-Drop Applications</h3>
<div>
<p>Methods that can be used to troubleshoot issues with drag-and-drop (DnD) applications.</p>
<div class="section">
<p>It is difficult to use a debugger to troubleshoot DnD features, because during the drag-and-drop operation all input is grabbed. Therefore, if you place a breakpoint during DnD, you might need to restart your X server. Try to use remote debugging instead.</p>
<p>Two simple methods can be used to troubleshoot most issues with DnD:</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span>Printing all <code class="codeph">DataFlavor</code> instances</span></li>
<li class="stepexpand"><span>Printing received data</span>
<div>An alternative to remote debugging is the <span class="apiname">System.err.println()</span> function, which prints output without delay.</div>
</li>
</ul>
</div>
</div>
<a id="JSTGD415"></a>
<div class="props_rev_3"><a id="GUID-227FEA78-44C5-4560-96A4-3396DE443D97"></a>
<h3 id="JSTGD-GUID-227FEA78-44C5-4560-96A4-3396DE443D97" class="sect3">Frequent Issues with Data Transfer</h3>
<div>
<p>Issues that frequently happen with data transfer operations in AWT and suggested troubleshooting solutions.</p>
<ol>
<li class="stepexpand"><span><span class="bold">Pasting a large amount of data from the clipboard takes too much time.</span></span>
<div>
<p>Using the <span class="apiname">Clipboard.getContents()</span> function for a paste operation sometimes causes the application to hang for a while, especially if a rich application provides the data to paste.</p>
<p>The <span class="apiname">Clipboard.getContents()</span> function fetches clipboard data in all available types (for example, some text and image types), and this can be expensive and unnecessary.</p>
<p><span class="bold">Solution:</span> Use the <span class="apiname">Clipboard.getData()</span> method to get only specific data from the clipboard. If data in only one or a few types are needed, then use one of the following <code class="codeph">Clipboard</code> methods instead of <span class="apiname">getContents()</span>:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="apiname">DataFlavor[] getAvailableDataFlavors()</span></p>
</li>
<li>
<p><span class="apiname">boolean isDataFlavorAvailable(DataFlavor flavor)</span></p>
</li>
<li>
<p><span class="apiname">Object getData(DataFlavor flavor)</span></p>
</li>
</ul>
</div>
</li>
<li class="stepexpand"><span><span class="bold">When a Java application uses</span> <span class="bold"><span class="apiname">Transferable.getTransferData()</span></span> <span class="bold">for DnD operations, the drag seems to take a long time.</span></span>
<div>
<p>In order to initialize transferred data only if it is needed, the initialization code was put in <span class="apiname">Transferable.getTransferData()</span>.</p>
<p><code class="codeph">Transferable</code> data is expensive to generate, and during a DnD operation <span class="apiname">Transferable.getTransferData()</span> is invoked more than once, causing a slowdown.</p>
<p><span class="bold">Solution:</span> Cache the <code class="codeph">Transferable</code> data so that it is generated only once.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Files cannot be transferred between a Java application and the GNOME/KDE desktop and file browser.</span></span>
<div>
<p>On Windows and some window managers, transferred file lists can be represented as the <code class="codeph">DataFlavor.javaFileListFlavor</code> data tyoe. But, not all window managers represent lists of files in this format. For example, the GNOME window manager represents a file list as a list of URIs.</p>
<p><span class="bold">Workaround:</span> To get files, request data of type <code class="codeph">String</code>, and then translate the string to a list of files according to thetext/uri-list format described in RFC 2483. To enable dropping files from a Java application to GNOME/KDE desktop and file browser, export data in the text/uri-list format. For an example, see the <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4899516" target="_blank">Work Around section from the RFE</a>.</p>
<p><span class="bold">Solution:</span> Move a window with an image rendered on it as the mouse cursor moves during a DnD operation. See the code example in the <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4899516" target="_blank">Work Around section from the RFE</a>.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">An image is passed to one of the</span> <span class="bold"><span class="apiname">startDrag()</span></span> <span class="bold">methods of</span> <span class="bold"><code class="codeph">DragGestureEvent</code></span> or <span class="bold"><code class="codeph">DragSource</code></span>, <span class="bold">but the image is not displayed during the subsequent DnD operation.</span></span></li>
<li class="stepexpand"><span><span class="bold">There is no way to transfer an array using DnD.</span></span>
<div>
<p>The <code class="codeph">DataFlavor</code> class has no constructor that handles arrays. The mime type for an array contains characters that escapes. The code in the following example throws an <code class="codeph">IllegalArgumentException</code>.</p>
<pre dir="ltr">
new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType + 
"; class=" + 
(new String[0]).getClass().getName())
</pre>
<p><span class="bold">Solution:</span> &ldquo;Quote&rdquo; the value of the representation class parameter, as shown in the following example, where the quotation marks escape:</p>
<pre dir="ltr">
new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType + 
"; class=" + 
"\"" + 
(new String[0]).getClass().getName() + 
"\"")
</pre>
<p>See <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4276926" target="_blank">bug report</a>.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">There are problems using AWT DnD support with Swing components.</span></span>
<div>
<p>Various problems can happen, for example, odd events are fired during a DnD operation, multiple items cannot be dragged and dropped, an <code class="codeph">InvalidDnDOperationException</code> is thrown.</p>
<p><span class="bold">Solution:</span> Use Swing's DnD support with Swing components. Although the Swing DnD implementation is based on the AWT DnD implementation, you cannot mix Swing and AWT DnD. See <a href="http://docs.oracle.com/javase/tutorial/uiswing/dnd/" target="_blank">DnD section of the Swing Tutorial</a> documentation.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">There is no way to change the state of the source to depend on the target.</span></span>
<div>
<p>In order to change the state of the source to depend on the target, you must have references to the source and target components in the same area of code, but this is not currently implemented in the DnD API.</p>
<p><span class="bold">Workaround:</span> One workaround is to add flags to the transferable object that allow you to determine the context of the event.</p>
<p>For the transfer of data within one Java VM, the following workaround is proposed:</p>
<ul style="list-style-type: disc;">
<li>
<p>Implement your target component as <code class="codeph">DragSourceListener</code>.</p>
</li>
<li>
<p>In <span class="apiname">DragGestureRecognizer.dragGestureRecognized()</span>, add the target at the drag source listener, as shown in the following example.</p>
<pre dir="ltr">
public void dragGestureRecognized(DragGestureEvent dge) {
             dge.startDrag(null, new StringSelection("SomeTransferedText"));
             dge.getDragSource().addDragSourceListener(target);             
        }
</pre></li>
<li>
<p>Now you can get the target and the source in the <span class="apiname">dragEnter()</span>, <span class="apiname">dragOver()</span>, <span class="apiname">dropActionChanged()</span>, and <span class="apiname">dragDropEnd()</span> methods of <span class="apiname">DragSourceListener()</span>.</p>
</li>
</ul>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Transferring objects in an application takes a long time.</span></span>
<div>
<p>The transferring of a big bundle of data or the creation of transferred objects takes too long. The user must wait a long time for the data transfer to complete.</p>
<p>This expensive operation makes transferring too long because you must wait until <span class="apiname">Transferable.getTransferData()</span> finishes.</p>
<p><span class="bold">Solution:</span> This solution is valid only for transferring data within one Java VM. Create or get expensive resources before the drag operation. For example, get the file content when you create a transferable data, so that <span class="apiname">Transferable.getTransferData()</span> will not be too long.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
<a id="JSTGD419"></a>
<div class="props_rev_3"><a id="GUID-986C2FB7-94D4-4201-9659-55F2461B6D34"></a>
<h2 id="JSTGD-GUID-986C2FB7-94D4-4201-9659-55F2461B6D34" class="sect2">Other Issues</h2>
<div>
<p>Troubleshoot other issues such as splash screen issues, pop-up menu issues, and background color inheritance with AWT and provide information for troubleshooting them.</p>
<p>The following subsections discuss troubleshooting tips for other issues:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="awt.htm#GUID-DF9940D6-5E09-40E6-8ADC-25646C1AD7A2" title="Issues that can happen with splash screen AWT and solutions.">Splash Screen Issues</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-7FA44C9A-CF3D-43A1-9E96-D6E421D7508C" title="Issues that can occur with the tray icon.">Tray Icon Issues</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-978E5804-C296-43B2-AC0C-9AB3ED570E2D" title="Issues that can occur in the popup menu.">Pop-up Menu Issues</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-1A48C3D7-E94A-4FB0-8926-CD1327EAECDB" title="To ensure the consistency of your application on every platform, use explicit color assignment (both foreground and background) for every component or container.">Background or Foreground Color Inheritance</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-C6F6952D-3B58-4070-9129-A0DEBE518EC3" title="The AWT container has a size limitation. On most platforms, this limit is 32,767 pixels.">AWT Panel Size Restriction</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-797CC032-8C6A-4518-A229-D48B3B02DC09" title="Set the -Dsun.awt.disablegrab=true system property during the debugging of certain graphical user interface (GUI) components.">Hangs During Debugging of Pop-up Menus and Similar Components on X11</a></p>
</li>
<li>
<p><a href="awt.htm#GUID-871DD428-64B3-4BB8-B8FD-6F8287B07FBE" title="Due to restrictions enforced by third-party software (in particular, by window managers such as the Metacity), the toFront()/toBack() methods may not work as expected and cause the window to not change its stacking order in relation to other top-level windows.">Window.toFront()/toBack() Behavior on X11</a></p>
</li>
</ul>
</div>
<a id="JSTGD420"></a>
<div class="props_rev_3"><a id="GUID-DF9940D6-5E09-40E6-8ADC-25646C1AD7A2"></a>
<h3 id="JSTGD-GUID-DF9940D6-5E09-40E6-8ADC-25646C1AD7A2" class="sect3">Splash Screen Issues</h3>
<div>
<p>Issues that can happen with splash screen AWT and solutions.</p>
<div class="section">
<p>This section describes some issues that can happen with the splash screen in AWT:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span><span class="bold">The user specified a JAR file with an appropriate <code class="codeph">MANIFEST.MF</code> in <code class="codeph">-classpath</code>, but the splash screen does not work.</span></span>
<div><span class="bold">Solution:</span> See the solution for the next issue.</div>
</li>
<li class="stepexpand"><span><span class="bold">It is not clear which of several JAR files in an application should contain the splash screen image.</span></span>
<div><span class="bold">Solution:</span> The splash screen image will be picked from a JAR file only if the file is used with the <code class="codeph">-jar</code> command-line option. This JAR file should contain both the "SplashScreen-Image" manifest option and the image file. JAR files in <code class="codeph">-classpath</code> will never be checked for splash screens in <code class="codeph">MANIFEST.MF</code>. If you do not use <code class="codeph">-jar</code>, you can still use <code class="codeph">-splash</code> to specify the splash screen image in the command line.</div>
</li>
<li class="stepexpand"><span><span class="bold">Translucent PNG splash screens do not work on the Oracle Solaris and Linux operating systems.</span></span>
<div><span class="bold">Solution:</span> This is a native limitation of X11. On the Oracle Solaris and Linux operating systems, the alpha channel of a translucent image will be compared with the 50% threshold. Alpha values above 0.5 will make opaque pixels, and pixels with alpha values below 0.5 will be completely transparent.</div>
</li>
</ol>
</div>
</div>
<a id="JSTGD421"></a>
<div class="props_rev_3"><a id="GUID-7FA44C9A-CF3D-43A1-9E96-D6E421D7508C"></a>
<h3 id="JSTGD-GUID-7FA44C9A-CF3D-43A1-9E96-D6E421D7508C" class="sect3">Tray Icon Issues</h3>
<div>
<p>Issues that can occur with the tray icon.</p>
<div class="section">
<p>With the Java SE 6 release on Windows 98, the method <span class="apiname">TrayIcon.displayMessage()</span> is not supported because the native service to display a balloon is not supported on Windows 98.</p>
<p>If a <code class="codeph">SecurityManager</code> is installed, then the value of <code class="codeph">AWTPermission</code> must be set to <code class="codeph">accessSystemTray</code> in order to create a <code class="codeph">TrayIcon</code> object.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD422"></a>
<div class="props_rev_3"><a id="GUID-978E5804-C296-43B2-AC0C-9AB3ED570E2D"></a>
<h3 id="JSTGD-GUID-978E5804-C296-43B2-AC0C-9AB3ED570E2D" class="sect3">Pop-up Menu Issues</h3>
<div>
<p>Issues that can occur in the popup menu.</p>
<div class="section">
<p>In the <span class="apiname">JPopupMenu.setInvoker()</span> method, the invoker is the component in which the pop-up menu is to be displayed. If this property is set to <code class="codeph">null</code>, then the pop-up menu does not function correctly.</p>
<p>The solution is to set the pop-up's invoker to itself.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD423"></a>
<div class="props_rev_3"><a id="GUID-1A48C3D7-E94A-4FB0-8926-CD1327EAECDB"></a>
<h3 id="JSTGD-GUID-1A48C3D7-E94A-4FB0-8926-CD1327EAECDB" class="sect3">Background or Foreground Color Inheritance</h3>
<div>
<p>To ensure the consistency of your application on every platform, use explicit color assignment (both foreground and background) for every component or container.</p>
<div class="section">
<p>Many AWT components use their own defaults for background and foreground colors instead of using parent colors.</p>
<p>This behavior is platform-dependent; the same component can behave differently on different platforms. In addition, some components use the default value for one of the background or foreground colors, but take the value from the parent for another color.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD424"></a>
<div class="props_rev_3"><a id="GUID-C6F6952D-3B58-4070-9129-A0DEBE518EC3"></a>
<h3 id="JSTGD-GUID-C6F6952D-3B58-4070-9129-A0DEBE518EC3" class="sect3">AWT Panel Size Restriction</h3>
<div>
<p>The AWT container has a size limitation. On most platforms, this limit is 32,767 pixels.</p>
<div class="section">
<p>This means that, for example, if the canvas objects are 25 pixels high, then a Java AWT panel cannot display more than 1310 objects.</p>
<p>Unfortunately, there is no way to change this limit, neither with Java code nor with native code. The limit depends on what data type the operating system uses to store the widget size. For example, the Windows 2000/XP operating system and the Linux X operating system use the <code class="codeph">integer</code> type, and are therefore limited to the maximum size of an integer. Other operating systems might use different types, such as <code class="codeph">long</code>, and in this case, the limit could be higher.</p>
<p>See the documentation for your platform.</p>
<p>The following are examples of workarounds for this limit that might be helpful:</p>
</div>
<!-- class="section" -->
<ul>
<li><span>Display components, page by page.</span></li>
<li><span>Use tabs to display a few components at a time.</span></li>
</ul>
</div>
</div>
<a id="JSTGD425"></a>
<div class="props_rev_3"><a id="GUID-797CC032-8C6A-4518-A229-D48B3B02DC09"></a>
<h3 id="JSTGD-GUID-797CC032-8C6A-4518-A229-D48B3B02DC09" class="sect3">Hangs During Debugging of Pop-up Menus and Similar Components on X11</h3>
<div>
<p>Set the <code class="codeph">-Dsun.awt.disablegrab=true</code> system property during the debugging of certain graphical user interface (GUI) components.</p>
<div class="section">
<p>Certain graphical user interface (GUI) actions require grabbing all the input events in order to determine when the action should terminate (for example, navigating pop-up menus). While the grab is active, no other applications receive input events. If a Java application is being debugged, and a breakpoint is reached while the grab is active, then the operating system appears to hang. This happens because the Java application holding the grab is stopped by the debugger and cannot process any input events, and other applications do not receive the events due to the installed grab. In order to allow debugging such applications, the following system property should be set when running the application from the debugger:</p>
<pre dir="ltr">
-Dsun.awt.disablegrab=true
</pre>
<p>This property effectively turns off setting the grab, and does not hang the system. However, with this option set, in some cases, this can lead to the inability to terminate a GUI actions that would normally be terminated. For example, pop-up menus may not be dismissed when clicking a window's title bar.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="JSTGD426"></a>
<div class="props_rev_3"><a id="GUID-871DD428-64B3-4BB8-B8FD-6F8287B07FBE"></a>
<h3 id="JSTGD-GUID-871DD428-64B3-4BB8-B8FD-6F8287B07FBE" class="sect3">Window.toFront()/toBack() Behavior on X11</h3>
<div>
<p>Due to restrictions enforced by third-party software (in particular, by window managers such as the Metacity), the <span class="apiname">toFront()</span>/<span class="apiname">toBack()</span> methods may not work as expected and cause the window to not change its stacking order in relation to other top-level windows.</p>
<div class="section">
<p>More details are available in the CR 6472274.</p>
<p>If an application wants to bring a window to the top, it can try to workaround the issue by calling <span class="apiname">Window.setAlwaysOnTop(true)</span> to temporarily make the window always stay on top and then calling <span class="apiname">setAlwaysOnTop(false)</span> to reset the "always on top" state.</p>
<div class="infobox-note" id="GUID-871DD428-64B3-4BB8-B8FD-6F8287B07FBE__GUID-1653096E-C515-425A-A70A-2C638BA9B8FD">
<p class="notep1">Note:</p>
<p>This workaround is not guaranteed to work because window managers can enforce more restrictions. Also, setting a window to "always on top" is available to trusted applications only. An unsigned applet or an unsigned Web Start application running in a sandbox cannot use this API, and thus you cannot work around the issue.</p>
<p>However, native applications experience similar issues, and this peculiarity makes Java applications behave similar to native applications.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="JSTGD427"></a>
<div class="props_rev_3"><a id="GUID-CE1BB907-78F8-48D4-9B02-A39BA2F7D3AD"></a>
<h2 id="JSTGD-GUID-CE1BB907-78F8-48D4-9B02-A39BA2F7D3AD" class="sect2">Heavyweight or Lightweight Components Mix</h2>
<div>
<p>Issues with the heavyweight or lightweight (HW/LW) component mixing feature.</p>
<div class="section">
<p>The following issues are addressed in the heavyweight or lightweight (HW/LW) component mixing feature:</p>
</div>
<!-- class="section" -->
<ul>
<li class="stepexpand"><span><span class="bold">Validate the component hierarchy:</span></span>
<div>
<p>Changing any layout-related properties of a component, such as its size, location, or font, invalidates the component as well as its ancestors. In order for the HW/LW Mixing feature to function correctly, the component hierarchy must be validated after making such changes. By default, invalidation stops on the top-most container of the hierarchy (for example, a <code class="codeph">Frame</code> object). Therefore, to restore the validity of the hierarchy, the application should call the <code class="codeph">Frame.validate()</code> method. For example:</p>
<pre dir="ltr">
component.setFont(myFont);
frame.validate();
</pre>
<div class="p"><code class="codeph">frame</code> refers to a frame that contains <code class="codeph">component</code>.
<div class="infobox-note" id="GUID-CE1BB907-78F8-48D4-9B02-A39BA2F7D3AD__GUID-9290D8A0-4E91-459A-9963-F6B6873C4F44">
<p class="notep1">Note:</p>
Swing applications and the Swing library often use the following pattern:
<pre dir="ltr">
component.setFont(myFont);
component.revalidate();
</pre>
<p>The <span class="apiname">revalidate()</span> call is <span class="italic">not</span> sufficient because it validates the hierarchy starting from the nearest validate root of the component only, thus leaving the upper containers invalid. In that case, the HW/LW feature may not calculate correct shapes for the HW components, and visual artifacts may be seen on the screen.</p>
<p>To verify the validity of the whole component hierarchy, a user can use the key combination Control+Shift+F1, as described in <a href="awt.htm#GUID-623C61BB-8E09-4918-A120-911CA5C92FC6" title="Helpful tips to debug issues related to AWT.">Debug Tips for AWT</a>. A component marked 'invalid' may indicate a missing <span class="apiname">validate()</span> call somewhere.</p>
</div>
</div>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Validate roots:</span></span>
<div>
<p>The concept of validate roots mentioned in <span class="bold">Validate the component hierarchy</span> was introduced in Swing in order to speed up the process of validating component hierarchies because it may take a significant amount of time. While such optimization leaves upper parts of hierarchies invalid, this did not create any issues because the layout of components inside a validate root does not affect the layout of the outside component hierarchy (that is, the siblings of the validate root). However, when HW and LW components are mixed together in a hierarchy, this statement is no longer true. That is why the feature requires the whole component hierarchy to be valid.</p>
<p>Calling <span class="apiname">frame.validate()</span> may be inefficient, and AWT supports an alternative, optimized way of handling invalidation/validation of component hierarchies. This feature is enabled with a system property:</p>
<pre dir="ltr">
-Djava.awt.smartInvalidate=true
</pre>
<p>Once this property is specified, the <span class="apiname">invalidate()</span> method will stop invalidation of the hierarchy when it reaches the nearest validate root of a component on which the <span class="apiname">invalidate()</span> method has been invoked. Afterwards, to restore the validity of the component hierarchy, the application should simply call:</p>
<pre dir="ltr">
component.revalidate();
</pre>
<div class="p">
<div class="infobox-note" id="GUID-CE1BB907-78F8-48D4-9B02-A39BA2F7D3AD__GUID-70561A46-2690-4DAF-899A-1542B2CB2E58">
<p class="notep1">Note:</p>
In this case, calling <span class="apiname">frame.validate()</span> would be effectively a no-op (a statement that does nothing) because <code class="codeph">frame</code> is still valid. Since some applications rely on calling <span class="apiname">validate()</span> directly on a component upper than the validate root of the hierarchy (for example, a frame), this new optimized behavior may cause incompatibility issues, and hence it is available only when specifying the system property.</div>
</div>
<p>If an application experiences any difficulties running in this new optimized mode, a user can use the key combination Control+Shift+F1 as described in <a href="awt.htm#GUID-623C61BB-8E09-4918-A120-911CA5C92FC6" title="Helpful tips to debug issues related to AWT.">Debug Tips for AWT</a> to investigate what parts of the component hierarchy are left invalid, and thus possibly cause the problems.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Swing painting optimization:</span></span>
<div>
<p>By default, the Swing library assumes that there are no HW components in the component hierarchy, and therefore uses optimized drawing techniques to boost performance of the Swing GUI. If a component hierarchy contains HW components, the optimizations must be turned off. This is relevant for Swing <code class="codeph">JScrollPanes</code> in the first place. You can change the scrolling mode by using the <span class="apiname">JViewPort.setScrollMode(int)</span> method.</p>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Non-opaque LW components:</span></span>
<div>
<p>Non-opaque LW components are not supported by the HW/LW mixing feature implementation by default. In order to enable mixing non-rectangular LW components with HW components, the application must use the <span class="apiname">com.sun.awt.AWTUtilities.setComponentMixingCutoutShape()</span> non-public API.</p>
<div class="p">
<div class="infobox-note" id="GUID-CE1BB907-78F8-48D4-9B02-A39BA2F7D3AD__GUID-D56B076E-4796-4FC7-BD1A-1CB726042DDA">
<p class="notep1">Note:</p>
The non-rectangular LW components should still paint themselves using either opaque (alpha = 1.0) or transparent (alpha = 0.0) colors. Using translucent colors (with 0.0 &lt; alpha &lt; 1.0) is not supported.</div>
</div>
</div>
</li>
<li class="stepexpand"><span><span class="bold">Disable the default HW/LW mix feature:</span></span>
<div>
<p>In the past, some developers have implemented their own support for cases when HW and LW components must be mixed together. The built-in implementation of the feature available since JDK 6 and JDK 7 may cause problems with custom workarounds. In order to disable the built-in feature the application must be started with the following system property:</p>
<pre dir="ltr">
-Dsun.awt.disableMixing=true
</pre></div>
</li>
</ul>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment340">
<tr>
<td class="cellalignment347">
<table class="cellalignment345">
<tr>
<td class="cellalignment344"><a href="introduction-client-issues.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment344"><a href="java-2d-pipeline-rendering-and-properties.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1995, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment349">
<table class="cellalignment343">
<tr>
<td class="cellalignment344"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment344"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment344"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
