<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Java Access Bridge API</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="The Java Access Bridge API enables you to develop assistive technology applications for the Microsoft Windows operating system that work with Java applications. It contains native methods that enable you to view and manipulate information about GUI elements in a Java application, which is forwarded to your assistive technology application through Java Access Bridge." />
<meta name="dcterms.created" content="2018-03-13T08:15:52Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Accessibility Guide" />
<meta name="dcterms.identifier" content="E91077-01" />
<meta name="dcterms.isVersionOf" content="JSACC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="java-access-bridge-architecture.htm" title="Previous" type="text/html" />
<link rel="Next" href="accessibility-properties.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSACC.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C10D11B0-F588-43FA-BBDE-70E9085E9AFF"></a> <span id="PAGE" style="display:none;">8/10</span> <!-- End Header -->
<h1 id="JSACC-GUID-C10D11B0-F588-43FA-BBDE-70E9085E9AFF" class="sect1"><span class="enumeration_chapter">5</span> Java Access Bridge API</h1>
<div>
<p>The Java Access Bridge API enables you to develop assistive technology applications for the Microsoft Windows operating system that work with Java applications. It contains native methods that enable you to view and manipulate information about GUI elements in a Java application, which is forwarded to your assistive technology application through Java Access Bridge.</p>
<div class="section">
<p class="subhead1">Topics</p>
<ul style="list-style-type: disc;">
<li><a href="java-access-bridge-api.htm#GUID-0F6F322C-59E9-4190-AC13-BB78B52E2D5C" title="The Java Access Bridge API can be found in four files: AccessBridgeCalls.h and AccessBridgeCalls.c (API calls), AccessBridgePackages.h (data structures), and AccessBridgeCallbacks.h (callbacks).">Java Access Bridge API Files</a></li>
<li><a href="java-access-bridge-api.htm#GUID-C79D9A13-0922-49DC-A28B-DFECDCFA79DD" title="The file AccessBridgeCalls.h contains the Java Access Bridge API calls. To use them, compile the file AccessBridgeCalls.c. The Java Access Bridge API calls act as the interface between your application and WindowsAccessBridge.dll.">Java Access Bridge API Calls</a></li>
<li><a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86" title="The Java Access Bridge API data structures are contained in the file AccessBridgePackages.h.">Java Access Bridge API Data Stuctures</a></li>
<li><a href="java-access-bridge-api.htm#GUID-5A1887CF-3D99-49D5-9237-A629D3048452" title="The Java Access Bridge API callbacks are contained in the file AccessBridgeCallbacks.h. Your event handling functions must match these prototypes.">Java Access Bridge API Callbacks</a></li>
<li><a href="java-access-bridge-api.htm#GUID-FC888323-9E9D-4032-8A10-7E8DEC3061E0" title="This topic describes known problems and usage tips for those developing Assistive Technology applications for Java Access Bridge.">Troubleshooting Java Access Bridge</a></li>
</ul>
</div>
<!-- class="section" --></div>
<div class="sect2"><a id="GUID-0F6F322C-59E9-4190-AC13-BB78B52E2D5C"></a>
<h2 id="JSACC-GUID-0F6F322C-59E9-4190-AC13-BB78B52E2D5C" class="sect2">Java Access Bridge API Files</h2>
<div>
<p>The Java Access Bridge API can be found in four files: <code>AccessBridgeCalls.h</code> and <code>AccessBridgeCalls.c</code> (API calls), <code>AccessBridgePackages.h</code> (data structures), and <code>AccessBridgeCallbacks.h</code> (callbacks).</p>
<div class="section">
<p class="subhead2">Location of Java Access Bridge API Files</p>
<p>Find the following Java Access Bridge API include (header) files in <code><span class="variable">%JAVA_HOME%</span>\include\win32\bridge</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>AccessBridgeCallbacks.h</code></p>
</li>
<li>
<p><code>AccessBridgeCalls.h</code></p>
</li>
<li>
<p><code>AccessBridgePackages.h</code></p>
</li>
</ul>
<p>Find the file <code>AccessBridgeCalls.c</code>, which defines some key interfaces, from the JDK source code repository at <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=jdk9_jab_api_source" target="_blank"><code>http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/tip/src/jdk.accessibility/windows/native/bridge/AccessBridgeCalls.c</code></a>.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-C79D9A13-0922-49DC-A28B-DFECDCFA79DD"></a>
<h2 id="JSACC-GUID-C79D9A13-0922-49DC-A28B-DFECDCFA79DD" class="sect2">Java Access Bridge API Calls</h2>
<div>
<p>The file <code class="codeph">AccessBridgeCalls.h</code> contains the Java Access Bridge API calls. To use them, compile the file <code class="codeph">AccessBridgeCalls.c</code>. The Java Access Bridge API calls act as the interface between your application and <code>WindowsAccessBridge.dll</code>.</p>
<div class="section">
<p class="subhead2">Initialization/Shutdown Functions</p>
<p>These two functions start and shut down Java Access Bridge.</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL initializeAccessBridge();
</pre>
<p>Starts Java Access Bridge. You can't use any part of the Java Access Bridge API until you call this function.</p>
</li>
<li>
<pre dir="ltr">
BOOL shutdownAccessBridge();
</pre>
<p>Shuts down Java Access Bridge. It's important to call this function when your application is finished using Java Access Bridge (before your application exists) so that Java Access Bridge can properly perform memory cleanup.</p>
<p><span class="bold">Note</span>: Calling the function <span class="apiname">shutdownAccessBridge</span> is not a substitute for releasing any data structures that are maintained by the JVM; do this by calling the function <span class="apiname">ReleaseJavaObject</span>.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Gateway Functions</p>
<p>You typically call these functions before calling any other Java Access Bridge API function:</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL IsJavaWindow(HWND window);
</pre>
<p>Checks to see if the given window implements the Java Accessibility API.</p>
</li>
<li>
<pre dir="ltr">
BOOL GetAccessibleContextFromHWND(HWND target, long *vmID, AccessibleContext *ac);
</pre>
<p>Gets the <code class="codeph">AccessibleContext</code> and <code class="codeph">vmID</code> values for the given window. Many Java Access Bridge functions require the <code class="codeph">AccessibleContext</code> and <code class="codeph">vmID</code> values.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Event Handling Functions</p>
These take a function pointer to the function that will handle the event type. When you no longer are interested in receiving those types of events, call the function again, passing in the <code class="codeph">NULL</code> value. Find prototypes for the function pointers you need to pass into these functions in the file <code class="codeph">AccessBridgeCallbacks.h</code>. <a href="java-access-bridge-api.htm#GUID-5A1887CF-3D99-49D5-9237-A629D3048452" title="The Java Access Bridge API callbacks are contained in the file AccessBridgeCallbacks.h. Your event handling functions must match these prototypes.">Java Access Bridge API Callbacks</a> describes these prototypes.</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">General Functions</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
void ReleaseJavaObject(long vmID, Java_Object object);
</pre>
<p>Release the memory used by the Java object <code class="codeph">object</code>, where <code class="codeph">object</code> is an object returned to you by Java Access Bridge. Java Access Bridge automatically maintains a reference to all Java objects that it returns to you in the JVM so they are not garbage collected. To prevent memory leaks, call <code class="codeph">ReleaseJavaObject</code> on all Java objects returned to you by Java Access Bridge once you are finished with them.</p>
</li>
<li>
<pre dir="ltr">
BOOL GetVersionInfo(long vmID, AccessBridgeVersionInfo *info);
</pre>
<p>Gets the version information of the instance of Java Access Bridge instance your application is using. You can use this information to determine the available functionality of your version of Java Access Bridge.</p>
<div class="infobox-note" id="GUID-C79D9A13-0922-49DC-A28B-DFECDCFA79DD__GUID-E3930484-E98A-467F-825A-55741382D473">
<p class="notep1">Note:</p>
To determine the version of the JVM, you need to pass in a valid <code class="codeph">vmID</code>; otherwise all that is returned is the version of the <code class="codeph">WindowsAccessBridge.DLL</code> file to which your application is connected.</div>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Context Functions</p>
<p>These functions provide the core of the Java Accessibility API that is exposed by Java Access Bridge.</p>
<p>The functions <code class="codeph">GetAccessibleContextAt</code> and <code class="codeph">GetAccessibleContextWithFocus</code> retrieve an <code class="codeph">AccessibleContext</code> object, which is a magic cookie (a Java <code class="codeph">Object</code> reference) to an <code class="codeph">Accessible</code> object and a JVM cookie. You use these two cookies to reference objects through Java Access Bridge. Most Java Access Bridge API functions require that you pass in these two parameters.</p>
<div class="infobox-note" id="GUID-C79D9A13-0922-49DC-A28B-DFECDCFA79DD__GUID-007BCF45-4EA6-4DC7-B7A5-C3C56665D14A">
<p class="notep1">Note:</p>
<code class="codeph">AccessibleContext</code> objects are 64-bit references under 64-bit interprocess communication (which uses the <code>windowsaccessbridge-64.dll</code> file). However, prior to JDK 9, <code class="codeph">AccessibleContext</code> objects are 32-bit references under 32-bit interprocess communication (which uses the <code>windowsaccessbridge.dll</code> file without <code>-32</code> or <code>-64</code> in the file name). Consequently, if you are converting your assistive technology applications to run on 64-bit Windows systems, then you need to recompile your assistive technology applications.</div>
<p>The function <code class="codeph">GetAccessibleContextInfo</code> returns detailed information about an <code class="codeph">AccessibleContext</code> object belonging to the JVM. In order to improve performance, the various distinct methods in the Java Accessibility API are collected together into a few routines in the Java Access Bridge API and returned in <code class="codeph">struct</code> values. The file <code>AccessBridgePackages.h</code> defines these <code class="codeph">struct</code> values and <a href="java-access-bridge-api.htm#GUID-5A1887CF-3D99-49D5-9237-A629D3048452" title="The Java Access Bridge API callbacks are contained in the file AccessBridgeCallbacks.h. Your event handling functions must match these prototypes.">Java Access Bridge API Callbacks</a> describes them.</p>
<p>The functions <code class="codeph">GetAccessibleChildFromContext</code> and <code class="codeph">GetAccessibleParentFromContext</code> enable you to walk the GUI component hierarchy, retrieving the <span class="italic">n</span>th child, or the parent, of a particular GUI object.</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL GetAccessibleContextAt(long vmID, AccessibleContext acParent, jint x, jint y, AccessibleContext *ac)
</pre>
<p>Retrieves an <code class="codeph">AccessibleContext</code> object of the window or object that is under the mouse pointer.</p>
</li>
<li>
<pre dir="ltr">
BOOL GetAccessibleContextWithFocus(HWND window, long *vmID, AccessibleContext *ac);
</pre>
<p>Retrieves an <code class="codeph">AccessibleContext</code> object of the window or object that has the focus.</p>
</li>
<li>
<pre dir="ltr">
BOOL GetAccessibleContextInfo(long vmID, AccessibleContext ac, AccessibleContextInfo *info);
</pre>
<p>Retrieves an <code class="codeph">AccessibleContextInfo</code> object of the <code class="codeph">AccessibleContext</code> object <code class="codeph">ac</code>.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext GetAccessibleChildFromContext(long vmID, AccessibleContext ac, jint index);
</pre>
<p>Returns an <code class="codeph">AccessibleContext</code> object that represents the <span class="variable">n</span>th child of the object <code class="codeph">ac</code>, where <span class="variable">n</span> is specified by the value index.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext GetAccessibleParentFromContext(long vmID, AccessibleContext ac);
</pre>
<p>Returns an <code class="codeph">AccessibleContext</code> object that represents the parent of object <code class="codeph">ac</code>.</p>
</li>
<li>
<pre dir="ltr">
HWND getHWNDFromAccessibleContext(long vmID, AccessibleContext ac);
</pre>
<p>Returns the <span class="apiname">HWND</span> from the <span class="apiname">AccessibleContext</span>of a top-level window.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Text Functions</p>
<p>These functions get <code class="codeph">AccessibleText</code> information provided by the Java Accessibility API, broken down into seven chunks for efficiency. An <code class="codeph">AccessibleContext</code> has <code class="codeph">AccessibleText</code> information contained within it if you set the flag <code class="codeph">accessibleText</code> in the <code class="codeph">AccessibleContextInfo</code> data structure to <code class="codeph">TRUE</code>. The file <code class="codeph">AccessBridgePackages.h</code> defines the <code class="codeph">struct</code> values used in these functions <a href="java-access-bridge-api.htm#GUID-5A1887CF-3D99-49D5-9237-A629D3048452" title="The Java Access Bridge API callbacks are contained in the file AccessBridgeCallbacks.h. Your event handling functions must match these prototypes.">Java Access Bridge API Callbacks</a> describes them.</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL GetAccessibleTextInfo(long vmID, AccessibleText at, AccessibleTextInfo
*textInfo, jint x, jint y);
</pre></li>
<li>
<pre dir="ltr">
BOOL GetAccessibleTextItems(long vmID, AccessibleText at, AccessibleTextItemsInfo
*textItems, jint index);
</pre></li>
<li>
<pre dir="ltr">
BOOL GetAccessibleTextSelectionInfo(long vmID, AccessibleText
at, AccessibleTextSelectionInfo *textSelection);
</pre></li>
<li>
<pre dir="ltr">
char *GetAccessibleTextAttributes(long vmID, AccessibleText
at, jint index, AccessibleTextAttributesInfo *attributes);
</pre></li>
<li>
<pre dir="ltr">
BOOL GetAccessibleTextRect(long vmID, AccessibleText at, AccessibleTextRectInfo
*rectInfo, jint index);
</pre></li>
<li>
<pre dir="ltr">
BOOL GetAccessibleTextRange(long vmID, AccessibleText at, jint
start, jint end, wchar_t *text, short len);
</pre></li>
<li>
<pre dir="ltr">
BOOL GetAccessibleTextLineBounds(long vmID, AccessibleText
at, jint index, jint *startIndex, jint *endIndex);
</pre></li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Additional Text Functions</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL selectTextRange(const long vmID, const AccessibleContext accessibleContext, const int startIndex, const int endIndex);
</pre>
<p>Selects text between two indices. Selection includes the text at the start index and the text at the end index. Returns whether successful.</p>
</li>
<li>
<pre dir="ltr">
BOOL getTextAttributesInRange(const long vmID, const AccessibleContext accessibleContext, const int startIndex, const int endIndex, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETEXTATTRIBUTESINFO">AccessibleTextAttributesInfo</a> *attributes, short *len);
</pre>
<p>Get text attributes between two indices. The attribute list includes the text at the start index and the text at the end index. Returns whether successful.</p>
</li>
<li>
<pre dir="ltr">
BOOL setCaretPosition(const long vmID, const AccessibleContext accessibleContext, const int position);
</pre>
<p>Set the caret to a text position. Returns whether successful.</p>
</li>
<li>
<pre dir="ltr">
BOOL getCaretLocation(long vmID, AccessibleContext ac, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETEXTRECTINFO">AccessibleTextRectInfo</a> *rectInfo, jint index);
</pre>
<p>Gets the text caret location.</p>
</li>
<li>
<pre dir="ltr">
BOOL setTextContents (const long vmID, const AccessibleContext accessibleContext, const wchar_t *text);
</pre>
<p>Sets editable text contents. The <span class="apiname">AccessibleContext</span> must implement <span class="apiname">AccessibleEditableText</span> and be editable. The maximum text length that can be set is <code class="codeph">MAX_STRING_SIZE - 1</code>. Returns whether successful.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Table Functions</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL getAccessibleTableInfo(long vmID, AccessibleContext acParent, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETABLEINFO">AccessibleTableInfo</a> *tableInfo);
</pre>
<p>Returns information about the table, for example, caption, summary, row and column count, and the AccessibleTable.</p>
</li>
<li>
<pre dir="ltr">
BOOL getAccessibleTableCellInfo(long vmID, AccessibleTable accessibleTable, jint row, jint column, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETABLECELLINFO">AccessibleTableCellInfo</a> *tableCellInfo);
</pre>
<p>Returns information about the specified table cell. The row and column specifiers are zero-based.</p>
</li>
<li>
<pre dir="ltr">
BOOL getAccessibleTableRowHeader(long vmID, AccessibleContext acParent, AccessibleTableInfo *tableInfo);
</pre>
<p>Returns the table row headers of the specified table as a table.</p>
</li>
<li>
<pre dir="ltr">
BOOL getAccessibleTableColumnHeader(long vmID, AccessibleContext acParent, AccessibleTableInfo *tableInfo);
</pre>
<p>Returns the table column headers of the specified table as a table.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext getAccessibleTableRowDescription(long vmID, AccessibleContext acParent, jint row);
</pre>
<p>Returns the description of the specified row in the specified table. The row specifier is zero-based.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext getAccessibleTableColumnDescription(long vmID, AccessibleContext acParent, jint column);
</pre>
<p>Returns the description of the specified column in the specified table. The column specifier is zero-based.</p>
</li>
<li>
<pre dir="ltr">
jint getAccessibleTableRowSelectionCount(long vmID, AccessibleTable table);
</pre>
<p>Returns how many rows in the table are selected.</p>
</li>
<li>
<pre dir="ltr">
BOOL isAccessibleTableRowSelected(long vmID, AccessibleTable table, jint row);
</pre>
<p>Returns true if the specified zero based row is selected.</p>
</li>
<li>
<pre dir="ltr">
BOOL getAccessibleTableRowSelections(long vmID, AccessibleTable table, jint count, jint *selections);
</pre>
<p>Returns an array of zero based indices of the selected rows.</p>
</li>
<li>
<pre dir="ltr">
jint getAccessibleTableColumnSelectionCount(long vmID, AccessibleTable table);
</pre>
<p>Returns how many columns in the table are selected.</p>
</li>
<li>
<pre dir="ltr">
BOOL isAccessibleTableColumnSelected(long vmID, AccessibleTable table, jint column);
</pre>
<p>Returns true if the specified zero based column is selected.</p>
</li>
<li>
<pre dir="ltr">
BOOL getAccessibleTableColumnSelections(long vmID, AccessibleTable table, jint count, jint *selections);
</pre>
<p>Returns an array of zero based indices of the selected columns.</p>
</li>
<li>
<pre dir="ltr">
jint getAccessibleTableRow(long vmID, AccessibleTable table, jint index);
</pre>
<p>Returns the row number of the cell at the specified cell index. The values are zero based.</p>
</li>
<li>
<pre dir="ltr">
jint getAccessibleTableColumn(long vmID, AccessibleTable table, jint index);
</pre>
<p>Returns the column number of the cell at the specified cell index. The values are zero based.</p>
</li>
<li>
<pre dir="ltr">
jint getAccessibleTableIndex(long vmID, AccessibleTable table, jint row, jint column);
</pre>
<p>Returns the index in the table of the specified row and column offset. The values are zero based.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Relation Set Function</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL getAccessibleRelationSet(long vmID, AccessibleContext accessibleContext, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLERELATIONSETINFO">AccessibleRelationSetInfo</a> *relationSetInfo);
</pre>
<p>Returns information about an object's related objects.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Hypertext Functions</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL getAccessibleHypertext(long vmID, AccessibleContext accessibleContext, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEHYPERTEXTINFO">AccessibleHypertextInfo</a> *hypertextInfo);
</pre>
<p>Returns hypertext information associated with a component.</p>
</li>
<li>
<pre dir="ltr">
BOOL activateAccessibleHyperlink(long vmID, AccessibleContext accessibleContext, AccessibleHyperlink accessibleHyperlink);
</pre>
<p>Requests that a hyperlink be activated.</p>
</li>
<li>
<pre dir="ltr">
jint getAccessibleHyperlinkCount(const long vmID, const AccessibleHypertext hypertext);
</pre>
<p>Returns the number of hyperlinks in a component. Maps to <span class="apiname">AccessibleHypertext.getLinkCount</span>. Returns -1 on error.</p>
</li>
<li>
<pre dir="ltr">
BOOL getAccessibleHypertextExt(const long vmID, const AccessibleContext accessibleContext, const jint nStartIndex, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEHYPERTEXTINFO">AccessibleHypertextInfo</a> *hypertextInfo);
</pre>
<p>Iterates through the hyperlinks in a component. Returns hypertext information for a component starting at hyperlink index <span class="apiname">nStartIndex</span>. No more than <span class="apiname">MAX_HYPERLINKS</span> <span class="apiname">AccessibleHypertextInfo</span> objects will be returned for each call to this method. Returns <span class="apiname">FALSE</span> on error.</p>
</li>
<li>
<pre dir="ltr">
jint getAccessibleHypertextLinkIndex(const long vmID, const AccessibleHypertext hypertext, const jint nIndex);
</pre>
<p>Returns the index into an array of hyperlinks that is associated with a character index in document. Maps to <span class="apiname">AccessibleHypertext.getLinkIndex</span>. Returns -1 on error.</p>
</li>
<li>
<pre dir="ltr">
BOOL getAccessibleHyperlink(const long vmID, const AccessibleHypertext hypertext, const jint nIndex, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEHYPERTEXTINFO">AccessibleHypertextInfo</a> *hyperlinkInfo);
</pre>
<p>Returns the <span class="italic">n</span>th hyperlink in a document. Maps to <span class="apiname">AccessibleHypertext.getLink</span>. Returns <span class="apiname">FALSE</span> on error.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Key Binding Function</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL getAccessibleKeyBindings(long vmID, AccessibleContext accessibleContext, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEKEYBINDINGS">AccessibleKeyBindings</a> *keyBindings);
</pre>
<p>Returns a list of key bindings associated with a component.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Icon Function</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL getAccessibleIcons(long vmID, AccessibleContext accessibleContext, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEICONS">AccessibleIcons</a> *icons);
</pre>
<p>Returns a list of icons associate with a component.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Action Functions</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL getAccessibleActions(long vmID, AccessibleContext accessibleContext, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEACTIONS">AccessibleActions</a> *actions);
</pre>
<p>Returns a list of actions that a component can perform.</p>
</li>
<li>
<pre dir="ltr">
BOOL doAccessibleActions(long vmID, AccessibleContext accessibleContext, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEACTIONSTODO">AccessibleActionsToDo</a> *actionsToDo, jint *failure);      
</pre>
<p>Request that a list of <span class="apiname">AccessibleActions</span> be performed by a component. Returns <span class="apiname">TRUE</span> if all actions are performed. Returns <span class="apiname">FALSE</span> when the first requested action fails in which case "failure" contains the index of the action that failed.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Utility Functions</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL IsSameObject(long vmID, JOBJECT64 obj1, JOBJECT64 obj2);
</pre>
<p>Returns whether two object references refer to the same object.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext getParentWithRole (const long vmID, const AccessibleContext accessibleContext, const wchar_t *role);
</pre>
<p>Returns the <span class="apiname">AccessibleContext</span> with the specified role that is the ancestor of a given object. The role is one of the role strings defined in <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86" title="The Java Access Bridge API data structures are contained in the file AccessBridgePackages.h.">Java Access Bridge API Data Stuctures</a>. If there is no ancestor object that has the specified role, returns <span class="apiname">(AccessibleContext)0</span>.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext getParentWithRoleElseRoot (const long vmID, const AccessibleContext accessibleContext, const wchar_t *role); 
</pre>
<p>Returns the <span class="apiname">AccessibleContext</span> with the specified role that is the ancestor of a given object. The role is one of the role strings defined in <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86" title="The Java Access Bridge API data structures are contained in the file AccessBridgePackages.h.">Java Access Bridge API Data Stuctures</a>. If an object with the specified role does not exist, returns the top level object for the Java window. Returns <span class="apiname">(AccessibleContext)0</span> on error.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext getTopLevelObject (const long vmID, const AccessibleContext accessibleContext);
</pre>
<p>Returns the <span class="apiname">AccessibleContext</span> for the top level object in a Java window. This is same <span class="apiname">AccessibleContext</span> that is obtained from <span class="apiname">GetAccessibleContextFromHWND</span> for that window. Returns <span class="apiname">(AccessibleContext)0</span> on error.</p>
</li>
<li>
<pre dir="ltr">
int getObjectDepth (const long vmID, const AccessibleContext accessibleContext);
</pre>
<p>Returns how deep in the object hierarchy a given object is. The top most object in the object hierarchy has an object depth of 0. Returns -1 on error.</p>
</li>
<li>
<pre dir="ltr">
AccessibleContext getActiveDescendent (const long vmID, const AccessibleContext accessibleContext);
</pre>
<p>Returns the <span class="apiname">AccessibleContext</span> of the current <span class="apiname">ActiveDescendent</span> of an object. This method assumes the <span class="apiname">ActiveDescendent</span> is the component that is currently selected in a container object. Returns <span class="apiname">(AccessibleContext)0</span> on error or if there is no selection.</p>
</li>
<li>
<pre dir="ltr">
BOOL requestFocus(const long vmID, const AccessibleContext accessibleContext);
</pre>
<p>Request focus for a component. Returns whether successful.</p>
</li>
<li>
<pre dir="ltr">
int getVisibleChildrenCount(const long vmID, const AccessibleContext accessibleContext);
</pre>
<p>Returns the number of visible children of a component. Returns -1 on error.</p>
</li>
<li>
<pre dir="ltr">
BOOL getVisibleChildren(const long vmID, const AccessibleContext accessibleContext, const int startIndex, <a href="java-access-bridge-api.htm#GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__VISIBLECHILDENINFO">VisibleChildrenInfo</a> *visibleChildrenInfo);
</pre>
<p>Gets the visible children of an <span class="apiname">AccessibleContext</span>. Returns whether successful.</p>
</li>
<li>
<pre dir="ltr">
int getEventsWaiting();
</pre>
<p>Gets the number of events waiting to fire.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Value Functions</p>
<p>These functions get <code class="codeph">AccessibleValue</code> information provided by the Java Accessibility API. An <code class="codeph">AccessibleContext</code> object has <code class="codeph">AccessibleValue</code> information contained within it if the flag <code class="codeph">accessibleValue</code> in the <code class="codeph">AccessibleContextInfo</code> data structure is set to <code class="codeph">TRUE</code>. The values returned are <code class="codeph">strings (char *value)</code> because there is no way to tell in advance if the value is an integer, a floating point value, or some other object that subclasses the Java language construct <code class="codeph">java.lang.Number</code>.</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
BOOL GetCurrentAccessibleValueFromContext(long vmID, AccessibleValue av, wchar_t *value, short len);
</pre></li>
<li>
<pre dir="ltr">
BOOL GetMaximumAccessibleValueFromContext(long vmID, AccessibleValue av, wchar_ *value, short len);
</pre></li>
<li>
<pre dir="ltr">
BOOL GetMinimumAccessibleValueFromContext(long vmID, AccessibleValue av, wchar_ *value, short len);
</pre></li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Accessible Selection Functions</p>
<p>These functions get and manipulate <code class="codeph">AccessibleSelection</code> information provided by the Java Accessibility API. An <code class="codeph">AccessibleContext</code> has <code class="codeph">AccessibleSelection</code> information contained within it if the flag <code class="codeph">accessibleSelection</code> in the <code class="codeph">AccessibleContextInfo</code> data structure is set to <code class="codeph">TRUE</code>. The <code class="codeph">AccessibleSelection</code> support is the first place where the user interface can be manipulated, as opposed to being queries, through adding and removing items from a selection. Some of the functions use an index that is in child coordinates, while other use selection coordinates. For example, add to remove from a selection by passing child indices (for example, add the fourth child to the selection). On the other hand, enumerating the selected children is done in selection coordinates (for example, get the <code class="codeph">AccessibleContext</code> of the first object selected).</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
void AddAccessibleSelectionFromContext(long vmID, AccessibleSelection
as, int i);
</pre></li>
<li>
<pre dir="ltr">
void ClearAccessibleSelectionFromContext(long vmID, AccessibleSelection
as);
</pre></li>
<li>
<pre dir="ltr">
jobject GetAccessibleSelectionFromContext(long vmID, AccessibleSelection
as, int i);
</pre></li>
<li>
<pre dir="ltr">
int GetAccessibleSelectionCountFromContext(long vmID, AccessibleSelection
as);
</pre></li>
<li>
<pre dir="ltr">
BOOL IsAccessibleChildSelectedFromContext(long vmID, AccessibleSelection
as, int i);
</pre></li>
<li>
<pre dir="ltr">
void RemoveAccessibleSelectionFromContext(long vmID, AccessibleSelection
as, int i);
</pre></li>
<li>
<pre dir="ltr">
void SelectAllAccessibleSelectionFromContext(long vmID, AccessibleSelection
as);
</pre></li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86"></a>
<h2 id="JSACC-GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86" class="sect2">Java Access Bridge API Data Stuctures</h2>
<div>
<p>The Java Access Bridge API data structures are contained in the file <code class="codeph">AccessBridgePackages.h</code>.</p>
<div class="section">
<p class="subhead2">Important Data Structures</p>
<p>There are data structures in this file that you do not need (and can ignore); they are used as part of the inter-process communication mechanism of the two Java Access Bridge DLLs. The data structures of importance are as follows:</p>
<pre dir="ltr">
#define MAX_STRING_SIZE     1024
#define SHORT_STRING_SIZE    256

typedef struct AccessibleContextInfoTag {
  wchar_ name[MAX_STRING_SIZE];        // the AccessibleName of the object
  wchar_ description[MAX_STRING_SIZE]; // the AccessibleDescription of the object
  wchar_ role[SHORT_STRING_SIZE];      // localized AccesibleRole string
  wchar_ states[SHORT_STRING_SIZE];    // localized AccesibleStateSet string
                                       //   (comma separated)
  jint indexInParent                   // index of object in parent
  jint childrenCount                   // # of children, if any
  jint x;                              // screen x-axis co-ordinate in pixels
  jint y;                              // screen y-axis co-ordinate in pixels
  jint width;                          // pixel width of object
  jint height;                         // pixel height of object
  BOOL accessibleComponent;            // flags for various additional
  BOOL accessibleAction;               // Java Accessibility interfaces
  BOOL accessibleSelection;            // FALSE if this object doesn't
  BOOL accessibleText;                 // implement the additional interface
  BOOL accessibleInterfaces;           // new bitfield containing additional
                                       //   interface flags
} AccessibleContextInfo;
 
typedef struct AccessibleTextInfoTag {
  jint charCount;       // # of characters in this text object
  jint caretIndex;      // index of caret
  jint indexAtPoint;    // index at the passsed in point
} AccessibleTextInfo;

typedef struct AccessibleTextItemsInfoTag {
  wchar_t letter;
  wchar_t word[SHORT_STRING_SIZE];
  wchar_t sentence[MAX_STRING_SIZE];
} AccessibleTextItemsInfo;
 
typedef struct AccessibleTextSelectionInfoTag {
  jint selectionStartIndex;
  jint selectionEndIndex;
  wchar_t selectedText[MAX_STRING_SIZE];
} AccessibleTextSelectionInfo;
 
typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETEXTRECTINFO">AccessibleTextRectInfoTag</span>  {
  jint x;          // bounding recttangle of char at index, x-axis co-ordinate
  jint y;          // y-axis co-ordinate
  jint width;      // bounding rectangle width
  jint height;     // bounding rectangle height
} AccessibleTextRectInfo;
 
typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETEXTATTRIBUTESINFO">AccessibleTextAttributesInfoTag</span> {
  BOOL bold;
  BOOL italic;
  BOOL underline;
  BOOL strikethrough;
  BOOL superscript;
  BOOL subscript;
  wchar_t backgroundColor[SHORT_STRING_SIZE];
  wchar_t foregroundColor[SHORT_STRING_SIZE];
  wchar_t fontFamily[SHORT_STRING_SIZE];
  jint fontSize;
  jint alignment;
  jint bidiLevel;
  jfloat firstLineIndent;
  jfloat leftIndent;
  jfloat rightIndent;
  jfloat lineSpacing;
  jfloat spaceAbove;
  jfloat spaceBelow;
  wchar_t fullAttributesString[MAX_STRING_SIZE];
} AccessibleTextAttributesInfo;

typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETABLEINFO">AccessibleTableInfoTag</span>  {
  JOBJECT64 caption;  // AccesibleContext
  JOBJECT64 summary;  // AccessibleContext
  jint rowCount;
  jint columnCount;
  JOBJECT64 accessibleContext;
  JOBJECT64 accessibleTable;
} AccessibleTableInfo;

typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLETABLECELLINFO">AccessibleTableCellInfoTag</span>  {
  JOBJECT64  accessibleContext;
  jint       index;
  jint       row;
  jint       column;
  jint       rowExtent;
  jint       columnExtent;
  jboolean   isSelected;
} AccessibleTableCellInfo;

typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLERELATIONSETINFO">AccessibleRelationSetInfoTag</span> {
  jint relationCount;
  AccessibleRelationInfo relations[MAX_RELATIONS];
} AccessibleRelationSetInfo;

typedef struct AccessibleRelationInfoTag {
  wchar_t key[SHORT_STRING_SIZE];
  jint targetCount;
  JOBJECT64 targets[MAX_RELATION_TARGETS];  // AccessibleContexts
} AccessibleRelationInfo;


typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEHYPERTEXTINFO">AccessibleHypertextInfoTag</span> {
  jint linkCount;                                 // number of hyperlinks
  AccessibleHyperlinkInfo links[MAX_HYPERLINKS];  // the hyperlinks
  JOBJECT64 accessibleHypertext;                  // AccessibleHypertext object
} AccessibleHypertextInfo;

typedef struct AccessibleHyperlinkInfoTag {
  wchar_t text[SHORT_STRING_SIZE]; // the hyperlink text
  jint startIndex;                 // index in the hypertext document where the link begins
  jint endIndex;                   // index in the hypertext document where the link ends
  JOBJECT64 accessibleHyperlink;   // AccessibleHyperlink object
} AccessibleHyperlinkInfo;

typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEKEYBINDINGS">AccessibleKeyBindingsTag</span> {
  int keyBindingsCount; // number of key bindings
  AccessibleKeyBindingInfo keyBindingInfo[MAX_KEY_BINDINGS];
} AccessibleKeyBindings;

typedef struct AccessibleKeyBindingInfoTag {
  jchar character; // the key character
  jint modifiers;  // the key modifiers
} AccessibleKeyBindingInfo;

typedef struct  <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEICONS">AccessibleIconsTag</span> {
  jint iconsCount;                            // number of icons
  AccessibleIconInfo iconInfo[MAX_ICON_INFO]; // the icons
} AccessibleIcons;

typedef struct AccessibleIconInfoTag {
  wchar_t description[SHORT_STRING_SIZE]; // icon description
  jint height;                            // icon height
  jint width;                             // icon width
} AccessibleIconInfo;

typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEACTIONS">AccessibleActionsTag</span> {
  jint actionsCount;                                // number of actions
  AccessibleActionInfo actionInfo[MAX_ACTION_INFO]; // the action information
} AccessibleActions;

typedef struct AccessibleActionInfoTag {
  wchar_t name[SHORT_STRING_SIZE]; // action name
} AccessibleActionInfo;

typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__ACCESSIBLEACTIONSTODO">AccessibleActionsToDoTag</span> {
  jint actionsCount;                               // number of actions to do
  AccessibleActionInfo actions[MAX_ACTIONS_TO_DO]; // the accessible actions to do
} AccessibleActionsToDo;

typedef struct <span class="apiname" id="GUID-A4B488F9-622F-4A5C-932D-7C61BA2FFC86__VISIBLECHILDENINFO">VisibleChildenInfoTag</span> {
  int returnedChildrenCount;                        // number of children returned
  AccessibleContext children[MAX_VISIBLE_CHILDREN]; // the visible children
} VisibleChildenInfo;
</pre></div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-5A1887CF-3D99-49D5-9237-A629D3048452"></a>
<h2 id="JSACC-GUID-5A1887CF-3D99-49D5-9237-A629D3048452" class="sect2">Java Access Bridge API Callbacks</h2>
<div>
<p>The Java Access Bridge API callbacks are contained in the file <code class="codeph">AccessBridgeCallbacks.h</code>. Your event handling functions must match these prototypes.</p>
<div class="section">
<p>You must call the function <code class="codeph">ReleaseJavaObject</code> on every <code class="codeph">JOBJECT64</code> returned through these event handlers once you are finished with them to prevent memory leaks in the JVM.</p>
<p>If you are using legacy APIs, then define <code class="codeph">ACCESSBRIDGE_ARCH_LEGACY</code>.</p>
<p><code class="codeph">JOBJECT64</code> is defined as <code class="codeph">jlong</code> on 64-bit systems and <code class="codeph">jobject</code> on legacy versions of Java Access Bridge. For definitions, see the section <code class="codeph">ACCESSBRIDGE_ARCH_LEGACY</code> in the <code class="codeph">AccessBridgePackages.h</code> header file.</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">
typedef void (*AccessBridge_FocusGainedFP) (long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_FocusLostFP) (long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_CaretUpdateFP) (long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_MouseClickedFP) (long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_MouseEnteredFP) (long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_MouseExitedFP) (long vmID, JOBJECT64
event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_MousePressedFP)
(long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef
void (*AccessBridge_MouseReleasedFP) (long vmID, JOBJECT64 event,
JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_MenuCanceledFP)
(long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef
void (*AccessBridge_MenuDeselectedFP) (long vmID, JOBJECT64 event,
JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_MenuSelectedFP)
(long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef
void (*AccessBridge_PopupMenuCanceledFP) (long vmID JOBJECT64 event,
JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PopupMenuWillBecomeInvisibleFP)
(long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef
void (*AccessBridge_PopupMenuWillBecomeVisibleFP) (long vmID, JOBJECT64
event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertyNameChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source, wchar_t *oldName, wchar_t
*newName);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertyDescriptionChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source, wchar_t *oldDescription,
wchar_t *newDescription);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertyStateChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source, wchar_t *oldState,
wchar_t *newState);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertyValueChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source, wchar_t *oldValue,
wchar_t *newValue);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertySelectionChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef
void (*AccessBridge_PropertyTextChangeFP) (long vmID, JOBJECT64 event,
JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertyCaretChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source, int oldPosition, int
newPosition);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertyVisibleDataChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source);
</pre></li>
<li>
<pre dir="ltr">
typedef
void (*AccessBridge_PropertyChildChangeFP) (long vmID, JOBJECT64 event,
JOBJECT64 source, JOBJECT64 oldChild, JOBJECT64 newChild);
</pre></li>
<li>
<pre dir="ltr">
typedef void (*AccessBridge_PropertyActiveDescendentChangeFP)
(long vmID, JOBJECT64 event, JOBJECT64 source, JOBJECT64 oldActiveDescendent,
JOBJECT64 newActiveDescendent);
</pre></li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<div class="sect2"><a id="GUID-FC888323-9E9D-4032-8A10-7E8DEC3061E0"></a>
<h2 id="JSACC-GUID-FC888323-9E9D-4032-8A10-7E8DEC3061E0" class="sect2">Troubleshooting Java Access Bridge</h2>
<div>
<p>This topic describes known problems and usage tips for those developing Assistive Technology applications for Java Access Bridge.</p>
<div class="section">
<p class="subhead2">Known Problems</p>
<p><span class="bold">Re-Registering Menu Events Generates Duplicate Copies</span>: If you register a menu event, unregister it, and then register it again, then Java Access Bridge generates duplicate copies of the menu event.</p>
<p><span class="bold"><code class="codeph">MenuDeselected</code> Events Generated When Menu is Closed</span>: You are not receiving <span class="apiname">MenuCanceled</span> (or <span class="apiname">PopupMenuCanceled</span>) events. To determine that a menu has been closed, look for <span class="apiname">MenuDeselected</span> events.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Tips</p>
<p><span class="bold">Determining Changes in Menu Item Selection</span>: Use State <code class="codeph">PropertyChange</code> events to determine changes in menu item selection (for example, when the user uses the arrow buttons or keys to go up or down within a menu).</p>
<p><span class="bold">Tracking Values of GUI Elements</span>: Use the <code class="codeph">AccessibleValue</code> support and Value <code class="codeph">PropertyChange</code> events to track the values of GUI elements like sliders and scroll bars.</p>
<p><span class="bold">Determining Selected Items</span>: Use the <code class="codeph">AccessibleSelection</code> support to determine which items are selected in containers that contain items such as lists and tables. This is more efficient than enumerating all of the children and examining their <code class="codeph">StateSet</code> attribute to see if the Selected value is among them.</p>
<p><span class="bold">Java Access Bridge Testing Tools</span>: The Java Access Bridge testing tools <a class="olink JSWOR-GUID-F70952CE-C8A1-4D1C-8277-DF8F8D6A6973" target="_blank" href="../tools/jaccessinspector.htm#JSWOR-GUID-F70952CE-C8A1-4D1C-8277-DF8F8D6A6973"><code class="codeph">jaccessinspector</code></a> and <a class="olink JSWOR-GUID-B451D421-D232-4031-8968-27C177E3566C" target="_blank" href="../tools/jaccesswalker.htm#JSWOR-GUID-B451D421-D232-4031-8968-27C177E3566C"><code class="codeph">jaccesswalker</code></a> are located in the Java <code>bin</code> directory.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment40">
<tr>
<td class="cellalignment47">
<table class="cellalignment50">
<tr>
<td class="cellalignment44"><a href="java-access-bridge-architecture.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment44"><a href="accessibility-properties.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment49">
<table class="cellalignment43">
<tr>
<td class="cellalignment44"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment44"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment44"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
