<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>The Java Scripting API</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This section introduces the Java Scripting API and describes how the Java Scripting API (defined by JSR 223) is used to embed scripts in your Java applications. It also provides a number of examples with Java classes, which demonstrate the features of the Java Scripting API." />
<meta name="dcterms.created" content="2018-03-13T08:08:08Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Java Platform, Standard Edition Java Scripting Programmer's Guide" />
<meta name="dcterms.identifier" content="E91079-01" />
<meta name="dcterms.isVersionOf" content="JSJSG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2015, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/javase/10/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="scripting-languages-and-java.htm" title="Previous" type="text/html" />
<link rel="Next" href="using-java-scripts.htm" title="Next" type="text/html" />
<link rel="alternate" href="JSJSG.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C4A6EB7C-0AEA-45EC-8662-099BDEFC361A"></a> <span id="PAGE" style="display:none;">5/6</span> <!-- End Header -->
<a id="JSJSG110"></a><a id="JSJSG109"></a>
<h1 id="JSJSG-GUID-C4A6EB7C-0AEA-45EC-8662-099BDEFC361A" class="sect1"><span class="enumeration_chapter">2</span> The Java Scripting API</h1>
<div>
<div><span>This section introduces the Java Scripting API and describes how the Java Scripting API (defined by JSR 223) is used to embed scripts in your Java applications. It also provides a number of examples with Java classes, which demonstrate the features of the Java Scripting API.</span></div>
<div class="section">
<p class="subhead1">Topics</p>
<ul style="list-style-type: disc;">
<li><a href="java-scripting-api.htm#GUID-6D94983D-97BF-4DD4-810D-7B15871510BA">The JavaScript Package</a></li>
<li><a href="java-scripting-api.htm#GUID-BB128CF4-E0AE-487D-AF6C-3507AB186455">How to Use the Java Scripting API to Embed Scripts</a></li>
</ul>
</div>
<!-- class="section" --></div>
<a id="JSJSG111"></a>
<div class="props_rev_3"><a id="GUID-6D94983D-97BF-4DD4-810D-7B15871510BA"></a>
<h2 id="JSJSG-GUID-6D94983D-97BF-4DD4-810D-7B15871510BA" class="sect2">The JavaScript Package</h2>
<div>
<p>The Java Scripting API consists of classes and interfaces from the <a href="https://docs.oracle.com/javase/10/docs/api/javax/script/package-summary.html" target="_blank"><code class="codeph">javax.script</code></a> package. It is a relatively small and simple package with the <code class="codeph">ScriptEngineManager</code> class as the starting point. A <code class="codeph">ScriptEngineManager</code> object can discover script engines through the JAR file service discovery mechanism, and instantiate <code class="codeph">ScriptEngine</code> objects that interpret scripts written in a specific scripting language.</p>
<p>The Nashorn engine is the default ECMAScript (JavaScript) engine bundled with the Java SE Development Kit (JDK). The Nashorn engine was developed fully in Java by Oracle as part of an OpenJDK project, <a href="http://openjdk.java.net/projects/nashorn/" target="_blank">Project Nashorn</a>.</p>
<p>Although Nashorn is the default ECMAScript engine used by the Java Scripting API, you can use any script engine compliant with JSR 223, or you can implement your own. This document does not cover the implementation of script engines compliant with JSR 223, but at the most basic level, you must implement the <code class="codeph">javax.script.ScriptEngine</code> and <code class="codeph">javax.script.ScriptEngineFactory</code> interfaces. The abstract class <code class="codeph">javax.script.AbstractScriptEngine</code> provides useful defaults for a few methods in the <code class="codeph">ScriptEngine</code> interface.</p>
</div>
</div>
<a id="JSJSG112"></a>
<div class="props_rev_3"><a id="GUID-BB128CF4-E0AE-487D-AF6C-3507AB186455"></a>
<h2 id="JSJSG-GUID-BB128CF4-E0AE-487D-AF6C-3507AB186455" class="sect2">How to Use the Java Scripting API to Embed Scripts</h2>
<div>
<div class="section">
<p class="subhead2">To use the Java Scripting API:</p>
<ol>
<li>
<p>Create a <code class="codeph">ScriptEngineManager</code> object.</p>
</li>
<li>
<p>Get a <code class="codeph">ScriptEngine</code> object from the manager.</p>
</li>
<li>
<p>Evaluate the script using the script engine's <code class="codeph">eval()</code> method.</p>
</li>
</ol>
</div>
<!-- class="section" --></div>
</div>
<a id="JSJSG113"></a>
<div class="props_rev_3"><a id="GUID-9E09719F-164D-4380-A585-72F53D9C5AFB"></a>
<h2 id="JSJSG-GUID-9E09719F-164D-4380-A585-72F53D9C5AFB" class="sect2">Java Scripting API Examples with Java Classes</h2>
<div>
<div class="section">
<p>The following examples show you how to use the Java Scripting API in Java. To keep the examples simple, exceptions are not handled. However, there are checked and runtime exceptions thrown by the Java Scripting API, and they should be properly handled. In every example, an instance of the <code class="codeph">ScriptEngineManager</code> class is used to request the Nashorn engine (an object of the <code class="codeph">ScriptEngine</code> class) using the <code class="codeph">getEngineByName()</code> method. If the engine with the specified name is not present, <code class="codeph">null</code> is returned. For more information about using the Nashorn engine, see the <span class="italic">Nashorn User's Guide</span>.</p>
<div class="infobox-note" id="GUID-9E09719F-164D-4380-A585-72F53D9C5AFB__GUID-221E2985-EFFC-445C-8ADF-498C9896B377">
<p class="notep1">Note:</p>
<p>Each <code class="codeph">ScriptEngine</code> object has its own variable scope; see <a href="java-scripting-api.htm#GUID-9E09719F-164D-4380-A585-72F53D9C5AFB__BABGBJBA">Using Multiple Scopes</a>.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Evaluating a Statement</p>
<p>In this example, the <code class="codeph">eval()</code> method is called on the script engine instance to execute JavaScript code from a <code class="codeph">String</code> object.</p>
<pre dir="ltr">
import javax.script.*;

public class EvalScript {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // evaluate JavaScript code
        engine.eval("print('Hello, World')");
    }
}
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Evaluating a Script File</p>
<p>In this example, the <code class="codeph">eval()</code> method takes in a <code class="codeph">FileReader</code> object that reads JavaScript code from a file named <code class="codeph">script.js</code>. By wrapping various input stream objects as readers, it is possible to execute scripts from files, URLs, and other resources.</p>
<pre dir="ltr">
import javax.script.*;

public class EvalFile {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // evaluate JavaScript code
        engine.eval(new java.io.FileReader("script.js"));
    }
}
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Exposing a Java Object as a Global Variable</p>
<p>In this example, a <code class="codeph">File</code> object is created and exposed to the engine as a global variable named <code class="codeph">file</code> using the <code class="codeph">put()</code> method. Then the <code class="codeph">eval()</code> method is called with JavaScript code that accesses the variable and calls the <code class="codeph">getAbsolutePath()</code> method.</p>
<div class="infobox-note" id="GUID-9E09719F-164D-4380-A585-72F53D9C5AFB__GUID-3C24B68A-CA4E-4755-AB84-ECCA84189C4F">
<p class="notep1">Note:</p>
<p>The syntax to access fields and call methods of Java objects exposed as variables depends on the scripting language. This example uses JavaScript syntax, which is similar to Java.</p>
</div>
<pre dir="ltr">
import javax.script.*;
import java.io.*;

public class ScriptVars {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // create File object
        File f = new File("test.txt");

        // expose File object as a global variable to the engine
        engine.put("file", f);

        // evaluate JavaScript code and access the variable
        engine.eval("print(file.getAbsolutePath())");
    }
}
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Invoking a Script Function</p>
<p>In this example, the <code class="codeph">eval()</code> method is called with JavaScript code that defines a function with one parameter. Then, an <code class="codeph">Invocable</code> object is created and its <code class="codeph">invokeFunction()</code> method is used to invoke the function.</p>
<div class="infobox-note" id="GUID-9E09719F-164D-4380-A585-72F53D9C5AFB__GUID-D3CB4753-CC44-45B4-97F6-63E4EBFA869C">
<p class="notep1">Note:</p>
<p>Not all script engines implement the <code class="codeph">Invocable</code> interface. This example uses the Nashorn engine, which can invoke functions in scripts that have previously been evaluated by this engine.</p>
</div>
<pre dir="ltr">
import javax.script.*;

public class InvokeScriptFunction {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // evaluate JavaScript code that defines a function with one parameter
        engine.eval("function hello(name) { print('Hello, ' + name) }");

        // create an Invocable object by casting the script engine object
        Invocable inv = (Invocable) engine;

        // invoke the function named "hello" with "Scripting!" as the argument
        inv.invokeFunction("hello", "Scripting!");
    }
}
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Invoking a Script Object's Method</p>
<p>In this example, the <code class="codeph">eval()</code> method is called with JavaScript code that defines an object with a method. This object is then exposed from the script to the Java application using the script engine's <code class="codeph">get()</code> method. Then, an <code class="codeph">Invocable</code> object is created, and its <code class="codeph">invokeMethod()</code> method is used to invoke the method defined for the script object.</p>
<div class="infobox-note" id="GUID-9E09719F-164D-4380-A585-72F53D9C5AFB__GUID-6ACD8BAC-A379-44FC-AD86-ABD9C328F189">
<p class="notep1">Note:</p>
<p>Not all script engines implement the <code class="codeph">Invocable</code> interface. This example uses the Nashorn engine, which can invoke methods in scripts that have previously been evaluated by this engine.</p>
</div>
<pre dir="ltr">
import javax.script.*;

public class InvokeScriptMethod {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // evaluate JavaScript code that defines an object with one method
        engine.eval("var obj = new Object()");
        engine.eval("obj.hello = function(name) { print('Hello, ' + name) }");

        // expose object defined in the script to the Java application
        Object obj = engine.get("obj");

        // create an Invocable object by casting the script engine object
        Invocable inv = (Invocable) engine;

        // invoke the method named "hello" on the object defined in the script
        // with "Script Method!" as the argument
        inv.invokeMethod(obj, "hello", "Script Method!");
    }
}
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Implementing a Java Interface with Script Functions</p>
<p>In this example, the <code class="codeph">eval()</code> method is called with JavaScript code that defines a function. Then, an <code class="codeph">Invocable</code> object is created, and its <code class="codeph">getInterface()</code> method is used to create a <code class="codeph">Runnable</code> interface object. The methods of the interface are implemented by script functions with matching names (in this case, the <code class="codeph">run()</code> function is used to implement the <code class="codeph">run()</code> method in the interface object). Finally, a new thread is started that runs the script function.</p>
<pre dir="ltr">
import javax.script.*;

public class ImplementRunnable {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // evaluate JavaScript code that defines a function with one parameter
        engine.eval("function run() { print('run() function called') }");

        // create an Invocable object by casting the script engine object
        Invocable inv = (Invocable) engine;

        // get Runnable interface object
        Runnable r = inv.getInterface(Runnable.class);

        // start a new thread that runs the script
        Thread th = new Thread(r);
        th.start();
        th.join();
    }
}
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Implementing a Java Interface with the Script Object's Methods</p>
<p>In this example, the <code class="codeph">eval()</code> method is called with JavaScript code that defines an object with a method. This object is then exposed from the script to the Java application using the script engine's <code class="codeph">get()</code> method. Then, an <code class="codeph">Invocable</code> object is created, and its <code class="codeph">getInterface()</code> method is used to create a <code class="codeph">Runnable</code> interface object. The methods of the interface are implemented by the script object's methods with matching names (in this case, the <code class="codeph">run</code> method of the <code class="codeph">obj</code> object is used to implement the <code class="codeph">run()</code> method in the interface object). Finally, a new thread is started that runs the script object's method.</p>
<pre dir="ltr">
import javax.script.*;

public class ImplementRunnableObject {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // evaluate JavaScript code that defines a function with one parameter
        engine.eval("var obj = new Object()")
        engine.eval("obj.run = function() { print('obj.run() method called') }");

        // expose object defined in the script to the Java application
        Object obj = engine.get("obj");

        // create an Invocable object by casting the script engine object
        Invocable inv = (Invocable) engine;

        // get Runnable interface object
        Runnable r = inv.getInterface(obj, Runnable.class);

        // start a new thread that runs the script
        Thread th = new Thread(r);
        th.start();
        th.join();
    }
}
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-9E09719F-164D-4380-A585-72F53D9C5AFB__BABGBJBA">
<p class="subhead2">Using Multiple Scopes</p>
<p>In this example, the script engine's <code class="codeph">put()</code> method is used to set the variable <code class="codeph">x</code> to a <code class="codeph">String</code> object <code class="codeph">hello</code>. Then, the <code class="codeph">eval()</code> method is used to print the variable in the default scope. Then, a different script context is defined, and its scope is used to set the same variable to a different value (a <code class="codeph">String</code> object <code class="codeph">world</code>). Finally, the variable is printed in the new script context that displays a different value.</p>
<p>A single scope is an instance of the <code class="codeph">javax.script.Bindings</code> interface. This interface is derived from the <code class="codeph">java.util.Map&lt;String, Object&gt;</code> interface. A scope is a set of name and value pairs where the name is a non-empty, non-null <code class="codeph">String</code> object. The <code class="codeph">javax.script.ScriptContext</code> interface supports multiple scopes with associated <code class="codeph">Bindings</code> for each scope. By default, every script engine has a default script context. The default script context has at least one scope represented by the static field <code class="codeph">ENGINE_SCOPE</code>. Various scopes supported by a script context are available through the <code class="codeph">getScopes()</code> method.</p>
<pre dir="ltr">
import javax.script.*;

public class MultipleScopes {
    public static void main(String[] args) throws Exception {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // set global variable
        engine.put("x","hello");

        // evaluate JavaScript code that prints the variable (x = "hello")
        engine.eval("print(x)");

        // define a different script context
        ScriptContext newContext = new SimpleScriptContext();
        newContext.setBindings(engine.createBindings(), ScriptContext.ENGINE_SCOPE);
        Bindings engineScope = newContext.getBindings(ScriptContext.ENGINE_SCOPE);

        // set the variable to a different value in another scope
        engineScope.put("x", "world");

        // evaluate the same code but in a different script context (x = "world")
        engine.eval("print(x)", newContext);

</pre></div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment23">
<tr>
<td class="cellalignment30">
<table class="cellalignment34">
<tr>
<td class="cellalignment27"><a href="scripting-languages-and-java.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment27"><a href="using-java-scripts.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2015, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment32">
<table class="cellalignment33">
<tr>
<td class="cellalignment27"><a href="http://docs.oracle.com/javase/10/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment27"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment27"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
