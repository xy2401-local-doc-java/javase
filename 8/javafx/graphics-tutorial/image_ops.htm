<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>10 Using the Image Ops API (Release 8)</title>
<meta name="description" content="This chapter introduces you to Image Ops, an API that enables you to read and write raw pixels within your JavaFX applications.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXGR.pdf">PDF</a> | <a href="../JFXGR.epub">ePub</a> | <a href="../JFXGR.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Working with JavaFX Graphics</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="javafx-image-ops.htm">Previous Page</a><a class="button" title="Next Page" href="samples-appendix.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="CIHFIEFJ" name="CIHFIEFJ" class="anchor"></a><a id="JFXGR238" name="JFXGR238" class="anchor"></a>
<h1 class="chapter"><span class="secnum">10</span> Using the Image Ops API</h1>
<a id="JFXGR239" name="JFXGR239" class="anchor"></a>
<p>This chapter introduces you to Image Ops, an API that enables you to read and write raw pixels within your JavaFX applications.</p>
<p>You will learn how to read pixel from images, write pixels to images, and create snapshots.</p>
<a id="JFXGR240" name="JFXGR240" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref50" name="sthref50" class="anchor"></a>
<h2 class="sect1">Overview of the Image Ops API</h2>
<p>The Image Ops API consists of the following classes/interfaces in the <a href="../api/javafx/scene/image/package-summary.html"><code>javafx.scene.image</code></a> package:</p>
<ul>
<li>
<p><code>Image</code>: Represents a graphical image. This class provides a <code>PixelReader</code> for reading pixels directly from an image.</p>
</li>
<li>
<p><code>WritableImage</code>: A subclass of <code>Image</code>. This class provides a <code>PixelWriter</code> for writing pixels directly to an image. A <code>WritableImage</code> is initially created empty (transparent) until you write pixels to it.</p>
</li>
<li>
<p><code>PixelReader</code>: Interface that defines methods for retrieving pixel data from an Image or other surface that contains pixels.</p>
</li>
<li>
<p><code>PixelWriter</code>: Interface that defines methods for writing pixel data to a <code>WritableImage</code> or other surface that contains writable pixels.</p>
</li>
<li>
<p><code>PixelFormat</code>: Defines the layout of data for a pixel of a given format.</p>
</li>
<li>
<p><code>WritablePixelFormat</code>: A subclass of <code>PixelFormat</code>, representing a pixel format that can store full colors. It can be used as a destination format to write pixel data from an arbitrary image.</p>
</li>
</ul>
<p>The following sections demonstrate this API with examples that you can compile and run.</p>
</div>
<!-- class="sect1" -->
<a id="JFXGR241" name="JFXGR241" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref51" name="sthref51" class="anchor"></a>
<h2 class="sect1">Reading Pixels From Images</h2>
<p>You may already be familiar with the <a href="../api/javafx/scene/image/Image.html"><code>javafx.scene.image.Image</code></a> class, which (along with <code>ImageView</code>) is used in JavaFX applications that display images. The following example demonstrates how to display an image by loading the JavaFX logo from oracle.com and adding it to the JavaFX scene graph.</p>
<div class="example"><a id="JFXGR242" name="JFXGR242" class="anchor"></a><a id="sthref52" name="sthref52" class="anchor"></a>
<p class="titleinexample">Example 10-1 Loading and Displaying an Image</p>
<pre xml:space="preserve" class="oac_no_warn">package imageopstest;
 
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
 
public class ImageOpsTest extends Application {
    
    @Override
    public void start(Stage primaryStage) {
     
        // Create Image and ImageView objects
        Image image = new Image("http://docs.oracle.com/javafx/"
        + "javafx/images/javafx-documentation.png");
        ImageView imageView = new ImageView();
        imageView.setImage(image);
      
        // Display image on screen
        StackPane root = new StackPane();
        root.getChildren().add(imageView);
        Scene scene = new Scene(root, 300, 250);
        primaryStage.setTitle("Image Read Test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
 
    public static void main(String[] args) {
        launch(args);
    }
}
</pre></div>
<!-- class="example" -->
<p>Running this program will produce the image shown in <a href="#BABIIIIB">Figure 10-1</a>.</p>
<div class="figure"><a id="BABIIIIB" name="BABIIIIB" class="anchor"></a><a id="JFXGR243" name="JFXGR243" class="anchor"></a>
<p class="titleinfigure">Figure 10-1 Displaying an Image</p>
<img width="316" height="288" src="img/image-read-test.png" alt="Description of Figure 10-1 follows" title="Description of Figure 10-1 follows" longdesc="img_text/image-read-test.htm" /><br />
<a id="sthref53" name="sthref53" href="img_text/image-read-test.htm">Description of "Figure 10-1 Displaying an Image"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Now, let's modify this code to read <code>Color</code> information directly from the pixels. You can do this by invoking the <code>getPixelReader()</code> method, and then using the <code>getColor(x,y)</code> method of the returned <code>PixelReader</code> object to obtain the pixel's color at the specified coordinates.</p>
<div class="example"><a id="JFXGR244" name="JFXGR244" class="anchor"></a><a id="sthref54" name="sthref54" class="anchor"></a>
<p class="titleinexample">Example 10-2 Reading Color Information from Pixels</p>
<pre xml:space="preserve" class="oac_no_warn">package imageopstest;
 
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.PixelReader;
import javafx.scene.paint.Color;
 
public class ImageOpsTest extends Application {
    
    @Override
    public void start(Stage primaryStage) {
     
        // Create Image and ImageView objects
        Image image = new Image("http://docs.oracle.com/javafx/"
        + "javafx/images/javafx-documentation.png");
        ImageView imageView = new ImageView();
        imageView.setImage(image);
       
        // Obtain PixelReader
        PixelReader pixelReader = image.getPixelReader();
        System.out.println("Image Width: "+image.getWidth());
        System.out.println("Image Height: "+image.getHeight());
        System.out.println("Pixel Format: "+pixelReader.getPixelFormat());
        
        // Determine the color of each pixel in the image
        for (int readY = 0; readY &lt; image.getHeight(); readY++) {
            for (int readX = 0; readX &lt; image.getWidth(); readX++) {
                Color color = pixelReader.getColor(readX, readY);
                System.out.println("\nPixel color at coordinates ("
                        + readX + "," + readY + ") "
                        + color.toString());
                System.out.println("R = " + color.getRed());
                System.out.println("G = " + color.getGreen());
                System.out.println("B = " + color.getBlue());
                System.out.println("Opacity = " + color.getOpacity());
                System.out.println("Saturation = " + color.getSaturation());
            }
        }
           
        // Display image on screen
        StackPane root = new StackPane();
        root.getChildren().add(imageView);
        Scene scene = new Scene(root, 300, 250);
        primaryStage.setTitle("Image Read Test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
 
    public static void main(String[] args) {
        launch(args);
    }
}
</pre></div>
<!-- class="example" -->
<p>This version uses nested for loops (that invoke the <code>getColor</code> method) to obtain color information from every pixel in the image. It reads in pixels one at a time, starting in the upper left corner (0,0) and progressing across the image from left to right. The Y coordinate increments only after an entire row has been read. Information about each pixel (color values, opacity and saturation values etc.) is then printed to standard output, proving that the read operations are working correctly.</p>
<p><code>.</code><code>.. // beginning of output omitted</code></p>
<p><code>Pixel color at</code> <code>coordinates (117,27) 0x95a7b4ff</code></p>
<p><code>R = 0.5843137502670288</code></p>
<p><code>G = 0.6549019813537598</code></p>
<p><code>B = 0.7058823704719543</code></p>
<p><code>Opacity = 1.0</code></p>
<p><code>Saturation = 0.17222220767979304</code></p>
<p><code>Pixel color at coordinates (118,27) 0x2d5169ff</code></p>
<p><code>R = 0.1764705926179886</code></p>
<p><code>G = 0.3176470696926117</code></p>
<p><code>B = 0.4117647111415863</code></p>
<p><code>Opacity = 1.0</code></p>
<p><code>Saturation = 0.5714285662587809</code></p>
<p><code>... // remainder of output omitted</code></p>
<p>You may be tempted to try modifying the color of each pixel and writing that to the screen. But keep in mind that Image objects are read-only; to write new data, you need an instance of <code>WritableImage</code> instead.</p>
</div>
<!-- class="sect1" -->
<a id="JFXGR245" name="JFXGR245" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref55" name="sthref55" class="anchor"></a>
<h2 class="sect1">Writing Pixels to Images</h2>
<p>Now let's modify this demo to brighten each pixel, then write the modified result to a <code>WritableImage</code> object.</p>
<div class="example"><a id="JFXGR246" name="JFXGR246" class="anchor"></a><a id="sthref56" name="sthref56" class="anchor"></a>
<p class="titleinexample">Example 10-3 Writing to a WritableImage</p>
<pre xml:space="preserve" class="oac_no_warn">package imageopstest;
 
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.PixelReader;
import javafx.scene.image.PixelWriter;
import javafx.scene.paint.Color;
import javafx.scene.image.WritableImage;
 
public class ImageOpsTest extends Application {
    
    @Override
    public void start(Stage primaryStage) {
     
        // Create Image and ImageView objects
        Image image = new Image("http://docs.oracle.com/javafx/"
        + "javafx/images/javafx-documentation.png");
        ImageView imageView = new ImageView();
        imageView.setImage(image);
       
        // Obtain PixelReader
        PixelReader pixelReader = image.getPixelReader();
        System.out.println("Image Width: "+image.getWidth());
        System.out.println("Image Height: "+image.getHeight());
        System.out.println("Pixel Format: "+pixelReader.getPixelFormat());
        
        // Create WritableImage
         WritableImage wImage = new WritableImage(
                 (int)image.getWidth(),
                 (int)image.getHeight());
         PixelWriter pixelWriter = wImage.getPixelWriter();
       
        // Determine the color of each pixel in a specified row
        for(int readY=0;readY&lt;image.getHeight();readY++){
            for(int readX=0; readX&lt;image.getWidth();readX++){
                Color color = pixelReader.getColor(readX,readY);
                System.out.println("\nPixel color at coordinates ("+
                        readX+","+readY+") "
                        +color.toString());
                System.out.println("R = "+color.getRed());
                System.out.println("G = "+color.getGreen());
                System.out.println("B = "+color.getBlue());
                System.out.println("Opacity = "+color.getOpacity());
                System.out.println("Saturation = "+color.getSaturation());
                
                // Now write a brighter color to the PixelWriter.
                color = color.brighter();
                pixelWriter.setColor(readX,readY,color);
            }
        }
        
        // Display image on screen
        imageView.setImage(wImage);
        StackPane root = new StackPane();
        root.getChildren().add(imageView);
        Scene scene = new Scene(root, 300, 250);
        primaryStage.setTitle("Image Write Test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
 
    public static void main(String[] args) {
        launch(args);
    }
}
</pre></div>
<!-- class="example" -->
<p>This version creates a <code>WritableImage</code> initialized to the same width and height as the JavaFX logo. After obtaining a <code>PixelWriter</code> (for writing pixel data to the new image), the code invokes the <code>brighter()</code> method (to lighten the shade of the current pixel's color), then writes the data to the new image by invoking <code>pixelWriter.setColor(readX,readY,Color)</code>.</p>
<p><a href="#BABBJGFG">Figure 10-2</a> shows the result of this process.</p>
<div class="figure"><a id="BABBJGFG" name="BABBJGFG" class="anchor"></a><a id="JFXGR247" name="JFXGR247" class="anchor"></a>
<p class="titleinfigure">Figure 10-2 A Brighter Logo, Stored in a WritableImage Object</p>
<img width="316" height="288" src="img/image-write-test.png" alt="Description of Figure 10-2 follows" title="Description of Figure 10-2 follows" longdesc="img_text/image-write-test.htm" /><br />
<a id="sthref57" name="sthref57" href="img_text/image-write-test.htm">Description of "Figure 10-2 A Brighter Logo, Stored in a WritableImage Object"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="JFXGR248" name="JFXGR248" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref58" name="sthref58" class="anchor"></a>
<h2 class="sect1">Writing Images with Byte Arrays and PixelFormats</h2>
<p>The demos so far have successfully obtained and modified pixel colors, but the code was still relatively simple (and not necessarily optimal), compared to what the API is capable of. <a href="#BABCHBCG">Example 10-4</a> creates a new demo that writes pixels a rectangle at a time, using a <code>PixelFormat</code> to specify how the pixel data is stored. This version also displays the image data on a <code>Canvas</code>, instead of an <code>ImageView</code>. (See <a href="canvas.htm#BCFGGJIA">Working with the Canvas API</a> for more information about the <code>Canvas</code> class.)</p>
<div class="example"><a id="BABCHBCG" name="BABCHBCG" class="anchor"></a><a id="JFXGR249" name="JFXGR249" class="anchor"></a>
<p class="titleinexample">Example 10-4 Writing Rectangles to a Canvas</p>
<pre xml:space="preserve" class="oac_no_warn">package imageopstest;
 
import java.nio.ByteBuffer;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.PixelFormat;
import javafx.scene.image.PixelWriter;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
 
public class ImageOpsTest extends Application {
 
    // Image Data
    private static final int IMAGE_WIDTH = 10;
    private static final int IMAGE_HEIGHT = 10;
    private byte imageData[] = 
        new byte[IMAGE_WIDTH * IMAGE_HEIGHT * 3];
    
    // Drawing Surface (Canvas)
    private GraphicsContext gc;
    private Canvas canvas;
    private Group root;
 
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("PixelWriter Test");
        root = new Group();
        canvas = new Canvas(200, 200);
        canvas.setTranslateX(100);
        canvas.setTranslateY(100);
        gc = canvas.getGraphicsContext2D();
        createImageData();
        drawImageData();
        primaryStage.setScene(new Scene(root, 400, 400));
        primaryStage.show();
 
    }
 
    private void createImageData() {
        int i = 0;
        for (int y = 0; y &lt; IMAGE_HEIGHT; y++) {
            int r = y * 255 / IMAGE_HEIGHT;
            for (int x = 0; x &lt; IMAGE_WIDTH; x++) {
                int g = x * 255 / IMAGE_WIDTH;
                imageData[i] = (byte) r;
                imageData[i + 1] = (byte) g;
                i += 3;
            }
        }
    }
 
    private void drawImageData() {
        boolean on = true;
        PixelWriter pixelWriter = gc.getPixelWriter();
        PixelFormat&lt;ByteBuffer&gt; pixelFormat = PixelFormat.getByteRgbInstance();
        for (int y = 50; y &lt; 150; y += IMAGE_HEIGHT) {
            for (int x = 50; x &lt; 150; x += IMAGE_WIDTH) {
                if (on) {
                    pixelWriter.setPixels(x, y, IMAGE_WIDTH,
                            IMAGE_HEIGHT, pixelFormat, imageData, 
                            0, IMAGE_WIDTH * 3);
                }
                on = !on;
            }
            on = !on;
        }
 
        // Add drop shadow effect
        gc.applyEffect(new DropShadow(20, 20, 20, Color.GRAY));
        root.getChildren().add(canvas);
    }
}
</pre></div>
<!-- class="example" -->
<div class="figure"><a id="JFXGR250" name="JFXGR250" class="anchor"></a><a id="sthref59" name="sthref59" class="anchor"></a>
<p class="titleinfigure">Figure 10-3 Writing Pixels to a Canvas</p>
<img width="416" height="438" src="img/imagetest.png" alt="Description of Figure 10-3 follows" title="Description of Figure 10-3 follows" longdesc="img_text/imagetest.htm" /><br />
<a id="sthref60" name="sthref60" href="img_text/imagetest.htm">Description of "Figure 10-3 Writing Pixels to a Canvas"</a><br />
<br /></div>
<!-- class="figure" -->
<p>This demo does not read data from an existing image; it creates a new <code>WritableImage</code> object entirely from scratch. It draws several rows of multi-colored 10x10 rectangles, the color data for which is stored in an array of bytes representing the RGB values of each pixel.</p>
<p>Of particular interest are the private methods <code>createImageData</code> and <code>drawImageData</code>. The <code>createImageData</code> method sets the RGB values for the colors that appear in each 10x10 rectangle:</p>
<div class="example"><a id="JFXGR251" name="JFXGR251" class="anchor"></a><a id="sthref61" name="sthref61" class="anchor"></a>
<p class="titleinexample">Example 10-5 Setting the RGB Values for Pixels</p>
<pre xml:space="preserve" class="oac_no_warn">...
private void createImageData() {
    int i = 0;
    for (int y = 0; y &lt; IMAGE_HEIGHT; y++) {
        System.out.println("y: "+y);
        int r = y * 255 / IMAGE_HEIGHT;
        for (int x = 0; x &lt; IMAGE_WIDTH; x++) {
            System.out.println("\tx: "+x);
            int g = x * 255 / IMAGE_WIDTH;
            imageData[i] = (byte) r;
            imageData[i + 1] = (byte) g;
            System.out.println("\t\tR: "+(byte)r);
            System.out.println("\t\tG: "+(byte)g);
            i += 3;
        }
    }
}
...
</pre></div>
<!-- class="example" -->
<p>This method sets the R and G values for each pixel of the rectangle (B is always 0). These values are stored in the <code>imageData</code> byte array, which holds a total of 300 individual bytes. (There are 100 pixels in each 10x10 rectangle, and each pixel has R, G, and B values, resulting in 300 bytes total).</p>
<p>With this data in place, the <code>drawImageData</code> method then renders the pixels of each rectangle to the screen:</p>
<div class="example"><a id="JFXGR252" name="JFXGR252" class="anchor"></a><a id="sthref62" name="sthref62" class="anchor"></a>
<p class="titleinexample">Example 10-6 Rendering the Pixels</p>
<pre xml:space="preserve" class="oac_no_warn">private void drawImageData() {
    boolean on = true;
    PixelWriter pixelWriter = gc.getPixelWriter();
    PixelFormat&lt;ByteBuffer&gt; pixelFormat = PixelFormat.getByteRgbInstance();
    for (int y = 50; y &lt; 150; y += IMAGE_HEIGHT) {
        for (int x = 50; x &lt; 150; x += IMAGE_WIDTH) {
            if (on) {
                pixelWriter.setPixels(x, y, IMAGE_WIDTH,
                    IMAGE_HEIGHT, pixelFormat, imageData, 0, IMAGE_WIDTH * 3);
            }
            on = !on;
        }
        on = !on;
    }
}
</pre></div>
<!-- class="example" -->
<p>Here, the <code>PixelWriter</code> is obtained from the <code>Canvas</code>, and a new <code>PixelFormat</code> is instantiated, specifying that the byte array represents RGB values. The pixels are then written an entire rectangle at a time by passing this data to the <code>PixelWriter</code>'s <code>setPixels</code> method.</p>
</div>
<!-- class="sect1" -->
<a id="JFXGR253" name="JFXGR253" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref63" name="sthref63" class="anchor"></a>
<h2 class="sect1">Creating a Snapshot</h2>
<p>The <code>javafx.scene.Scene</code> class also provides a snapshot method that returns a <code>WritableImage</code> of everything currently shown in your application's scene. When used in conjunction with Java's <code>ImageIO</code> class, you can save the snapshot to the filesystem.</p>
<div class="example"><a id="JFXGR254" name="JFXGR254" class="anchor"></a><a id="sthref64" name="sthref64" class="anchor"></a>
<p class="titleinexample">Example 10-7 Creating and Saving a Snapshot</p>
<pre xml:space="preserve" class="oac_no_warn">package imageopstest;
 
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import javafx.application.Application;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.PixelFormat;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javax.imageio.ImageIO;
 
public class ImageOpsTest extends Application {
 
    // Image Data
    private static final int IMAGE_WIDTH = 10;
    private static final int IMAGE_HEIGHT = 10;
    private byte imageData[] = new byte[IMAGE_WIDTH * IMAGE_HEIGHT * 3];
    // Drawing Surface (Canvas)
    private GraphicsContext gc;
    private Canvas canvas;
    private Group root;
 
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("PixelWriter Test");
        root = new Group();
        canvas = new Canvas(200, 200);
        canvas.setTranslateX(100);
        canvas.setTranslateY(100);
        gc = canvas.getGraphicsContext2D();
        createImageData();
        drawImageData();
 
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
 
        //Take snapshot of the scene
        WritableImage writableImage = scene.snapshot(null);
 
        // Write snapshot to file system as a .png image
        File outFile = new File("imageops-snapshot.png");
        try {
            ImageIO.write(SwingFXUtils.fromFXImage(writableImage, null),
                    "png", outFile);
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }
 
    private void createImageData() {
        int i = 0;
        for (int y = 0; y &lt; IMAGE_HEIGHT; y++) {
            System.out.println("y: " + y);
            int r = y * 255 / IMAGE_HEIGHT;
            for (int x = 0; x &lt; IMAGE_WIDTH; x++) {
                System.out.println("\tx: " + x);
                int g = x * 255 / IMAGE_WIDTH;
                imageData[i] = (byte) r;
                imageData[i + 1] = (byte) g;
                System.out.println("\t\tR: " + (byte) r);
                System.out.println("\t\tG: " + (byte) g);
                i += 3;
            }
        }
        System.out.println("imageData.lengthdrawImageData: " + imageData.length);
    }
 
    private void drawImageData() {
        boolean on = true;
        PixelWriter pixelWriter = gc.getPixelWriter();
        PixelFormat&lt;ByteBuffer&gt; pixelFormat = PixelFormat.getByteRgbInstance();
        for (int y = 50; y &lt; 150; y += IMAGE_HEIGHT) {
            for (int x = 50; x &lt; 150; x += IMAGE_WIDTH) {
                if (on) {
                    pixelWriter.setPixels(x, y, IMAGE_WIDTH,
                    IMAGE_HEIGHT, pixelFormat, 
                    imageData, 0, IMAGE_WIDTH * 3);
                }
                on = !on;
            }
            on = !on;
        }
 
        // Add drop shadow effect
        gc.applyEffect(new DropShadow(20, 20, 20, Color.GRAY));
        root.getChildren().add(canvas);
    }
}
</pre></div>
<!-- class="example" -->
<p>The change to be aware of is the following modification to the start method, as shown in <a href="#BABCIIEC">Example 10-8</a>:</p>
<div class="example"><a id="BABCIIEC" name="BABCIIEC" class="anchor"></a><a id="JFXGR255" name="JFXGR255" class="anchor"></a>
<p class="titleinexample">Example 10-8 The Modified Start Method</p>
<pre xml:space="preserve" class="oac_no_warn">...
 
Scene scene = new Scene(root, 400, 400);
primaryStage.setScene(scene);
primaryStage.show();
 
//Take snapshot of the scene
WritableImage writableImage = scene.snapshot(null);
 
// Write snapshot to file system as a .png image
File outFile = new File("imageops-snapshot.png");
try {
    ImageIO.write(SwingFXUtils.fromFXImage(writableImage, null),
        "png", outFile);
} catch (IOException ex) {
    System.out.println(ex.getMessage());
}
...
</pre></div>
<!-- class="example" -->
<p>As you can see, invoking <code>scene.snapshot(null)</code> creates a new snapshot and assigns it to the newly constructed <code>WritableImage</code>. Then (with the help of <code>ImageIO</code> and <code>SwingFXUtils</code>) this image is written to the file system as a<code>.png</code> file.</p>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Working with JavaFX Graphics</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">About This Tutorial</a></li>
        <li><a href="preface.htm#sthref4">Audience</a></li>
        <li><a href="preface.htm#sthref5">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref7">Related Documents</a></li>
        <li><a href="preface.htm#sthref8">Conventions</a></li>
      </ul>
    </li>
    <li><a href="javafx-3d-graphics.htm#CHDGHHEJ">Part I Getting Started with JavaFX 3D Graphics</a>
    <ul>
    <li><a href="overview-3d.htm#JFXGR102">1 Overview</a>
      <ul>
        <li><a href="overview-3d.htm#sthref9">Sample of 3D Graphics Use Cases</a></li>
        <li><a href="overview-3d.htm#sthref11">3D Feature in JavaFX 2.x Releases</a></li>
      </ul>
    </li>
    <li><a href="shape3d.htm#JFXGR103">2 Shape3D</a>
      <ul>
        <li><a href="shape3d.htm#JFXGR160">Pre-defined Shapes</a></li>
        <li><a href="shape3d.htm#JFXGR163">User-Defined Shapes</a></li>
      </ul>
    </li>
    <li><a href="camera.htm#JFXGR104">3 Camera</a>
      <ul>
        <li><a href="camera.htm#sthref13">Perspective Camera</a>
          <ul>
          <li><a href="camera.htm#sthref14">Field of View</a></li>
          <li><a href="camera.htm#sthref15">Clipping Planes</a></li>
          <li><a href="camera.htm#sthref16">Y-down versus Y-up</a></li>
          <li><a href="camera.htm#sthref17">Sample Code Using PerspectiveCamera</a></li>
          </ul>
        </li>
      </ul>
    </li>
    <li><a href="subscene.htm#JFXGR105">4 SubScene</a>
      <ul>
        <li><a href="subscene.htm#sthref18">Creating a SubScene</a></li>
        <li><a href="subscene.htm#sthref19">Sample Use of SubScene</a></li>
      </ul>
    </li>
    <li><a href="light.htm#JFXGR106">5 Light</a>
      <ul>
        <li><a href="light.htm#sthref20">Creating and Using Light</a></li>
      </ul>
    </li>
    <li><a href="material.htm#JFXGR107">6 Material</a></li>
    <li><a href="picking.htm#JFXGR108">7 Picking</a>
      <ul>
        <li><a href="picking.htm#sthref21">Creating a PickResult Object</a></li>
        <li><a href="picking.htm#sthref22">Methods for the PickResult Object</a></li>
        <li><a href="picking.htm#sthref24">Sample Use of PickResult</a></li>
      </ul>
    </li>
    <li><a href="sampleapp3d.htm#JFXGR109">8 Building a 3D Sample Application</a>
      <ul>
        <li><a href="sampleapp3d.htm#JFXGR270">Prepare for this Tutorial</a></li>
        <li><a href="sampleapp3d.htm#JFXGR188">Create the Project</a></li>
        <li><a href="sampleapp3d.htm#JFXGR189">Create the Scene</a></li>
        <li><a href="sampleapp3d.htm#JFXGR192">Set Up the Camera</a></li>
        <li><a href="sampleapp3d.htm#JFXGR198">Build the Axes</a></li>
        <li><a href="sampleapp3d.htm#JFXGR204">Build the Molecule</a></li>
        <li><a href="sampleapp3d.htm#JFXGR209">Add Camera Viewing Controls</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="javafx-canvas.htm#sthref29">Part II JavaFX Canvas</a>
    <ul>
    <li><a href="canvas.htm#JFXGR214">9 Working with the Canvas API</a>
      <ul>
        <li><a href="canvas.htm#sthref30">Overview</a></li>
        <li><a href="canvas.htm#sthref31">Drawing Basic Shapes</a></li>
        <li><a href="canvas.htm#sthref33">Applying Gradients and Shadows</a></li>
        <li><a href="canvas.htm#sthref38">Interacting with the User</a></li>
        <li><a href="canvas.htm#sthref42">Creating a Simple Layer System</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="javafx-image-ops.htm#sthref49">Part III JavaFX Image Ops</a>
    <ul>
    <li><a class="selected" href="image_ops.htm#JFXGR238">10 Using the Image Ops API</a>
      <ul>
        <li><a href="image_ops.htm#sthref50">Overview of the Image Ops API</a></li>
        <li><a href="image_ops.htm#sthref51">Reading Pixels From Images</a></li>
        <li><a href="image_ops.htm#sthref55">Writing Pixels to Images</a></li>
        <li><a href="image_ops.htm#sthref58">Writing Images with Byte Arrays and PixelFormats</a></li>
        <li><a href="image_ops.htm#sthref63">Creating a Snapshot</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="samples-appendix.htm#JFXGR274">Part IV Source Code for the Graphics Tutorials</a>
    <ul>
    <li><a href="msaaapp-code.htm#JFXGR277">A MSAAApp Code</a>
      <ul>
        <li><a href="msaaapp-code.htm#JFXGR279">MSAAApp.java</a></li>
      </ul>
    </li>
    <li><a href="sampleapp3d-code.htm#JFXGR280">B 3D MoleculeSampleApp Code</a>
      <ul>
        <li><a href="sampleapp3d-code.htm#JFXGR282">Xform.java</a></li>
        <li><a href="sampleapp3d-code.htm#JFXGR283">buildMolecule()</a></li>
        <li><a href="sampleapp3d-code.htm#JFXGR284">handleMouse()</a></li>
        <li><a href="sampleapp3d-code.htm#JFXGR285">handleKeyboard()</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="javafx-image-ops.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="samples-appendix.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2008, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
