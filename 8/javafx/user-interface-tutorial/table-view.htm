<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>13 Table View (Release 8)</title>
<meta name="description" content="In this chapter, you learn how to perform basic operations with tables in JavaFX applications, such as adding a table, populating the table with data, and editing table rows.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXUI.pdf">PDF</a> | <a href="../JFXUI.epub">ePub</a> | <a href="../JFXUI.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Working with JavaFX UI Components</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="list-view.htm">Previous Page</a><a class="button" title="Next Page" href="tree-view.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="CJAGAAEE" name="CJAGAAEE" class="anchor"></a><a id="JFXUI262" name="JFXUI262" class="anchor"></a> <a id="CJABIEED" name="CJABIEED" class="anchor"></a>
<h1 class="chapter"><span class="secnum">13</span> Table View</h1>
<a id="JFXUI531" name="JFXUI531" class="anchor"></a>
<p>In this chapter, you learn how to perform basic operations with tables in JavaFX applications, such as adding a table, populating the table with data, and editing table rows.</p>
<p>Several classes in the JavaFX SDK API are designed to represent data in a tabular form. The most important classes for creating tables in JavaFX applications are <code>TableView</code>, <code>TableColumn</code>, and <code>TableCell</code>. You can populate a table by implementing the data model and by applying a cell factory.</p>
<p>The table classes provide built-in capabilities to sort data in columns and to resize columns when necessary.</p>
<p><a href="#CJADHEAG">Figure 13-1</a> shows a typical table representing contact information from an address book.</p>
<div class="figure"><a id="CJADHEAG" name="CJADHEAG" class="anchor"></a><a id="JFXUI263" name="JFXUI263" class="anchor"></a>
<p class="titleinfigure">Figure 13-1 Table Sample</p>
<img width="454" height="553" src="img/table-sample.png" alt="Address Book" title="Address Book" longdesc="img_text/table-sample.htm" /><br />
<a id="sthref103" name="sthref103" href="img_text/table-sample.htm">Description of "Figure 13-1 Table Sample"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="JFXUI264" name="JFXUI264" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref104" name="sthref104" class="anchor"></a>
<h2 class="sect1">Creating a Table</h2>
<p>The code fragment in <a href="#CJAFBAHI">Example 13-1</a> creates an empty table with three columns and adds it to the application scene.</p>
<div class="example"><a id="CJAFBAHI" name="CJAFBAHI" class="anchor"></a><a id="JFXUI265" name="JFXUI265" class="anchor"></a>
<p class="titleinexample">Example 13-1 Adding a Table</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
 
public class TableViewSample extends Application {
 
    private final TableView table = new TableView();
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(300);
        stage.setHeight(500);
 
        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));
 
        table.setEditable(true);
 
        TableColumn firstNameCol = new TableColumn("First Name");
        TableColumn lastNameCol = new TableColumn("Last Name");
        TableColumn emailCol = new TableColumn("Email");
        
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);
 
        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table);
 
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
 
        stage.setScene(scene);
        stage.show();
    }
}
</pre></div>
<!-- class="example" -->
<p>The table control is created by instantiating the <code>TableView</code> class. In <a href="#CJAFBAHI">Example 13-1</a>, it is added to the <code>VBox</code> layout container, however, you can add it directly to the application scene.</p>
<p><a href="#CJAFBAHI">Example 13-1</a> defines three columns to store the following information in an address book: a contact's first name and last name, and an email address. The columns are created by using the <code>TableColumn</code> class.</p>
<p>The <code>getColumns</code> method of the <code>TableView</code> class adds the previously created columns to the table. In your applications, you can use this method to dynamically add and remove columns.</p>
<p>Compiling and running this application produces the output shown in <a href="#CJAHCBHE">Figure 13-2</a>.</p>
<div class="figure"><a id="CJAHCBHE" name="CJAHCBHE" class="anchor"></a><a id="JFXUI266" name="JFXUI266" class="anchor"></a>
<p class="titleinfigure">Figure 13-2 Table Without Data</p>
<img width="302" height="504" src="img/table-empty.png" alt="An empty table" title="An empty table" longdesc="img_text/table-empty.htm" /><br />
<a id="sthref105" name="sthref105" href="img_text/table-empty.htm">Description of "Figure 13-2 Table Without Data"</a><br />
<br /></div>
<!-- class="figure" -->
<p>You can manage visibility of the columns by calling the <code>setVisible</code> method. For example, if the logic of your application requires hiding user email addresses, you can implement this task as follows: <code>emailCol.setVisible(false)</code>.</p>
<p>When the structure of your data requires a more complicated representation, you can create nested columns.</p>
<p>For example, suppose that the contacts in the address book have two email accounts. Then you need two columns to show the primary and the secondary email addresses. Create two subcolumns, and call the <code>getColumns</code> method on <code>emailCol</code> as shown in <a href="#CJABHBEH">Example 13-2</a>.</p>
<div class="example"><a id="CJABHBEH" name="CJABHBEH" class="anchor"></a><a id="JFXUI337" name="JFXUI337" class="anchor"></a>
<p class="titleinexample">Example 13-2 Creating Nested Columns</p>
<pre xml:space="preserve" class="oac_no_warn">TableColumn firstEmailCol = new TableColumn("Primary");
TableColumn secondEmailCol = new TableColumn("Secondary");

emailCol.getColumns().addAll(firstEmailCol, secondEmailCol);
</pre></div>
<!-- class="example" -->
<p>After you have added these lines to <a href="#CJAFBAHI">Example 13-1</a>, and compiled and run the application code, the table appears as shown in <a href="#CJAFIDEI">Figure 13-3</a>.</p>
<div class="figure"><a id="CJAFIDEI" name="CJAFIDEI" class="anchor"></a><a id="JFXUI338" name="JFXUI338" class="anchor"></a>
<p class="titleinfigure">Figure 13-3 Table with Nested Columns</p>
<img width="364" height="500" src="img/table-nested.png" alt="Table with nested columns" title="Table with nested columns" longdesc="img_text/table-nested.htm" /><br />
<a id="sthref106" name="sthref106" href="img_text/table-nested.htm">Description of "Figure 13-3 Table with Nested Columns"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Although the table is added to the application, the standard caption "No content in table" appears, because no data is defined. Instead of showing this caption, you can use the <code>setPlaceholder</code> method to specify a <code>Node</code> object to appear in an empty table.</p>
</div>
<!-- class="sect1" -->
<a id="JFXUI267" name="JFXUI267" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref107" name="sthref107" class="anchor"></a>
<h2 class="sect1">Defining the Data Model</h2>
<p>When you create a table in a JavaFX application, it is a best practice to implement a class that defines the data model and provides methods and fields to further work with the table. <a href="#CJADAHAH">Example 13-3</a> creates the <code>Person</code> class to define data in an address book.</p>
<div class="example"><a id="CJADAHAH" name="CJADAHAH" class="anchor"></a><a id="JFXUI268" name="JFXUI268" class="anchor"></a>
<p class="titleinexample">Example 13-3 Creating the Person Class</p>
<pre xml:space="preserve" class="oac_no_warn">public static class Person {
    private final SimpleStringProperty firstName;
    private final SimpleStringProperty lastName;
    private final SimpleStringProperty email;
 
    private Person(String fName, String lName, String email) {
        this.firstName = new SimpleStringProperty(fName);
        this.lastName = new SimpleStringProperty(lName);
        this.email = new SimpleStringProperty(email);
    }
 
    public String getFirstName() {
        return firstName.get();
    }
    public void setFirstName(String fName) {
        firstName.set(fName);
    }
        
    public String getLastName() {
        return lastName.get();
    }
    public void setLastName(String fName) {
        lastName.set(fName);
    }
    
    public String getEmail() {
        return email.get();
    }
    public void setEmail(String fName) {
        email.set(fName);
    }
        
}
</pre></div>
<!-- class="example" -->
<p>The <code>firstName</code>, <code>lastName</code>, and <code>email</code> string properties are created to enable the referencing of a particular data element.</p>
<p>Additionally, the <code>get</code> and <code>set</code> methods are provided for each data element. Thus, for example, the <code>getFirstName</code> method returns the value of the <code>firstName</code> property, and the <code>setFirstName</code> method specifies a value for this property.</p>
<p>When the data model is outlined in the <code>Person</code> class, you can create an <code>ObservableList</code> array and define as many data rows as you would like to show in your table. The code fragment in <a href="#CJACAECH">Example 13-4</a> implements this task.</p>
<div class="example"><a id="CJACAECH" name="CJACAECH" class="anchor"></a><a id="JFXUI269" name="JFXUI269" class="anchor"></a>
<p class="titleinexample">Example 13-4 Defining Table Data in an Observable List</p>
<pre xml:space="preserve" class="oac_no_warn">final ObservableList&lt;Person&gt; data = FXCollections.observableArrayList(
    new Person("Jacob", "Smith", "jacob.smith@example.com"),
    new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
    new Person("Ethan", "Williams", "ethan.williams@example.com"),
    new Person("Emma", "Jones", "emma.jones@example.com"),
    new Person("Michael", "Brown", "michael.brown@example.com")
);
</pre></div>
<!-- class="example" -->
<p>The next step is to associate the data with the table columns. You can do this through the properties defined for each data element, as shown in <a href="#CJAGHGBD">Example 13-5</a>.</p>
<div class="example"><a id="CJAGHGBD" name="CJAGHGBD" class="anchor"></a><a id="JFXUI270" name="JFXUI270" class="anchor"></a>
<p class="titleinexample">Example 13-5 Setting Data Properties to Columns</p>
<pre xml:space="preserve" class="oac_no_warn">firstNameCol.setCellValueFactory(
    new PropertyValueFactory&lt;&gt;("firstName")
);
lastNameCol.setCellValueFactory(
    new PropertyValueFactory&lt;&gt;("lastName")
);
emailCol.setCellValueFactory(
    new PropertyValueFactory&lt;&gt;("email")
);
</pre></div>
<!-- class="example" -->
<p>The <code>setCellValueFactory</code> method specifies a cell factory for each column. The cell factories are implemented by using the <code>PropertyValueFactory</code> class, which uses the <code>firstName</code>, <code>lastName</code>, and <code>email</code> properties of the table columns as references to the corresponding methods of the <code>Person</code> class.</p>
<p>When the data model is defined, and the data is added and associated with the columns, you can add the data to the table by using the <code>setItems</code> method of the <code>TableView</code> class: <code>table.setItems(data)</code>.</p>
<p>Because the <code>ObservableList</code> object enables the tracking of any changes to its elements, the <code>TableView</code> content automatically updates whenever the data changes.</p>
<p>Examine the application code shown in <a href="#CJABHGAJ">Example 13-6</a>.</p>
<div class="example"><a id="CJABHGAJ" name="CJABHGAJ" class="anchor"></a><a id="JFXUI271" name="JFXUI271" class="anchor"></a>
<p class="titleinexample">Example 13-6 Creating a Table and Adding Data to It</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
 
public class TableViewSample extends Application {
 
    private final TableView&lt;Person&gt; table = new TableView&lt;&gt;();
    private final ObservableList&lt;Person&gt; data =
        FXCollections.observableArrayList(
            new Person("Jacob", "Smith", "jacob.smith@example.com"),
            new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
            new Person("Ethan", "Williams", "ethan.williams@example.com"),
            new Person("Emma", "Jones", "emma.jones@example.com"),
            new Person("Michael", "Brown", "michael.brown@example.com")
        );
   
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(450);
        stage.setHeight(500);
 
        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));
 
        table.setEditable(true);
 
        TableColumn firstNameCol = new TableColumn("First Name");
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
                new PropertyValueFactory&lt;&gt;("firstName"));
 
        TableColumn lastNameCol = new TableColumn("Last Name");
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
                new PropertyValueFactory&lt;&gt;("lastName"));
 
        TableColumn emailCol = new TableColumn("Email");
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
                new PropertyValueFactory&lt;&gt;("email"));
 
        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);
 
        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table);
 
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
 
        stage.setScene(scene);
        stage.show();
    }
 
    public static class Person {
 
        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;
 
        private Person(String fName, String lName, String email) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
        }
 
        public String getFirstName() {
            return firstName.get();
        }
 
        public void setFirstName(String fName) {
            firstName.set(fName);
        }
 
        public String getLastName() {
            return lastName.get();
        }
 
        public void setLastName(String fName) {
            lastName.set(fName);
        }
 
        public String getEmail() {
            return email.get();
        }
 
        public void setEmail(String fName) {
            email.set(fName);
        }
    }
} 
</pre></div>
<!-- class="example" -->
<p>When you compile and run this application code, the table shown in <a href="#CJAEDBIA">Figure 13-4</a> appears.</p>
<div class="figure"><a id="CJAEDBIA" name="CJAEDBIA" class="anchor"></a><a id="JFXUI272" name="JFXUI272" class="anchor"></a>
<p class="titleinfigure">Figure 13-4 Table Populated with Data</p>
<img width="452" height="503" src="img/table-data.png" alt="A table populated with contact information" title="A table populated with contact information" longdesc="img_text/table-data.htm" /><br />
<a id="sthref108" name="sthref108" href="img_text/table-data.htm">Description of "Figure 13-4 Table Populated with Data"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="JFXUI273" name="JFXUI273" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref109" name="sthref109" class="anchor"></a>
<h2 class="sect1">Adding New Rows</h2>
<p>The table in <a href="#CJAEDBIA">Figure 13-4</a> contains five rows of data, which cannot be modified so far.</p>
<p>You can use text fields to enter new values into the First Name, Last Name, and Email columns. The <a href="text-field.htm#BABBCEIG">Text Field</a> control enables your application to receive text input from a user. <a href="#CJAHBCII">Example 13-7</a> creates three text fields, defines the prompt text for each field, and creates the Add button.</p>
<div class="example"><a id="CJAHBCII" name="CJAHBCII" class="anchor"></a><a id="JFXUI274" name="JFXUI274" class="anchor"></a>
<p class="titleinexample">Example 13-7 Using Text Fields to Enter New Items in the Table</p>
<pre xml:space="preserve" class="oac_no_warn">final TextField addFirstName = new TextField();
addFirstName.setPromptText("First Name");
addFirstName.setMaxWidth(firstNameCol.getPrefWidth());

final TextField addLastName = new TextField();
addLastName.setMaxWidth(lastNameCol.getPrefWidth());
addLastName.setPromptText("Last Name");

final TextField addEmail = new TextField();
addEmail.setMaxWidth(emailCol.getPrefWidth());
addEmail.setPromptText("Email");
 
final Button addButton = new Button("Add");
addButton.setOnAction((ActionEvent e) -&gt; {
    data.add(new Person(
        addFirstName.getText(),
        addLastName.getText(),
        addEmail.getText()
    ));
    addFirstName.clear();
    addLastName.clear();
    addEmail.clear();
});
</pre></div>
<!-- class="example" -->
<p>When a user clicks the Add button, the values entered in the text fields are included in a <code>Person</code> constructor and added to the <code>data</code> observable list. Thus, the new entry with contact information appears in the table.</p>
<p>Examine the application code shown in <a href="#CJAFABCH">Example 13-8</a>.</p>
<div class="example"><a id="CJAFABCH" name="CJAFABCH" class="anchor"></a><a id="JFXUI275" name="JFXUI275" class="anchor"></a>
<p class="titleinexample">Example 13-8 Table with the Text Fields to Enter New Items</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
 
public class TableViewSample extends Application {
 
    private final TableView&lt;Person&gt; table = new TableView&lt;&gt;();
    private final ObservableList&lt;Person&gt; data =
            FXCollections.observableArrayList(
            new Person("Jacob", "Smith", "jacob.smith@example.com"),
            new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
            new Person("Ethan", "Williams", "ethan.williams@example.com"),
            new Person("Emma", "Jones", "emma.jones@example.com"),
            new Person("Michael", "Brown", "michael.brown@example.com"));
    final HBox hb = new HBox();
 
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(450);
        stage.setHeight(550);
 
        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));
 
        table.setEditable(true);
 
        TableColumn firstNameCol = new TableColumn("First Name");
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
                new PropertyValueFactory&lt;&gt;("firstName"));
 
        TableColumn lastNameCol = new TableColumn("Last Name");
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
                new PropertyValueFactory&lt;&gt;("lastName"));
 
        TableColumn emailCol = new TableColumn("Email");
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
                new PropertyValueFactory&lt;&gt;("email"));
 
        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);
 
        final TextField addFirstName = new TextField();
        addFirstName.setPromptText("First Name");
        addFirstName.setMaxWidth(firstNameCol.getPrefWidth());
        final TextField addLastName = new TextField();
        addLastName.setMaxWidth(lastNameCol.getPrefWidth());
        addLastName.setPromptText("Last Name");
        final TextField addEmail = new TextField();
        addEmail.setMaxWidth(emailCol.getPrefWidth());
        addEmail.setPromptText("Email");
 
        final Button addButton = new Button("Add");
        addButton.setOnAction((ActionEvent e) -&gt; {
            data.add(new Person(
                    addFirstName.getText(),
                    addLastName.getText(),
                    addEmail.getText()));
            addFirstName.clear();
            addLastName.clear();
            addEmail.clear();
        });
 
        hb.getChildren().addAll(addFirstName, addLastName, addEmail, addButton);
        hb.setSpacing(3);
 
        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table, hb);
 
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
 
        stage.setScene(scene);
        stage.show();
    }
 
    public static class Person {
 
        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;
 
        private Person(String fName, String lName, String email) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
        }
 
        public String getFirstName() {
            return firstName.get();
        }
 
        public void setFirstName(String fName) {
            firstName.set(fName);
        }
 
        public String getLastName() {
            return lastName.get();
        }
 
        public void setLastName(String fName) {
            lastName.set(fName);
        }
 
        public String getEmail() {
            return email.get();
        }
 
        public void setEmail(String fName) {
            email.set(fName);
        }
    }
} 
</pre></div>
<!-- class="example" -->
<p>This application does not provide any filters to check if, for example, an email address was entered in an incorrect format. You can provide such functionality when you develop your own application.</p>
<p>The current implementation also does not check to determine if the empty values are entered. If no values are provided, clicking the Add button inserts an empty row in the table.</p>
<p><a href="#CJADIDIE">Figure 13-5</a> demonstrates how a user adds a new row of data.</p>
<div class="figure"><a id="CJADIDIE" name="CJADIDIE" class="anchor"></a><a id="JFXUI276" name="JFXUI276" class="anchor"></a>
<p class="titleinfigure">Figure 13-5 Adding Contact Information to the Address Book</p>
<img width="454" height="554" src="img/table-add.png" alt="A table with text fields to add new data" title="A table with text fields to add new data" longdesc="img_text/table-add.htm" /><br />
<a id="sthref110" name="sthref110" href="img_text/table-add.htm">Description of "Figure 13-5 Adding Contact Information to the Address Book"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#CJAJBIGI">Figure 13-6</a> shows the table after the Add button is clicked. The contact details of Emma White now appear in the table.</p>
<div class="figure"><a id="CJAJBIGI" name="CJAJBIGI" class="anchor"></a><a id="JFXUI277" name="JFXUI277" class="anchor"></a>
<p class="titleinfigure">Figure 13-6 Newly Added Entry</p>
<img width="454" height="553" src="img/table-added.png" alt="The newly entered data in the address book" title="The newly entered data in the address book" longdesc="img_text/table-added.htm" /><br />
<a id="sthref111" name="sthref111" href="img_text/table-added.htm">Description of "Figure 13-6 Newly Added Entry"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="JFXUI278" name="JFXUI278" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref112" name="sthref112" class="anchor"></a>
<h2 class="sect1">Sorting Data in Columns</h2>
<p>The <code>TableView</code> class provides built-in capabilities to sort data in columns. Users can alter the order of data by clicking column headers. The first click enables the ascending sorting order, the second click enables descending sorting order, and the third click disables sorting. By default, no sorting is applied.</p>
<p>Users can sort multiple columns in a table and specify the priority of each column in the sort operation. To sort multiple columns, the user presses the Shift key while clicking the header of each column to be sorted.</p>
<p>In <a href="#CJAJDBJC">Figure 13-7</a>, an ascending sort order is applied to the first names, while last names are sorted in a descending order. Note that the first column has priority over the second column.</p>
<div class="figure"><a id="CJAJDBJC" name="CJAJDBJC" class="anchor"></a><a id="JFXUI279" name="JFXUI279" class="anchor"></a>
<p class="titleinfigure">Figure 13-7 Sorting Multiple Columns</p>
<img width="408" height="404" src="img/table-sort.png" alt="A table with the data sorted by columns." title="A table with the data sorted by columns." longdesc="img_text/table-sort.htm" /><br />
<a id="sthref113" name="sthref113" href="img_text/table-sort.htm">Description of "Figure 13-7 Sorting Multiple Columns"</a><br />
<br /></div>
<!-- class="figure" -->
<p>As the application developer, you can set sorting preferences for each column in your application by applying the <code>setSortType</code> method. You can specify both ascending and descending type. For example, use the following code line to set the descending type of sorting for the emailCol column: <code>emailCol.setSortType(TableColumn.SortType.DESCENDING);</code>.</p>
<p>You can also specify which columns to sort by adding and removing <code>TableColumn</code> instances from the <code>TableView.sortOrder</code> observable list. The order of columns in this list represents the sort priority (for example, the zero item has higher priority than the first item).</p>
<p>To prohibit sorting of data, call the <code>setSortable(false)</code> method on the column.</p>
</div>
<!-- class="sect1" -->
<a id="JFXUI280" name="JFXUI280" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref114" name="sthref114" class="anchor"></a>
<h2 class="sect1">Editing Data in the Table</h2>
<p>The <code>TableView</code> class not only renders tabular data, but it also provides capabilities to edit it. Use the <code>setEditable</code> method to enable editing of the table content.</p>
<p>Use the <code>setCellFactory</code> method to reimplement the table cell as a text field with the help of the <code>TextFieldTableCell</code> class. The <code>setOnEditCommit</code> method processes editing and assigns the updated value to the corresponding table cell. <a href="#CJAGDAHE">Example 13-9</a> shows how to apply these methods to process cell editing in the First Name, Last Name, and Email columns.</p>
<div class="example"><a id="CJAGDAHE" name="CJAGDAHE" class="anchor"></a><a id="JFXUI281" name="JFXUI281" class="anchor"></a>
<p class="titleinexample">Example 13-9 Implementing Cell Editing</p>
<pre xml:space="preserve" class="oac_no_warn">firstNameCol.setCellFactory(TextFieldTableCell.&lt;Person&gt;forTableColumn());
firstNameCol.setOnEditCommit(
    (CellEditEvent&lt;Person, String&gt; t) -&gt; {
        ((Person) t.getTableView().getItems().get(
            t.getTablePosition().getRow())
            ).setFirstName(t.getNewValue());
});

lastNameCol.setCellFactory(TextFieldTableCell.&lt;Person&gt;forTableColumn());
lastNameCol.setOnEditCommit(
    (CellEditEvent&lt;Person, String&gt; t) -&gt; {
        ((Person) t.getTableView().getItems().get(
            t.getTablePosition().getRow())
            ).setLastName(t.getNewValue());
});

emailCol.setCellFactory(TextFieldTableCell.&lt;Person&gt;forTableColumn());       
emailCol.setOnEditCommit(
(CellEditEvent&lt;Person, String&gt; t) -&gt; {
    ((Person) t.getTableView().getItems().get(
        t.getTablePosition().getRow())
        ).setEmail(t.getNewValue());
});
</pre></div>
<!-- class="example" -->
<p>The complete code of the application shown in <a href="#CEGFCFEB">Example 13-10</a>.</p>
<div class="example"><a id="CEGFCFEB" name="CEGFCFEB" class="anchor"></a><a id="JFXUI375" name="JFXUI375" class="anchor"></a>
<p class="titleinexample">Example 13-10 TableViewSample with Enabled Cell Editing</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
 
public class TableViewSample extends Application {
 
    private final TableView&lt;Person&gt; table = new TableView&lt;&gt;();
    private final ObservableList&lt;Person&gt; data =
            FXCollections.observableArrayList(
            new Person("Jacob", "Smith", "jacob.smith@example.com"),
            new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
            new Person("Ethan", "Williams", "ethan.williams@example.com"),
            new Person("Emma", "Jones", "emma.jones@example.com"),
            new Person("Michael", "Brown", "michael.brown@example.com"));
    final HBox hb = new HBox();
 
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(450);
        stage.setHeight(550);
 
        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));
 
        table.setEditable(true);
 
        TableColumn&lt;Person, String&gt; firstNameCol = 
            new TableColumn&lt;&gt;("First Name");
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
            new PropertyValueFactory&lt;&gt;("firstName"));
        
        firstNameCol.setCellFactory(TextFieldTableCell.&lt;Person&gt;forTableColumn());
        firstNameCol.setOnEditCommit(
            (CellEditEvent&lt;Person, String&gt; t) -&gt; {
                ((Person) t.getTableView().getItems().get(
                        t.getTablePosition().getRow())
                        ).setFirstName(t.getNewValue());
        });
 
 
        TableColumn&lt;Person, String&gt; lastNameCol = 
            new TableColumn&lt;&gt;("Last Name");
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
            new PropertyValueFactory&lt;&gt;("lastName"));
       lastNameCol.setCellFactory(TextFieldTableCell.&lt;Person&gt;forTableColumn());
       lastNameCol.setOnEditCommit(
            (CellEditEvent&lt;Person, String&gt; t) -&gt; {
                ((Person) t.getTableView().getItems().get(
                        t.getTablePosition().getRow())
                        ).setLastName(t.getNewValue());
        });
 
        TableColumn&lt;Person, String&gt; emailCol = new TableColumn&lt;&gt;("Email");
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
            new PropertyValueFactory&lt;&gt;("email"));
        emailCol.setCellFactory(TextFieldTableCell.&lt;Person&gt;forTableColumn());       
        emailCol.setOnEditCommit(
            (CellEditEvent&lt;Person, String&gt; t) -&gt; {
                ((Person) t.getTableView().getItems().get(
                        t.getTablePosition().getRow())
                        ).setEmail(t.getNewValue());
        });
 
        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);
 
        final TextField addFirstName = new TextField();
        addFirstName.setPromptText("First Name");
        addFirstName.setMaxWidth(firstNameCol.getPrefWidth());
        final TextField addLastName = new TextField();
        addLastName.setMaxWidth(lastNameCol.getPrefWidth());
        addLastName.setPromptText("Last Name");
        final TextField addEmail = new TextField();
        addEmail.setMaxWidth(emailCol.getPrefWidth());
        addEmail.setPromptText("Email");
 
        final Button addButton = new Button("Add");
        addButton.setOnAction((ActionEvent e) -&gt; {
            data.add(new Person(
                    addFirstName.getText(),
                    addLastName.getText(),
                    addEmail.getText()));
            addFirstName.clear();
            addLastName.clear();
            addEmail.clear();
        });
 
        hb.getChildren().addAll(addFirstName, addLastName, addEmail, addButton);
        hb.setSpacing(3);
 
        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table, hb);
 
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
 
        stage.setScene(scene);
        stage.show();
    }
 
    public static class Person {
 
        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;
 
        private Person(String fName, String lName, String email) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
        }
 
        public String getFirstName() {
            return firstName.get();
        }
 
        public void setFirstName(String fName) {
            firstName.set(fName);
        }
 
        public String getLastName() {
            return lastName.get();
        }
 
        public void setLastName(String fName) {
            lastName.set(fName);
        }
 
        public String getEmail() {
            return email.get();
        }
 
        public void setEmail(String fName) {
            email.set(fName);
        }
    }
}
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJAEHEBD">Figure 13-8</a>, the user is editing the last name of Michael Brown. To edit a table cell, the user enters the new value in the cell, and then presses the Enter key. The cell is not modified until the Enter key is pressed. This behavior is determined by the implementation of the <code>TextField</code> class.</p>
<div class="figure"><a id="CJAEHEBD" name="CJAEHEBD" class="anchor"></a><a id="JFXUI284" name="JFXUI284" class="anchor"></a>
<p class="titleinfigure">Figure 13-8 Editing a Table Cell</p>
<img width="456" height="553" src="img/table-edit.png" alt="An edited table." title="An edited table." longdesc="img_text/table-edit.htm" /><br />
<a id="sthref115" name="sthref115" href="img_text/table-edit.htm">Description of "Figure 13-8 Editing a Table Cell"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Note that the default implementation of the <code>TextField</code> control requires that users press the Enter key to commit the edit. You can redefine the <code>TextField</code> behavior to commit the edit on the focus change, which is an expected user experience. Try the modified code in to implement such an alternative behavior.</p>
<div class="example"><a id="JFXUI376" name="JFXUI376" class="anchor"></a><a id="sthref116" name="sthref116" class="anchor"></a>
<p class="titleinexample">Example 13-11 Alternative Solution Of Cell Editing</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Callback;
 
public class TableViewSample extends Application {
 
    private final TableView&lt;Person&gt; table = new TableView&lt;&gt;();
    private final ObservableList&lt;Person&gt; data =
            FXCollections.observableArrayList(
            new Person("Jacob", "Smith", "jacob.smith@example.com"),
            new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
            new Person("Ethan", "Williams", "ethan.williams@example.com"),
            new Person("Emma", "Jones", "emma.jones@example.com"),
            new Person("Michael", "Brown", "michael.brown@example.com"));
    final HBox hb = new HBox();
 
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(450);
        stage.setHeight(550);
 
        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));
 
        table.setEditable(true);
        
        Callback&lt;TableColumn&lt;Person, String&gt;, 
            TableCell&lt;Person, String&gt;&gt; cellFactory
                = (TableColumn&lt;Person, String&gt; p) -&gt; new EditingCell();
 
        TableColumn&lt;Person, String&gt; firstNameCol = 
            new TableColumn&lt;&gt;("First Name");
        TableColumn&lt;Person, String&gt; lastNameCol = 
            new TableColumn&lt;&gt;("Last Name");
        TableColumn&lt;Person, String&gt; emailCol = 
            new TableColumn&lt;&gt;("Email");
 
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
            new PropertyValueFactory&lt;&gt;("firstName"));
        firstNameCol.setCellFactory(cellFactory);        
        firstNameCol.setOnEditCommit(
            (CellEditEvent&lt;Person, String&gt; t) -&gt; {
                ((Person) t.getTableView().getItems().get(
                        t.getTablePosition().getRow())
                        ).setFirstName(t.getNewValue());
        });
 
 
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
            new PropertyValueFactory&lt;&gt;("lastName"));
        lastNameCol.setCellFactory(cellFactory);
        lastNameCol.setOnEditCommit(
            (CellEditEvent&lt;Person, String&gt; t) -&gt; {
                ((Person) t.getTableView().getItems().get(
                        t.getTablePosition().getRow())
                        ).setLastName(t.getNewValue());
        });
 
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
            new PropertyValueFactory&lt;&gt;("email"));
        emailCol.setCellFactory(cellFactory);
        emailCol.setOnEditCommit(
            (CellEditEvent&lt;Person, String&gt; t) -&gt; {
                ((Person) t.getTableView().getItems().get(
                        t.getTablePosition().getRow())
                        ).setEmail(t.getNewValue());
        });
 
        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);
 
        final TextField addFirstName = new TextField();
        addFirstName.setPromptText("First Name");
        addFirstName.setMaxWidth(firstNameCol.getPrefWidth());
        final TextField addLastName = new TextField();
        addLastName.setMaxWidth(lastNameCol.getPrefWidth());
        addLastName.setPromptText("Last Name");
        final TextField addEmail = new TextField();
        addEmail.setMaxWidth(emailCol.getPrefWidth());
        addEmail.setPromptText("Email");
 
        final Button addButton = new Button("Add");
        addButton.setOnAction((ActionEvent e) -&gt; {
            data.add(new Person(
                    addFirstName.getText(),
                    addLastName.getText(),
                    addEmail.getText()));
            addFirstName.clear();
            addLastName.clear();
            addEmail.clear();
        });
 
        hb.getChildren().addAll(addFirstName, addLastName, addEmail, addButton);
        hb.setSpacing(3);
 
        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table, hb);
 
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
 
        stage.setScene(scene);
        stage.show();
    }
 
    public static class Person {
 
        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;
 
        private Person(String fName, String lName, String email) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
        }
 
        public String getFirstName() {
            return firstName.get();
        }
 
        public void setFirstName(String fName) {
            firstName.set(fName);
        }
 
        public String getLastName() {
            return lastName.get();
        }
 
        public void setLastName(String fName) {
            lastName.set(fName);
        }
 
        public String getEmail() {
            return email.get();
        }
 
        public void setEmail(String fName) {
            email.set(fName);
        }
    }
 
    class EditingCell extends TableCell&lt;Person, String&gt; {
 
        private TextField textField;
 
        public EditingCell() {
        }
 
        @Override
        public void startEdit() {
            if (!isEmpty()) {
                super.startEdit();
                createTextField();
                setText(null);
                setGraphic(textField);
                textField.selectAll();
            }
        }
 
        @Override
        public void cancelEdit() {
            super.cancelEdit();
 
            setText((String) getItem());
            setGraphic(null);
        }
 
        @Override
        public void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
 
            if (empty) {
                setText(null);
                setGraphic(null);
            } else {
                if (isEditing()) {
                    if (textField != null) {
                        textField.setText(getString());
                    }
                    setText(null);
                    setGraphic(textField);
                } else {
                    setText(getString());
                    setGraphic(null);
                }
            }
        }
 
        private void createTextField() {
            textField = new TextField(getString());
            textField.setMinWidth(this.getWidth() - this.getGraphicTextGap()* 2);
            textField.focusedProperty().addListener(
                (ObservableValue&lt;? extends Boolean&gt; arg0, 
                Boolean arg1, Boolean arg2) -&gt; {
                    if (!arg2) {
                        commitEdit(textField.getText());
                    }
            });
        }
 
        private String getString() {
            return getItem() == null ? "" : getItem().toString();
        }
    }
}
</pre></div>
<!-- class="example" -->
<p>Note that this approach might become redundant in future releases as the <code>TextFieldTableCell</code> implementation is being evolved to provide better user experience.</p>
</div>
<!-- class="sect1" -->
<a id="JFXUI511" name="JFXUI511" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref117" name="sthref117" class="anchor"></a>
<h2 class="sect1">Adding Maps of Data to the Table</h2>
<p>You can add the <code>Map</code> data to the table. Use the <code>MapValueFactory</code> class as shown in <a href="#CEGHGDFA">Example 13-12</a> to display the map of student IDs in the table.</p>
<div class="example"><a id="CEGHGDFA" name="CEGHGDFA" class="anchor"></a><a id="JFXUI512" name="JFXUI512" class="anchor"></a>
<p class="titleinexample">Example 13-12 Adding Map Data to the Table</p>
<pre xml:space="preserve" class="oac_no_warn">import java.util.HashMap;
import java.util.Map;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.MapValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.StringConverter;
 
public class TableViewSample extends Application {
 
    <span class="bold">public static final String Column1MapKey = "A";</span>
    <span class="bold">public static final String Column2MapKey = "B";</span>
 
    public static void main(String[] args) {
        launch(args);
    }
 
    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(300);
        stage.setHeight(500);
        
        final Label label = new Label("Student IDs");
        label.setFont(new Font("Arial", 20));
 
        TableColumn&lt;Map, String&gt; firstDataColumn = new TableColumn&lt;&gt;("Class A");
        TableColumn&lt;Map, String&gt; secondDataColumn = new TableColumn&lt;&gt;("Class B");
 
        <span class="bold">firstDataColumn.setCellValueFactory(new MapValueFactory(Column1MapKey));</span>
        firstDataColumn.setMinWidth(130);
        <span class="bold">secondDataColumn.setCellValueFactory(new MapValueFactory(Column2MapKey));</span>
        secondDataColumn.setMinWidth(130);
 
        <span class="bold">TableView tableView = new TableView&lt;&gt;(generateDataInMap());</span>
 
        tableView.setEditable(true);
        tableView.getSelectionModel().setCellSelectionEnabled(true);
        tableView.getColumns().setAll(firstDataColumn, secondDataColumn);
        <span class="bold">Callback&lt;TableColumn&lt;Map, String&gt;, TableCell&lt;Map, String&gt;&gt;</span>
            <span class="bold">cellFactoryForMap = (TableColumn&lt;Map, String&gt; p) -&gt;</span> 
                <span class="bold">new TextFieldTableCell(new StringConverter() {</span>
                    <span class="bold">@Override</span>
                        <span class="bold">public String toString(Object t) {</span>
                        <span class="bold">return t.toString();</span>
                    <span class="bold">}</span>
                    <span class="bold">@Override</span>
                    <span class="bold">public Object fromString(String string) {</span>
                        <span class="bold">return string;</span>
                    <span class="bold">}</span>
            <span class="bold">});</span>
        <span class="bold">firstDataColumn.setCellFactory(cellFactoryForMap);</span>
        <span class="bold">secondDataColumn.setCellFactory(cellFactoryForMap);</span>
 
        final VBox vbox = new VBox();
 
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, tableView);
 
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
 
        stage.setScene(scene);
 
        stage.show();
    }
 
    <span class="bold">private ObservableList&lt;Map&gt; generateDataInMap() {</span>
        <span class="bold">int max = 10;</span>
        <span class="bold">ObservableList&lt;Map&gt; allData = FXCollections.observableArrayList();</span>
        <span class="bold">for (int i = 1; i &lt; max; i++) {</span>
            <span class="bold">Map&lt;String, String&gt; dataRow = new HashMap&lt;&gt;();</span>
 
            <span class="bold">String value1 = "A" + i;</span>
            <span class="bold">String value2 = "B" + i;</span>
 
            <span class="bold">dataRow.put(Column1MapKey, value1);</span>
            <span class="bold">dataRow.put(Column2MapKey, value2);</span>
 
            <span class="bold">allData.add(dataRow);</span>
        }
        <span class="bold">return allData;</span>
    <span class="bold">}</span>
}
</pre></div>
<!-- class="example" -->
<p>The <code>MapValueFactory</code> class implements the <code>Callback</code> interface, and it is designed specifically to be used within cell factories of table columns. In <a href="#CEGHGDFA">Example 13-12</a>, the dataRow hash map presents a single row in the <code>TableView</code> object. The map has two <code>String</code> keys: Column1MapKey and Column2MapKey to map the corresponding values in the first and second columns. The <code>setCellValueFactory</code> method called for the table columns populates them with data matching with a particular key, so that the first column contains values that correspond to the "A" key and second column contains the values that correspond to the "B" key.</p>
<p>When you compile and run this application, it produces the output shown in <a href="#CEGIJHEI">Figure 13-9</a>.</p>
<div class="figure"><a id="CEGIJHEI" name="CEGIJHEI" class="anchor"></a><a id="JFXUI513" name="JFXUI513" class="anchor"></a>
<p class="titleinfigure">Figure 13-9 TableVIew with Map Data</p>
<img width="302" height="502" src="img/table-map.png" alt="Description of Figure 13-9 follows" title="Description of Figure 13-9 follows" longdesc="img_text/table-map.htm" /><br />
<a id="sthref118" name="sthref118" href="img_text/table-map.htm">Description of "Figure 13-9 TableVIew with Map Data"</a><br />
<br /></div>
<!-- class="figure" -->
<p><code>TreeTableView</code> is the further extension of the tabular data controls in JavaFX. Refer to the <a href="tree-table-view.htm#CJAFBAEG">Tree Table View</a> chapter for more information about this UI control.</p>
<p class="itemizedlisttitle">Related API Documentation&nbsp;</p>
<ul>
<li>
<p><a href="../api/javafx/scene/control/TableView.html"><code>TableView</code></a></p>
</li>
<li>
<p><a href="../api/javafx/scene/control/TableColumn.html"><code>TableColumn</code></a></p>
</li>
<li>
<p><a href="../api/javafx/scene/control/TableCell.html"><code>TableCell</code></a></p>
</li>
<li>
<p><a href="../api/javafx/scene/control/TextField.html"><code>TextField</code></a></p>
</li>
<li>
<p><a href="../api/javafx/scene/control/cell/TextFieldTableCell.html"><code>TextFieldTableCell</code></a></p>
</li>
<li>
<p><a href="../api/javafx/scene/control/TreeTableView.html"><code>TreeTableView</code></a></p>
</li>
<li>
<p><a href="../api/javafx/scene/control/cell/MapValueFactory.html"><code>MapValueFactory</code></a></p>
</li>
<li>
<p><a href="../api/javafx/scene/control/Button.html"><code>Button</code></a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Working with JavaFX UI Components</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">Audience</a></li>
        <li><a href="preface.htm#sthref4">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref6">Related Documents</a></li>
        <li><a href="preface.htm#sthref7">Conventions</a></li>
      </ul>
    </li>
    <li><a href="ui_components.htm#JFXUI101">Part I About This Tutorial</a>
    <ul>
    <li><a href="whatsnew.htm#JFXUI781">1 What Is New</a></li>
</ul>
</li>
    <li><a href="ui_controls.htm#JFXUI336">Part II Using JavaFX UI Controls</a>
    <ul>
    <li><a href="label.htm#CIHHFIBJ">2 Label</a>
      <ul>
        <li><a href="label.htm#sthref10">Creating a Label</a></li>
        <li><a href="label.htm#sthref12">Setting a Font</a></li>
        <li><a href="label.htm#sthref13">Wrapping Text</a></li>
        <li><a href="label.htm#sthref15">Applying Effects</a></li>
      </ul>
    </li>
    <li><a href="button.htm#CJHEEACB">3 Button</a>
      <ul>
        <li><a href="button.htm#sthref19">Creating a Button</a></li>
        <li><a href="button.htm#sthref22">Assigning an Action</a></li>
        <li><a href="button.htm#sthref23">Applying Effects</a></li>
        <li><a href="button.htm#sthref25">Styling a Button</a></li>
      </ul>
    </li>
    <li><a href="radio-button.htm#BABBJBDA">4 Radio Button</a>
      <ul>
        <li><a href="radio-button.htm#sthref29">Creating a Radio Button</a></li>
        <li><a href="radio-button.htm#sthref30">Adding Radio Buttons to Groups</a></li>
        <li><a href="radio-button.htm#sthref32">Processing Events for Radio Buttons</a></li>
        <li><a href="radio-button.htm#sthref33">Requesting Focus for a Radio Button</a></li>
      </ul>
    </li>
    <li><a href="toggle-button.htm#CACJDICF">5 Toggle Button</a>
      <ul>
        <li><a href="toggle-button.htm#sthref38">Creating a Toggle Button</a></li>
        <li><a href="toggle-button.htm#sthref39">Adding Toggle Buttons to a Group</a></li>
        <li><a href="toggle-button.htm#sthref41">Setting the Behavior</a></li>
        <li><a href="toggle-button.htm#sthref43">Styling Toggle Buttons</a></li>
      </ul>
    </li>
    <li><a href="checkbox.htm#CHDFEJCD">6 Checkbox</a>
      <ul>
        <li><a href="checkbox.htm#sthref47">Creating Checkboxes</a></li>
        <li><a href="checkbox.htm#sthref48">Defining a State</a></li>
        <li><a href="checkbox.htm#sthref50">Setting the Behavior</a></li>
      </ul>
    </li>
    <li><a href="choice-box.htm#BCEDJAEH">7 Choice Box</a>
      <ul>
        <li><a href="choice-box.htm#sthref54">Creating a Choice Box</a></li>
        <li><a href="choice-box.htm#sthref56">Setting the Behavior for a Choice Box</a></li>
        <li><a href="choice-box.htm#sthref59">Applying a Tooltip</a></li>
      </ul>
    </li>
    <li><a href="text-field.htm#BABBCEIG">8 Text Field</a>
      <ul>
        <li><a href="text-field.htm#sthref63">Creating a Text Field</a></li>
        <li><a href="text-field.htm#sthref64">Building the UI with Text Fields</a></li>
        <li><a href="text-field.htm#sthref67">Processing Text Field Data</a></li>
      </ul>
    </li>
    <li><a href="password-field.htm#BABIDAGF">9 Password Field</a>
      <ul>
        <li><a href="password-field.htm#sthref71">Creating a Password Field</a></li>
        <li><a href="password-field.htm#sthref73">Evaluating the Password</a></li>
      </ul>
    </li>
    <li><a href="scrollbar.htm#BGBEGJDE">10 Scroll Bar</a>
      <ul>
        <li><a href="scrollbar.htm#sthref78">Creating a Scroll Bar</a></li>
        <li><a href="scrollbar.htm#sthref79">Using a Scroll Bar in Your Application</a></li>
      </ul>
    </li>
    <li><a href="scrollpane.htm#CBBFFBCH">11 Scroll Pane</a>
      <ul>
        <li><a href="scrollpane.htm#sthref83">Creating a Scroll Pane</a></li>
        <li><a href="scrollpane.htm#sthref84">Setting the Scroll Bar Policy for a Scroll Pane</a></li>
        <li><a href="scrollpane.htm#sthref86">Resizing Components in the Scroll Pane</a></li>
        <li><a href="scrollpane.htm#sthref89">Sample Application with a Scroll Pane</a></li>
      </ul>
    </li>
    <li><a href="list-view.htm#CEGGEDBF">12 List View</a>
      <ul>
        <li><a href="list-view.htm#sthref93">Creating a List View</a></li>
        <li><a href="list-view.htm#sthref96">Populating a List View with Data</a></li>
        <li><a href="list-view.htm#sthref98">Customizing the Content of a List View</a></li>
        <li><a href="list-view.htm#sthref100">Processing the List Item Selection</a></li>
      </ul>
    </li>
    <li><a class="selected" href="table-view.htm#CJABIEED">13 Table View</a>
      <ul>
        <li><a href="table-view.htm#sthref104">Creating a Table</a></li>
        <li><a href="table-view.htm#sthref107">Defining the Data Model</a></li>
        <li><a href="table-view.htm#sthref109">Adding New Rows</a></li>
        <li><a href="table-view.htm#sthref112">Sorting Data in Columns</a></li>
        <li><a href="table-view.htm#sthref114">Editing Data in the Table</a></li>
        <li><a href="table-view.htm#sthref117">Adding Maps of Data to the Table</a></li>
      </ul>
    </li>
    <li><a href="tree-view.htm#JFXUI377">14 Tree View</a>
      <ul>
        <li><a href="tree-view.htm#sthref121">Creating Tree Views</a></li>
        <li><a href="tree-view.htm#sthref123">Implementing Cell Factories</a></li>
        <li><a href="tree-view.htm#sthref126">Adding New Tree Items on Demand</a></li>
        <li><a href="tree-view.htm#sthref129">Using Tree Cell Editors</a></li>
      </ul>
    </li>
    <li><a href="tree-table-view.htm#JFXUI833">15 Tree Table View</a>
      <ul>
        <li><a href="tree-table-view.htm#sthref135">Creating a TreeTableView control</a></li>
        <li><a href="tree-table-view.htm#sthref137">Adding Several Columns</a></li>
        <li><a href="tree-table-view.htm#sthref139">Altering Visual Appearance</a></li>
        <li><a href="tree-table-view.htm#sthref142">Managing Selection Mode</a></li>
      </ul>
    </li>
    <li><a href="combo-box.htm#BABEFEJC">16 Combo Box</a>
      <ul>
        <li><a href="combo-box.htm#sthref147">Creating Combo Boxes</a></li>
        <li><a href="combo-box.htm#sthref151">Editable Combo Boxes</a></li>
        <li><a href="combo-box.htm#sthref154">Applying Cell Factories to Combo Boxes</a></li>
      </ul>
    </li>
    <li><a href="separator.htm#BGBCFDFI">17 Separator</a>
      <ul>
        <li><a href="separator.htm#sthref157">Creating a Separator</a></li>
        <li><a href="separator.htm#sthref159">Adding Separators to the UI of Your Application</a></li>
        <li><a href="separator.htm#sthref161">Styling Separators</a></li>
      </ul>
    </li>
    <li><a href="slider.htm#CCHFBJCH">18 Slider</a>
      <ul>
        <li><a href="slider.htm#sthref165">Creating a Slider</a></li>
        <li><a href="slider.htm#sthref166">Using Sliders in Graphical Applications</a></li>
      </ul>
    </li>
    <li><a href="progress.htm#CHDDJAJE">19 Progress Bar and Progress Indicator</a>
      <ul>
        <li><a href="progress.htm#sthref170">Creating Progress Controls</a></li>
        <li><a href="progress.htm#sthref172">Indicating Progress in Your User Interface</a></li>
      </ul>
    </li>
    <li><a href="hyperlink.htm#CIHGADBG">20 Hyperlink</a>
      <ul>
        <li><a href="hyperlink.htm#sthref176">Creating a Hyperlink</a></li>
        <li><a href="hyperlink.htm#sthref177">Linking the Local Content</a></li>
        <li><a href="hyperlink.htm#sthref180">Linking the Remote Content</a></li>
      </ul>
    </li>
    <li><a href="editor.htm#JFXUI346">21 HTML Editor</a>
      <ul>
        <li><a href="editor.htm#sthref184">Adding an HTML Editor</a></li>
        <li><a href="editor.htm#sthref187">Using an HTML Editor to Build the User Interface</a></li>
        <li><a href="editor.htm#sthref189">Obtaining HTML Content</a></li>
      </ul>
    </li>
    <li><a href="tooltip.htm#BABBIJBJ">22 Tooltip</a>
      <ul>
        <li><a href="tooltip.htm#sthref194">Creating a Tooltip</a></li>
        <li><a href="tooltip.htm#sthref196">Presenting Application Data in Tooltips</a></li>
      </ul>
    </li>
    <li><a href="accordion-titledpane.htm#JFXUI356">23 Titled Pane and Accordion</a>
      <ul>
        <li><a href="accordion-titledpane.htm#sthref200">Creating Titled Panes</a></li>
        <li><a href="accordion-titledpane.htm#sthref203">Adding Titled Panes to an Accordion</a></li>
        <li><a href="accordion-titledpane.htm#sthref205">Processing Events for an Accordion with Titled Panes</a></li>
      </ul>
    </li>
    <li><a href="menu_controls.htm#JFXUI409">24 Menu</a>
      <ul>
        <li><a href="menu_controls.htm#sthref210">Building Menus in JavaFX Applications</a></li>
        <li><a href="menu_controls.htm#sthref211">Creating a Menu Bar</a></li>
        <li><a href="menu_controls.htm#sthref213">Adding Menu Items</a></li>
        <li><a href="menu_controls.htm#sthref216">Creating Submenus</a></li>
        <li><a href="menu_controls.htm#sthref220">Adding Context Menus</a></li>
      </ul>
    </li>
    <li><a href="color-picker.htm#JFXUI433">25 Color Picker</a>
      <ul>
        <li><a href="color-picker.htm#sthref223">Design Overview</a>
          <ul>
          <li><a href="color-picker.htm#sthref225">Color Chooser</a></li>
          <li><a href="color-picker.htm#sthref227">Color Palette</a></li>
          <li><a href="color-picker.htm#sthref230">Custom Color Dialog Window</a></li>
          </ul>
        </li>
        <li><a href="color-picker.htm#JFXUI445">Using a Color Picker</a></li>
        <li><a href="color-picker.htm#JFXUI452">Changing the Appearance of a Color Picker</a></li>
      </ul>
    </li>
    <li><a href="date-picker.htm#JFXUI808">26 Date Picker</a>
      <ul>
        <li><a href="date-picker.htm#sthref238">Working with Time Data and Date Formats</a></li>
        <li><a href="date-picker.htm#sthref239">Date Picker Design Overview</a></li>
        <li><a href="date-picker.htm#sthref241">Adding a Date Picker to an Application UI</a></li>
        <li><a href="date-picker.htm#sthref244">Customizing the Date Picker</a></li>
        <li><a href="date-picker.htm#sthref250">Altering the Calendar System</a></li>
      </ul>
    </li>
    <li><a href="pagination.htm#JFXUI459">27 Pagination Control</a>
      <ul>
        <li><a href="pagination.htm#sthref254">Creating a Pagination Control</a></li>
        <li><a href="pagination.htm#sthref257">Implementing Page Factories</a></li>
        <li><a href="pagination.htm#sthref262">Styling a Pagination Control</a></li>
      </ul>
    </li>
    <li><a href="file-chooser.htm#CCHICECF">28 File Chooser</a>
      <ul>
        <li><a href="file-chooser.htm#sthref266">Opening Files</a></li>
        <li><a href="file-chooser.htm#sthref272">Configuring a File Chooser</a></li>
        <li><a href="file-chooser.htm#sthref274">Setting Extension Filters</a></li>
        <li><a href="file-chooser.htm#sthref276">Saving Files</a></li>
      </ul>
    </li>
    <li><a href="custom.htm#JFXUI493">29 Customization of UI Controls</a>
      <ul>
        <li><a href="custom.htm#sthref280">Applying CSS</a></li>
        <li><a href="custom.htm#sthref285">Altering Default Behavior</a></li>
        <li><a href="custom.htm#sthref288">Implementing Cell Factories</a></li>
      </ul>
    </li>
    <li><a href="embed.htm#JFXUI785">30 UI Controls on the Embedded Platforms</a>
      <ul>
        <li><a href="embed.htm#sthref292">Embedded Runtime Features</a>
          <ul>
          <li><a href="embed.htm#sthref293">Support for Touch-Enabled Devices</a></li>
          <li><a href="embed.htm#sthref294">Virtual Keyboard</a></li>
          </ul>
        </li>
        <li><a href="embed.htm#sthref301">Appearance of UI Controls on Embedded Platforms</a>
          <ul>
          <li><a href="embed.htm#sthref302">Scrolling Controls</a></li>
          <li><a href="embed.htm#sthref304">Text Input Controls</a></li>
          <li><a href="embed.htm#sthref306">Context Menus</a></li>
          </ul>
        </li>
        <li><a href="embed.htm#sthref309">UI Controls Features Available on the Embedded Platforms</a></li>
        <li><a href="embed.htm#sthref311">UI Controls Features That Are Not Available on Embedded Touch Platforms</a></li>
        <li><a href="embed.htm#sthref312">Other Features That Are Not Available on Embedded Touch Platforms</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="charts.htm#JFXUI577">Part III Working with JavaFX Charts</a>
    <ul>
    <li><a href="pie-chart.htm#CIHFDADD">31 Pie Chart</a>
      <ul>
        <li><a href="pie-chart.htm#sthref314">Creating a Pie Chart</a></li>
        <li><a href="pie-chart.htm#sthref316">Setting a Pie Chart and a Legend</a></li>
        <li><a href="pie-chart.htm#sthref319">Processing Events for a Pie Chart</a></li>
      </ul>
    </li>
    <li><a href="line-chart.htm#CIHGBCFI">32 Line Chart</a>
      <ul>
        <li><a href="line-chart.htm#sthref323">Chart Settings</a></li>
        <li><a href="line-chart.htm#sthref324">Chart Data</a></li>
        <li><a href="line-chart.htm#sthref325">Creating a Line Chart</a></li>
        <li><a href="line-chart.htm#sthref327">Creating Categories for a Line Chart</a></li>
        <li><a href="line-chart.htm#sthref329">Adding Series to the Line Chart</a></li>
      </ul>
    </li>
    <li><a href="area-chart.htm#CIHCFGBA">33 Area Chart</a>
      <ul>
        <li><a href="area-chart.htm#sthref334">Creating an Area Chart</a></li>
        <li><a href="area-chart.htm#sthref336">Creating a Stacked Area Chart</a></li>
        <li><a href="area-chart.htm#sthref338">Setting Axis and Tick Properties</a></li>
        <li><a href="area-chart.htm#sthref342">Adding Negative Values</a></li>
        <li><a href="area-chart.htm#sthref344">Styling Area Charts</a></li>
      </ul>
    </li>
    <li><a href="bubble-chart.htm#CHDHAFHB">34 Bubble Chart</a>
      <ul>
        <li><a href="bubble-chart.htm#sthref348">Creating a Bubble Chart</a></li>
        <li><a href="bubble-chart.htm#sthref351">Using the Extra Value Property</a></li>
        <li><a href="bubble-chart.htm#sthref353">Changing the Appearance Visual Setting of the Plot and Tick Marks</a></li>
      </ul>
    </li>
    <li><a href="scatter-chart.htm#CIHDEACI">35 Scatter Chart</a>
      <ul>
        <li><a href="scatter-chart.htm#sthref357">Creating a Scatter Chart</a></li>
        <li><a href="scatter-chart.htm#sthref359">Managing Chart Data</a></li>
        <li><a href="scatter-chart.htm#sthref361">Adding Effects to Charts</a></li>
        <li><a href="scatter-chart.htm#sthref363">Changing the Chart Symbol</a></li>
      </ul>
    </li>
    <li><a href="bar-chart.htm#CIHJFHDE">36 Bar Chart</a>
      <ul>
        <li><a href="bar-chart.htm#sthref367">Creating a Bar Chart</a></li>
        <li><a href="bar-chart.htm#sthref369">Horizontal Bar Chart</a></li>
        <li><a href="bar-chart.htm#sthref371">Creating a Stacked Bar Chart</a></li>
        <li><a href="bar-chart.htm#sthref374">Animating Data in Charts</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="css_tutorial.htm#JFXUI733">Part IV Skinning JavaFX Applications with CSS</a>
    <ul>
    <li><a href="apply-css.htm#JFXUI714">37 Styling UI Controls with CSS</a>
      <ul>
        <li><a href="apply-css.htm#sthref378">Default Style Sheet</a></li>
        <li><a href="apply-css.htm#sthref380">Creating Style Sheets</a></li>
        <li><a href="apply-css.htm#sthref381">Defining Styles</a>
          <ul>
          <li><a href="apply-css.htm#sthref382">Selectors</a></li>
          <li><a href="apply-css.htm#sthref383">Rules and Properties</a></li>
          </ul>
        </li>
        <li><a href="apply-css.htm#sthref384">Skinning the Scene</a></li>
        <li><a href="apply-css.htm#sthref385">Skinning Controls</a>
          <ul>
          <li><a href="apply-css.htm#sthref386">Overriding Default Styles</a></li>
          <li><a href="apply-css.htm#sthref388">Creating Class Styles</a></li>
          <li><a href="apply-css.htm#sthref390">Creating ID Styles</a></li>
          <li><a href="apply-css.htm#sthref392">Setting Styles in the Code</a></li>
          </ul>
        </li>
        <li><a href="apply-css.htm#sthref394">Additional Resources</a></li>
      </ul>
    </li>
    <li><a href="css-styles.htm#JFXUI672">38 Styling Charts with CSS</a>
      <ul>
        <li><a href="css-styles.htm#sthref395">Modifying Basic Chart Elements</a></li>
        <li><a href="css-styles.htm#sthref401">Altering Colors of the Chart Plot</a></li>
        <li><a href="css-styles.htm#sthref404">Setting the Axes</a></li>
        <li><a href="css-styles.htm#sthref407">Setting Chart Colors</a></li>
        <li><a href="css-styles.htm#sthref413">Changing Chart Symbols</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="text.htm#JFXUI734">Part V Working with Text in JavaFX Applications</a>
    <ul>
    <li><a href="text-settings.htm#JFXUI735">39 Using Text in JavaFX</a>
      <ul>
        <li><a href="text-settings.htm#sthref417">Introduction</a></li>
        <li><a href="text-settings.htm#sthref418">Adding Text</a>
          <ul>
          <li><a href="text-settings.htm#sthref420">Setting Text Font and Color</a></li>
          <li><a href="text-settings.htm#sthref422">Making Text Bold or Italic</a></li>
          <li><a href="text-settings.htm#sthref423">Using Custom Fonts</a></li>
          <li><a href="text-settings.htm#sthref425">Setting LCD Text Support</a></li>
          <li><a href="text-settings.htm#sthref426">Rich Text and Bidirectional Support</a></li>
          </ul>
        </li>
      </ul>
    </li>
    <li><a href="text-effects.htm#JFXUI773">40 Applying Effects to Text</a>
      <ul>
        <li><a href="text-effects.htm#sthref429">Perspective Effect</a></li>
        <li><a href="text-effects.htm#sthref431">Blur Effect</a></li>
        <li><a href="text-effects.htm#sthref433">Drop Shadow Effect</a></li>
        <li><a href="text-effects.htm#sthref435">Inner Shadow Effect</a></li>
        <li><a href="text-effects.htm#sthref437">Reflection</a></li>
        <li><a href="text-effects.htm#sthref439">Combining Several Effects</a></li>
        <li><a href="text-effects.htm#sthref441">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="samples.htm#sthref444">Part VI Source Code for the UI Components Tutorials</a>
    <ul>
    <li><a href="ui_controls_samples.htm#sthref445">A UI Control Samples</a>
      <ul>
        <li><a href="ui_controls_samples.htm#JFXUI870">LabelSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI871">ButtonSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI872">RadioButtonSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI873">ToggleButtonSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI874">CheckboxSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI875">ChoiceBoxSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI876">TextFieldSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI877">PasswordField.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI878">ScrollBarSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI879">ScrollPaneSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI880">ListViewSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI881">TableViewSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI882">TreeViewSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI883">TreeTableViewSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI884">ComboBoxSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI885">SeparatorSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI886">SliderSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI887">ProgressSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI888">HyperlinkSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI889">HyperlinkWebViewSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI890">HTMLEditorSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI891">TooltipSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI892">TitledPaneSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI893">MenuSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI894">ColorPickerSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI895">DatePickerSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI896">PaginationSample.java</a></li>
        <li><a href="ui_controls_samples.htm#JFXUI897">FileChooserSample.java</a></li>
      </ul>
    </li>
    <li><a href="chart_samples.htm#JFXUI898">B Chart Samples</a>
      <ul>
        <li><a href="chart_samples.htm#JFXUI900">PieChartSample.java</a></li>
        <li><a href="chart_samples.htm#JFXUI901">LineChartSample.java</a></li>
        <li><a href="chart_samples.htm#JFXUI902">AreaChartSample.java</a></li>
        <li><a href="chart_samples.htm#JFXUI903">BubbleChartSample.java</a></li>
        <li><a href="chart_samples.htm#JFXUI904">ScatterChartSample.java</a></li>
        <li><a href="chart_samples.htm#JFXUI905">BarChartSample.java</a></li>
      </ul>
    </li>
    <li><a href="css_samples.htm#sthref446">C CSS Samples</a>
      <ul>
        <li><a href="css_samples.htm#JFXUI908">DownloadButton.java</a></li>
        <li><a href="css_samples.htm#JFXUI909">DownloadButtonStyle1.css</a></li>
        <li><a href="css_samples.htm#JFXUI910">DownloadButtonStyle2.css</a></li>
        <li><a href="css_samples.htm#JFXUI911">StyleStage.java</a></li>
        <li><a href="css_samples.htm#JFXUI912">UIControlCSS.java</a></li>
        <li><a href="css_samples.htm#JFXUI913">controlStyle1.css</a></li>
        <li><a href="css_samples.htm#JFXUI914">controlStyle2.css</a></li>
      </ul>
    </li>
    <li><a href="text_samples.htm#sthref447">D Text Samples</a>
      <ul>
        <li><a href="text_samples.htm#JFXUI917">TextEffects.java</a></li>
        <li><a href="text_samples.htm#JFXUI920">NeonSign.java</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="list-view.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="tree-view.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2011, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
