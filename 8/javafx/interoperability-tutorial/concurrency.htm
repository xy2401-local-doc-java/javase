<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>1 Concurrency in JavaFX (Release 8)</title>
<meta name="description" content="This chapter describes the capabilities provided by the javafx.concurrent package to create multithreaded applications.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXIP.pdf">PDF</a> | <a href="../JFXIP.epub">ePub</a> | <a href="../JFXIP.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Interoperability</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="fx_concurrency.htm">Previous Page</a><a class="button" title="Next Page" href="fx_swing.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="BAEEADBA" name="BAEEADBA" class="anchor"></a><a id="JFXIP546" name="JFXIP546" class="anchor"></a>
<h1 class="chapter"><span class="secnum">1</span> Concurrency in JavaFX</h1>
<a id="JFXIP615" name="JFXIP615" class="anchor"></a>
<p>This chapter describes the capabilities provided by the <code>javafx.concurrent</code> package to create multithreaded applications.</p>
<p>You learn how to keep your JavaFX application user interface (UI) responsive by delegating time-consuming task execution to background threads.</p>
<a id="JFXIP547" name="JFXIP547" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref10" name="sthref10" class="anchor"></a>
<h2 class="sect1">Why Use the javafx.concurrent Package?</h2>
<p>The JavaFX scene graph, which represents the graphical user interface of a JavaFX application, is not thread-safe and can only be accessed and modified from the UI thread also known as the JavaFX Application thread. Implementing long-running tasks on the JavaFX Application thread inevitably makes an application UI unresponsive. A best practice is to do these tasks on one or more background threads and let the JavaFX Application thread process user events.</p>
<p>If you have special requirements or need extra power over the code, implementing a background worker by creating a Runnable object and a new thread is an appropriate way to go. Note that at some point you must communicate with the JavaFX Application thread, either with a result or with the progress of the background task.</p>
<p>For the most cases and for the majority of developers the recommended way is to use the JavaFX APIs provided by the <code>javafx.concurrent</code> package, which takes care of multithreaded code that interacts with the UI and ensures that this interaction happens on the correct thread.</p>
</div>
<!-- class="sect1" -->
<a id="JFXIP548" name="JFXIP548" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref11" name="sthref11" class="anchor"></a>
<h2 class="sect1">Overview of the javafx.concurrent Package</h2>
<p>The Java platform provides a complete set of concurrency libraries available through the <code>java.util.concurrent</code> package. The <code>javafx.concurrent</code> package leverages the existing API by considering the JavaFX Application thread and other constraints faced by GUI developers.</p>
<p>The <code>javafx.concurrent</code> package consists of the <code>Worker</code> interface and two concrete implementations, <code>Task</code> and <code>Service</code> classes. The <code>Worker</code> interface provides APIs that are useful for a background worker to communicate with the UI. The <code>Task</code> class is a fully observable implementation of the <code>java.util.concurrent.FutureTask</code> class. The <code>Task</code> class enables developers to implement asynchronous tasks in JavaFX applications. The <code>Service</code> class executes tasks.</p>
<p>The <code>WorkerStateEvent</code> class specifies an event that occurs whenever the state of a Worker implementation changes. Both the <code>Task</code> and <code>Service</code> classes implement the <code>EventTarget</code> interface and thus support listening to the state events.</p>
<a id="BAEBCAJI" name="BAEBCAJI" class="anchor"></a><a id="JFXIP549" name="JFXIP549" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The Worker Interface</h3>
<p>The <code>Worker</code> interface defines an object that performs some work on one or more background threads. The state of the Worker object is observable and usable from the JavaFX Application thread.</p>
<p>The lifecycle of the Worker object is defined as follows. When created, the Worker object is in the <code>READY</code> state. Upon being scheduled for work, the Worker object transitions to the <code>SCHEDULED</code> state. After that, when the Worker object is performing the work, its state becomes <code>RUNNING</code>. Note that even when the Worker object is immediately started without being scheduled, it first transitions to the <code>SCHEDULED</code> state and then to the <code>RUNNING</code> state. The state of a Worker object that completes successfully is <code>SUCCEEDED</code>, and the <code>value</code> property is set to the result of this Worker object. Otherwise, if any exceptions are thrown during the execution of the Worker object, its state becomes <code>FAILED</code> and the <code>exception</code> property is set to the type of the exception that occurred. At any time before the end of the Worker object the developer can interrupt it by invoking the <code>cancel</code> method, which puts the Worker object into the <code>CANCELLED</code> state.</p>
<p>Distinctions in the lifecycle of a <code>ScheduledService</code> object can be found in the <a href="#BAEEHIGG">The ScheduledService Class</a> section.</p>
<p>The progress of the work being done by the Worker object can be obtained through three different properties such as <code>totalWork</code>, <code>workDone</code>, and <code>progress</code>.</p>
<p>For more information on the range of the parameter values, see the API documentation.</p>
</div>
<!-- class="sect2" -->
<a id="BAECJJHI" name="BAECJJHI" class="anchor"></a><a id="JFXIP550" name="JFXIP550" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The Task Class</h3>
<p>Tasks are used to implement the logic of work that needs to be done on a background thread. First, you need to extend the <code>Task</code> class. Your implementation of the <code>Task</code> class must override the <code>call</code> method to do the background work and return the result.</p>
<p>The <code>call</code> method is invoked on the background thread, therefore this method can only manipulate states that are safe to read and write from a background thread. For example, manipulating an active scene graph from the <code>call</code> method throws runtime exceptions. On the other hand, the <code>Task</code> class is designed to be used with JavaFX GUI applications, and it ensures that any changes to public properties, change notifications for errors or cancellation, event handlers, and states occur on the JavaFX Application thread. Inside the <code>call</code> method, you can use the <code>updateProgress</code>, <code>updateMessage</code>, <code>updateTitle</code> methods, which update the values of the corresponding properties on the JavaFX Application thread. However, if the task was canceled, a return value from the <code>call</code> method is ignored.</p>
<p>Note that the <code>Task</code> class fits into the Java concurrency libraries because it inherits from the <code>java.utils.concurrent.FutureTask</code> class, which implements the <code>Runnable</code> interface. For this reason, a Task object can be used within the Java concurrency <code>Executor</code> API and also can be passed to a thread as a parameter. You can call the Task object directly by using the <code>FutureTask.run()</code> method, which enables calling this task from another background thread. Having a good understanding of the Java concurrency API will help you understand concurrency in JavaFX.</p>
<p>A task can be started in one of the following ways:</p>
<ul>
<li>
<p>By starting a thread with the given task as a parameter:</p>
<p><code>Thread th = new Thread(task);</code></p>
<p><code>th.setDaemon(true);</code></p>
<p><code>th.start();</code></p>
</li>
<li>
<p>By using the <code>ExecutorService</code> API:</p>
<p><code>ExecutorService.submit(task);</code></p>
</li>
</ul>
<p>The <code>Task</code> class defines a one-time object that cannot be reused. If you need a reusable Worker object, use the <code>Service</code> class.</p>
<a id="JFXIP551" name="JFXIP551" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref12" name="sthref12" class="anchor"></a>
<h4 class="sect3">Cancelling the Task</h4>
<p>There is no reliable way in Java to stop a thread in process. However, the task must stop processing whenever <code>cancel</code> is called on the task. The task is supposed to check periodically during its work whether it was cancelled by using the <code>isCancelled</code> method within the body of the <code>call</code> method. <a href="#BABCHBEA">Example 1-1</a> shows a correct implementation of the <code>Task</code> class that checks for cancellation.</p>
<div class="example"><a id="BABCHBEA" name="BABCHBEA" class="anchor"></a><a id="JFXIP552" name="JFXIP552" class="anchor"></a>
<p class="titleinexample">Example 1-1</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.concurrent.Task;

Task&lt;Integer&gt; task = new Task&lt;Integer&gt;() {
    @Override protected Integer call() throws Exception {
        int iterations;
        for (iterations = 0; iterations &lt; 100000; iterations++) {
            if (isCancelled()) {
               break;
            }
            System.out.println("Iteration " + iterations);
        }
        return iterations;
    }
};
</pre></div>
<!-- class="example" -->
<p>If the task implementation has blocking calls such as <code>Thread.sleep</code> and the task is cancelled while in a blocking call, an <code>InterruptedException</code> is thrown. For these tasks, an interrupted thread may be the signal for a cancelled task. Therefore, tasks that have blocking calls must double-check the <code>isCancelled</code> method to ensure that the <code>InterruptedException</code> was thrown due to the cancellation of the task as shown in <a href="#BABBHBHE">Example 1-2</a>.</p>
<div class="example"><a id="BABBHBHE" name="BABBHBHE" class="anchor"></a><a id="JFXIP553" name="JFXIP553" class="anchor"></a>
<p class="titleinexample">Example 1-2</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.concurrent.Task;

Task&lt;Integer&gt; task = new Task&lt;Integer&gt;() {
    @Override protected Integer call() throws Exception {
        int iterations;
        for (iterations = 0; iterations &lt; 1000; iterations++) {
            if (isCancelled()) {
                updateMessage("Cancelled");
                break;
            }
            updateMessage("Iteration " + iterations);
            updateProgress(iterations, 1000);
 
            //Block the thread for a short time, but be sure
            //to check the InterruptedException for cancellation
            try {
                Thread.sleep(100);
            } catch (InterruptedException interrupted) {
                if (isCancelled()) {
                    updateMessage("Cancelled");
                    break;
                }
            }
        }
        return iterations;
    }
};
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="JFXIP554" name="JFXIP554" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref13" name="sthref13" class="anchor"></a>
<h4 class="sect3">Showing the Progress of a Background Task</h4>
<p>A typical use case in multithreaded applications is showing the progress of a background task. Suppose you have a background task that counts from one to one million and a progress bar, and you must update the progress on this progress bar as the counter runs in the background. <a href="#BABGJIDB">Example 1-3</a> shows how to update a progress bar.</p>
<div class="example"><a id="BABGJIDB" name="BABGJIDB" class="anchor"></a><a id="JFXIP555" name="JFXIP555" class="anchor"></a>
<p class="titleinexample">Example 1-3</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.concurrent.Task;

Task task = new Task&lt;Void&gt;() {
    @Override public Void call() {
        static final int max = 1000000;
        for (int i=1; i&lt;=max; i++) {
            if (isCancelled()) {
               break;
            }
            updateProgress(i, max);
        }
        return null;
    }
};
ProgressBar bar = new ProgressBar();
bar.progressProperty().bind(task.progressProperty());
new Thread(task).start();
</pre></div>
<!-- class="example" -->
<p>First, you create the task by overriding the <code>call</code> method where you implement the logic of the work to be done and invoke the <code>updateProgress</code> method, which updates the <code>progress</code>, <code>totalWork</code>, and <code>workDone</code> properties of the task. This is important because you can now use the <code>progressProperty</code> method to retrieve the progress of the task and bind the progress of the bar to the progress of the task.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BAEBGBDF" name="BAEBGBDF" class="anchor"></a><a id="JFXIP556" name="JFXIP556" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The Service Class</h3>
<p>The <code>Service</code> class is designed to execute a Task object on one or several background threads. The <code>Service</code> class methods and states must only be accessed on the JavaFX Application thread. The purpose of this class is to help the developer to implement the correct interaction between the background threads and the JavaFX Application thread.</p>
<p>You have the following control over the Service object: you can start, cancel and restart it as you need. To start the Service object, use the <code>Service.start()</code> method.</p>
<p>Using the <code>Service</code> class, you can observe the state of the background work and optionally cancel it. Later, you can reset the service and restart it. Thus, the service can be defined declaratively and restarted on demand.</p>
<p>For a service that needs to be automatically restarted, see <a href="#BAEEHIGG">The ScheduledService Class</a> section.</p>
<p>When implementing the subclasses of the <code>Service</code> class, be sure to expose the input parameters to the Task object as properties of the subclass.</p>
<p>The service can be executed in one of the following ways:</p>
<ul>
<li>
<p>By an Executor object, if it is specified for the given service</p>
</li>
<li>
<p>By a daemon thread, if no executor is specified</p>
</li>
<li>
<p>By a custom executor such as a ThreadPoolExecutor</p>
</li>
</ul>
<p><a href="#BABCCGCI">Example 1-4</a> shows an implementation of the <code>Service</code> class which reads the first line from any URL and returns it as a string.</p>
<div class="example"><a id="BABCCGCI" name="BABCCGCI" class="anchor"></a><a id="JFXIP557" name="JFXIP557" class="anchor"></a>
<p class="titleinexample">Example 1-4</p>
<pre xml:space="preserve" class="oac_no_warn">import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.EventHandler;
import javafx.stage.Stage;

public class FirstLineServiceApp extends Application {

    @Override
    public void start(Stage stage) throws Exception {
        FirstLineService service = new FirstLineService();
        service.setUrl("http://google.com");
        service.setOnSucceeded(new EventHandler&lt;WorkerStateEvent&gt;() {

            @Override
            public void handle(WorkerStateEvent t) {
                System.out.println("done:" + t.getSource().getValue());
            }
        });
        service.start();
    }

    public static void main(String[] args) {
        launch();
    }

    private static class FirstLineService extends Service&lt;String&gt; {
        private StringProperty url = new SimpleStringProperty();

        public final void setUrl(String value) {
            url.set(value);
        }

        public final String getUrl() {
            return url.get();
        }

        public final StringProperty urlProperty() {
           return url;
        }


        @Override
        protected Task&lt;String&gt; createTask() {
            return new Task&lt;String&gt;() {
                @Override
                protected String call()
                        throws IOException, MalformedURLException {
                    try ( BufferedReader in = new BufferedReader(
                                new InputStreamReader(
                                    new URL(getUrl()).openStream;
                            in = new BufferedReader(
                                new InputStreamReader(u.openStream()))) {
                        return in.readLine();
                    }
                }
        };
    }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BAEHAEBE" name="BAEHAEBE" class="anchor"></a><a id="JFXIP558" name="JFXIP558" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The WorkerStateEvent Class and State Transitions</h3>
<p>Whenever the state of the Worker implementation changes, an appropriate event, defined by the <code>WorkerStateEvent</code> class, occurs. For example, when the Task object transitions to the <code>SUCCEEDED</code> state, the <code>WORKER_STATE_SUCCEEDED</code> event occurs, the <code>onSucceeded</code> event handler is called, after which the protected convenience method <code>succeeded</code> is invoked on the JavaFX Application thread.</p>
<p>There are several protected convenience methods such as <code>cancelled</code>, <code>failed</code>, <code>running</code>, <code>scheduled</code>, and <code>succeeded</code>, which are invoked when the Worker implementation transitions to the corresponding state. These methods can be overridden by subclasses of the <code>Task</code> and <code>Service</code> classes when the state is changed to implement the logic of your application. <a href="#BABFIDDD">Example 1-5</a> shows a Task implementation that updates the status message on the task's success, cancellation, and failure.</p>
<div class="example"><a id="BABFIDDD" name="BABFIDDD" class="anchor"></a><a id="JFXIP559" name="JFXIP559" class="anchor"></a>
<p class="titleinexample">Example 1-5</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.concurrent.Task;

Task&lt;Integer&gt; task = new Task&lt;Integer&gt;() {
    @Override protected Integer call() throws Exception {
        int iterations = 0;
        for (iterations = 0; iterations &lt; 100000; iterations++) {
            if (isCancelled()) {
                break;
            }
            System.out.println("Iteration " + iterations);
        }
        return iterations;
    }

    @Override protected void succeeded() {
        super.succeeded();
        updateMessage("Done!");
    }

    @Override protected void cancelled() {
        super.cancelled();
        updateMessage("Cancelled!");
    }

@Override protected void failed() {
    super.failed();
    updateMessage("Failed!");
    }
};

</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BAEEHIGG" name="BAEEHIGG" class="anchor"></a><a id="JFXIP800" name="JFXIP800" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The ScheduledService Class</h3>
<p>Many use cases that involve polling require a service that restarts automatically. To meet those needs, the <code>Service</code> class was extended to produce the <code>ScheduledService</code> class. The <code>ScheduledService</code> class represents a service that automatically restarts after a successful execution and, under special conditions, upon its failure.</p>
<p>When created, the <code>ScheduledService</code> object is in the <code>READY</code> state.</p>
<p>After calling the <code>ScheduledService.start()</code> or <code>ScheduledService.restart()</code> method, the <code>ScheduledService</code> object transitions to the <code>SCHEDULED</code> state for the duration specified by the <code>delay</code> property.</p>
<p>In the <code>RUNNING</code> state, the <code>ScheduledService</code> object executes its task.</p>
<a id="JFXIP801" name="JFXIP801" class="anchor"></a><a id="sthref14" name="sthref14" class="anchor"></a>
<p class="subhead2">Task completes successfully</p>
<p>After the task completes, the <code>ScheduledService</code> object transitions to the <code>SUCCEEDED</code> state, then to the <code>READY</code> state, and then back to the <code>SCHEDULED</code> state. The duration of being in the <code>SCHEDULED</code> state depends on the time when the last transition to the <code>RUNNING</code> state occurred, the current time, and the value of the <code>period</code> property, which defines the minimum amount of time between two consequent runs. If the previous execution completed before the period expired, then the <code>ScheduledService</code> object stays in the <code>SCHEDULED</code> state until the period expires. Otherwise, if the previous execution took longer than the specified period, then the <code>ScheduledService</code> object instantly transitions to the <code>RUNNING</code> state.</p>
<a id="JFXIP802" name="JFXIP802" class="anchor"></a><a id="sthref15" name="sthref15" class="anchor"></a>
<p class="subhead2">Task fails</p>
<p>In the case when the task terminates in the <code>FAILED</code> state, the <code>ScheduledService</code> object either restarts or quits, depending on the values for the <code>restartOnFailure, backoffStrategy</code>, and <code>maximumFailureCount</code> properties.</p>
<p>If the <code>restartOnFailure</code> property is <code>false</code>, then the <code>ScheduledService</code> object transitions to the <code>FAILED</code> state and quits. In this case, you can restart the failed <code>ScheduledService</code> object manually.</p>
<p>If the <code>restartOnFailure</code> property is <code>true,</code> then the <code>ScheduledService</code> object transitions to the <code>SCHEDULED</code> state and remains in this state for the duration of <code>cumulativePeriod</code> property, which is obtained as a result of calling the <code>backoffStrategy</code> property. Using the <code>cumulativePeriod</code> property, you can force the failed <code>ScheduledService</code> object to wait longer before the next run. After the <code>ScheduledService</code> completes successfully, the <code>cumulativePeriod</code> property is reset to the value of the <code>period</code> property. When the amount of consequent failures reaches the value of the <code>maximumFailureCount</code> property, the <code>ScheduledService</code> object transitions to the <code>FAILED</code> state and quits.</p>
<p>Any changes that happen to the <code>delay</code> and <code>period</code> properties while the <code>ScheduledService</code> object is running will be taken into account on the next iteration. The default values for the <code>delay</code> and <code>period</code> properties are set to 0.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXIP805" name="JFXIP805" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref16" name="sthref16" class="anchor"></a>
<h2 class="sect1">Conclusion</h2>
<p>In this chapter, you learned the basic capabilities provided by the <code>javafx.concurrent</code> package and became familiar with several examples of the <code>Task</code> and <code>Service</code> classes implementation. For more examples of how to create the Task implementation correctly, see the API documentation for the <a href="../api/javafx/concurrent/Task.html"><code>Task</code></a> class.</p>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Interoperability</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">About This Document</a></li>
        <li><a href="preface.htm#sthref4">Audience</a></li>
        <li><a href="preface.htm#sthref5">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref7">Related Documents</a></li>
        <li><a href="preface.htm#sthref8">Conventions</a></li>
      </ul>
    </li>
    <li><a href="fx_concurrency.htm#sthref9">Part I Concurrency in JavaFX</a>
    <ul>
    <li><a class="selected" href="concurrency.htm#JFXIP546">1 Concurrency in JavaFX</a>
      <ul>
        <li><a href="concurrency.htm#sthref10">Why Use the javafx.concurrent Package?</a></li>
        <li><a href="concurrency.htm#sthref11">Overview of the javafx.concurrent Package</a>
          <ul>
          <li><a href="concurrency.htm#JFXIP549">The Worker Interface</a></li>
          <li><a href="concurrency.htm#JFXIP550">The Task Class</a></li>
          <li><a href="concurrency.htm#JFXIP556">The Service Class</a></li>
          <li><a href="concurrency.htm#JFXIP558">The WorkerStateEvent Class and State Transitions</a></li>
          <li><a href="concurrency.htm#JFXIP800">The ScheduledService Class</a></li>
          </ul>
        </li>
        <li><a href="concurrency.htm#sthref16">Conclusion</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="fx_swing.htm#JFXIP561">Part II JavaFX-Swing Interoperability</a>
    <ul>
    <li><a href="overview.htm#JFXIP102">2 The JavaFX Advantage for Swing Developers</a>
      <ul>
        <li><a href="overview.htm#sthref17">Using FXML</a></li>
        <li><a href="overview.htm#sthref18">JavaFX Scene Builder</a></li>
        <li><a href="overview.htm#sthref19">CSS Support</a></li>
        <li><a href="overview.htm#sthref20">JavaFX Media Support</a></li>
        <li><a href="overview.htm#sthref21">Animation</a></li>
        <li><a href="overview.htm#sthref22">HTML Content</a></li>
      </ul>
    </li>
    <li><a href="swing-fx-interoperability.htm#JFXIP109">3 Integrating JavaFX into Swing Applications</a>
      <ul>
        <li><a href="swing-fx-interoperability.htm#sthref23">Adding JavaFX Content to a Swing Component</a></li>
        <li><a href="swing-fx-interoperability.htm#sthref24">Swing&#x2013;JavaFX Interoperability and Threads</a>
          <ul>
          <li><a href="swing-fx-interoperability.htm#sthref25">Changing JavaFX Data in Response to a Change in Swing Data</a></li>
          <li><a href="swing-fx-interoperability.htm#sthref26">Changing Swing Data in Response to a Change in JavaFX Data</a></li>
          </ul>
        </li>
        <li><a href="swing-fx-interoperability.htm#sthref27">Introducing the SimpleSwingBrowser Application</a>
          <ul>
          <li><a href="swing-fx-interoperability.htm#sthref29">Initializing Swing Data</a></li>
          <li><a href="swing-fx-interoperability.htm#sthref30">Loading JavaFX Content</a></li>
          <li><a href="swing-fx-interoperability.htm#sthref31">Updating Swing Data</a></li>
          </ul>
        </li>
        <li><a href="swing-fx-interoperability.htm#sthref32">Application Files</a></li>
      </ul>
    </li>
    <li><a href="jtable-barchart.htm#JFXIP131">4 Enriching Swing Applications with JavaFX Functionality</a>
      <ul>
        <li><a href="jtable-barchart.htm#sthref35">Sample Swing Application</a></li>
        <li><a href="jtable-barchart.htm#sthref37">Integrating JavaFX Bar Chart</a></li>
        <li><a href="jtable-barchart.htm#sthref39">Application Files</a></li>
      </ul>
    </li>
    <li><a href="media-player.htm#JFXIP147">5 Leveraging Applications with Media Features</a>
      <ul>
        <li><a href="media-player.htm#sthref42">About Media Integration</a></li>
        <li><a href="media-player.htm#sthref43">Building the Media Player Application</a>
          <ul>
          <li><a href="media-player.htm#sthref45">Skinning the Application with CSS</a></li>
          <li><a href="media-player.htm#sthref46">Adding a New Control to the Control Bar</a></li>
          </ul>
        </li>
        <li><a href="media-player.htm#sthref47">Application Files</a></li>
      </ul>
    </li>
    <li><a href="port-to-javafx.htm#JFXIP164">6 Implementing a Swing Application in JavaFX</a>
      <ul>
        <li><a href="port-to-javafx.htm#sthref51">Analyzing the Converter Application Developed in Swing</a></li>
        <li><a href="port-to-javafx.htm#sthref52">Planning the Converter Application in JavaFX</a></li>
        <li><a href="port-to-javafx.htm#sthref53">Creating the Converter Application in JavaFX</a>
          <ul>
          <li><a href="port-to-javafx.htm#sthref54">Standard JavaFX Pattern to Create the GUI</a></li>
          <li><a href="port-to-javafx.htm#sthref55">Containers and Layouts</a></li>
          <li><a href="port-to-javafx.htm#sthref56">UI Controls</a></li>
          <li><a href="port-to-javafx.htm#sthref57">Mechanism of Getting Notifications on User Actions and Binding</a></li>
          <li><a href="port-to-javafx.htm#sthref58">Creating the ConversionPanel Class</a></li>
          <li><a href="port-to-javafx.htm#sthref64">Creating the Converter Class</a></li>
          </ul>
        </li>
        <li><a href="port-to-javafx.htm#sthref69">Application Files</a></li>
      </ul>
    </li>
    <li><a href="embed-swing.htm#JFXIP566">7 Embedding Swing Content in JavaFX Applications</a>
      <ul>
        <li><a href="embed-swing.htm#sthref72">SwingNode Class</a></li>
        <li><a href="embed-swing.htm#sthref74">Embedding Swing Content and Handling Events</a></li>
        <li><a href="embed-swing.htm#sthref76">Adding Interoperability Between Swing and JavaFX Components</a></li>
        <li><a href="embed-swing.htm#sthref81">Conclusion</a></li>
        <li><a href="embed-swing.htm#sthref82">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="fx_swt.htm#sthref85">Part III Interoperability with SWT</a>
    <ul>
    <li><a href="fx-swt_interoperability.htm#JFXIP101">8 JavaFX Interoperability with SWT</a>
      <ul>
        <li><a href="fx-swt_interoperability.htm#JFXIP543">Introduction</a></li>
        <li><a href="fx-swt_interoperability.htm#JFXIP606">Adding JavaFX Content to an SWT Component</a></li>
        <li><a href="fx-swt_interoperability.htm#JFXIP541">Creating SWT-JavaFX Applications in an IDE</a></li>
        <li><a href="fx-swt_interoperability.htm#JFXIP609">Packaging SWT-JavaFX Applications</a>
          <ul>
          <li><a href="fx-swt_interoperability.htm#sthref89">Packaging the Application when JavaFX is Bundled with the JDK</a></li>
          <li><a href="fx-swt_interoperability.htm#sthref90">Packaging the Application with a Standalone JavaFX Installation</a></li>
          </ul>
        </li>
        <li><a href="fx-swt_interoperability.htm#JFXIP799">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="sample-source-code.htm#sthref92">Part IV Source Code for the Interoperability Tutorial</a>
    <ul>
    <li><a href="simpleswingbrowserjava.htm#JFXIP620">A SimpleSwingBrowser.java</a></li>
    <li><a href="swinginteropjava.htm#JFXIP637">B SwingInterop.java</a></li>
    <li><a href="sampletablemodeljava.htm#JFXIP654">C SampleTableModel.java</a></li>
    <li><a href="mediaplayerjava.htm#JFXIP671">D MediaPlayer.java</a></li>
    <li><a href="mediacontroljava.htm#JFXIP688">E MediaControl.java</a></li>
    <li><a href="mediaplayercss.htm#JFXIP795">F mediaplayer.css</a></li>
    <li><a href="converterjava.htm#JFXIP705">G Converter.java</a></li>
    <li><a href="conversionpaneljava.htm#JFXIP722">H ConversionPanel.java</a></li>
    <li><a href="swingnodesamplejava.htm#JFXIP739">I SwingNodeSample.java</a></li>
    <li><a href="buttonhtmldemojava.htm#JFXIP784">J ButtonHtmlDemo.java</a></li>
    <li><a href="enablefxbuttonjava.htm#JFXIP756">K EnableFXButton.java</a></li>
    <li><a href="enablebuttonsjava.htm#JFXIP791">L EnableButtons.java</a></li>
    <li><a href="imagesources.htm#sthref93">M Image Source Files</a>
      <ul>
        <li><a href="imagesources.htm#JFXIP809">left.gif</a></li>
        <li><a href="imagesources.htm#JFXIP810">right.gif</a></li>
        <li><a href="imagesources.htm#JFXIP811">down.gif</a></li>
        <li><a href="imagesources.htm#JFXIP812">middle.gif</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="fx_concurrency.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="fx_swing.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2012, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
