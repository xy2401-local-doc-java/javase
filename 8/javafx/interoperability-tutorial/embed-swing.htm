<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>7 Embedding Swing Content in JavaFX Applications (Release 8)</title>
<meta name="description" content="This article describes how to embed Swing components in JavaFX applications. It discusses the threading restrictions and provides working applications that illustrate Swing buttons with HTML content embedded in a JavaFX application and interoperability between Swing and JavaFX buttons.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXIP.pdf">PDF</a> | <a href="../JFXIP.epub">ePub</a> | <a href="../JFXIP.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Interoperability</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="port-to-javafx.htm">Previous Page</a><a class="button" title="Next Page" href="fx_swt.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="BCGCDEBD" name="BCGCDEBD" class="anchor"></a><a id="JFXIP566" name="JFXIP566" class="anchor"></a>
<h1 class="chapter"><span class="secnum">7</span> Embedding Swing Content in JavaFX Applications</h1>
<a id="JFXIP567" name="JFXIP567" class="anchor"></a>
<p>This article describes how to embed Swing components in JavaFX applications. It discusses the threading restrictions and provides working applications that illustrate Swing buttons with HTML content embedded in a JavaFX application and interoperability between Swing and JavaFX buttons.</p>
<p>The ability to embed JavaFX content in Swing applications has existed since the JavaFX 2.0 release. To enhance the interoperability of JavaFX and Swing, JavaFX 8 introduces a new class that provides reverse integration and enables developers to embed Swing components in JavaFX applications.</p>
<p>Before you run any code from this article, install <a target="_blank" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK 8</a> on your computer.</p>
<a id="JFXIP568" name="JFXIP568" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref72" name="sthref72" class="anchor"></a>
<h2 class="sect1">SwingNode Class</h2>
<p>JavaFX 8 introduces the <code>SwingNode</code> class, which is located in the <code>javafx.embed.swing</code> package. This class enables you to embed Swing content in a JavaFX application. To specify the content of the SwingNode object, call the <code>setContent</code> method, which accepts an instance of the <code>javax.swing.JComponent</code> class. You can call the <code>setContent</code> method on either the JavaFX application thread or event dispatch thread (EDT). However, to access the Swing content, ensure that your code runs on EDT, because the standard Swing threading restrictions apply.</p>
<p>The code shown in <a href="#CHDIJHGG">Example 7-1</a> illustrates the general pattern of using the <code>SwingNode</code> class.</p>
<div class="example"><a id="CHDIJHGG" name="CHDIJHGG" class="anchor"></a><a id="JFXIP569" name="JFXIP569" class="anchor"></a>
<p class="titleinexample">Example 7-1</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.application.Application;
import javafx.embed.swing.SwingNode;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javax.swing.JButton;
import javax.swing.SwingUtilities;

public class SwingFx extends Application {

    @Override
    public void start (Stage stage) {
        final SwingNode swingNode = new SwingNode();

        createSwingContent(swingNode);

        StackPane pane = new StackPane();
        pane.getChildren().add(swingNode);

        stage.setTitle("Swing in JavaFX");
        stage.setScene(new Scene(pane, 250, 150));
        stage.show();
    }

    private void createSwingContent(final SwingNode swingNode) {
        SwingUtilities.invokeLater(() -&gt; {
            swingNode.setContent(new JButton("Click me!"));
        });
    }
}
</pre></div>
<!-- class="example" -->
<p>When run, this code produces the output shown in <a href="#BABFFIEG">Figure 7-1</a>.</p>
<div class="figure"><a id="BABFFIEG" name="BABFFIEG" class="anchor"></a><a id="JFXIP570" name="JFXIP570" class="anchor"></a>
<p class="titleinfigure">Figure 7-1 Swing JButton Embedded in a JavaFX Application</p>
<img width="266" height="188" src="img/click_me.jpg" alt="Description of Figure 7-1 follows" title="Description of Figure 7-1 follows" longdesc="img_text/click_me.htm" /><br />
<a id="sthref73" name="sthref73" href="img_text/click_me.htm">Description of "Figure 7-1 Swing JButton Embedded in a JavaFX Application"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="JFXIP571" name="JFXIP571" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref74" name="sthref74" class="anchor"></a>
<h2 class="sect1">Embedding Swing Content and Handling Events</h2>
<p>The <code>ButtonHtmlDemo</code> in the <a href="../../../tutorial/uiswing/components/">Swing tutorial</a> adds font, color, and other formatting to three buttons shown in <a href="#BABIEFCF">Example 7-2</a> and <a href="#BABGHAJD">Example 7-3</a>. The buttons respond to mouse and keyboard events as shown in <a href="#BABBFDBA">Example 7-5</a> and <a href="#BABBAGJG">Example 7-6</a>. <a href="#BABBIDCD">Figure 7-2</a> shows the three buttons created using Swing in the <code>ButtonHtmlDemo</code> now embedded in a JavaFX Application (<code>SwingNodeSample</code>). You will create the <code>SwingNodeSample</code> application and ensure that all events are delivered to an appropriate Swing button and get processed.</p>
<div class="figure"><a id="BABBIDCD" name="BABBIDCD" class="anchor"></a><a id="JFXIP572" name="JFXIP572" class="anchor"></a>
<p class="titleinfigure">Figure 7-2 ButtonHtmlDemo Embedded in a JavaFX Application</p>
<img width="466" height="138" src="img/embedded_buttons.jpg" alt="Description of Figure 7-2 follows" title="Description of Figure 7-2 follows" longdesc="img_text/embedded_buttons.htm" /><br />
<a id="sthref75" name="sthref75" href="img_text/embedded_buttons.htm">Description of "Figure 7-2 ButtonHtmlDemo Embedded in a JavaFX Application"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The left and right buttons have multiple lines of text implemented with the HTML formatting as shown in <a href="#BABIEFCF">Example 7-2</a>.</p>
<div class="example"><a id="BABIEFCF" name="BABIEFCF" class="anchor"></a><a id="JFXIP573" name="JFXIP573" class="anchor"></a>
<p class="titleinexample">Example 7-2</p>
<pre xml:space="preserve" class="oac_no_warn">b1 = new JButton("&lt;html&gt;&lt;center&gt;&lt;b&gt;&lt;u&gt;D&lt;/u&gt;isable&lt;/b&gt;&lt;br&gt;"
                 + "&lt;font color=#ffffdd&gt;middle button&lt;/font&gt;",
                 leftButtonIcon);

b3 = new JButton("&lt;html&gt;&lt;center&gt;&lt;b&gt;&lt;u&gt;E&lt;/u&gt;nable&lt;/b&gt;&lt;br&gt;"
                 + "&lt;font color=#ffffdd&gt;middle button&lt;/font&gt;",
                 rightButtonIcon);
</pre></div>
<!-- class="example" -->
<p>The simple format of middle button does not require HTML, so it is initialized with a string label and an image as shown in <a href="#BABGHAJD">Example 7-3</a>.</p>
<div class="example"><a id="BABGHAJD" name="BABGHAJD" class="anchor"></a><a id="JFXIP574" name="JFXIP574" class="anchor"></a>
<p class="titleinexample">Example 7-3</p>
<pre xml:space="preserve" class="oac_no_warn">b2 = new JButton("middle button", middleButtonIcon);
</pre></div>
<!-- class="example" -->
<p>All three buttons have the tooltips and mnemonic characters as shown in <a href="#BABFJGDF">Example 7-4</a>.</p>
<div class="example"><a id="BABFJGDF" name="BABFJGDF" class="anchor"></a><a id="JFXIP575" name="JFXIP575" class="anchor"></a>
<p class="titleinexample">Example 7-4</p>
<pre xml:space="preserve" class="oac_no_warn">b1.setToolTipText("Click this button to disable the middle button.");
b2.setToolTipText("This middle button does nothing when you click it.");
b3.setToolTipText("Click this button to enable the middle button.");

b1.setMnemonic(KeyEvent.VK_D);
b2.setMnemonic(KeyEvent.VK_M);
b3.setMnemonic(KeyEvent.VK_E);
</pre></div>
<!-- class="example" -->
<p>The left and right buttons are used to disable and enable the middle button respectively. To enable the application to detect and respond to user action on these buttons, attach action listeners and set action commands as shown in <a href="#BABBFDBA">Example 7-5</a>.</p>
<div class="example"><a id="BABBFDBA" name="BABBFDBA" class="anchor"></a><a id="JFXIP576" name="JFXIP576" class="anchor"></a>
<p class="titleinexample">Example 7-5</p>
<pre xml:space="preserve" class="oac_no_warn">b1.addActionListener(this);
b3.addActionListener(this);

b1.setActionCommand("disable");
b3.setActionCommand("enable");
</pre></div>
<!-- class="example" -->
<p>Implement the <code>actionPerformed</code> method shown in <a href="#BABBAGJG">Example 7-6</a>. This method is called when the user clicks the left or right button.</p>
<div class="example"><a id="BABBAGJG" name="BABBAGJG" class="anchor"></a><a id="JFXIP577" name="JFXIP577" class="anchor"></a>
<p class="titleinexample">Example 7-6</p>
<pre xml:space="preserve" class="oac_no_warn">public void actionPerformed(ActionEvent e) {
    if ("disable".equals(e.getActionCommand())) {
        b2.setEnabled(false);
        b1.setEnabled(false);
        b3.setEnabled(true);
    } else {
        b2.setEnabled(true);
        b1.setEnabled(true);
        b3.setEnabled(false);
    }
}
</pre></div>
<!-- class="example" -->
<p>See the complete code of the <code><a href="buttonhtmldemojava.htm#BGBEDJFJ">ButtonHtmlDemo.java</a></code> class.</p>
<p>Now set up a JavaFX project and run the <code>SwingNodeSample</code> application.</p>
<p>To create the <code>SwingNodeSample</code> application:</p>
<p>Ensure that JDK 8 is installed on your computer. Then set up a JavaFX project in NetBeans IDE:</p>
<ol>
<li>
<p>From the <span class="bold">File</span> menu, choose <span class="bold">New Project</span>.</p>
</li>
<li>
<p>In the <span class="bold">JavaFX</span> application category, choose <span class="bold">JavaFX Application</span> and click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Name the project <span class="bold">SwingNodeSample</span> and select a JavaFX platform based on JDK 8. Click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>In the <span class="bold">Projects</span> window, right-click the swingnodesample folder under Source Packages. Choose <span class="bold">New</span> and then choose <span class="bold">Java class</span>.</p>
</li>
<li>
<p>Name a new class <span class="bold">ButtonHtml</span> and click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>Copy the code of the <code><a href="buttonhtmldemojava.htm#BGBEDJFJ">ButtonHtmlDemo.java</a></code> class and paste it in the project.</p>
</li>
<li>
<p>Open the swingnodesample folder on your disk and create the images folder.</p>
</li>
<li>
<p>Download the images <code><a href="imagesources.htm#CHDFBCDB">left.gif</a></code>, <code><a href="imagesources.htm#CHDCBJAI">middle.gif</a></code>, and <code><a href="imagesources.htm#CHDHFCJJ">right.gif</a></code> by right clicking the image and selecting Save Image As, and save them in the images folder.</p>
</li>
<li>
<p>In the <code>SwingNodeSample</code> class, remove the code inside the <code>start</code> method that was automatically generated by NetBeans.</p>
</li>
<li>
<p>Instead, create a <code>SwingNode</code> object and implement the <code>start</code> method as shown in <a href="#CEGGIGFD">Example 7-7</a>.</p>
<div class="example"><a id="CEGGIGFD" name="CEGGIGFD" class="anchor"></a><a id="JFXIP578" name="JFXIP578" class="anchor"></a>
<p class="titleinexample">Example 7-7</p>
<pre xml:space="preserve" class="oac_no_warn">@Override
public void start(Stage stage) {
    final SwingNode swingNode = new SwingNode();
    createSwingContent(swingNode);
    StackPane pane = new StackPane();
    pane.getChildren().add(swingNode);

    Scene scene = new Scene(pane, 450, 100);
    stage.setScene(scene);
    stage.setTitle("ButtonHtmlDemo Embedded in JavaFX");
    stage.show();
}
</pre></div>
<!-- class="example" --></li>
<li>
<p>To embed the three buttons produced by the <code>ButtonHtml</code> class, set the content of the SwingNode object to be an instance of the <code>ButtonHtml</code> class as shown in <a href="#CEGDCDCB">Example 7-8</a>.</p>
<div class="example"><a id="CEGDCDCB" name="CEGDCDCB" class="anchor"></a><a id="JFXIP579" name="JFXIP579" class="anchor"></a>
<p class="titleinexample">Example 7-8</p>
<pre xml:space="preserve" class="oac_no_warn">private void createSwingContent(final SwingNode swingNode) {
    SwingUtilities.invokeLater(() -&gt; {
        <span class="bold">swingNode.setContent(new ButtonHtml());</span>
    });
}
</pre></div>
<!-- class="example" --></li>
<li>
<p>Press Ctrl (or Cmd) + Shift + I to correct the import statements.</p>
</li>
</ol>
<p>To download the source code of the <code>SwingNodeSample</code> application, click the <a href="../sample-apps/SwingNodeSample.zip"><code>SwingNodeSample.zip</code></a> link.</p>
<p>Run the SwingNodeSample project and ensure that all means of interactivity provided for the buttons work as they should:</p>
<ul>
<li>
<p>With the mouse, hover over the buttons and see the tooltips.</p>
</li>
<li>
<p>Click the left and right buttons to disable and enable the middle button respectively.</p>
</li>
<li>
<p>Press Alt + D and Alt + E keys to disable and enable the middle button respectively.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="JFXIP580" name="JFXIP580" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref76" name="sthref76" class="anchor"></a>
<h2 class="sect1">Adding Interoperability Between Swing and JavaFX Components</h2>
<p>You can provide interoperability between JavaFX buttons and Swing buttons. For example, the <code>EnableFXButton</code> application shown in <a href="#CEGCFDDI">Figure 7-3</a> enables a user to click Swing buttons to disable or enable a JavaFX button. Conversely, the <code>EnableButtons</code> application shown in <a href="#CEGJFHID">Figure 7-4</a> enables a user to click a JavaFX button to activate a Swing button.</p>
<div class="figure"><a id="CEGCFDDI" name="CEGCFDDI" class="anchor"></a><a id="JFXIP581" name="JFXIP581" class="anchor"></a>
<p class="titleinfigure">Figure 7-3 Enable JavaFX Button Sample</p>
<img width="316" height="138" src="img/enable_fx_button.jpg" alt="Description of Figure 7-3 follows" title="Description of Figure 7-3 follows" longdesc="img_text/enable_fx_button.htm" /><br />
<a id="sthref77" name="sthref77" href="img_text/enable_fx_button.htm">Description of "Figure 7-3 Enable JavaFX Button Sample"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="JFXIP582" name="JFXIP582" class="anchor"></a><a id="sthref78" name="sthref78" class="anchor"></a>
<p class="subhead2">Using Swing Buttons to Operate a JavaFX Button</p>
<p>The <code>EnableFXButton</code> application is created by modifying the <code>SwingNodeSample</code> application and making the middle button an instance of the <code>javafx.scene.control.Button</code> class. In the modified application, the Swing buttons (Disable FX button) and (Enable FX button) are used to disable and enable a JavaFX button (FX Button). <a href="#CEGCFDDI">Figure 7-3</a> shows the <code>EnableFXButton</code> application.</p>
<p>Follow these steps to create the <code>EnableFXButton</code> application:</p>
<ol>
<li>
<p>From the <span class="bold">File</span> menu, choose <span class="bold">New Project</span>.</p>
</li>
<li>
<p>In the <span class="bold">JavaFX</span> application category, choose <span class="bold">JavaFX Application</span> and click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Name the project <span class="bold">EnableFXButton</span>.</p>
</li>
<li>
<p>In the <span class="bold">Projects</span> window, right-click the enablefxbutton folder under Source Packages. Choose <span class="bold">New</span> and then choose <span class="bold">Java class</span>.</p>
</li>
<li>
<p>Name the new class <span class="bold">ButtonHtml</span> and click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>Copy the code of the <code><a href="buttonhtmldemojava.htm#BGBEDJFJ">ButtonHtmlDemo.java</a></code> class and paste it in the project.</p>
</li>
<li>
<p>Change the package declaration to <code>enablefxbutton</code>.</p>
</li>
<li>
<p>Open the enablefxbutton folder on your disk and create the images folder.</p>
</li>
<li>
<p>Download the images <code><a href="imagesources.htm#CHDBEFBH">down.gif</a></code> and <code><a href="imagesources.htm#CHDCBJAI">middle.gif</a></code> by right clicking the image and selecting Save Image As, and save them in the images folder.</p>
</li>
<li>
<p>In the <code>EnableFXButton</code> class, declare a <code>Button</code> object as shown in <a href="#CEGEJICD">Example 7-9</a>.</p>
<div class="example"><a id="CEGEJICD" name="CEGEJICD" class="anchor"></a><a id="JFXIP583" name="JFXIP583" class="anchor"></a>
<p class="titleinexample">Example 7-9</p>
<pre xml:space="preserve" class="oac_no_warn">public class EnableFXButton extends Application {
    public static Button fxbutton;
</pre></div>
<!-- class="example" --></li>
<li>
<p>Remove the code inside the <code>start</code> method that was automatically generated by NetBeans IDE and implement the <code>start</code> method as shown in <a href="#CEGIEBCF">Example 7-10</a>.</p>
<div class="example"><a id="CEGIEBCF" name="CEGIEBCF" class="anchor"></a><a id="JFXIP584" name="JFXIP584" class="anchor"></a>
<p class="titleinexample">Example 7-10</p>
<pre xml:space="preserve" class="oac_no_warn">@Override
public void start(Stage stage) {
    final SwingNode swingNode = new SwingNode();
    createSwingContent(swingNode);
    BorderPane pane = new BorderPane();
    fxbutton = new Button("FX button");
    
    pane.setTop(swingNode);
    pane.setCenter(fxbutton);

    Scene scene = new Scene(pane, 300, 100);
    stage.setScene(scene);
    stage.setTitle("Enable JavaFX Button");
    stage.show();
}
</pre></div>
<!-- class="example" --></li>
<li>
<p>Add the import statement for the <code>SwingNode</code> class as shown in <a href="#CEGEFGBB">Example 7-11</a>.</p>
<div class="example"><a id="CEGEFGBB" name="CEGEFGBB" class="anchor"></a><a id="JFXIP585" name="JFXIP585" class="anchor"></a>
<p class="titleinexample">Example 7-11</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.embed.swing.SwingNode;
</pre></div>
<!-- class="example" --></li>
<li>
<p>Implement the <code>createSwingContent</code> method to set the content of the SwingNode object as shown in <a href="#CEGEFIAD">Example 7-12</a>.</p>
<div class="example"><a id="CEGEFIAD" name="CEGEFIAD" class="anchor"></a><a id="JFXIP586" name="JFXIP586" class="anchor"></a>
<p class="titleinexample">Example 7-12</p>
<pre xml:space="preserve" class="oac_no_warn">private void createSwingContent(final SwingNode swingNode) {
    <span class="bold">SwingUtilities.invokeLater(()</span> -&gt; {
        <span class="bold">swingNode.setContent(new ButtonHtml());</span>
    });
}
</pre></div>
<!-- class="example" --></li>
<li>
<p>Press Ctrl (or Cmd) + Shift + I to add an import statement to the <code>javax.swing.SwingUtilities</code> class.</p>
</li>
<li>
<p>Replace the initialization of <code>fxbutton</code> with the code shown in <a href="#CEGJAICA">Example 7-13</a> to add an image and set a tooltip and style for the JavaFX button.</p>
<div class="example"><a id="CEGJAICA" name="CEGJAICA" class="anchor"></a><a id="JFXIP587" name="JFXIP587" class="anchor"></a>
<p class="titleinexample">Example 7-13</p>
<pre xml:space="preserve" class="oac_no_warn">Image fxButtonIcon = new Image(
getClass().getResourceAsStream("images/middle.gif"));

fxbutton = new Button("FX button", new ImageView(fxButtonIcon));
fxbutton.setTooltip(
new Tooltip("This middle button does nothing when you click it."));
fxbutton.setStyle("-fx-font: 22 arial; -fx-base: #cce6ff;");
</pre></div>
<!-- class="example" --></li>
<li>
<p>Press Ctrl (or Cmd) + Shift + I to add the import statements shown in <a href="#CEGEAFHA">Example 7-14</a>.</p>
<div class="example"><a id="CEGEAFHA" name="CEGEAFHA" class="anchor"></a><a id="JFXIP588" name="JFXIP588" class="anchor"></a>
<p class="titleinexample">Example 7-14</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.control.Tooltip;
</pre></div>
<!-- class="example" --></li>
<li>
<p>Open the <code>ButtonHtml</code> class and remove all code related to the middle button <code>b2</code>.</p>
</li>
<li>
<p>Use the <code>down.gif</code> image for <code>b1</code> (Disable FX button) and <code>b3</code> (Enable FX button) buttons as shown in <a href="#CEGDAJHB">Example 7-15</a>.</p>
<div class="example"><a id="CEGDAJHB" name="CEGDAJHB" class="anchor"></a><a id="JFXIP589" name="JFXIP589" class="anchor"></a>
<p class="titleinexample">Example 7-15</p>
<pre xml:space="preserve" class="oac_no_warn">ImageIcon buttonIcon = createImageIcon("images/down.gif");
b1 = new JButton("&lt;html&gt;&lt;center&gt;&lt;b&gt;&lt;u&gt;D&lt;/u&gt;isable&lt;/b&gt;&lt;br&gt;"
                         + "&lt;font color=#ffffdd&gt;FX button&lt;/font&gt;", 
                         <span class="bold">buttonIcon</span>);
b3 = new JButton("&lt;html&gt;&lt;center&gt;&lt;b&gt;&lt;u&gt;E&lt;/u&gt;nable&lt;/b&gt;&lt;br&gt;"
                         + "&lt;font color=#ffffdd&gt;FX button&lt;/font&gt;", 
                         <span class="bold">buttonIcon</span>);
</pre></div>
<!-- class="example" --></li>
<li>
<p>Modify the <code>actionPerformed</code> method to implement the disabling and enabling of <code>fxbutton</code> as shown in <a href="#CEGDAIHD">Example 7-16</a>. Note that the disabling and enabling of the JavaFX button must happen on the JavaFX application thread.</p>
<div class="example"><a id="CEGDAIHD" name="CEGDAIHD" class="anchor"></a><a id="JFXIP590" name="JFXIP590" class="anchor"></a>
<p class="titleinexample">Example 7-16</p>
<pre xml:space="preserve" class="oac_no_warn">@Override
public void actionPerformed(ActionEvent e) {
    if ("disable".equals(e.getActionCommand())) {
        <span class="bold">Platform.runLater(()</span> -&gt; {
            <span class="bold">EnableFXButton.fxbutton.setDisable(true);</span>
        });
        b1.setEnabled(false);
        b3.setEnabled(true);
    } else {
        <span class="bold">Platform.runLater(() -&gt; </span>{
            <span class="bold">EnableFXButton.fxbutton.setDisable(false);</span>
        });
        b1.setEnabled(true);
        b3.setEnabled(false);
    }
}
</pre></div>
<!-- class="example" --></li>
<li>
<p>Press Ctrl (or Cmd) + Shift + I to add the import statement shown in <a href="#CEGBJCJE">Example 7-17</a>.</p>
<div class="example"><a id="CEGBJCJE" name="CEGBJCJE" class="anchor"></a><a id="JFXIP591" name="JFXIP591" class="anchor"></a>
<p class="titleinexample">Example 7-17</p>
<pre xml:space="preserve" class="oac_no_warn">import javafx.application.Platform;
</pre></div>
<!-- class="example" --></li>
<li>
<p>Run the application and click the Swing buttons to disable and enable the JavaFX button, as shown in <a href="#CEGCFDDI">Figure 7-3</a>.</p>
</li>
</ol>
<a id="JFXIP592" name="JFXIP592" class="anchor"></a><a id="sthref79" name="sthref79" class="anchor"></a>
<p class="subhead2">Using a JavaFX Button to Operate a Swing Button</p>
<p>You can further modify the <code>EnableFXButton</code> application and implement the <code>setOnAction</code> method for the JavaFX button so that clicking the JavaFX button activates the Swing button. The modified application (<code>EnableButtons</code>) is shown in <a href="#CEGJFHID">Figure 7-4</a>.</p>
<div class="figure"><a id="CEGJFHID" name="CEGJFHID" class="anchor"></a><a id="JFXIP593" name="JFXIP593" class="anchor"></a>
<p class="titleinfigure">Figure 7-4 Enable Buttons Sample</p>
<img width="316" height="138" src="img/enable_two_buttons.jpg" alt="Description of Figure 7-4 follows" title="Description of Figure 7-4 follows" longdesc="img_text/enable_two_buttons.htm" /><br />
<a id="sthref80" name="sthref80" href="img_text/enable_two_buttons.htm">Description of "Figure 7-4 Enable Buttons Sample"</a><br />
<br /></div>
<!-- class="figure" -->
<p>To create the <code>EnableButtons</code> application:</p>
<ol>
<li>
<p>Copy the EnableFXButton project and save it under the EnableButtons name.</p>
</li>
<li>
<p>Rename the <code>EnableFXButton</code> class to <code>EnableButtons</code> and the <code>enablefxbutton</code> package to <code>enablebuttons</code>.</p>
</li>
<li>
<p>Correct the package statement in both the <code>ButtonHtml</code> and <code>EnableButtons</code> classes.</p>
</li>
<li>
<p>Open the <code>EnableButtons</code> class and make the <code>pane</code> an instance of the <code>FlowPane</code> class as shown in <a href="#CEGJDFGI">Example 7-18</a>.</p>
<div class="example"><a id="CEGJDFGI" name="CEGJDFGI" class="anchor"></a><a id="JFXIP594" name="JFXIP594" class="anchor"></a>
<p class="titleinexample">Example 7-18</p>
<pre xml:space="preserve" class="oac_no_warn">FlowPane pane = new FlowPane();
</pre></div>
<!-- class="example" --></li>
<li>
<p>Modify the initialization of the <code>fxButtonIcon</code> variable to use the <code>left.gif</code> image as shown in <a href="#CEGIABBC">Example 7-19</a>.</p>
<div class="example"><a id="CEGIABBC" name="CEGIABBC" class="anchor"></a><a id="JFXIP595" name="JFXIP595" class="anchor"></a>
<p class="titleinexample">Example 7-19</p>
<pre xml:space="preserve" class="oac_no_warn">Image fxButtonIcon = new Image(
getClass().getResourceAsStream("images/left.gif"));
</pre></div>
<!-- class="example" --></li>
<li>
<p>Change the <code>fxbutton</code> text, tooltip, and font size and set the <code>disableProperty</code> to true as shown in <a href="#CEGEIABE">Example 7-20</a>.</p>
<div class="example"><a id="CEGEIABE" name="CEGEIABE" class="anchor"></a><a id="JFXIP596" name="JFXIP596" class="anchor"></a>
<p class="titleinexample">Example 7-20</p>
<pre xml:space="preserve" class="oac_no_warn">fxbutton = new Button("Enable JButton", new ImageView(fxButtonIcon));
fxbutton.setTooltip(
new Tooltip("Click this button to enable the Swing button."));
fxbutton.setStyle("-fx-font: 18 arial; -fx-base: #cce6ff;");
fxbutton.setDisable(true);
</pre></div>
<!-- class="example" --></li>
<li>
<p>Implement the <code>setOnAction</code> method by using a lambda expression as shown in <a href="#CEGBHDDA">Example 7-21</a>. Note that you must change Swing objects on event dispatch thread only.</p>
<div class="example"><a id="CEGBHDDA" name="CEGBHDDA" class="anchor"></a><a id="JFXIP597" name="JFXIP597" class="anchor"></a>
<p class="titleinexample">Example 7-21</p>
<pre xml:space="preserve" class="oac_no_warn">fxbutton.setOnAction(ActionEvent e) {
    <span class="bold">SwingUtilities.invokeLater(() -&gt; {</span>
        <span class="bold">ButtonHtml.b1.setEnabled(true);</span>
    });
    fxbutton.setDisable(true);
    }
});
</pre></div>
<!-- class="example" -->
<div class="infoboxnote">
<p class="notep1">Note:</p>
<p>Ignore the error mark that appears on the left of the line that enables <code>b1</code>. You will correct this error at step 11.</p>
</div>
</li>
<li>
<p>Press Ctrl (or Cmd) + Shift + I to add the import statement to the <code>javafx.event.ActionEvent</code> class.</p>
</li>
<li>
<p>Add the <code>swingNode</code> and <code>fxbutton</code> objects to the layout container as shown in <a href="#CEGJCJGC">Example 7-22</a>.</p>
<div class="example"><a id="CEGJCJGC" name="CEGJCJGC" class="anchor"></a><a id="JFXIP598" name="JFXIP598" class="anchor"></a>
<p class="titleinexample">Example 7-22</p>
<pre xml:space="preserve" class="oac_no_warn">pane.getChildren().addAll(swingNode, fxbutton);
</pre></div>
<!-- class="example" --></li>
<li>
<p>Change the application title to "Enable Buttons Sample" as shown in <a href="#CEGDAJAA">Example 7-23</a>.</p>
<div class="example"><a id="CEGDAJAA" name="CEGDAJAA" class="anchor"></a><a id="JFXIP599" name="JFXIP599" class="anchor"></a>
<p class="titleinexample">Example 7-23</p>
<pre xml:space="preserve" class="oac_no_warn">stage.setTitle("Enable Buttons Sample");
</pre></div>
<!-- class="example" --></li>
<li>
<p>Open the <code>ButtonHtml</code> class and change the modifier of the <code>b1</code> button to <code>public static</code>. Notice that the error mark in the <code>EnableButtons</code> class has disappeared.</p>
</li>
<li>
<p>Remove all code related to the <code>b3</code> button and the line that sets an action command for <code>b1</code>.</p>
</li>
<li>
<p>Modify the <code>actionPerformed</code> method by using a lambda expression as shown in <a href="#CEGDDCBE">Example 7-24</a>.</p>
<div class="example"><a id="CEGDDCBE" name="CEGDDCBE" class="anchor"></a><a id="JFXIP600" name="JFXIP600" class="anchor"></a>
<p class="titleinexample">Example 7-24</p>
<pre xml:space="preserve" class="oac_no_warn">@Override
public void actionPerformed(ActionEvent e) {
    <span class="bold">Platform.runLater(() -&gt; {</span>
        EnableButtons.fxbutton.setDisable(false);
    });
    b1.setEnabled(false);
}
</pre></div>
<!-- class="example" --></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="JFXIP601" name="JFXIP601" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref81" name="sthref81" class="anchor"></a>
<h2 class="sect1">Conclusion</h2>
<p>In this chapter you learned how to embed existing Swing components in JavaFX applications and provide interoperability between Swing and JavaFX objects. The ability to embed Swing content into JavaFX applications enables developers to migrate Swing applications that use complex third-party Swing components for which they do not have source code or applications that have legacy modules that exist only in maintenance mode.</p>
</div>
<!-- class="sect1" -->
<a id="JFXIP619" name="JFXIP619" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref82" name="sthref82" class="anchor"></a>
<h2 class="sect1">Application Files</h2>
<p class="itemizedlisttitle">Source Code&nbsp;</p>
<ul>
<li>
<p><code><a href="swingnodesamplejava.htm#BABFGJGE">SwingNodeSample.java</a></code></p>
</li>
<li>
<p><code><a href="buttonhtmldemojava.htm#BGBEDJFJ">ButtonHtmlDemo.java</a></code></p>
</li>
<li>
<p><code><a href="enablebuttonsjava.htm#BABGJCAA">EnableButtons.java</a></code></p>
</li>
<li>
<p><code><a href="enablefxbuttonjava.htm#CHDIEDBA">EnableFXButton.java</a></code></p>
</li>
</ul>
<p class="itemizedlisttitle">NetBeans Projects&nbsp;</p>
<ul>
<li>
<p><a href="../sample-apps/SwingNodeSample.zip"><code>SwingNodeSample.zip</code></a></p>
</li>
<li>
<p><a href="../sample-apps/EnableButtons.zip"><code>EnableButtons.zip</code></a></p>
</li>
<li>
<p><a href="../sample-apps/EnableFXButton.zip"><code>EnableFXButton.zip</code></a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Interoperability</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">About This Document</a></li>
        <li><a href="preface.htm#sthref4">Audience</a></li>
        <li><a href="preface.htm#sthref5">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref7">Related Documents</a></li>
        <li><a href="preface.htm#sthref8">Conventions</a></li>
      </ul>
    </li>
    <li><a href="fx_concurrency.htm#sthref9">Part I Concurrency in JavaFX</a>
    <ul>
    <li><a href="concurrency.htm#JFXIP546">1 Concurrency in JavaFX</a>
      <ul>
        <li><a href="concurrency.htm#sthref10">Why Use the javafx.concurrent Package?</a></li>
        <li><a href="concurrency.htm#sthref11">Overview of the javafx.concurrent Package</a>
          <ul>
          <li><a href="concurrency.htm#JFXIP549">The Worker Interface</a></li>
          <li><a href="concurrency.htm#JFXIP550">The Task Class</a></li>
          <li><a href="concurrency.htm#JFXIP556">The Service Class</a></li>
          <li><a href="concurrency.htm#JFXIP558">The WorkerStateEvent Class and State Transitions</a></li>
          <li><a href="concurrency.htm#JFXIP800">The ScheduledService Class</a></li>
          </ul>
        </li>
        <li><a href="concurrency.htm#sthref16">Conclusion</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="fx_swing.htm#JFXIP561">Part II JavaFX-Swing Interoperability</a>
    <ul>
    <li><a href="overview.htm#JFXIP102">2 The JavaFX Advantage for Swing Developers</a>
      <ul>
        <li><a href="overview.htm#sthref17">Using FXML</a></li>
        <li><a href="overview.htm#sthref18">JavaFX Scene Builder</a></li>
        <li><a href="overview.htm#sthref19">CSS Support</a></li>
        <li><a href="overview.htm#sthref20">JavaFX Media Support</a></li>
        <li><a href="overview.htm#sthref21">Animation</a></li>
        <li><a href="overview.htm#sthref22">HTML Content</a></li>
      </ul>
    </li>
    <li><a href="swing-fx-interoperability.htm#JFXIP109">3 Integrating JavaFX into Swing Applications</a>
      <ul>
        <li><a href="swing-fx-interoperability.htm#sthref23">Adding JavaFX Content to a Swing Component</a></li>
        <li><a href="swing-fx-interoperability.htm#sthref24">Swing&#x2013;JavaFX Interoperability and Threads</a>
          <ul>
          <li><a href="swing-fx-interoperability.htm#sthref25">Changing JavaFX Data in Response to a Change in Swing Data</a></li>
          <li><a href="swing-fx-interoperability.htm#sthref26">Changing Swing Data in Response to a Change in JavaFX Data</a></li>
          </ul>
        </li>
        <li><a href="swing-fx-interoperability.htm#sthref27">Introducing the SimpleSwingBrowser Application</a>
          <ul>
          <li><a href="swing-fx-interoperability.htm#sthref29">Initializing Swing Data</a></li>
          <li><a href="swing-fx-interoperability.htm#sthref30">Loading JavaFX Content</a></li>
          <li><a href="swing-fx-interoperability.htm#sthref31">Updating Swing Data</a></li>
          </ul>
        </li>
        <li><a href="swing-fx-interoperability.htm#sthref32">Application Files</a></li>
      </ul>
    </li>
    <li><a href="jtable-barchart.htm#JFXIP131">4 Enriching Swing Applications with JavaFX Functionality</a>
      <ul>
        <li><a href="jtable-barchart.htm#sthref35">Sample Swing Application</a></li>
        <li><a href="jtable-barchart.htm#sthref37">Integrating JavaFX Bar Chart</a></li>
        <li><a href="jtable-barchart.htm#sthref39">Application Files</a></li>
      </ul>
    </li>
    <li><a href="media-player.htm#JFXIP147">5 Leveraging Applications with Media Features</a>
      <ul>
        <li><a href="media-player.htm#sthref42">About Media Integration</a></li>
        <li><a href="media-player.htm#sthref43">Building the Media Player Application</a>
          <ul>
          <li><a href="media-player.htm#sthref45">Skinning the Application with CSS</a></li>
          <li><a href="media-player.htm#sthref46">Adding a New Control to the Control Bar</a></li>
          </ul>
        </li>
        <li><a href="media-player.htm#sthref47">Application Files</a></li>
      </ul>
    </li>
    <li><a href="port-to-javafx.htm#JFXIP164">6 Implementing a Swing Application in JavaFX</a>
      <ul>
        <li><a href="port-to-javafx.htm#sthref51">Analyzing the Converter Application Developed in Swing</a></li>
        <li><a href="port-to-javafx.htm#sthref52">Planning the Converter Application in JavaFX</a></li>
        <li><a href="port-to-javafx.htm#sthref53">Creating the Converter Application in JavaFX</a>
          <ul>
          <li><a href="port-to-javafx.htm#sthref54">Standard JavaFX Pattern to Create the GUI</a></li>
          <li><a href="port-to-javafx.htm#sthref55">Containers and Layouts</a></li>
          <li><a href="port-to-javafx.htm#sthref56">UI Controls</a></li>
          <li><a href="port-to-javafx.htm#sthref57">Mechanism of Getting Notifications on User Actions and Binding</a></li>
          <li><a href="port-to-javafx.htm#sthref58">Creating the ConversionPanel Class</a></li>
          <li><a href="port-to-javafx.htm#sthref64">Creating the Converter Class</a></li>
          </ul>
        </li>
        <li><a href="port-to-javafx.htm#sthref69">Application Files</a></li>
      </ul>
    </li>
    <li><a class="selected" href="embed-swing.htm#JFXIP566">7 Embedding Swing Content in JavaFX Applications</a>
      <ul>
        <li><a href="embed-swing.htm#sthref72">SwingNode Class</a></li>
        <li><a href="embed-swing.htm#sthref74">Embedding Swing Content and Handling Events</a></li>
        <li><a href="embed-swing.htm#sthref76">Adding Interoperability Between Swing and JavaFX Components</a></li>
        <li><a href="embed-swing.htm#sthref81">Conclusion</a></li>
        <li><a href="embed-swing.htm#sthref82">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="fx_swt.htm#sthref85">Part III Interoperability with SWT</a>
    <ul>
    <li><a href="fx-swt_interoperability.htm#JFXIP101">8 JavaFX Interoperability with SWT</a>
      <ul>
        <li><a href="fx-swt_interoperability.htm#JFXIP543">Introduction</a></li>
        <li><a href="fx-swt_interoperability.htm#JFXIP606">Adding JavaFX Content to an SWT Component</a></li>
        <li><a href="fx-swt_interoperability.htm#JFXIP541">Creating SWT-JavaFX Applications in an IDE</a></li>
        <li><a href="fx-swt_interoperability.htm#JFXIP609">Packaging SWT-JavaFX Applications</a>
          <ul>
          <li><a href="fx-swt_interoperability.htm#sthref89">Packaging the Application when JavaFX is Bundled with the JDK</a></li>
          <li><a href="fx-swt_interoperability.htm#sthref90">Packaging the Application with a Standalone JavaFX Installation</a></li>
          </ul>
        </li>
        <li><a href="fx-swt_interoperability.htm#JFXIP799">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="sample-source-code.htm#sthref92">Part IV Source Code for the Interoperability Tutorial</a>
    <ul>
    <li><a href="simpleswingbrowserjava.htm#JFXIP620">A SimpleSwingBrowser.java</a></li>
    <li><a href="swinginteropjava.htm#JFXIP637">B SwingInterop.java</a></li>
    <li><a href="sampletablemodeljava.htm#JFXIP654">C SampleTableModel.java</a></li>
    <li><a href="mediaplayerjava.htm#JFXIP671">D MediaPlayer.java</a></li>
    <li><a href="mediacontroljava.htm#JFXIP688">E MediaControl.java</a></li>
    <li><a href="mediaplayercss.htm#JFXIP795">F mediaplayer.css</a></li>
    <li><a href="converterjava.htm#JFXIP705">G Converter.java</a></li>
    <li><a href="conversionpaneljava.htm#JFXIP722">H ConversionPanel.java</a></li>
    <li><a href="swingnodesamplejava.htm#JFXIP739">I SwingNodeSample.java</a></li>
    <li><a href="buttonhtmldemojava.htm#JFXIP784">J ButtonHtmlDemo.java</a></li>
    <li><a href="enablefxbuttonjava.htm#JFXIP756">K EnableFXButton.java</a></li>
    <li><a href="enablebuttonsjava.htm#JFXIP791">L EnableButtons.java</a></li>
    <li><a href="imagesources.htm#sthref93">M Image Source Files</a>
      <ul>
        <li><a href="imagesources.htm#JFXIP809">left.gif</a></li>
        <li><a href="imagesources.htm#JFXIP810">right.gif</a></li>
        <li><a href="imagesources.htm#JFXIP811">down.gif</a></li>
        <li><a href="imagesources.htm#JFXIP812">middle.gif</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="port-to-javafx.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="fx_swt.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2012, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
