<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>2 Understanding the JavaFX Architecture (Release 8)</title>
<meta name="description" content="The chapter gives a high level description of the JavaFX architecture and ecosystem.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXST.pdf">PDF</a> | <a href="../JFXST.epub">ePub</a> | <a href="../JFXST.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Getting Started with JavaFX</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="jfx-overview.htm">Previous Page</a><a class="button" title="Next Page" href="get_start_apps.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="CHDFDAFF" name="CHDFDAFF" class="anchor"></a><a id="JFXST788" name="JFXST788" class="anchor"></a>
<h1 class="chapter"><span class="secnum">2</span> Understanding the JavaFX Architecture</h1>
<a id="JFXST789" name="JFXST789" class="anchor"></a>
<p>The chapter gives a high level description of the JavaFX architecture and ecosystem.</p>
<p><a href="#BABDFFDG">Figure 2-1</a> illustrates the architectural components of the JavaFX platform. The sections following the diagram describe each component and how the parts interconnect. Below the JavaFX public APIs lies the engine that runs your JavaFX code. It is composed of subcomponents that include a JavaFX high performance graphics engine, called Prism; a small and efficient windowing system, called Glass; a media engine, and a web engine. Although these components are not exposed publicly, their descriptions can help you to better understand what runs a JavaFX application.</p>
<ul>
<li>
<p><a href="#A1106328">Scene Graph</a></p>
</li>
<li>
<p><a href="#A1106498">Java Public APIs for JavaFX Features</a></p>
</li>
<li>
<p><a href="#A1106308">Graphics System</a></p>
</li>
<li>
<p><a href="#A1107438">Glass Windowing Toolkit</a></p>
</li>
<li>
<p><a href="#A1106643">Media and Images</a></p>
</li>
<li>
<p><a href="#A1107318">Web Component</a></p>
</li>
<li>
<p><a href="#A1106843">CSS</a></p>
</li>
<li>
<p><a href="#A1106920">UI Controls</a></p>
</li>
<li>
<p><a href="#A1107212">Layout</a></p>
</li>
<li>
<p><a href="#A1106739">2-D and 3-D Transformations</a></p>
</li>
<li>
<p><a href="#A1106693">Visual Effects</a></p>
</li>
</ul>
<div class="figure"><a id="BABDFFDG" name="BABDFFDG" class="anchor"></a><a id="JFXST102" name="JFXST102" class="anchor"></a>
<p class="titleinfigure">Figure 2-1 JavaFX Architecture Diagram</p>
<img width="549" height="177" src="img/jfxar_dt_001_arch-diag.png" alt="Description of Figure 2-1 follows" title="Description of Figure 2-1 follows" longdesc="img_text/jfxar_dt_001_arch-diag.htm" /><br />
<a id="sthref11" name="sthref11" href="img_text/jfxar_dt_001_arch-diag.htm">Description of "Figure 2-1 JavaFX Architecture Diagram"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="A1106328" name="A1106328" class="anchor"></a><a id="JFXST790" name="JFXST790" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Scene Graph</h2>
<p>The JavaFX scene graph, shown as part of the top layer in <a href="#BABDFFDG">Figure 2-1</a>, is the starting point for constructing a JavaFX application. It is a hierarchical tree of nodes that represents all of the visual elements of the application's user interface. It can handle input and can be rendered.</p>
<p>A single element in a scene graph is called a node. Each node has an ID, style class, and bounding volume. With the exception of the root node of a scene graph, each node in a scene graph has a single parent and zero or more children. It can also have the following:</p>
<ul>
<li>
<p>Effects, such as blurs and shadows</p>
</li>
<li>
<p>Opacity</p>
</li>
<li>
<p>Transforms</p>
</li>
<li>
<p>Event handlers (such as mouse, key and input method)</p>
</li>
<li>
<p>An application-specific state</p>
</li>
</ul>
<p>Unlike in Swing and Abstract Window Toolkit (AWT), the JavaFX scene graph also includes the graphics primitives, such as rectangles and text, in addition to having controls, layout containers, images and media.</p>
<p>For most uses, the scene graph simplifies working with UIs, especially when rich UIs are used. Animating various graphics in the scene graph can be accomplished quickly using the javafx.animation APIs, and declarative methods, such as XML doc, also work well.</p>
<p>The <code>javafx.scene</code> API allows the creation and specification of several types of content, such as:</p>
<ul>
<li>
<p><span class="bold">Nodes</span>: Shapes (2-D and 3-D), images, media, embedded web browser, text, UI controls, charts, groups, and containers</p>
</li>
<li>
<p><span class="bold">State</span>: Transforms (positioning and orientation of nodes), visual effects, and other visual state of the content</p>
</li>
<li>
<p><span class="bold">Effects</span>: Simple objects that change the appearance of scene graph nodes, such as blurs, shadows, and color adjustment</p>
</li>
</ul>
<p>For more information, see the <a class="olink JFXSG107" href="../../javafx/scene-graph-tutorial/scenegraph.htm#JFXSG107">Working with the JavaFX Scene Graph</a> document.</p>
</div>
<!-- class="sect1" -->
<a id="A1106498" name="A1106498" class="anchor"></a><a id="JFXST104" name="JFXST104" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Java Public APIs for JavaFX Features</h2>
<p>The top layer of the JavaFX architecture shown in <a href="#BABDFFDG">Figure 2-1</a> provides a complete set of Java public APIs that support rich client application development. These APIs provide unparalleled freedom and flexibility to construct rich client applications. The JavaFX platform combines the best capabilities of the Java platform with comprehensive, immersive media functionality into an intuitive and comprehensive one-stop development environment. These Java APIs for JavaFX features:</p>
<ul>
<li>
<p>Allow the use of powerful Java features, such as generics, annotations, multithreading, and Lamda Expressions (introduced in Java SE 8).</p>
</li>
<li>
<p>Make it easier for Web developers to use JavaFX from other JVM-based dynamic languages, such as Groovy and JavaScript.</p>
</li>
<li>
<p>Allow Java developers to use other system languages, such as Groovy, for writing large or complex JavaFX applications.</p>
</li>
<li>
<p>Allow the use of binding which includes support for the high performance lazy binding, binding expressions, bound sequence expressions, and partial bind reevaluation. Alternative languages (like Groovy) can use this binding library to introduce binding syntax similar to that of JavaFX Script.</p>
</li>
<li>
<p>Extend the Java collections library to include observable lists and maps, which allow applications to wire user interfaces to data models, observe changes in those data models, and update the corresponding UI control accordingly.</p>
</li>
</ul>
<p>The JavaFX APIs and programming model are a continuation of the JavaFX 1.x product line. Most of the JavaFX APIs have been ported directly to Java. Some APIs, such as Layout and Media, along with many other details, have been improved and simplified based on feedback received from users of the JavaFX 1.x release. JavaFX relies more on web standards, such as CSS for styling controls and ARIA for accessibility specifications. The use of additional web standards is also under review.</p>
</div>
<!-- class="sect1" -->
<a id="A1106308" name="A1106308" class="anchor"></a><a id="JFXST105" name="JFXST105" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Graphics System</h2>
<p>The JavaFX Graphics System, shown in blue in <a href="#BABDFFDG">Figure 2-1</a>, is an implementation detail beneath the JavaFX scene graph layer. It supports both 2-D and 3-D scene graphs. It provides software rendering when the graphics hardware on a system is insufficient to support hardware accelerated rendering.</p>
<p>Two graphics accelerated pipelines are implemented on the JavaFX platform:</p>
<ul>
<li>
<p><span class="bold">Prism</span> processes render jobs. It can run on both hardware and software renderers, including 3-D. It is responsible for rasterization and rendering of JavaFX scenes. The following multiple render paths are possible based on the device being used:</p>
<ul>
<li>
<p>DirectX 9 on Windows XP and Windows Vista</p>
</li>
<li>
<p>DirectX 11 on Windows 7</p>
</li>
<li>
<p>OpenGL on Mac, Linux, Embedded</p>
</li>
<li>
<p>Software rendering when hardware acceleration is not possible</p>
<p>The fully hardware accelerated path is used when possible, but when it is not available, the software render path is used because the software render path is already distributed in all of the Java Runtime Environments (JREs). This is particularly important when handling 3-D scenes. However, performance is better when the hardware render paths are used.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Quantum Toolkit</span> ties Prism and Glass Windowing Toolkit together and makes them available to the JavaFX layer above them in the stack. It also manages the threading rules related to rendering versus events handling.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="A1107438" name="A1107438" class="anchor"></a><a id="JFXST106" name="JFXST106" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Glass Windowing Toolkit</h2>
<p>The Glass Windowing Toolkit, shown in beige in the middle portion of <a href="#BABDFFDG">Figure 2-1</a>, is the lowest level in the JavaFX graphics stack. Its main responsibility is to provide native operating services, such as managing the windows, timers, and surfaces. It serves as the platform-dependent layer that connects the JavaFX platform to the native operating system.</p>
<p>The Glass toolkit is also responsible for managing the event queue. Unlike the Abstract Window Toolkit (AWT), which manages its own event queue, the Glass toolkit uses the native operating system's event queue functionality to schedule thread usage. Also unlike AWT, the Glass toolkit runs on the same thread as the JavaFX application. In AWT, the native half of AWT runs on one thread and the Java level runs on another thread. This introduces a lot of issues, many of which are resolved in JavaFX by using the single JavaFX application thread approach.</p>
<a id="JFXST107" name="JFXST107" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref12" name="sthref12" class="anchor"></a>
<h3 class="sect2">Threads</h3>
<p>The system runs two or more of the following threads at any given time.</p>
<ul>
<li>
<p><span class="bold">JavaFX application thread</span>: This is the primary thread used by JavaFX application developers. Any &#x201D;live&#x201D; scene, which is a scene that is part of a window, must be accessed from this thread. A scene graph can be created and manipulated in a background thread, but when its root node is attached to any live object in the scene, that scene graph must be accessed from the JavaFX application thread. This enables developers to create complex scene graphs on a background thread while keeping animations on 'live' scenes smooth and fast. The JavaFX application thread is a different thread from the Swing and AWT Event Dispatch Thread (EDT), so care must be taken when embedding JavaFX code into Swing applications.</p>
</li>
<li>
<p><span class="bold">Prism render thread</span>: This thread handles the rendering separately from the event dispatcher. It allows frame N to be rendered while frame N +1 is being processed. This ability to perform concurrent processing is a big advantage, especially on modern systems that have multiple processors. The Prism render thread may also have multiple rasterization threads that help off-load work that needs to be done in rendering.</p>
</li>
<li>
<p><span class="bold">Media thread</span>: This thread runs in the background and synchronizes the latest frames through the scene graph by using the JavaFX application thread.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="JFXST108" name="JFXST108" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref13" name="sthref13" class="anchor"></a>
<h3 class="sect2">Pulse</h3>
<p>A pulse is an event that indicates to the JavaFX scene graph that it is time to synchronize the state of the elements on the scene graph with Prism. A pulse is throttled at 60 frames per second (fps) maximum and is fired whenever animations are running on the scene graph. Even when animation is not running, a pulse is scheduled when something in the scene graph is changed. For example, if a position of a button is changed, a pulse is scheduled.</p>
<p>When a pulse is fired, the state of the elements on the scene graph is synchronized down to the rendering layer. A pulse enables application developers a way to handle events asynchronously. This important feature allows the system to batch and execute events on the pulse.</p>
<p>Layout and CSS are also tied to pulse events. Numerous changes in the scene graph could lead to multiple layout or CSS updates, which could seriously degrade performance. The system automatically performs a CSS and layout pass once per pulse to avoid performance degradation. Application developers can also manually trigger layout passes as needed to take measurements prior to a pulse.</p>
<p>The Glass Windowing Toolkit is responsible for executing the pulse events. It uses the high-resolution native timers to make the execution.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="A1106643" name="A1106643" class="anchor"></a><a id="JFXST109" name="JFXST109" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Media and Images</h2>
<p>JavaFX media functionality is available through the <code>javafx.scene.media</code> APIs. JavaFX supports both visual and audio media. Support is provided for MP3, AIFF, and WAV audio files and FLV video files. JavaFX media functionality is provided as three separate components: the Media object represents a media file, the MediaPlayer plays a media file, and a MediaView is a node that displays the media.</p>
<p>The Media Engine component, shown in green in <a href="#BABDFFDG">Figure 2-1</a>, has been designed with performance and stability in mind and provides consistent behavior across platforms. For more information, read the <a class="olink JFXMD" href="http://www.oracle.com/pls/topic/lookup?ctx=javase80&id=JFXMD">Incorporating Media Assets into JavaFX Applications</a> document.</p>
</div>
<!-- class="sect1" -->
<a id="A1107318" name="A1107318" class="anchor"></a><a id="JFXST110" name="JFXST110" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Web Component</h2>
<p>The Web component is a JavaFX UI control, based on Webkit, that provides a Web viewer and full browsing functionality through its API. This Web Engine component, shown in orange in <a href="#BABDFFDG">Figure 2-1</a>, is based on WebKit, which is an open source web browser engine that supports HTML5, CSS, JavaScript, DOM, and SVG. It enables developers to implement the following features in their Java applications:</p>
<ul>
<li>
<p>Render HTML content from local or remote URL</p>
</li>
<li>
<p>Support history and provide Back and Forward navigation</p>
</li>
<li>
<p>Reload the content</p>
</li>
<li>
<p>Apply effects to the web component</p>
</li>
<li>
<p>Edit the HTML content</p>
</li>
<li>
<p>Execute JavaScript commands</p>
</li>
<li>
<p>Handle events</p>
</li>
</ul>
<p>This embedded browser component is composed of the following classes:</p>
<ul>
<li>
<p><code>WebEngine</code> provides basic web page browsing capability.</p>
</li>
<li>
<p><code>WebView</code> encapsulates a WebEngine object, incorporates HTML content into an application's scene, and provides fields and methods to apply effects and transformations. It is an extension of a <code>Node</code> class.</p>
</li>
</ul>
<p>In addition, Java calls can be controlled through JavaScript and vice versa to allow developers to make the best of both environments. For more detailed overview of the JavaFX embedded browser, see the <a class="olink JFXWV135" href="../../javafx/embedded-browser-tutorial/overview.htm#JFXWV135">Adding HTML Content to JavaFX Applications</a> document.</p>
</div>
<!-- class="sect1" -->
<a id="A1106843" name="A1106843" class="anchor"></a><a id="JFXST111" name="JFXST111" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">CSS</h2>
<p>JavaFX Cascading Style Sheets (CSS) provides the ability to apply customized styling to the user interface of a JavaFX application without changing any of that application's source code. CSS can be applied to any node in the JavaFX scene graph and are applied to the nodes asynchronously. JavaFX CSS styles can also be easily assigned to the scene at runtime, allowing an application's appearance to dynamically change.</p>
<p><a href="#BABICCFD">Figure 2-2</a> demonstrates the application of two different CSS styles to the same set of UI controls.</p>
<div class="figure"><a id="BABICCFD" name="BABICCFD" class="anchor"></a><a id="JFXST112" name="JFXST112" class="anchor"></a>
<p class="titleinfigure">Figure 2-2 CSS Style Sheet Sample</p>
<img width="622" height="234" src="img/css-style-sample.gif" alt="Description of Figure 2-2 follows" title="Description of Figure 2-2 follows" longdesc="img_text/css-style-sample.htm" /><br />
<a id="sthref14" name="sthref14" href="img_text/css-style-sample.htm">Description of "Figure 2-2 CSS Style Sheet Sample"</a><br />
<br /></div>
<!-- class="figure" -->
<p>JavaFX CSS is based on the W3C CSS version 2.1 specifications, with some additions from current work on version 3. The JavaFX CSS support and extensions have been designed to allow JavaFX CSS style sheets to be parsed cleanly by any compliant CSS parser, even one that does not support JavaFX extensions. This enables the mixing of CSS styles for JavaFX and for other purposes (such as for HTML pages) into a single style sheet. All JavaFX property names are prefixed with a vendor extension of &#x201D;<code>-fx-</code>&#x201D;, including those that might seem to be compatible with standard HTML CSS, because some JavaFX values have slightly different semantics.</p>
<p>For more detailed information about JavaFX CSS, see the <a class="olink JFXUI733" href="../../javafx/user-interface-tutorial/css_tutorial.htm#JFXUI733">Skinning JavaFX Applications with CSS</a> document.</p>
</div>
<!-- class="sect1" -->
<a id="A1106920" name="A1106920" class="anchor"></a><a id="JFXST113" name="JFXST113" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">UI Controls</h2>
<p>The JavaFX UI controls available through the JavaFX API are built by using nodes in the scene graph. They can take full advantage of the visually rich features of the JavaFX platform and are portable across different platforms. JavaFX CSS allows for theming and skinning of the UI controls.</p>
<p><a href="#CHDCDBCA">Figure 2-3</a> shows some of the UI controls that are currently supported. These controls reside in the <code>javafx.scene.control</code> package.</p>
<div class="figure"><a id="CHDCDBCA" name="CHDCDBCA" class="anchor"></a><a id="JFXST114" name="JFXST114" class="anchor"></a>
<p class="titleinfigure">Figure 2-3 JavaFX UI Controls Sample</p>
<img width="598" height="484" src="img/uicontrols.png" alt="Description of Figure 2-3 follows" title="Description of Figure 2-3 follows" longdesc="img_text/uicontrols.htm" /><br />
<a id="sthref15" name="sthref15" href="img_text/uicontrols.htm">Description of "Figure 2-3 JavaFX UI Controls Sample"</a><br />
<br /></div>
<!-- class="figure" -->
<p>For more detailed information about all the available JavaFX UI controls, see the <a class="olink JFXUI" href="http://www.oracle.com/pls/topic/lookup?ctx=javase80&id=JFXUI">Using JavaFX UI Controls</a> and the <a href="../api/">API documentation</a> for the <code>javafx.scene.control</code> package.</p>
</div>
<!-- class="sect1" -->
<a id="A1107212" name="A1107212" class="anchor"></a><a id="JFXST115" name="JFXST115" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Layout</h2>
<p>Layout containers or panes can be used to allow for flexible and dynamic arrangements of the UI controls within a scene graph of a JavaFX application. The JavaFX Layout API includes the following container classes that automate common layout models:</p>
<ul>
<li>
<p>The <code>BorderPane</code> class lays out its content nodes in the top, bottom, right, left, or center region.</p>
</li>
<li>
<p>The <code>HBox</code> class arranges its content nodes horizontally in a single row.</p>
</li>
<li>
<p>The <code>VBox</code> class arranges its content nodes vertically in a single column.</p>
</li>
<li>
<p>The <code>StackPane</code> class places its content nodes in a back-to-front single stack.</p>
</li>
<li>
<p>The <code>GridPane</code> class enables the developer to create a flexible grid of rows and columns in which to lay out content nodes.</p>
</li>
<li>
<p>The <code>FlowPane</code> class arranges its content nodes in either a horizontal or vertical &#x201D;flow,&#x201D; wrapping at the specified width (for horizontal) or height (for vertical) boundaries.</p>
</li>
<li>
<p>The <code>TilePane</code> class places its content nodes in uniformly sized layout cells or tiles</p>
</li>
<li>
<p>The <code>AnchorPane</code> class enables developers to create anchor nodes to the top, bottom, left side, or center of the layout.</p>
</li>
</ul>
<p>To achieve a desired layout structure, different containers can be nested within a JavaFX application.</p>
<p>To learn more about how to work with layouts, see the <a class="olink JFXLY" href="http://www.oracle.com/pls/topic/lookup?ctx=javase80&id=JFXLY">Working with Layouts in JavaFX</a> article. For more information about the JavaFX layout API, see the API documentation for the <code>javafx.scene.layout</code> package.</p>
</div>
<!-- class="sect1" -->
<a id="A1106739" name="A1106739" class="anchor"></a><a id="JFXST116" name="JFXST116" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">2-D and 3-D Transformations</h2>
<p>Each node in the JavaFX scene graph can be transformed in the x-y coordinate using the following <code>javafx.scene.tranform</code> classes:</p>
<ul>
<li>
<p><code>translate</code> &#x2013; Move a node from one place to another along the x, y, z planes relative to its initial position.</p>
</li>
<li>
<p><code>scale</code> &#x2013; Resize a node to appear either larger or smaller in the x, y, z planes, depending on the scaling factor.</p>
</li>
<li>
<p><code>shear</code> &#x2013; Rotate one axis so that the x-axis and y-axis are no longer perpendicular. The coordinates of the node are shifted by the specified multipliers.</p>
</li>
<li>
<p><code>rotate</code> &#x2013; Rotate a node about a specified pivot point of the scene.</p>
</li>
<li>
<p><code>affine</code> &#x2013; Perform a linear mapping from 2-D/3-D coordinates to other 2-D/3-D coordinates while preserving the 'straight' and 'parallel' properties of the lines. This class should be used with <code>Translate</code>, <code>Scale</code>, <code>Rotate</code>, or <code>Shear</code> transform classes instead of being used directly.</p>
</li>
</ul>
<p>To learn more about working with transformations, see the <a class="olink JFXTE139" href="../../javafx/visual-effects-tutorial/transforms.htm#JFXTE139">Applying Transformations in JavaFX</a> document. For more information about the <code>javafx.scene.transform</code> API classes, see the <a href="../api/">API documentation</a>.</p>
</div>
<!-- class="sect1" -->
<a id="A1106693" name="A1106693" class="anchor"></a><a id="JFXST117" name="JFXST117" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Visual Effects</h2>
<p>The development of rich client interfaces in the JavaFX scene graph involves the use of Visual Effects or Effects to enhance the look of JavaFX applications in real time. The JavaFX Effects are primarily image pixel-based and, hence, they take the set of nodes that are in the scene graph, render it as an image, and apply the specified effects to it.</p>
<p>Some of the visual effects available in JavaFX include the use of the following classes:</p>
<ul>
<li>
<p><code>Drop Shadow</code> &#x2013; Renders a shadow of a given content behind the content to which the effect is applied.</p>
</li>
<li>
<p><code>Reflection</code> &#x2013; Renders a reflected version of the content below the actual content.</p>
</li>
<li>
<p><code>Lighting</code> &#x2013; Simulates a light source shining on a given content and can give a flat object a more realistic, three-dimensional appearance.</p>
</li>
</ul>
<p>For examples on how to use some of the available visual effects, see the <a class="olink JFXTE191" href="../../javafx/visual-effects-tutorial/visual_effects.htm#JFXTE191">Creating Visual Effects</a> document. For more information about all the available visual effects classes, see the <a href="../api/">API documentation</a> for the <code>javafx.scene.effect</code> package.</p>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Getting Started with JavaFX</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">About This Tutorial</a></li>
        <li><a href="preface.htm#JFXST823">Audience</a></li>
        <li><a href="preface.htm#JFXST824">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref5">Related Documents</a></li>
        <li><a href="preface.htm#JFXST827">Conventions</a></li>
      </ul>
    </li>
    <li><a href="whatsnew.htm#sthref6">What's New</a></li>
    <li><a href="javafx_get_started.htm#JFXST783">Part I What Is JavaFX?</a>
    <ul>
    <li><a href="jfx-overview.htm#JFXST784">1 JavaFX Overview</a>
      <ul>
        <li><a href="jfx-overview.htm#JFXST786">JavaFX Applications</a></li>
        <li><a href="jfx-overview.htm#JFXST103">Availability</a></li>
        <li><a href="jfx-overview.htm#JFXST787">Key Features</a></li>
        <li><a href="jfx-overview.htm#JFXST828">What Can I Build with JavaFX?</a></li>
        <li><a href="jfx-overview.htm#JFXST830">How Do I Run a Sample Application?</a></li>
        <li><a href="jfx-overview.htm#JFXST832">How Do I Run a Sample in an IDE?</a></li>
        <li><a href="jfx-overview.htm#JFXST834">How Do I Create a JavaFX Application?</a></li>
        <li><a href="jfx-overview.htm#JFXST836">Resources</a></li>
      </ul>
    </li>
    <li><a class="selected" href="jfx-architecture.htm#JFXST788">2 Understanding the JavaFX Architecture</a>
      <ul>
        <li><a href="jfx-architecture.htm#JFXST790">Scene Graph</a></li>
        <li><a href="jfx-architecture.htm#JFXST104">Java Public APIs for JavaFX Features</a></li>
        <li><a href="jfx-architecture.htm#JFXST105">Graphics System</a></li>
        <li><a href="jfx-architecture.htm#JFXST106">Glass Windowing Toolkit</a>
          <ul>
          <li><a href="jfx-architecture.htm#sthref12">Threads</a></li>
          <li><a href="jfx-architecture.htm#sthref13">Pulse</a></li>
          </ul>
        </li>
        <li><a href="jfx-architecture.htm#JFXST109">Media and Images</a></li>
        <li><a href="jfx-architecture.htm#JFXST110">Web Component</a></li>
        <li><a href="jfx-architecture.htm#JFXST111">CSS</a></li>
        <li><a href="jfx-architecture.htm#JFXST113">UI Controls</a></li>
        <li><a href="jfx-architecture.htm#JFXST115">Layout</a></li>
        <li><a href="jfx-architecture.htm#JFXST116">2-D and 3-D Transformations</a></li>
        <li><a href="jfx-architecture.htm#JFXST117">Visual Effects</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="get_start_apps.htm#JFXST804">Part II Getting Started with JavaFX Sample Applications</a>
    <ul>
    <li><a href="hello_world.htm#CHDBCAII">3 Hello World, JavaFX Style</a>
      <ul>
        <li><a href="hello_world.htm#sthref16">Construct the Application</a></li>
        <li><a href="hello_world.htm#sthref18">Run the Application</a></li>
        <li><a href="hello_world.htm#sthref20">Where to Go Next</a></li>
      </ul>
    </li>
    <li><a href="form.htm#BABDDGEE">4 Creating a Form in JavaFX</a>
      <ul>
        <li><a href="form.htm#sthref22">Create the Project</a></li>
        <li><a href="form.htm#sthref23">Create a GridPane Layout</a></li>
        <li><a href="form.htm#sthref24">Add Text, Labels, and Text Fields</a></li>
        <li><a href="form.htm#sthref26">Add a Button and Text</a></li>
        <li><a href="form.htm#BABHABBF">Add Code to Handle an Event</a></li>
        <li><a href="form.htm#sthref28">Run the Application</a></li>
        <li><a href="form.htm#sthref30">Where to Go from Here</a></li>
      </ul>
    </li>
    <li><a href="css.htm#BEIBBBCI">5 Fancy Forms with JavaFX CSS</a>
      <ul>
        <li><a href="css.htm#sthref32">Create the Project</a></li>
        <li><a href="css.htm#sthref33">Create the CSS File</a></li>
        <li><a href="css.htm#sthref34">Add a Background Image</a></li>
        <li><a href="css.htm#sthref36">Style the Labels</a></li>
        <li><a href="css.htm#sthref38">Style Text</a></li>
        <li><a href="css.htm#sthref40">Style the Button</a></li>
        <li><a href="css.htm#sthref43">Where to Go from Here</a></li>
      </ul>
    </li>
    <li><a href="fxml_tutorial.htm#CHDCCHII">6 Using FXML to Create a User Interface</a>
      <ul>
        <li><a href="fxml_tutorial.htm#JFXST806">Set Up the Project</a></li>
        <li><a href="fxml_tutorial.htm#JFXST807">Load the FXML Source File</a></li>
        <li><a href="fxml_tutorial.htm#JFXST207">Modify the Import Statements</a></li>
        <li><a href="fxml_tutorial.htm#JFXST209">Create a GridPane Layout</a></li>
        <li><a href="fxml_tutorial.htm#JFXST211">Add Text and Password Fields</a></li>
        <li><a href="fxml_tutorial.htm#JFXST212">Add a Button and Text</a></li>
        <li><a href="fxml_tutorial.htm#CHDJDGCE">Add Code to Handle an Event</a></li>
        <li><a href="fxml_tutorial.htm#JFXST213">Use a Scripting Language to Handle Events</a></li>
        <li><a href="fxml_tutorial.htm#JFXST129">Style the Application with CSS</a></li>
        <li><a href="fxml_tutorial.htm#sthref49">Where to Go from Here</a></li>
      </ul>
    </li>
    <li><a href="animation.htm#BABCJFJC">7 Animation and Visual Effects in JavaFX</a>
      <ul>
        <li><a href="animation.htm#sthref52">Set Up the Application</a></li>
        <li><a href="animation.htm#sthref53">Set Up the Project</a></li>
        <li><a href="animation.htm#sthref54">Add Graphics</a></li>
        <li><a href="animation.htm#sthref56">Add a Visual Effect</a></li>
        <li><a href="animation.htm#sthref58">Create a Background Gradient</a></li>
        <li><a href="animation.htm#sthref61">Apply a Blend Mode</a></li>
        <li><a href="animation.htm#sthref63">Add Animation</a></li>
        <li><a href="animation.htm#sthref65">Where to Go from Here</a></li>
      </ul>
    </li>
    <li><a href="backgroundjpg.htm#JFXST840">A background.jpg</a>
      <ul>
        <li><a href="backgroundjpg.htm#JFXST843">background.jpg</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="jfx-overview.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="get_start_apps.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2008, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
