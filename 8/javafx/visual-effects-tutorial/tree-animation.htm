<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>4 Tree Animation Example (Release 8)</title>
<meta name="description" content="This chapter provides details about the Tree Animation example. You will learn how all the elements on the scene were created and animated.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXTE.pdf">PDF</a> | <a href="../JFXTE.epub">ePub</a> | <a href="../JFXTE.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Transformations, Animations, and Visual Effects</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="basics.htm">Previous Page</a><a class="button" title="Next Page" href="visual_effects.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="CACCAJAH" name="CACCAJAH" class="anchor"></a><a id="JFXTE158" name="JFXTE158" class="anchor"></a> <a id="CACCEGFG" name="CACCEGFG" class="anchor"></a>
<h1 class="chapter"><span class="secnum">4</span> Tree Animation Example</h1>
<a id="JFXTE159" name="JFXTE159" class="anchor"></a>
<p>This chapter provides details about the Tree Animation example. You will learn how all the elements on the scene were created and animated.</p>
<p><a href="#CACCJDGG">Figure 4-1</a> shows the scene with a tree.</p>
<div class="figure"><a id="CACCJDGG" name="CACCJDGG" class="anchor"></a><a id="JFXTE160" name="JFXTE160" class="anchor"></a>
<p class="titleinfigure">Figure 4-1 Tree Animation</p>
<img width="302" height="400" src="img/tree1.jpg" alt="Description of Figure 4-1 follows" title="Description of Figure 4-1 follows" longdesc="img_text/tree1.htm" /><br />
<a id="sthref36" name="sthref36" href="img_text/tree1.htm">Description of "Figure 4-1 Tree Animation"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="JFXTE161" name="JFXTE161" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref37" name="sthref37" class="anchor"></a>
<h2 class="sect1">Project and Elements</h2>
<p>The Tree Animation project consists of several files. Each element, like leaves, grass blades, and others are created in separate classes. The <code>TreeGenerator</code> class creates a tree from all the elements. The <code>Animator</code> class contains all animation except grass animation that resides in the <code>GrassWindAnimation</code> class.</p>
<p>The scene in the example contains the following elements:</p>
<ul>
<li>
<p>Tree with branches, leaves, and flowers</p>
</li>
<li>
<p>Grass</p>
</li>
</ul>
<p>Each element is animated in its own fashion. Some animations run in parallel, and others run sequentially. The tree-growing animation is run only once, whereas the season-change animation is set to run infinitely.</p>
<div class="figure"><a id="JFXTE162" name="JFXTE162" class="anchor"></a><a id="sthref38" name="sthref38" class="anchor"></a>
<p class="titleinfigure">Figure 4-2 Animation Timeline</p>
<img width="568" height="236" src="img/timeline-animation.gif" alt="Description of Figure 4-2 follows" title="Description of Figure 4-2 follows" longdesc="img_text/timeline-animation.htm" /><br />
<a id="sthref39" name="sthref39" href="img_text/timeline-animation.htm">Description of "Figure 4-2 Animation Timeline"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The season-change animation includes the following parts:</p>
<ul>
<li>
<p>Leaves and flowers appear on the tree</p>
</li>
<li>
<p>Flower petals fall and disappear</p>
</li>
<li>
<p>Leaves and grass change color</p>
</li>
<li>
<p>Leaves fall to the ground and disappear</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="JFXTE163" name="JFXTE163" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref40" name="sthref40" class="anchor"></a>
<h2 class="sect1">Grass</h2>
<p>This section describes how the grass is created and animated.</p>
<a id="JFXTE164" name="JFXTE164" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref41" name="sthref41" class="anchor"></a>
<h3 class="sect2">Creating Grass</h3>
<p>In the Tree Animation example, the grass, shown in <a href="#CACGIGGD">Figure 4-3</a> consists of separate grass blades, each of which is created using <code>Path</code> and added to the list. Each blade is then curved and colored. An algorithm is used to randomize the height, curve, and color of the blades, and to distribute the blades on the "ground." You can specify the number of blades and the size of the "ground" covered with grass.</p>
<div class="figure"><a id="CACGIGGD" name="CACGIGGD" class="anchor"></a><a id="JFXTE165" name="JFXTE165" class="anchor"></a>
<p class="titleinfigure">Figure 4-3 Grass</p>
<img width="374" height="110" src="img/grass.jpg" alt="Description of Figure 4-3 follows" title="Description of Figure 4-3 follows" longdesc="img_text/grass.htm" /><br />
<a id="sthref42" name="sthref42" href="img_text/grass.htm">Description of "Figure 4-3 Grass"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="example"><a id="JFXTE166" name="JFXTE166" class="anchor"></a><a id="sthref43" name="sthref43" class="anchor"></a>
<p class="titleinexample">Example 4-1 Creating a Grass Blade</p>
<pre xml:space="preserve" class="oac_no_warn">public class Blade extends Path {
 
    public final Color SPRING_COLOR = Color.color(random() * 0.5, random() * 0.5
 + 0.5, 0.).darker();
    public final Color AUTUMN_COLOR = Color.color(random() * 0.4 + 0.3, random()
 * 0.1 + 0.4, random() * 0.2);
    private final static double width = 3;
    private double x = RandomUtil.getRandom(170);
    private double y = RandomUtil.getRandom(20) + 20;
    private double h = (50 * 1.5 - y / 2) * RandomUtil.getRandom(0.3);
    public SimpleDoubleProperty phase = new SimpleDoubleProperty();
 
    public Blade() {
 
        getElements().add(new MoveTo(0, 0));
        final QuadCurveTo curve1;
        final QuadCurveTo curve2;
        getElements().add(curve1 = new QuadCurveTo(-10, h, h / 4, h));
        getElements().add(curve2 = new QuadCurveTo(-10, h, width, 0));
 
        setFill(AUTUMN_COLOR); //autumn color of blade
        setStroke(null);
 
        getTransforms().addAll(Transform.translate(x, y));
 
        curve1.yProperty().bind(new DoubleBinding() {
 
            {
                super.bind(curve1.xProperty());
            }
 
            @Override
            protected double computeValue() {
 
                final double xx0 = curve1.xProperty().get();
                return Math.sqrt(h * h - xx0 * xx0);
            }
        }); //path of top of blade is circle
 
        //code to bend blade
        curve1.controlYProperty().bind(curve1.yProperty().add(-h / 4));
        curve2.controlYProperty().bind(curve1.yProperty().add(-h / 4));
 
        curve1.xProperty().bind(new DoubleBinding() {
 
            final double rand = RandomUtil.getRandom(PI / 4);
 
            {
                super.bind(phase);
            }
 
            @Override
            protected double computeValue() {
                return (h / 4) + ((cos(phase.get() + (x + 400.) * PI / 1600 +
 rand) + 1) / 2.) * (-3. / 4) * h;
            }
        });
    }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="JFXTE167" name="JFXTE167" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref44" name="sthref44" class="anchor"></a>
<h3 class="sect2">Creating Timeline Animation for Grass Movement</h3>
<p>Timeline animation that changes the x-coordinate of the top of the blade is used to create grass movement.</p>
<p>Several algorithms are used to make the movement look natural. For example, the top of each blade is moved in a circle instead of a straight line, and side curve of the blade make the blade look as if it bends under the wind. Random numbers are added to separate each blade movement.</p>
<div class="example"><a id="JFXTE168" name="JFXTE168" class="anchor"></a><a id="sthref45" name="sthref45" class="anchor"></a>
<p class="titleinexample">Example 4-2 Grass Animation</p>
<pre xml:space="preserve" class="oac_no_warn">class GrassWindAnimation extends Transition {
 
    final private Duration animationTime = Duration.seconds(3);
    final private DoubleProperty phase = new SimpleDoubleProperty(0);
    final private Timeline tl = new Timeline(Animation.INDEFINITE);
 
    public GrassWindAnimation(List&lt;Blade&gt; blades) {
 
        setCycleCount(Animation.INDEFINITE);
        setInterpolator(Interpolator.LINEAR);
        setCycleDuration(animationTime);
        for (Blade blade : blades) {
            blade.phase.bind(phase);
        }
    }
 
    @Override
    protected void interpolate(double frac) {
        phase.set(frac * 2 * PI);
    }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXTE169" name="JFXTE169" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref46" name="sthref46" class="anchor"></a>
<h2 class="sect1">Tree</h2>
<p>This section explains how the tree shown in <a href="#CACBCAAE">Figure 4-4</a> is created and animated.</p>
<div class="figure"><a id="CACBCAAE" name="CACBCAAE" class="anchor"></a><a id="JFXTE170" name="JFXTE170" class="anchor"></a>
<p class="titleinfigure">Figure 4-4 Tree</p>
<img width="449" height="476" src="img/tree-only.jpg" alt="Description of Figure 4-4 follows" title="Description of Figure 4-4 follows" longdesc="img_text/tree-only.htm" /><br />
<a id="sthref47" name="sthref47" href="img_text/tree-only.htm">Description of "Figure 4-4 Tree"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="JFXTE171" name="JFXTE171" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref48" name="sthref48" class="anchor"></a>
<h3 class="sect2">Branches</h3>
<p>The tree consists of branches, leaves, and flowers. Leaves and flowers are drawn on the top branches of the tree. Each branch generation consists of three branches (one top and two side branches) drawn from a parent branch. You can specify the number of generations in the code using the <code>NUMBER_OF_BRANCH_GENERATIONS</code> passed in the constructor of TreeGenerator in the Main class. <a href="#CACIJGAB">Example 4-3</a> shows the code in the TreeGenerator class that creates the trunk of the tree (or the root branch) and adds three branches for the following generations.</p>
<div class="example"><a id="CACIJGAB" name="CACIJGAB" class="anchor"></a><a id="JFXTE172" name="JFXTE172" class="anchor"></a>
<p class="titleinexample">Example 4-3 Root Branch</p>
<pre xml:space="preserve" class="oac_no_warn">private List&lt;Branch&gt; generateBranches(Branch parentBranch, int depth) {
        List&lt;Branch&gt; branches = new ArrayList&lt;&gt;();
        if (parentBranch == null) { // add root branch
            branches.add(new Branch());
        } else {
            if (parentBranch.length &lt; 10) {
                return Collections.emptyList();
            }
            branches.add(new Branch(parentBranch, Type.LEFT, depth));
            branches.add(new Branch(parentBranch, Type.RIGHT, depth));
            branches.add(new Branch(parentBranch, Type.TOP, depth));
        }
 
        return branches;
    }
</pre></div>
<!-- class="example" -->
<p>To make the tree look more natural, each child generation branch is grown at an angle to the parent branch, and each child branch is smaller than its parent. The child angle is calculated using random values. <a href="#CACBEIJA">Example 4-4</a> provides a code for creating child branches.</p>
<div class="example"><a id="CACBEIJA" name="CACBEIJA" class="anchor"></a><a id="JFXTE173" name="JFXTE173" class="anchor"></a>
<p class="titleinexample">Example 4-4 Child Branches</p>
<pre xml:space="preserve" class="oac_no_warn">public Branch(Branch parentBranch, Type type, int depth) {
        this();
        SimpleDoubleProperty locAngle = new SimpleDoubleProperty(0);
        globalAngle.bind(locAngle.add(parentBranch.globalAngle.get()));
        double transY = 0;
        switch (type) {
            case TOP:
                transY = parentBranch.length;
                length = parentBranch.length * 0.8;
                locAngle.set(getRandom(10));
                break;
            case LEFT:
            case RIGHT:
                transY = parentBranch.length - getGaussianRandom(0,
 parentBranch.length, parentBranch.length / 10, parentBranch.length / 10);
                locAngle.set(getGaussianRandom(35, 10) * (Type.LEFT == type ? 1 :
 -1));
                if ((0 &gt; globalAngle.get() || globalAngle.get() &gt; 180) &amp;&amp; depth &lt;
 4) {
                    length = parentBranch.length * getGaussianRandom(0.3, 0.1);
                } else {
                    length = parentBranch.length * 0.6;
                }
                break;
        }
        setTranslateY(transY);
        getTransforms().add(new Rotate(locAngle.get(), 0, 0));
        globalH = getTranslateY() * cos(PI / 2 - parentBranch.globalAngle.get() *
 PI / 180) + parentBranch.globalH;
        setBranchStyle(depth);
        addChildToParent(parentBranch, this);
    }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="JFXTE174" name="JFXTE174" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref49" name="sthref49" class="anchor"></a>
<h3 class="sect2">Leaves and Flowers</h3>
<p>Leaves are created on top branches. Because the leaves are created at the same time as the branches of the tree, leaves are scaled to 0 by <code>leaf.setScaleX(0)</code> and <code>leaf.setScaleY(0)</code> to hide them before the tree is grown as shown in the <a href="#CACDBHCA">Example 4-5</a>. The same trick is used to hide the leaves when they fall. To create a more natural look, leaves have slightly different shades of green. Also, the leaf color changes depending on the location of the leaf; the darker shades are applied to the leaves located below the middle of the tree crown.</p>
<div class="example"><a id="CACDBHCA" name="CACDBHCA" class="anchor"></a><a id="JFXTE175" name="JFXTE175" class="anchor"></a>
<p class="titleinexample">Example 4-5 Leaf Shape and Placement</p>
<pre xml:space="preserve" class="oac_no_warn">public class Leaf extends Ellipse {
 
    public final Color AUTUMN_COLOR;
    private final int N = 5;
    private List&lt;Ellipse&gt; petals = new ArrayList&lt;&gt;(2 * N + 1);
 
    public Leaf(Branch parentBranch) {
        super(0, parentBranch.length / 2., 2, parentBranch.length / 2.);
        setScaleX(0);
        setScaleY(0);
 
        double rand = random() * 0.5 + 0.3;
        AUTUMN_COLOR = Color.color(random() * 0.1 + 0.8, rand, rand / 2);
 
        Color color = new Color(random() * 0.5, random() * 0.5 + 0.5, 0, 1);
        if (parentBranch.globalH &lt; 400 &amp;&amp; random() &lt; 0.8) { //bottom leaf is darker
            color = color.darker();
        }
        setFill(color);
    }
}
</pre></div>
<!-- class="example" -->
<p>Flowers are created in the Flower class and then added to the top branches of the tree in the TreeGenerator class. You can specify the number of petals in a flower. Petals are ellipses distributed in a circle with some overlapping. Similar to grass and leaves, the flower petals are colored in different shades of pink.</p>
</div>
<!-- class="sect2" -->
<a id="JFXTE176" name="JFXTE176" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref50" name="sthref50" class="anchor"></a>
<h3 class="sect2">Animating Tree Elements</h3>
<p>This section explains techniques employed in the Tree Animation example to animate the tree and season change. Parallel transition is used to start all the animations in the scene as shown in <a href="#CACCCDGA">Example 4-6</a>.</p>
<div class="example"><a id="CACCCDGA" name="CACCCDGA" class="anchor"></a><a id="JFXTE177" name="JFXTE177" class="anchor"></a>
<p class="titleinexample">Example 4-6 Main Animation</p>
<pre xml:space="preserve" class="oac_no_warn">final Transition all = new ParallelTransition(new GrassWindAnimation(grass),
treeWindAnimation, new SequentialTransition(branchGrowingAnimation,
seasonsAnimation(tree, grass)));
        all.play();
</pre></div>
<!-- class="example" -->
<a id="JFXTE178" name="JFXTE178" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref51" name="sthref51" class="anchor"></a>
<h4 class="sect3">Growing a Tree</h4>
<p>Tree growing animation is run only once, at the beginning of the Tree Animation example. The application starts a sequential transition animation to grow branches one generation after another as shown in <a href="#CACFGCCB">Example 4-7</a>. Initially length is set to 0. The root branch size and angle are specified in the <code>TreeGenerator</code> class. Currently each generation is grown during two seconds.</p>
<div class="example"><a id="CACFGCCB" name="CACFGCCB" class="anchor"></a><a id="JFXTE179" name="JFXTE179" class="anchor"></a>
<p class="titleinexample">Example 4-7 Sequential Transition to Start Branch Growing Animation</p>
<pre xml:space="preserve" class="oac_no_warn">SequentialTransition branchGrowingAnimation = new SequentialTransition();
</pre></div>
<!-- class="example" -->
<p>The code in <a href="#CACCCICJ">Example 4-8</a> creates the Tree growing animation:</p>
<div class="example"><a id="CACCCICJ" name="CACCCICJ" class="anchor"></a><a id="JFXTE180" name="JFXTE180" class="anchor"></a>
<p class="titleinexample">Example 4-8 Branch Growing Animation</p>
<pre xml:space="preserve" class="oac_no_warn">private Animation animateBranchGrowing(List&lt;Branch&gt; branchGeneration) {
 
        ParallelTransition sameDepthBranchAnimation = new ParallelTransition();
        for (final Branch branch : branchGeneration) {
            Timeline branchGrowingAnimation = new Timeline(new KeyFrame(duration,
 new KeyValue(branch.base.endYProperty(), branch.length)));
            PauseTransition pauseTransition = new PauseTransition();
            pauseTransition.setOnFinished(t -&gt; branch.base.setStrokeWidth(branch.length / 25));
            sameDepthBranchAnimation.getChildren().add(
                    new SequentialTransition(
                            pauseTransition,
                            branchGrowingAnimation));
        }
        return sameDepthBranchAnimation;
 
    }
</pre></div>
<!-- class="example" -->
<p>Because all the branch lines are calculated and created simultaneously, they could appear on the scene as dots. The code introduces a few tricks to hide the lines before they grow. In Example the code <code>duration.one millisecond</code> pauses transition for an unnoticeable time. In the <a href="#CACGGHJH">Example 4-9</a>, the <code>base.setStrokeWidth(0)</code> code sets branches width to 0 before the grow animation starts for each generation.</p>
<div class="example"><a id="CACGGHJH" name="CACGGHJH" class="anchor"></a><a id="JFXTE181" name="JFXTE181" class="anchor"></a>
<p class="titleinexample">Example 4-9 Tree Growing Animation Optimization</p>
<pre xml:space="preserve" class="oac_no_warn">private void setBranchStyle(int depth) {
        base.setStroke(Color.color(0.4, 0.1, 0.1, 1));
 
        if (depth &lt; 5) { 
            base.setStrokeLineJoin(StrokeLineJoin.ROUND);
            base.setStrokeLineCap(StrokeLineCap.ROUND);
        }
        base.setStrokeWidth(0); 
    }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="JFXTE182" name="JFXTE182" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref52" name="sthref52" class="anchor"></a>
<h4 class="sect3">Creating Tree Crown Movement</h4>
<p>In parallel with growing a tree, wind animation starts. Tree branches, leaves, and flowers are moving together.</p>
<p>Tree wind animation is similar to grass movement animation, but it is simpler because only the angle of the branches changes. To make the tree movement look natural, the bend angle is different for different branch generations. The higher the generation of the branch (that is the smaller the branch), the more it bends. <a href="#CACGJGIB">Example 4-10</a> provides code for wind animation.</p>
<div class="example"><a id="CACGJGIB" name="CACGJGIB" class="anchor"></a><a id="JFXTE183" name="JFXTE183" class="anchor"></a>
<p class="titleinexample">Example 4-10 Wind Animation</p>
<pre xml:space="preserve" class="oac_no_warn">private Animation animateTreeWind(List&lt;Branch&gt; branchGeneration, int depth) {
    ParallelTransition wind = new ParallelTransition();
    for (final Branch brunch : branchGeneration) {
        final Rotate rotation = new Rotate(0);
        brunch.getTransforms().add(rotation);

        Timeline windTimeline = new Timeline(new KeyFrame(WIND_CYCLE_DURATION, 
new KeyValue(rotation.angleProperty(), depth * 2)));
        windTimeline.setAutoReverse(true);
        windTimeline.setCycleCount(Animation.INDEFINITE);
        wind.getChildren().add(windTimeline);
    }
        return wind;
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="JFXTE184" name="JFXTE184" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref53" name="sthref53" class="anchor"></a>
<h4 class="sect3">Animating Season Change</h4>
<p>Season-change animation actually starts after the tree has grown, and runs infinitely. The code in <a href="#CACEIFED">Example 4-11</a> calls all the season animations:</p>
<div class="example"><a id="CACEIFED" name="CACEIFED" class="anchor"></a><a id="JFXTE185" name="JFXTE185" class="anchor"></a>
<p class="titleinexample">Example 4-11 Starting Season Animation</p>
<pre xml:space="preserve" class="oac_no_warn">private Transition seasonsAnimation(final Tree tree, final List&lt;Blade&gt; grass) {
 
        Transition spring = animateSpring(tree.leafage, grass);
        Transition flowers = animateFlowers(tree.flowers);
        Transition autumn = animateAutumn(tree.leafage, grass);

        SequentialTransition sequentialTransition = new SequentialTransition(spring, flowers, autumn);
        return sequentialTransition;
    }
 
    private Transition animateSpring(List&lt;Leaf&gt; leafage, List&lt;Blade&gt; grass) {
        ParallelTransition springAnimation = new ParallelTransition();
        for (final Blade blade : grass) {
springAnimation.getChildren().add(new FillTransition(GRASS_BECOME_GREEN_DURATION, blade,
        (Color) blade.getFill(), blade.SPRING_COLOR));
        }
        for (Leaf leaf : leafage) {
            ScaleTransition leafageAppear = new ScaleTransition(LEAF_APPEARING_DURATION, leaf);
            leafageAppear.setToX(1);
            leafageAppear.setToY(1);
            springAnimation.getChildren().add(leafageAppear);
        }
        return springAnimation;
    }
</pre></div>
<!-- class="example" -->
<p>Once all the tree branches are grown, leaves start to appear as directed in <a href="#CACIJJDE">Example 4-12</a>.</p>
<div class="example"><a id="CACIJJDE" name="CACIJJDE" class="anchor"></a><a id="JFXTE186" name="JFXTE186" class="anchor"></a>
<p class="titleinexample">Example 4-12 Parallel Transition to Start Spring Animation and Show Leaves</p>
<pre xml:space="preserve" class="oac_no_warn">private Transition animateSpring(List&lt;Leaf&gt; leafage, List&lt;Blade&gt; grass) {
    ParallelTransition springAnimation = new ParallelTransition();
    for (final Blade blade : grass) {
        springAnimation.getChildren().add(new FillTransition(GRASS_BECOME_GREEN_DURATION, blade,
                (Color) blade.getFill(), blade.SPRING_COLOR));
    }
    for (Leaf leaf : leafage) {
        ScaleTransition leafageAppear = new ScaleTransition(LEAF_APPEARING_DURATION, leaf);
        leafageAppear.setToX(1);
        leafageAppear.setToY(1);
        springAnimation.getChildren().add(leafageAppear);
        }
    return springAnimation;
    }
</pre></div>
<!-- class="example" -->
<p>When all leaves are visible, flowers start to appear as shown in <a href="#CACGFADD">Example 4-13</a>. The sequential transition is used to show flowers gradually. The delay in flower appearance is set in the sequential transition code of <a href="#CACGFADD">Example 4-13</a>. Flowers appear only in the tree crown.</p>
<div class="example"><a id="CACGFADD" name="CACGFADD" class="anchor"></a><a id="JFXTE187" name="JFXTE187" class="anchor"></a>
<p class="titleinexample">Example 4-13 Showing Flowers</p>
<pre xml:space="preserve" class="oac_no_warn">private Transition animateFlowers(List&lt;Flower&gt; flowers) {
 
        ParallelTransition flowersAppearAndFallDown = new ParallelTransition();
 
        for (int i = 0; i &lt; flowers.size(); i++) {
            final Flower flower = flowers.get(i);
            for (Ellipse pental : flower.getPetals()) {

                FadeTransition flowerAppear = new FadeTransition(FLOWER_APPEARING_DURATION, petal);
                flowerAppear.setToValue(1);
                flowerAppear.setDelay(FLOWER_APPEARING_DURATION.divide(3).multiply(i + 1));
                flowersAppearAndFallDown.getChildren().add(new SequentialTransition(new SequentialTransition(
                       flowerAppear,
                       fakeFallDownAnimation(petal))));
        }
    }
    return flowersAppearAndFallDown;
}
</pre></div>
<!-- class="example" -->
<p>Once all the flowers appear on the screen, their petals start to fall. In the code in <a href="#CACECADJ">Example 4-14</a> the flowers are duplicated and the first set of them is hidden to show it later.</p>
<div class="example"><a id="CACECADJ" name="CACECADJ" class="anchor"></a><a id="JFXTE188" name="JFXTE188" class="anchor"></a>
<p class="titleinexample">Example 4-14 Duplicating Petals</p>
<pre xml:space="preserve" class="oac_no_warn">private Ellipse copyEllipse(Ellipse petalOld, Color color) {
        Ellipse ellipse = new Ellipse();
        ellipse.setRadiusX(petalOld.getRadiusX());
        ellipse.setRadiusY(petalOld.getRadiusY());
        if (color == null) {
            ellipse.setFill(petalOld.getFill());
        } else {
            ellipse.setFill(color);
        }
        ellipse.setRotate(petalOld.getRotate());
        ellipse.setOpacity(0);
        return ellipse;
    }
</pre></div>
<!-- class="example" -->
<p>Copied flower petals start to fall to the ground one by one as shown in <a href="#CACJEAID">Example 4-15</a>. The petals disappear after five seconds on the ground. The fall trajectory of a petal is not a straight line, but rather a calculated sine curve, so that petals seem to be whirling as they fall.</p>
<div class="example"><a id="CACJEAID" name="CACJEAID" class="anchor"></a><a id="JFXTE189" name="JFXTE189" class="anchor"></a>
<p class="titleinexample">Example 4-15 Shedding Flowers</p>
<pre xml:space="preserve" class="oac_no_warn">Animation fakeLeafageDown = fakeFallDownEllipseAnimation(leaf, leaf.AUTUMN_COLOR,
node -&gt; {
    node.setScaleX(0);
    node.setScaleY(0);
});
</pre></div>
<!-- class="example" -->
<p>The next season change starts when all the flowers disappear from the scene. The leaves and grass become yellow, and the leaves fall and disappear. The same algorithm used in <a href="#CACJEAID">Example 4-15</a> to make the flower petals fall is used to show falling leaves. The code in <a href="#CACIAAGB">Example 4-16</a> enables autumn animation.</p>
<div class="example"><a id="CACIAAGB" name="CACIAAGB" class="anchor"></a><a id="JFXTE190" name="JFXTE190" class="anchor"></a>
<p class="titleinexample">Example 4-16 Animating Autumn Changes</p>
<pre xml:space="preserve" class="oac_no_warn">private Transition animateAutumn(List&lt;Leaf&gt; leafage, List&lt;Blade&gt; grass) {
    ParallelTransition autumn = new ParallelTransition();
 
    ParallelTransition yellowLeafage = new ParallelTransition();
    ParallelTransition dissappearLeafage = new ParallelTransition();
 
    for (final Leaf leaf : leafage) {
 
    final FillTransition toYellow =
new FillTransition(LEAF_BECOME_YELLOW_DURATION, leaf, null, leaf.AUTUMN_COLOR);

    Animation fakeLeafageDown = fakeFallDownEllipseAnimation(leaf, 
leaf.AUTUMN_COLOR,node -&gt; {
        node.setScaleX(0);
        node.setScaleY(0);
    });
    dissappearLeafage.getChildren().add(fakeLeafageDown);
    }

    ParallelTransition grassBecomeYellowAnimation = new ParallelTransition();
    for (final Blade blade : grass) {
        final FillTransition toYellow =new
FillTransition(GRASS_BECOME_YELLOW_DURATION, blade, (Color) blade.getFill(),
blade.AUTUMN_COLOR);
        toYellow.setDelay(Duration.seconds(1 * random()));
        grassBecomeYellowAnimation.getChildren().add(toYellow);
        }
 
        autumn.getChildren().addAll(grassBecomeYellowAnimation, new
 SequentialTransition(yellowLeafage, dissappearLeafage));
        return autumn;
}
</pre></div>
<!-- class="example" -->
<p>After all leaves disappear from the ground, spring animation starts by coloring grass in green and showing leaves.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXTE235" name="JFXTE235" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref54" name="sthref54" class="anchor"></a>
<h2 class="sect1">Application Files</h2>
<p class="itemizedlisttitle">NetBeans Projects&nbsp;</p>
<ul>
<li>
<p><a href="../sample-apps/tree_animation.zip"><code>tree_animation.zip</code></a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Transformations, Animations, and Visual Effects</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">About This Document</a></li>
        <li><a href="preface.htm#sthref4">Audience</a></li>
        <li><a href="preface.htm#sthref5">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref7">Related Documents</a></li>
        <li><a href="preface.htm#sthref8">Conventions</a></li>
      </ul>
    </li>
    <li><a href="transforms.htm#CHDGCBAH">Part I Applying Transformations in JavaFX</a>
    <ul>
    <li><a href="transformations-intro.htm#JFXTE216">1 Transformations Overview</a>
      <ul>
        <li><a href="transformations-intro.htm#sthref9">Introducing Transformations</a></li>
      </ul>
    </li>
    <li><a href="transformation-types.htm#JFXTE101">2 Transformation Types and Examples</a>
      <ul>
        <li><a href="transformation-types.htm#sthref12">Translation</a></li>
        <li><a href="transformation-types.htm#sthref13">Rotation</a></li>
        <li><a href="transformation-types.htm#sthref14">Scaling</a></li>
        <li><a href="transformation-types.htm#sthref15">Shearing</a></li>
        <li><a href="transformation-types.htm#sthref18">Multiple Transformations</a></li>
        <li><a href="transformation-types.htm#sthref19">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="animations.htm#CHDHICAE">Part II Creating Transitions and Timeline Animations</a>
    <ul>
    <li><a href="basics.htm#CIHFGFED">3 Animation Basics</a>
      <ul>
        <li><a href="basics.htm#BEIIJJJB">Transitions</a>
          <ul>
          <li><a href="basics.htm#sthref22">Fade Transition</a></li>
          <li><a href="basics.htm#sthref23">Path Transition</a></li>
          <li><a href="basics.htm#JFXTE108">Parallel Transition</a></li>
          <li><a href="basics.htm#JFXTE111">Sequential Transition</a></li>
          </ul>
        </li>
        <li><a href="basics.htm#BEIIDFJC">Timeline Animation</a>
          <ul>
          <li><a href="basics.htm#sthref28">Basic Timeline Animation</a></li>
          <li><a href="basics.htm#sthref31">Timeline Events</a></li>
          </ul>
        </li>
        <li><a href="basics.htm#BEIEBEIB">Interpolators</a>
          <ul>
          <li><a href="basics.htm#sthref32">Built-in Interpolators</a></li>
          <li><a href="basics.htm#sthref33">Custom Interpolators</a></li>
          </ul>
        </li>
        <li><a href="basics.htm#sthref34">Application Files</a></li>
      </ul>
    </li>
    <li><a class="selected" href="tree-animation.htm#CACCEGFG">4 Tree Animation Example</a>
      <ul>
        <li><a href="tree-animation.htm#sthref37">Project and Elements</a></li>
        <li><a href="tree-animation.htm#sthref40">Grass</a>
          <ul>
          <li><a href="tree-animation.htm#sthref41">Creating Grass</a></li>
          <li><a href="tree-animation.htm#sthref44">Creating Timeline Animation for Grass Movement</a></li>
          </ul>
        </li>
        <li><a href="tree-animation.htm#sthref46">Tree</a>
          <ul>
          <li><a href="tree-animation.htm#sthref48">Branches</a></li>
          <li><a href="tree-animation.htm#sthref49">Leaves and Flowers</a></li>
          <li><a href="tree-animation.htm#sthref50">Animating Tree Elements</a></li>
          </ul>
        </li>
        <li><a href="tree-animation.htm#sthref54">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="visual_effects.htm#BABEIJGH">Part III Creating Visual Effects</a>
    <ul>
    <li><a href="effect-types.htm#JFXTE192">5 Applying Effects</a>
      <ul>
        <li><a href="effect-types.htm#JFXTE237">Blend Effect</a></li>
        <li><a href="effect-types.htm#JFXTE238">Bloom Effect</a></li>
        <li><a href="effect-types.htm#JFXTE240">Blur Effects</a>
          <ul>
          <li><a href="effect-types.htm#sthref58">BoxBlur</a></li>
          <li><a href="effect-types.htm#sthref60">Motion Blur</a></li>
          <li><a href="effect-types.htm#sthref62">Gaussian Blur</a></li>
          </ul>
        </li>
        <li><a href="effect-types.htm#JFXTE250">Drop Shadow Effect</a></li>
        <li><a href="effect-types.htm#JFXTE253">Inner Shadow Effect</a></li>
        <li><a href="effect-types.htm#JFXTE256">Reflection</a></li>
        <li><a href="effect-types.htm#JFXTE259">Lighting Effect</a></li>
        <li><a href="effect-types.htm#JFXTE262">Perspective Effect</a></li>
        <li><a href="effect-types.htm#JFXTE266">Creating a Chain of Effects</a></li>
        <li><a href="effect-types.htm#sthref72">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="sample-source-code.htm#JFXTE231">Part IV Source Code for the Transformations, Animations, and Visual Effects Tutorial</a>
    <ul>
    <li><a href="xylophonejava.htm#JFXTE270">A Xylophone.java</a></li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="basics.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="visual_effects.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2011, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
