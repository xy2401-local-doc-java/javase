<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>1 Processing Events (Release 8)</title>
<meta name="description" content="This topic describes events and the handling of events in JavaFX applications. Learn about event types, event targets, event capturing, event bubbling, and the underlying architecture of the event processing system.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXED.pdf">PDF</a> | <a href="../JFXED.epub">ePub</a> | <a href="../JFXED.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Handling Events</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="events.htm">Previous Page</a><a class="button" title="Next Page" href="convenience_methods.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="CEGJAAFD" name="CEGJAAFD" class="anchor"></a><a id="JFXED118" name="JFXED118" class="anchor"></a>
<h1 class="chapter"><span class="secnum">1</span> Processing Events</h1>
<a id="JFXED119" name="JFXED119" class="anchor"></a>
<p>This topic describes events and the handling of events in JavaFX applications. Learn about event types, event targets, event capturing, event bubbling, and the underlying architecture of the event processing system.</p>
<p>Events are used to notify your application of actions taken by the user and enable the application to respond to the event. The JavaFX platform provides the structure for capturing an event, routing the event to its target, and enabling the application to handle the event as needed.</p>
<a id="JFXED120" name="JFXED120" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref9" name="sthref9" class="anchor"></a>
<h2 class="sect1">Events</h2>
<p>An event represents an occurrence of something of interest to the application, such as a mouse being moved or a key being pressed. In JavaFX, an event is an instance of the <a href="../api/javafx/event/Event.html"><code>javafx.event.Event</code></a> class or any subclass of <code>Event</code>. JavaFX provides several events, including <code>DragEvent</code>, <code>KeyEvent</code>, <code>MouseEvent</code>, <code>ScrollEvent</code>, and others. You can define your own event by extending the <code>Event</code> class.</p>
<p>Every event includes the information described in <a href="#CEGFDAAA">Table 1-1</a>.</p>
<div class="tblformal"><a id="JFXED121" name="JFXED121" class="anchor"></a><a id="sthref10" name="sthref10" class="anchor"></a><a id="CEGFDAAA" name="CEGFDAAA" class="anchor"></a>
<p class="titleintable">Table 1-1 Event Properties</p>
<table class="Formal" title="Event Properties" summary="This table describes the properties that are part of each event. Column one identifies the property. Column two describes the property." dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="23%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t2">Property</th>
<th align="left" valign="bottom" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2" headers="r1c1-t2">
<p>Event type</p>
</td>
<td align="left" headers="r2c1-t2 r1c2-t2">
<p>Type of event that occurred.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2" headers="r1c1-t2">
<p>Source</p>
</td>
<td align="left" headers="r3c1-t2 r1c2-t2">
<p>Origin of the event, with respect to the location of the event in the event dispatch chain. The source changes as the event is passed along the chain.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2" headers="r1c1-t2">
<p>Target</p>
</td>
<td align="left" headers="r4c1-t2 r1c2-t2">
<p>Node on which the action occurred and the end node in the event dispatch chain. The target does not change, however if an event filter consumes the event during the event capturing phase, the target will not receive the event.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Event subclasses provide additional information that is specific to the type of event. For example, the <a href="../api/javafx/scene/input/MouseEvent.html"><code>MouseEvent</code></a> class includes information such as which button was pushed, the number of times the button was pushed, and the position of the mouse.</p>
<a id="CEGCHJDH" name="CEGCHJDH" class="anchor"></a><a id="JFXED122" name="JFXED122" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Event Types</h3>
<p>An event type is an instance of the <a href="../api/javafx/event/EventType.html"><code>EventType</code></a> class. Event types further classify the events of a single event class. For example, the <code>KeyEvent</code> class contains the following event types:</p>
<ul>
<li>
<p><code>KEY_PRESSED</code></p>
</li>
<li>
<p><code>KEY_RELEASED</code></p>
</li>
<li>
<p><code>KEY_TYPED</code></p>
</li>
</ul>
<p>Event types are hierarchical. Every event type has a name and a super type. For example, the name of the event for a key being pressed is <code>KEY_PRESSED</code>, and the super type is <code>KeyEvent.ANY</code>. The super type of the top-level event type is null. <a href="#CEGHBEHG">Figure 1-1</a> shows a subset of the hierarchy.</p>
<div class="figure"><a id="CEGHBEHG" name="CEGHBEHG" class="anchor"></a><a id="JFXED123" name="JFXED123" class="anchor"></a>
<p class="titleinfigure">Figure 1-1 Event Type Hierarchy</p>
<img width="596" height="311" src="img/event_type_hierarchy.gif" alt="Description of Figure 1-1 follows" title="Description of Figure 1-1 follows" longdesc="img_text/event_type_hierarchy.htm" /><br />
<a id="sthref11" name="sthref11" href="img_text/event_type_hierarchy.htm">Description of "Figure 1-1 Event Type Hierarchy"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The top-level event type in the hierarchy is <code>Event.ROOT</code>, which is equivalent to <code>Event.ANY</code>. In the subtypes, the event type <code>ANY</code> is used to mean any event type in the event class. For example, to provide the same response to any type of key event, use <code>KeyEvent.ANY</code> as the event type for the event filter or event handler. To respond only when a key is released, use the <code>KeyEvent.KEY_RELEASED</code> event type for the filter or handler.</p>
</div>
<!-- class="sect2" -->
<a id="JFXED124" name="JFXED124" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref12" name="sthref12" class="anchor"></a>
<h3 class="sect2">Event Targets</h3>
<p>The target of an event can be an instance of any class that implements the <a href="../api/javafx/event/EventTarget.html"><code>EventTarget</code></a> interface. The implementation of the <code>buildEventDispatchChain</code> creates the event dispatch chain that the event must travel to reach the target.</p>
<p>The <code>Window</code>, <code>Scene</code>, and <code>Node</code> classes implement the <code>EventTarget</code> interface and subclasses of those classes inherit the implementation. Therefore, most of the elements in your user interface have their dispatch chain defined, enabling you to focus on responding to the events and not be concerned with creating the event dispatch chain.</p>
<p>If you create a custom UI control that responds to user actions and that control is a subclass of <code>Window</code>, <code>Scene</code>, or <code>Node</code>, your control is an event target through inheritance. If your control or an element of your control is not a subclass of <code>Window</code>, <code>Scene</code>, or <code>Node</code>, you must implement the <code>EventTarget</code> interface for that control or element. For example, the <code>MenuBar</code> control is a target through inheritance, but the <code>MenuItem</code> element of a menu bar must implement the <code>EventTarget</code> interface so that it can receive events.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXED125" name="JFXED125" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref13" name="sthref13" class="anchor"></a>
<h2 class="sect1">Event Delivery Process</h2>
<p>The event delivery process contains the following steps:</p>
<ol>
<li>
<p>Target selection</p>
</li>
<li>
<p>Route construction</p>
</li>
<li>
<p>Event capturing</p>
</li>
<li>
<p>Event bubbling</p>
</li>
</ol>
<a id="CEGBGIEG" name="CEGBGIEG" class="anchor"></a><a id="JFXED126" name="JFXED126" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Target Selection</h3>
<p>When an action occurs, the system determines which node is the target based on internal rules:</p>
<ul>
<li>
<p>For key events, the target is the node that has focus.</p>
</li>
<li>
<p>For mouse events, the target is the node at the location of the cursor. For synthesized mouse events, the touch point is considered the location of the cursor.</p>
</li>
<li>
<p>For continuous gesture events that are generated by a gesture on a touch screen, the target is the node at the center point of all touches at the beginning of the gesture. For indirect gesture events that are generated by a gesture on something other than a touch screen, such as a trackpad, the target is the node at the location of the cursor.</p>
</li>
<li>
<p>For swipe events that are generated by a swipe on a touch screen, the target is the node at the center of the entire path of all of the fingers. For indirect swipe events, the target is the node at the location of the cursor.</p>
</li>
<li>
<p>For touch events, the default target for each touch point is the node at the location first pressed. A different target can be specified using the <code>ungrab()</code>, <code>grab()</code>, or <code>grab(</code><span class="variable">node</span><code>)</code> methods for a touch point in an event filter or event handler.</p>
</li>
</ul>
<p>If more than one node is located at the cursor or touch, the topmost node is considered the target. For example, if a user clicks or touches the triangle shown in <a href="#CEGFEEEH">Figure 1-2</a>, the triangle is the target, not the rectangle that contains the circle and the triangle.</p>
<div class="figure"><a id="CEGFEEEH" name="CEGFEEEH" class="anchor"></a><a id="JFXED127" name="JFXED127" class="anchor"></a>
<p class="titleinfigure">Figure 1-2 Sample User Interface Event Targets</p>
<img width="131" height="106" src="img/node_image.png" alt="Description of Figure 1-2 follows" title="Description of Figure 1-2 follows" longdesc="img_text/node_image.htm" /><br />
<a id="sthref14" name="sthref14" href="img_text/node_image.htm">Description of "Figure 1-2 Sample User Interface Event Targets"</a><br />
<br /></div>
<!-- class="figure" -->
<p>When a mouse button is pressed and the target is selected, all subsequent mouse events are delivered to the same target until the button is released. Similarly for gesture events, from the start of the gesture to the completion of the gesture, gesture events are delivered to the target identified at the beginning of the gesture. The default for touch events is to deliver the events to the initial target node that was identified for each touch point, unless the target is modified using the <code>ungrab()</code>, <code>grab()</code>, or <code>grab(</code><span class="variable">node</span><code>)</code> methods.</p>
</div>
<!-- class="sect2" -->
<a id="JFXED128" name="JFXED128" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref15" name="sthref15" class="anchor"></a>
<h3 class="sect2">Route Construction</h3>
<p>The initial event route is determined by the event dispatch chain that was created in the implementation of the <code>buildEventDispatchChain()</code> method of the selected event target. For example, if a user clicks the triangle shown in <a href="#CEGFEEEH">Figure 1-2</a>, the initial route is shown by the gray nodes in <a href="#CEGJCICG">Figure 1-3</a>. When a scene graph node is selected as an event target, the initial event route set in the default implementation of the <code>buildEventDispatchChain()</code> method in the <code>Node</code> class is a path from the stage to itself.</p>
<div class="figure"><a id="CEGJCICG" name="CEGJCICG" class="anchor"></a><a id="JFXED129" name="JFXED129" class="anchor"></a>
<p class="titleinfigure">Figure 1-3 Event Dispatch Chain</p>
<img width="261" height="239" src="img/dispatch_chain.png" alt="Description of Figure 1-3 follows" title="Description of Figure 1-3 follows" longdesc="img_text/dispatch_chain.htm" /><br />
<a id="sthref16" name="sthref16" href="img_text/dispatch_chain.htm">Description of "Figure 1-3 Event Dispatch Chain"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The route can be modified as event filters and event handlers along the route process the event. Also, if an event filter or event handler consumes the event at any point, some nodes on the initial route might not receive the event.</p>
</div>
<!-- class="sect2" -->
<a id="JFXED130" name="JFXED130" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref17" name="sthref17" class="anchor"></a>
<h3 class="sect2">Event Capturing Phase</h3>
<p>In the event capturing phase, the event is dispatched by the root node of your application and passed down the event dispatch chain to the target node. Using the event dispatch chain shown in <a href="#CEGJCICG">Figure 1-3</a>, the event travels from the Stage node to the Triangle node during the event capturing phase.</p>
<p>If any node in the chain has an event filter registered for the type of event that occurred, that filter is called. When the filter completes, the event is passed to the next node down the chain. If a filter is not registered for a node, the event is passed to the next node down the chain. If no filter consumes the event, the event target eventually receives and processes the event.</p>
</div>
<!-- class="sect2" -->
<a id="JFXED131" name="JFXED131" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref18" name="sthref18" class="anchor"></a>
<h3 class="sect2">Event Bubbling Phase</h3>
<p>After the event target is reached and all registered filters have processed the event, the event returns along the dispatch chain from the target to the root node. Using the event dispatch chain shown in <a href="#CEGJCICG">Figure 1-3</a>, the event travels from the Triangle node to the Stage node during the event bubbling phase.</p>
<p>If any node in the chain has a handler registered for the type of event encountered, that handler is called. When the handler completes, the event is returned to the next node up the chain. If a handler is not registered for a node, the event is returned to the next node up the chain. If no handler consumes the event, the root node eventually receives the event and processing is completed.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXED132" name="JFXED132" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref19" name="sthref19" class="anchor"></a>
<h2 class="sect1">Event Handling</h2>
<p>Event handling is provided by event filters and event handlers, which are implementations of the <a href="../api/javafx/event/EventHandler.html"><code>EventHandler</code></a> interface. If you want an application to be notified when an event occurs, register a filter or a handler for the event. The primary difference between a filter and a handler is when each one is executed.</p>
<a id="CEGHAEAH" name="CEGHAEAH" class="anchor"></a><a id="JFXED133" name="JFXED133" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Event Filters</h3>
<p>An event filter is executed during the event capturing phase. An event filter for a parent node can provide common event processing for multiple child nodes and if desired, consume the event to prevent the child node from receiving the event. Filters that are registered for the type of event that occurred are executed as the event passes through the node that registered the filter.</p>
<p>A node can register more than one filter. The order in which each filter is called is based on the hierarchy of event types. Filters for a specific event type are executed before filters for generic event types. For example, a filter for the <code>MouseEvent.MOUSE_PRESSED</code> event is called before the filter for the <code>InputEvent.ANY</code> event. The order in which two filters at the same level are executed is not specified.</p>
</div>
<!-- class="sect2" -->
<a id="JFXED134" name="JFXED134" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref20" name="sthref20" class="anchor"></a>
<h3 class="sect2">Event Handlers</h3>
<p>An event handler is executed during the event bubbling phase. If an event handler for a child node does not consume the event, an event handler for a parent node can act on the event after a child node processes it and can provide common event processing for multiple child nodes. Handlers that are registered for the type of event that occurred are executed as the event returns through the node that registered the handler.</p>
<p>A node can register more than one handler. The order in which each handler is called is based on the hierarchy of event types. Handlers for a specific event type are executed before handlers for generic event types. For example, a handler for the <code>KeyEvent.KEY_TYPED</code> event is called before the handler for the <code>InputEvent.ANY</code> event. The order in which two handlers at the same level are executed is not specified, with the exception that handlers that are registered by the convenience methods described in <a href="convenience_methods.htm#BABCCIHI">Working with Convenience Methods</a> are executed last.</p>
</div>
<!-- class="sect2" -->
<a id="JFXED135" name="JFXED135" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref21" name="sthref21" class="anchor"></a>
<h3 class="sect2">Consuming of an Event</h3>
<p>An event can be consumed by an event filter or an event handler at any point in the event dispatch chain by calling the <code>consume()</code> method. This method signals that processing of the event is complete and traversal of the event dispatch chain ends.</p>
<p>Consuming the event in an event filter prevents any child node on the event dispatch chain from acting on the event. Consuming the event in an event handler stops any further processing of the event by parent handlers on the event dispatch chain. However, if the node that consumes the event has more than one filter or handler registered for the event, the peer filters or handlers are still executed.</p>
<p>For example, using the event dispatch chain shown in <a href="#CEGJCICG">Figure 1-3</a>, assume that the Pane node has an event filter registered for the <code>KeyEvent.KEY_PRESSED</code> event and an event filter registered for the <code>InputEvent.ANY</code> event. If the filter for the key pressed event consumes the event, the filter for the input event is executed and the Triangle node does not receive the event.</p>
<p>Note that the default handlers for the JavaFX UI controls typically consume most of the input events.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXED136" name="JFXED136" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref22" name="sthref22" class="anchor"></a>
<h2 class="sect1">Additional Resources</h2>
<p>For more information on how events are processed, see the <a href="../api/javafx/event/package-summary.html">JavaFX API documentation</a> for the <code>javafx.event</code> package.</p>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Handling Events</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">Audience</a></li>
        <li><a href="preface.htm#sthref4">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref6">Related Documents</a></li>
        <li><a href="preface.htm#sthref7">Conventions</a></li>
      </ul>
    </li>
    <li><a href="events.htm#sthref8">Part I Handling Events</a>
    <ul>
    <li><a class="selected" href="processing.htm#JFXED118">1 Processing Events</a>
      <ul>
        <li><a href="processing.htm#sthref9">Events</a>
          <ul>
          <li><a href="processing.htm#JFXED122">Event Types</a></li>
          <li><a href="processing.htm#sthref12">Event Targets</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref13">Event Delivery Process</a>
          <ul>
          <li><a href="processing.htm#JFXED126">Target Selection</a></li>
          <li><a href="processing.htm#sthref15">Route Construction</a></li>
          <li><a href="processing.htm#sthref17">Event Capturing Phase</a></li>
          <li><a href="processing.htm#sthref18">Event Bubbling Phase</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref19">Event Handling</a>
          <ul>
          <li><a href="processing.htm#JFXED133">Event Filters</a></li>
          <li><a href="processing.htm#sthref20">Event Handlers</a></li>
          <li><a href="processing.htm#sthref21">Consuming of an Event</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref22">Additional Resources</a></li>
      </ul>
    </li>
    <li><a href="convenience_methods.htm#JFXED101">2 Working with Convenience Methods</a>
      <ul>
        <li><a href="convenience_methods.htm#sthref23">Using Convenience Methods</a>
          <ul>
          <li><a href="convenience_methods.htm#sthref25">Examples for Mouse Events</a></li>
          <li><a href="convenience_methods.htm#sthref26">Examples for Keyboard Events</a></li>
          </ul>
        </li>
        <li><a href="convenience_methods.htm#sthref27">Additional Resources</a></li>
      </ul>
    </li>
    <li><a href="filters.htm#JFXED137">3 Working with Event Filters</a>
      <ul>
        <li><a href="filters.htm#sthref28">Registering and Removing an Event Filter</a></li>
        <li><a href="filters.htm#sthref29">Using Event Filters</a>
          <ul>
          <li><a href="filters.htm#sthref30">Draggable Panels Example</a></li>
          <li><a href="filters.htm#sthref33">Filters for the Draggable Panels Example</a></li>
          </ul>
        </li>
        <li><a href="filters.htm#sthref34">Additional Resources</a></li>
        <li><a href="filters.htm#sthref35">Application Files</a></li>
      </ul>
    </li>
    <li><a href="handlers.htm#JFXED149">4 Working with Event Handlers</a>
      <ul>
        <li><a href="handlers.htm#sthref38">Registering and Removing an Event Handler</a></li>
        <li><a href="handlers.htm#sthref39">Using Event Handlers</a>
          <ul>
          <li><a href="handlers.htm#sthref40">Keyboard Example</a></li>
          <li><a href="handlers.htm#sthref43">Handlers for the Keyboard Example</a></li>
          </ul>
        </li>
        <li><a href="handlers.htm#sthref44">Additional Resources</a></li>
        <li><a href="handlers.htm#sthref45">Application Files</a></li>
      </ul>
    </li>
    <li><a href="gestures.htm#JFXED166">5 Working with Events from Touch-Enabled Devices</a>
      <ul>
        <li><a href="gestures.htm#sthref48">Gesture and Touch Events</a>
          <ul>
          <li><a href="gestures.htm#sthref50">Targets of Gestures</a></li>
          <li><a href="gestures.htm#sthref51">Other Events Generated</a></li>
          </ul>
        </li>
        <li><a href="gestures.htm#sthref52">Gesture Events Example</a>
          <ul>
          <li><a href="gestures.htm#sthref54">Creating the Shapes</a></li>
          <li><a href="gestures.htm#JFXED173">Handling the Events</a></li>
          <li><a href="gestures.htm#sthref60">Managing the Log</a></li>
          </ul>
        </li>
        <li><a href="gestures.htm#sthref61">Additional Resources</a></li>
        <li><a href="gestures.htm#sthref62">Application Files</a></li>
      </ul>
    </li>
    <li><a href="touch_events.htm#JFXED192">6 Working with Touch Events</a>
      <ul>
        <li><a href="touch_events.htm#sthref65">Overview of Touch Actions</a>
          <ul>
          <li><a href="touch_events.htm#JFXED195">Touch Points</a></li>
          <li><a href="touch_events.htm#JFXED196">Touch Events</a></li>
          <li><a href="touch_events.htm#JFXED197">Event Sets</a></li>
          <li><a href="touch_events.htm#sthref67">Touch Point Targets and Touch Event Targets</a></li>
          <li><a href="touch_events.htm#sthref68">Additional Events Generated from Touches</a></li>
          </ul>
        </li>
        <li><a href="touch_events.htm#JFXED201">Touch Events Example</a>
          <ul>
          <li><a href="touch_events.htm#JFXED203">Handling Concurrent Touch Points Independently</a></li>
          <li><a href="touch_events.htm#JFXED205">Changing the Target of a Touch Point</a></li>
          </ul>
        </li>
        <li><a href="touch_events.htm#sthref70">Additional Resources</a></li>
        <li><a href="touch_events.htm#sthref71">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="drag_drop_feature.htm#sthref74">Part II Drag-and-Drop Feature in JavaFX Applications</a>
    <ul>
    <li><a href="drag-drop.htm#JFXED219">7 Drag-and-Drop Operation</a>
      <ul>
        <li><a href="drag-drop.htm#sthref75">Objects and Data Types for Drag-and-Drop Operation</a>
          <ul>
          <li><a href="drag-drop.htm#sthref76">Transfer Modes</a></li>
          </ul>
        </li>
        <li><a href="drag-drop.htm#JFXED223">Implementing a Basic Drag-and-Drop Gesture</a>
          <ul>
          <li><a href="drag-drop.htm#sthref77">Starting the Drag-and-Drop Gesture on a Source</a></li>
          <li><a href="drag-drop.htm#sthref78">Handling a DRAG_OVER Event on a Target</a></li>
          <li><a href="drag-drop.htm#sthref79">Providing Visual Feedback by a Gesture Target</a></li>
          <li><a href="drag-drop.htm#sthref80">Handling a DRAG_DROPPED Event on a Target</a></li>
          <li><a href="drag-drop.htm#sthref81">Handling a DRAG_DONE Event on a Source</a></li>
          <li><a href="drag-drop.htm#sthref82">Dragging Custom Data</a></li>
          </ul>
        </li>
        <li><a href="drag-drop.htm#sthref83">Application Files</a></li>
      </ul>
    </li>
    <li><a href="paper-doll.htm#JFXED260">8 PaperDoll Drag-and-Drop Application</a>
      <ul>
        <li><a href="paper-doll.htm#sthref86">Layout of the PaperDoll Application</a></li>
        <li><a href="paper-doll.htm#sthref88">Organization of the PaperDoll Application</a></li>
        <li><a href="paper-doll.htm#sthref89">Starting the Drag-And-Drop Operation</a></li>
        <li><a href="paper-doll.htm#sthref90">Handling the Drop of the Data</a></li>
        <li><a href="paper-doll.htm#sthref91">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="sample-source-code.htm#sthref94">Part III Source Code for the Handling Events Tutorial</a>
    <ul>
    <li><a href="draggablepanelsexamplejava.htm#JFXED240">A DraggablePanelsExample.java</a></li>
    <li><a href="keyboardexamplejava.htm#JFXED244">B KeyboardExample.java</a></li>
    <li><a href="gestureeventsjava.htm#JFXED248">C GestureEvents.java</a></li>
    <li><a href="toucheventsjava.htm#JFXED252">D TouchEvents.java</a></li>
    <li><a href="hellodraganddropjava.htm#JFXED256">E HelloDragAndDrop.java</a></li>
    <li><a href="paperdolljava.htm#sthref95">F Paper Doll Drag-and-Drop Sample</a>
      <ul>
        <li><a href="paperdolljava.htm#JFXED275">PaperDoll.java</a></li>
        <li><a href="paperdolljava.htm#JFXED278">Cloth.java</a></li>
        <li><a href="paperdolljava.htm#JFXED281">ClothListBuilder.java</a></li>
        <li><a href="paperdolljava.htm#JFXED284">Body.java</a></li>
        <li><a href="paperdolljava.htm#JFXED287">BodyElement.java</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="events.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="convenience_methods.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2011, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
