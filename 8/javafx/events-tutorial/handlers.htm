<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>4 Working with Event Handlers (Release 8)</title>
<meta name="description" content="This topic describes event handlers in JavaFX applications. Learn how event handlers can be used to process the events generated by keyboard actions, mouse actions, scroll actions, and other user interactions with your application.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXED.pdf">PDF</a> | <a href="../JFXED.epub">ePub</a> | <a href="../JFXED.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Handling Events</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="filters.htm">Previous Page</a><a class="button" title="Next Page" href="gestures.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="BABBHHCJ" name="BABBHHCJ" class="anchor"></a><a id="JFXED149" name="JFXED149" class="anchor"></a>
<h1 class="chapter"><span class="secnum">4</span> Working with Event Handlers</h1>
<a id="JFXED150" name="JFXED150" class="anchor"></a>
<p>This topic describes event handlers in JavaFX applications. Learn how event handlers can be used to process the events generated by keyboard actions, mouse actions, scroll actions, and other user interactions with your application.</p>
<p>Event handlers enable you to handle events during the event bubbling phase. A node can have one or more handlers for handling an event. A single handler can be used for more than one node and more than one event type. If an event handler for a child node does not consume the event, an event handler for a parent node enables the parent node to act on the event after a child node processes it and to provide common event processing for multiple child nodes.</p>
<a id="JFXED151" name="JFXED151" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref38" name="sthref38" class="anchor"></a>
<h2 class="sect1">Registering and Removing an Event Handler</h2>
<p>To process an event during the event bubbling phase, a node must register an event handler. An event handler is an implementation of the <a href="../api/javafx/event/EventHandler.html"><code>EventHandler</code></a> interface. The <code>handle()</code> method of this interface provides the code that is executed when the event that is associated with the handler is received by the node that registered the handler.</p>
<p>To register a handler, use the <code>addEventHandler()</code> method. This method takes the event type and the handler as arguments. In <a href="#JFHECJBG">Example 4-1</a>, the first handler is added to a single node and processes a specific event type. A second handler for handling input events is defined and registered by two different nodes. The same handler is also registered for two different types of events.</p>
<div class="example"><a id="JFHECJBG" name="JFHECJBG" class="anchor"></a><a id="JFXED152" name="JFXED152" class="anchor"></a>
<p class="titleinexample">Example 4-1 Register a Handler</p>
<pre xml:space="preserve" class="oac_no_warn">// Register an event handler for a single node and a specific event type
node.addEventHandler(DragEvent.DRAG_ENTERED, 
                    new EventHandler&lt;DragEvent&gt;() {
                        public void handle(DragEvent) { ... };
                    });

// Define an event handler
EventHandler handler = new EventHandler(&lt;InputEvent&gt;() {
    public void handle(InputEvent event) {
        System.out.println("Handling event " + event.getEventType()); 
        event.consume();
    }

// Register the same handler for two different nodes
myNode1.addEventHandler(DragEvent.DRAG_EXITED, handler);
myNode2.addEventHandler(DragEvent.DRAG_EXITED, handler);

// Register the handler for another event type
myNode1.addEventHandler(MouseEvent.MOUSE_DRAGGED, handler);
</pre></div>
<!-- class="example" -->
<p>Note that an event handler that is defined for one type of event can also be used for any subtypes of that event. See <a href="processing.htm#CEGCHJDH">Event Types</a> for information on the hierarchy of event types.</p>
<p>When you no longer want an event handler to process events for a node or for an event type, remove the handler using the <code>removeEventHandler()</code> method. This method takes the event type and the handler as arguments. In <a href="#JFHHDBAC">Example 4-2</a>, the handler defined in <a href="#JFHECJBG">Example 4-1</a> is removed from the <code>DragEvent.DRAG_EXITED</code> event for <code>myNode1</code>. The handler is still executed by <code>myNode2</code> and by <code>myNode1</code> for the <code>MouseEvent.MOUSE_DRAGGED</code> event.</p>
<div class="example"><a id="JFHHDBAC" name="JFHHDBAC" class="anchor"></a><a id="JFXED153" name="JFXED153" class="anchor"></a>
<p class="titleinexample">Example 4-2 Remove a Handler</p>
<pre xml:space="preserve" class="oac_no_warn">// Remove an event handler
myNode1.removeEventHandler(DragEvent.DRAG_EXITED, handler);
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
<p>To remove an event handler that was registered by a convenience method, pass null to the convenience method, for example, <code>node1.setOnMouseDragged(null)</code>.</p>
</div>
</div>
<!-- class="sect1" -->
<a id="JFXED154" name="JFXED154" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref39" name="sthref39" class="anchor"></a>
<h2 class="sect1">Using Event Handlers</h2>
<p>Event handlers are typically used on a the leaf nodes or on a branch node of the event dispatch chain and are called during the event bubbling phase of event handling. Use a handler on a branch node to perform actions such as defining a default response for all child nodes.</p>
<p>To see an example of how handlers can be used, download the <a href="../sample-apps/KeyboardExample.zip"><code>KeyboardExample.zip</code></a> file. Extract the NetBeans project and open it in the NetBeans IDE. The following sections describe the handlers that are used by this example.</p>
<a id="JFXED162" name="JFXED162" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref40" name="sthref40" class="anchor"></a>
<h3 class="sect2">Keyboard Example</h3>
<p>The Keyboard example demonstrates the following uses of handlers:</p>
<ul>
<li>
<p>Registering a single handler for two different event types</p>
</li>
<li>
<p>Providing common event processing for child nodes in a parent node</p>
</li>
</ul>
<p><a href="#BABGAIGC">Figure 4-1</a> is the screen that is shown when the Keyboard Example is started. The user interface consists of four letters, each in its own square, which represent the corresponding keyboard key. The first key on the screen is highlighted, which indicates that it has the focus. Use the left and right arrow keys on the keyboard to move the focus to a different key on the screen.</p>
<div class="figure"><a id="BABGAIGC" name="BABGAIGC" class="anchor"></a><a id="JFXED163" name="JFXED163" class="anchor"></a>
<p class="titleinfigure">Figure 4-1 Initial Screen for Keyboard Example</p>
<img width="254" height="102" src="img/initial_keyboard-screen.png" alt="Description of Figure 4-1 follows" title="Description of Figure 4-1 follows" longdesc="img_text/initial_keyboard-screen.htm" /><br />
<a id="sthref41" name="sthref41" href="img_text/initial_keyboard-screen.htm">Description of "Figure 4-1 Initial Screen for Keyboard Example"</a><br />
<br /></div>
<!-- class="figure" -->
<p>When the Enter key is pressed, the key on the screen with the focus changes to red. When the Enter key is released, the key on the screen returns to its previous color. When the key for a letter that matches one of the keys on the screen is pressed, the matching key on the screen changes to red, and returns to its previous color when the key is released. When a key that does not match any key on the screen is pressed, nothing happens. <a href="#BABBGDIB">Figure 4-2</a> shows the screen when the A key has focus and the D key on the keyboard is pressed.</p>
<div class="figure"><a id="BABBGDIB" name="BABBGDIB" class="anchor"></a><a id="JFXED164" name="JFXED164" class="anchor"></a>
<p class="titleinfigure">Figure 4-2 Key Pressed Screen</p>
<img width="254" height="102" src="img/key_pressed_screen.png" alt="Description of Figure 4-2 follows" title="Description of Figure 4-2 follows" longdesc="img_text/key_pressed_screen.htm" /><br />
<a id="sthref42" name="sthref42" href="img_text/key_pressed_screen.htm">Description of "Figure 4-2 Key Pressed Screen"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="JFXED158" name="JFXED158" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref43" name="sthref43" class="anchor"></a>
<h3 class="sect2">Handlers for the Keyboard Example</h3>
<p>In the Keyboard example, internally each key shown on the screen is represented by a key node. All key nodes are contained in a single keyboard node. Each key node has a handler that receives key events when the key has focus. The handler responds to the key-pressed and key-released events for the Enter key by changing the color of the key on the screen. The event is then consumed so that the keyboard node, which is the parent node, does not receive the event.</p>
<p><a href="#BABCIBBB">Example 4-3</a> shows the <code>installEventHandler()</code> method that defines the handler for the key nodes.</p>
<div class="example"><a id="BABCIBBB" name="BABCIBBB" class="anchor"></a><a id="JFXED159" name="JFXED159" class="anchor"></a>
<p class="titleinexample">Example 4-3 Handler for the Key Nodes</p>
<pre xml:space="preserve" class="oac_no_warn">private void installEventHandler(final Node keyNode) {
    // handler for enter key press / release events, other keys are
    // handled by the parent (keyboard) node handler
    final EventHandler&lt;KeyEvent&gt; keyEventHandler =
        new EventHandler&lt;KeyEvent&gt;() {
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    setPressed(keyEvent.getEventType()
                        == KeyEvent.KEY_PRESSED);
 
                    keyEvent.consume();
                }
            }
        };
 
    keyNode.setOnKeyPressed(keyEventHandler);
    keyNode.setOnKeyReleased(keyEventHandler);
}
</pre></div>
<!-- class="example" -->
<p>The keyboard node has two handlers that handle key events that are not consumed by a key node handler. The first handler changes the color of the key node that matches the key pressed. The second handler responds to the left and right arrow keys and moves the focus.</p>
<p><a href="#BABDIFIF">Example 4-4</a> shows <code>the installEventHandler()</code> method that defines the handlers for the keyboard node.</p>
<div class="example"><a id="BABDIFIF" name="BABDIFIF" class="anchor"></a><a id="JFXED160" name="JFXED160" class="anchor"></a>
<p class="titleinexample">Example 4-4 Handlers for the Keyboard Node</p>
<pre xml:space="preserve" class="oac_no_warn">private void installEventHandler(final Parent keyboardNode) {
    // handler for key pressed / released events not handled by
    // key nodes
    final EventHandler&lt;KeyEvent&gt; keyEventHandler =
        new EventHandler&lt;KeyEvent&gt;() {
            public void handle(final KeyEvent keyEvent) {
                final Key key = lookupKey(keyEvent.getCode());
                if (key != null) {
                    key.setPressed(keyEvent.getEventType()
                                   == KeyEvent.KEY_PRESSED);
 
                    keyEvent.consume();
                }
            }
        };
 
    keyboardNode.setOnKeyPressed(keyEventHandler);
    keyboardNode.setOnKeyReleased(keyEventHandler);
 
    keyboardNode.addEventHandler(KeyEvent.KEY_PRESSED,
                                 new EventHandler&lt;KeyEvent&gt;() {
                                     public void handle(
                                         final KeyEvent keyEvent) {
                                               handleFocusTraversal(
                                                   keyboardNode,
                                                   keyEvent);
                                     }
                                 });
}
</pre></div>
<!-- class="example" -->
<p>The two handlers for the key-pressed event are considered peer handlers. Therefore, even though each handler consumes the event, the other handler is still invoked.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXED161" name="JFXED161" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref44" name="sthref44" class="anchor"></a>
<h2 class="sect1">Additional Resources</h2>
<p>For information on event handlers, see the <a href="../api/javafx/event/package-summary.html">JavaFX API documentation</a>.</p>
</div>
<!-- class="sect1" -->
<a id="JFXED215" name="JFXED215" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref45" name="sthref45" class="anchor"></a>
<h2 class="sect1">Application Files</h2>
<p class="itemizedlisttitle">Source Code&nbsp;</p>
<ul>
<li>
<p><code><a href="keyboardexamplejava.htm#BABBIHCH">KeyboardExample.java</a></code></p>
</li>
</ul>
<p class="itemizedlisttitle">NetBeans Projects&nbsp;</p>
<ul>
<li>
<p><a href="../sample-apps/KeyboardExample.zip"><code>KeyboardExample.zip</code></a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Handling Events</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">Audience</a></li>
        <li><a href="preface.htm#sthref4">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref6">Related Documents</a></li>
        <li><a href="preface.htm#sthref7">Conventions</a></li>
      </ul>
    </li>
    <li><a href="events.htm#sthref8">Part I Handling Events</a>
    <ul>
    <li><a href="processing.htm#JFXED118">1 Processing Events</a>
      <ul>
        <li><a href="processing.htm#sthref9">Events</a>
          <ul>
          <li><a href="processing.htm#JFXED122">Event Types</a></li>
          <li><a href="processing.htm#sthref12">Event Targets</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref13">Event Delivery Process</a>
          <ul>
          <li><a href="processing.htm#JFXED126">Target Selection</a></li>
          <li><a href="processing.htm#sthref15">Route Construction</a></li>
          <li><a href="processing.htm#sthref17">Event Capturing Phase</a></li>
          <li><a href="processing.htm#sthref18">Event Bubbling Phase</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref19">Event Handling</a>
          <ul>
          <li><a href="processing.htm#JFXED133">Event Filters</a></li>
          <li><a href="processing.htm#sthref20">Event Handlers</a></li>
          <li><a href="processing.htm#sthref21">Consuming of an Event</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref22">Additional Resources</a></li>
      </ul>
    </li>
    <li><a href="convenience_methods.htm#JFXED101">2 Working with Convenience Methods</a>
      <ul>
        <li><a href="convenience_methods.htm#sthref23">Using Convenience Methods</a>
          <ul>
          <li><a href="convenience_methods.htm#sthref25">Examples for Mouse Events</a></li>
          <li><a href="convenience_methods.htm#sthref26">Examples for Keyboard Events</a></li>
          </ul>
        </li>
        <li><a href="convenience_methods.htm#sthref27">Additional Resources</a></li>
      </ul>
    </li>
    <li><a href="filters.htm#JFXED137">3 Working with Event Filters</a>
      <ul>
        <li><a href="filters.htm#sthref28">Registering and Removing an Event Filter</a></li>
        <li><a href="filters.htm#sthref29">Using Event Filters</a>
          <ul>
          <li><a href="filters.htm#sthref30">Draggable Panels Example</a></li>
          <li><a href="filters.htm#sthref33">Filters for the Draggable Panels Example</a></li>
          </ul>
        </li>
        <li><a href="filters.htm#sthref34">Additional Resources</a></li>
        <li><a href="filters.htm#sthref35">Application Files</a></li>
      </ul>
    </li>
    <li><a class="selected" href="handlers.htm#JFXED149">4 Working with Event Handlers</a>
      <ul>
        <li><a href="handlers.htm#sthref38">Registering and Removing an Event Handler</a></li>
        <li><a href="handlers.htm#sthref39">Using Event Handlers</a>
          <ul>
          <li><a href="handlers.htm#sthref40">Keyboard Example</a></li>
          <li><a href="handlers.htm#sthref43">Handlers for the Keyboard Example</a></li>
          </ul>
        </li>
        <li><a href="handlers.htm#sthref44">Additional Resources</a></li>
        <li><a href="handlers.htm#sthref45">Application Files</a></li>
      </ul>
    </li>
    <li><a href="gestures.htm#JFXED166">5 Working with Events from Touch-Enabled Devices</a>
      <ul>
        <li><a href="gestures.htm#sthref48">Gesture and Touch Events</a>
          <ul>
          <li><a href="gestures.htm#sthref50">Targets of Gestures</a></li>
          <li><a href="gestures.htm#sthref51">Other Events Generated</a></li>
          </ul>
        </li>
        <li><a href="gestures.htm#sthref52">Gesture Events Example</a>
          <ul>
          <li><a href="gestures.htm#sthref54">Creating the Shapes</a></li>
          <li><a href="gestures.htm#JFXED173">Handling the Events</a></li>
          <li><a href="gestures.htm#sthref60">Managing the Log</a></li>
          </ul>
        </li>
        <li><a href="gestures.htm#sthref61">Additional Resources</a></li>
        <li><a href="gestures.htm#sthref62">Application Files</a></li>
      </ul>
    </li>
    <li><a href="touch_events.htm#JFXED192">6 Working with Touch Events</a>
      <ul>
        <li><a href="touch_events.htm#sthref65">Overview of Touch Actions</a>
          <ul>
          <li><a href="touch_events.htm#JFXED195">Touch Points</a></li>
          <li><a href="touch_events.htm#JFXED196">Touch Events</a></li>
          <li><a href="touch_events.htm#JFXED197">Event Sets</a></li>
          <li><a href="touch_events.htm#sthref67">Touch Point Targets and Touch Event Targets</a></li>
          <li><a href="touch_events.htm#sthref68">Additional Events Generated from Touches</a></li>
          </ul>
        </li>
        <li><a href="touch_events.htm#JFXED201">Touch Events Example</a>
          <ul>
          <li><a href="touch_events.htm#JFXED203">Handling Concurrent Touch Points Independently</a></li>
          <li><a href="touch_events.htm#JFXED205">Changing the Target of a Touch Point</a></li>
          </ul>
        </li>
        <li><a href="touch_events.htm#sthref70">Additional Resources</a></li>
        <li><a href="touch_events.htm#sthref71">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="drag_drop_feature.htm#sthref74">Part II Drag-and-Drop Feature in JavaFX Applications</a>
    <ul>
    <li><a href="drag-drop.htm#JFXED219">7 Drag-and-Drop Operation</a>
      <ul>
        <li><a href="drag-drop.htm#sthref75">Objects and Data Types for Drag-and-Drop Operation</a>
          <ul>
          <li><a href="drag-drop.htm#sthref76">Transfer Modes</a></li>
          </ul>
        </li>
        <li><a href="drag-drop.htm#JFXED223">Implementing a Basic Drag-and-Drop Gesture</a>
          <ul>
          <li><a href="drag-drop.htm#sthref77">Starting the Drag-and-Drop Gesture on a Source</a></li>
          <li><a href="drag-drop.htm#sthref78">Handling a DRAG_OVER Event on a Target</a></li>
          <li><a href="drag-drop.htm#sthref79">Providing Visual Feedback by a Gesture Target</a></li>
          <li><a href="drag-drop.htm#sthref80">Handling a DRAG_DROPPED Event on a Target</a></li>
          <li><a href="drag-drop.htm#sthref81">Handling a DRAG_DONE Event on a Source</a></li>
          <li><a href="drag-drop.htm#sthref82">Dragging Custom Data</a></li>
          </ul>
        </li>
        <li><a href="drag-drop.htm#sthref83">Application Files</a></li>
      </ul>
    </li>
    <li><a href="paper-doll.htm#JFXED260">8 PaperDoll Drag-and-Drop Application</a>
      <ul>
        <li><a href="paper-doll.htm#sthref86">Layout of the PaperDoll Application</a></li>
        <li><a href="paper-doll.htm#sthref88">Organization of the PaperDoll Application</a></li>
        <li><a href="paper-doll.htm#sthref89">Starting the Drag-And-Drop Operation</a></li>
        <li><a href="paper-doll.htm#sthref90">Handling the Drop of the Data</a></li>
        <li><a href="paper-doll.htm#sthref91">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="sample-source-code.htm#sthref94">Part III Source Code for the Handling Events Tutorial</a>
    <ul>
    <li><a href="draggablepanelsexamplejava.htm#JFXED240">A DraggablePanelsExample.java</a></li>
    <li><a href="keyboardexamplejava.htm#JFXED244">B KeyboardExample.java</a></li>
    <li><a href="gestureeventsjava.htm#JFXED248">C GestureEvents.java</a></li>
    <li><a href="toucheventsjava.htm#JFXED252">D TouchEvents.java</a></li>
    <li><a href="hellodraganddropjava.htm#JFXED256">E HelloDragAndDrop.java</a></li>
    <li><a href="paperdolljava.htm#sthref95">F Paper Doll Drag-and-Drop Sample</a>
      <ul>
        <li><a href="paperdolljava.htm#JFXED275">PaperDoll.java</a></li>
        <li><a href="paperdolljava.htm#JFXED278">Cloth.java</a></li>
        <li><a href="paperdolljava.htm#JFXED281">ClothListBuilder.java</a></li>
        <li><a href="paperdolljava.htm#JFXED284">Body.java</a></li>
        <li><a href="paperdolljava.htm#JFXED287">BodyElement.java</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="filters.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="gestures.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2011, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
