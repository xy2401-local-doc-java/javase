<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>5 Working with Events from Touch-Enabled Devices (Release 8)</title>
<meta name="description" content="This topic describes the events that are generated by the different types of gestures that are recognized by touch-enabled devices, such as touch events, zoom events, rotate events, and swipe events.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXED.pdf">PDF</a> | <a href="../JFXED.epub">ePub</a> | <a href="../JFXED.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Handling Events</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="handlers.htm">Previous Page</a><a class="button" title="Next Page" href="touch_events.htm">Next Page</a></div>

<article>

<!-- End Header --><a id="CHDDHFJJ" name="CHDDHFJJ" class="anchor"></a><a id="JFXED166" name="JFXED166" class="anchor"></a>
<h1 class="chapter"><span class="secnum">5</span> Working with Events from Touch-Enabled Devices</h1>
<a id="JFXED167" name="JFXED167" class="anchor"></a>
<p>This topic describes the events that are generated by the different types of gestures that are recognized by touch-enabled devices, such as touch events, zoom events, rotate events, and swipe events. This topic shows you how to work with these types of events in your JavaFX application.</p>
<p>Starting with JavaFX 2.2, users can interact with your JavaFX applications using touches and gestures on touch-enabled devices. Touches and gestures can involve a single point or multiple points of contact. The type of event that is generated is determined by the touch or type of gesture that the user makes.</p>
<p>Touch and gesture events are processed the same way that other events are processed. See <a href="processing.htm#CEGJAAFD">Processing Events</a> for a description of this process. Convenience methods for registering event handlers for touch and gesture events are available. See <a href="convenience_methods.htm#BABCCIHI">Working with Convenience Methods</a> for more information.</p>
<a id="JFXED168" name="JFXED168" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref48" name="sthref48" class="anchor"></a>
<h2 class="sect1">Gesture and Touch Events</h2>
<p>JavaFX applications generate gesture events when an application is running on a device with a touch screen or a trackpad that recognizes gestures. For platforms that recognize gestures, the native recognition is used to identify the gesture performed. <a href="#BABGCBGD">Table 5-1</a> describes the gestures that are supported and the corresponding event types that are generated.</p>
<div class="tblformalwide"><a id="JFXED189" name="JFXED189" class="anchor"></a><a id="sthref49" name="sthref49" class="anchor"></a><a id="BABGCBGD" name="BABGCBGD" class="anchor"></a>
<p class="titleintable">Table 5-1 Supported Gestures and Generated Event Types</p>
<table class="FormalWide" title="Supported Gestures and Generated Event Types" summary="This 3-column table provides information on the gestures that are supported for JavaFX applications. Column one names the gesture. Column two describes the gesture. Column 3 identifies the events that are generated by the gesture." dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="13%" />
<col width="*" />
<col width="42%" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t2">Gesture</th>
<th align="left" valign="bottom" id="r1c2-t2">Description</th>
<th align="left" valign="bottom" id="r1c3-t2">Events Generated</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2" headers="r1c1-t2">
<p>Rotate</p>
</td>
<td align="left" headers="r2c1-t2 r1c2-t2">
<p>Two-finger turning movement where one finger moves clockwise around the other finger to rotate an object clockwise and one finger moves counterclockwise around the other finger to rotate an object counterclockwise.</p>
</td>
<td align="left" headers="r2c1-t2 r1c3-t2">
<ul>
<li>
<p><code>ROTATION_STARTED</code></p>
</li>
<li>
<p><code>ROTATE</code></p>
</li>
<li>
<p><code>ROTATION_FINISHED</code></p>
</li>
</ul>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2" headers="r1c1-t2">
<p>Scroll</p>
</td>
<td align="left" headers="r3c1-t2 r1c2-t2">
<p>Sliding movement, up or down for vertical scrolling, left or right for horizontal scrolling.</p>
</td>
<td align="left" headers="r3c1-t2 r1c3-t2">
<ul>
<li>
<p><code>SCROLL_STARTED</code></p>
</li>
<li>
<p><code>SCROLL</code></p>
</li>
<li>
<p><code>SCROLL_FINISHED</code></p>
</li>
</ul>
<p>If a mouse wheel is used for scrolling, only the events of type <code>SCROLL</code> are generated.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2" headers="r1c1-t2">
<p>Swipe</p>
</td>
<td align="left" headers="r4c1-t2 r1c2-t2">
<p>Sweeping movement across the screen or trackpad to the right, left, up, or down. Diagonal movement is not recognized as a swipe.</p>
</td>
<td align="left" headers="r4c1-t2 r1c3-t2">
<ul>
<li>
<p><code>SWIPE_LEFT</code></p>
</li>
<li>
<p><code>SWIPE_RIGHT</code></p>
</li>
<li>
<p><code>SWIPE_UP</code></p>
</li>
<li>
<p><code>SWIPE_DOWN</code></p>
</li>
</ul>
<p>A single swipe event is generated for each swiping gesture. <code>SCROLL_STARTED</code>, <code>SCROLL</code>, and <code>SCROLL_FINISHED</code> events are also generated.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t2" headers="r1c1-t2">
<p>Zoom</p>
</td>
<td align="left" headers="r5c1-t2 r1c2-t2">
<p>Two-finger pinching motion where fingers are brought together to zoom out and fingers are moved apart to zoom in.</p>
</td>
<td align="left" headers="r5c1-t2 r1c3-t2">
<ul>
<li>
<p><code>ZOOM_STARTED</code></p>
</li>
<li>
<p><code>ZOOM</code></p>
</li>
<li>
<p><code>ZOOM_FINISHED</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>Touch events are generated when the application is running on a device with a touch screen and the user touches one or more fingers to the screen. These events can be used to provide lower level tracking for the individual touch points that are part of a touch or gesture. For more information on touch events, see <a href="touch_events.htm#CHDHBGJA">Working with Touch Events</a>.</p>
<a id="JFXED190" name="JFXED190" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref50" name="sthref50" class="anchor"></a>
<h3 class="sect2">Targets of Gestures</h3>
<p>The target of most gestures is the node at the center point of all touches at the beginning of the gesture. The target of a swipe gesture is the node at the center of the entire path of all of the fingers.</p>
<p>If more than one node is located at the target point, the topmost node is considered the target. All of the events generated from a single, continuous gesture, including inertia from the gesture, are delivered to the node that was selected when the gesture started. For more information on targets of events, see <a href="processing.htm#CEGBGIEG">Target Selection</a>.</p>
</div>
<!-- class="sect2" -->
<a id="JFXED191" name="JFXED191" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref51" name="sthref51" class="anchor"></a>
<h3 class="sect2">Other Events Generated</h3>
<p>Gestures and touches can generate other types of events in addition to the events for the gesture or touch performed. A swipe gesture generates scroll events in addition to the swipe event. Depending on the length of the swipe, it is possible that the swipe and scroll events have different targets. The target of a scroll event is the node at the point where the gesture started. The target of a swipe event is the node at the center of the entire path of the gesture.</p>
<p>Touches on a touch screen also generate corresponding mouse events. For example, touching a point on the screen generates <code>TOUCH_PRESSED</code> and <code>MOUSE_PRESSED</code> events. Moving a single point on the screen generates scroll events and drag events. Even if your application does not handle touch or gesture events directly, it can run on a touch-enabled device with minimal changes by responding to the mouse events that are generated in response to touches.</p>
<p>If your application handles touches, gestures, and mouse events, make sure that you do not handle a single action multiple times. For example, if a gesture generates scroll events and drag events and you provide the same processing for handlers of both types of events, the movement on the screen could be twice the amount expected. You can use the <code>isSynthesized()</code> method for mouse events to determine if the event was generated by mouse movement or movement on a touch screen and only handle the event once.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXED169" name="JFXED169" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref52" name="sthref52" class="anchor"></a>
<h2 class="sect1">Gesture Events Example</h2>
<p>The Gesture Events example shows a rectangle, an ellipse, and an event log. <a href="#BABGJEAH">Figure 5-1</a> shows the example.</p>
<div class="figure"><a id="BABGJEAH" name="BABGJEAH" class="anchor"></a><a id="JFXED170" name="JFXED170" class="anchor"></a>
<p class="titleinfigure">Figure 5-1 Gesture Events Example</p>
<img width="438" height="457" src="img/gestures_ui.png" alt="Description of Figure 5-1 follows" title="Description of Figure 5-1 follows" longdesc="img_text/gestures_ui.htm" /><br />
<a id="sthref53" name="sthref53" href="img_text/gestures_ui.htm">Description of "Figure 5-1 Gesture Events Example"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The log contains a record of the events that were handled. This example enables you to try different gestures and see what events are generated for each.</p>
<p>The Gesture Events example is available in the <a href="../sample-apps/GestureEventsExample.zip"><code>GestureEventsExample.zip</code></a> file. Extract the NetBeans project and open it in the NetBeans IDE.</p>
<p>To generate gesture events, you must run the example on a device with a touch screen or a trackpad that supports gestures. To generate touch events, you must run the example on a device with a touch screen.</p>
<a id="JFXED171" name="JFXED171" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref54" name="sthref54" class="anchor"></a>
<h3 class="sect2">Creating the Shapes</h3>
<p>The Gesture Events example shows a rectangle and an ellipse. <a href="#CHDJDJBB">Example 5-1</a> shows the code used to create each shape and the layout pane that contains the shapes.</p>
<div class="example"><a id="CHDJDJBB" name="CHDJDJBB" class="anchor"></a><a id="JFXED172" name="JFXED172" class="anchor"></a>
<p class="titleinexample">Example 5-1 Set Up the Shapes</p>
<pre xml:space="preserve" class="oac_no_warn">// Create the shapes that respond to gestures and use a VBox to 
// organize them
VBox shapes = new VBox();
shapes.setAlignment(Pos.CENTER);
shapes.setPadding(new Insets(15.0));
shapes.setSpacing(30.0);
shapes.setPrefWidth(500);
shapes.getChildren().addAll(createRectangle(), createEllipse());
...
private Rectangle createRectangle() {

    final Rectangle rect = new Rectangle(100, 100, 100, 100);
    rect.setFill(Color.DARKMAGENTA);
...
    return rect;
}

private Ellipse createEllipse() {

    final Ellipse oval = new Ellipse(100, 50);
    oval.setFill(Color.STEELBLUE);
...
    return oval;
}
</pre></div>
<!-- class="example" -->
<p>You can use gestures to move, rotate, and zoom in and out of these objects.</p>
</div>
<!-- class="sect2" -->
<a id="BABECFAB" name="BABECFAB" class="anchor"></a><a id="JFXED173" name="JFXED173" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Handling the Events</h3>
<p>In general, event handlers for the shape objects in the Gesture Events example perform similar operations for each type of event that is handled. For all types of events, an entry is posted to the log of events.</p>
<p>On platforms that support inertia for gestures, additional events might be generated after the <span class="variable">event-type</span><code>_FINISHED</code> event. For example, <code>SCROLL</code> events might be generated after the <code>SCROLL_FINISHED</code> event if there is any inertia associated with the scroll gesture. Use the <code>isInertia()</code> method to identify the events that are generated based on the inertia of the gesture. If the method returns <code>true</code>, the event was generated after the gesture was completed.</p>
<p>Events are generated by gestures on a touch screen or on a trackpad. <code>SCROLL</code> events are also generated by the mouse wheel. Use the <code>isDirect()</code> method to identify the source of the event. If the method returns <code>true</code>, the event was generated by a gesture on a touch screen. Otherwise, the method returns <code>false</code>. You can use this information to provide different behavior based on the source of the event.</p>
<p>Touches on a touch screen also generate corresponding mouse events. For example, touching an object generates both <code>TOUCH_PRESSED</code> and <code>MOUSE_PRESSED</code> events. Use the <code>isSynthesized()</code> method to determine the source of the mouse event. If the method returns <code>true</code>, the event was generated by a touch instead of by a mouse.</p>
<p>The <code>inc()</code> and <code>dec()</code> methods in the Gesture Events example are used to provide a visual cue that an object is the target of a gesture. The number of gestures in progress is tracked, and the appearance of the target object is changed when the number of active gestures changes from 0 to 1 or drops to 0.</p>
<p>In the Gesture Events example, the handlers for the rectangle and ellipse are similar. Therefore, the code examples in the following sections show the handlers for the rectangle. See <code><a href="gestureeventsjava.htm#CHDHHDGI">GestureEvents.java</a></code> for the handlers for the ellipse.</p>
<a id="JFXED174" name="JFXED174" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref55" name="sthref55" class="anchor"></a>
<h4 class="sect3">Handling Scroll Events</h4>
<p>When a scroll gesture is performed, <code>SCROLL_STARTED</code>, <code>SCROLL</code>, and <code>SCROLL_FINISHED</code> events are generated. When a mouse wheel is moved, only a <code>SCROLL</code> event is generated. <a href="#CHDBIGAC">Example 5-2</a> shows the rectangle's handlers for scroll events in the Gesture Events example. Handlers for the ellipse are similar.</p>
<div class="example"><a id="CHDBIGAC" name="CHDBIGAC" class="anchor"></a><a id="JFXED175" name="JFXED175" class="anchor"></a>
<p class="titleinexample">Example 5-2 Define the Handlers for Scroll Events</p>
<pre xml:space="preserve" class="oac_no_warn">rect.setOnScroll(new EventHandler&lt;ScrollEvent&gt;() {
        @Override public void handle(ScrollEvent event) {
            if (!event.isInertia()) {
                rect.setTranslateX(rect.getTranslateX() + event.getDeltaX());
                rect.setTranslateY(rect.getTranslateY() + event.getDeltaY());
            }
            log("Rectangle: Scroll event" +
                ", inertia: " + event.isInertia() + 
                ", direct: " + event.isDirect());
            event.consume();
        }
});

rect.setOnScrollStarted(new EventHandler&lt;ScrollEvent&gt;() {
        @Override public void handle(ScrollEvent event) {
            inc(rect);
            log("Rectangle: Scroll started event");
            event.consume();
        }
});
 
rect.setOnScrollFinished(new EventHandler&lt;ScrollEvent&gt;() {
        @Override public void handle(ScrollEvent event) {
            dec(rect);
            log("Rectangle: Scroll finished event");
            event.consume();
        }
});
</pre></div>
<!-- class="example" -->
<p>In addition to the common handling described in <a href="#BABECFAB">Handling the Events</a>, <code>SCROLL</code> events are handled by moving the object in the direction of the scroll gesture. If the scroll gesture ends outside of the window, the shape is moved out of the window. <code>SCROLL</code> events that are generated based on inertia are ignored by the handler for the rectangle. The handler for the ellipse continues to move the ellipse in response to <code>SCROLL</code> events that are generated from inertia and could result in the ellipse moving out of the window even if the gesture ends within the window.</p>
</div>
<!-- class="sect3" -->
<a id="JFXED176" name="JFXED176" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref56" name="sthref56" class="anchor"></a>
<h4 class="sect3">Handling Zoom Events</h4>
<p>When a zoom gesture is performed, <code>ZOOM_STARTED</code>, <code>ZOOM</code>, and <code>ZOOM_FINISHED</code> events are generated. <a href="#BABBJAFD">Example 5-3</a> shows the rectangle's handlers for zoom events in the Gesture Events example. Handlers for the ellipse are similar.</p>
<div class="example"><a id="BABBJAFD" name="BABBJAFD" class="anchor"></a><a id="JFXED177" name="JFXED177" class="anchor"></a>
<p class="titleinexample">Example 5-3 Define the Handlers for Zoom Events</p>
<pre xml:space="preserve" class="oac_no_warn">rect.setOnZoom(new EventHandler&lt;ZoomEvent&gt;() {
        @Override public void handle(ZoomEvent event) {
            rect.setScaleX(rect.getScaleX() * event.getZoomFactor());
            rect.setScaleY(rect.getScaleY() * event.getZoomFactor());
            log("Rectangle: Zoom event" +
                ", inertia: " + event.isInertia() + 
                ", direct: " + event.isDirect());
 
            event.consume();
        }
});

rect.setOnZoomStarted(new EventHandler&lt;ZoomEvent&gt;() {
        @Override public void handle(ZoomEvent event) {
            inc(rect);
            log("Rectangle: Zoom event started");
            event.consume();
        }
});

rect.setOnZoomFinished(new EventHandler&lt;ZoomEvent&gt;() {
        @Override public void handle(ZoomEvent event) {
            dec(rect);
            log("Rectangle: Zoom event finished");
            event.consume();
        }
});
 
</pre></div>
<!-- class="example" -->
<p>In addition to the common handling described in <a href="#BABECFAB">Handling the Events</a>, <code>ZOOM</code> events are handled by scaling the object according to the movement of the gesture. The handlers for the rectangle and ellipse handle all <code>ZOOM</code> events the same, regardless of inertia or the source of the event.</p>
</div>
<!-- class="sect3" -->
<a id="JFXED178" name="JFXED178" class="anchor"></a>
<div class="sect3"><a id="sthref57" name="sthref57" class="anchor"></a>
<h4 class="sect3">Handling Rotate Events</h4>
<p>When a rotate gesture is performed, <code>ROTATE_STARTED</code>, <code>ROTATE</code>, and <code>ROTATE_FINISHED</code> events are generated. <a href="#BABDAEEF">Example 5-4</a> shows the rectangle's handlers for rotate events in the Gesture Events example. Handlers for the ellipse are similar.</p>
<div class="example"><a id="BABDAEEF" name="BABDAEEF" class="anchor"></a><a id="JFXED179" name="JFXED179" class="anchor"></a>
<p class="titleinexample">Example 5-4 Define the Handlers for Rotate Events</p>
<pre xml:space="preserve" class="oac_no_warn">rect.setOnRotate(new EventHandler&lt;RotateEvent&gt;() {
        @Override public void handle(RotateEvent event) {
            rect.setRotate(rect.getRotate() + event.getAngle());
            log("Rectangle: Rotate event" +
                ", inertia: " + event.isInertia() + 
                ", direct: " + event.isDirect());
            event.consume();
        }
});

rect.setOnRotationStarted(new EventHandler&lt;RotateEvent&gt;() {
        @Override public void handle(RotateEvent event) {
            inc(rect);
            log("Rectangle: Rotate event started");
            event.consume();
        }
});

rect.setOnRotationFinished(new EventHandler&lt;RotateEvent&gt;() {
        @Override public void handle(RotateEvent event) {
            dec(rect);
            log("Rectangle: Rotate event finished");
            event.consume();
        }
});
</pre></div>
<!-- class="example" -->
<p>In addition to the common handling described in <a href="#BABECFAB">Handling the Events</a>, <code>ROTATE</code> events are handled by rotating the object according to the movement of the gesture. The handlers for the rectangle and ellipse handle all <code>ROTATE</code> events the same, regardless of inertia or the source of the event.</p>
</div>
<!-- class="sect3" -->
<a id="JFXED180" name="JFXED180" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref58" name="sthref58" class="anchor"></a>
<h4 class="sect3">Handling Swipe Events</h4>
<p>When a swipe gesture is performed, either a <code>SWIPE_DOWN</code>, <code>SWIPE_LEFT</code>, <code>SWIPE_RIGHT</code>, or <code>SWIPE_UP</code> event is generated, depending on the direction of the swipe. <a href="#BABEFJGF">Example 5-5</a> shows the rectangle's handlers for <code>SWIPE_RIGHT</code> and <code>SWIPE_LEFT</code> events in the Gesture Events example. The ellipse does not handle swipe events.</p>
<div class="example"><a id="BABEFJGF" name="BABEFJGF" class="anchor"></a><a id="JFXED181" name="JFXED181" class="anchor"></a>
<p class="titleinexample">Example 5-5 Define the Handlers for Swipe Events</p>
<pre xml:space="preserve" class="oac_no_warn">rect.setOnSwipeRight(new EventHandler&lt;SwipeEvent&gt;() {
        @Override public void handle(SwipeEvent event) {
            log("Rectangle: Swipe right event");
            event.consume();
        }
});     
 
rect.setOnSwipeLeft(new EventHandler&lt;SwipeEvent&gt;() {
        @Override public void handle(SwipeEvent event) {
            log("Rectangle: Swipe left event");
            event.consume();
        }
});
</pre></div>
<!-- class="example" -->
<p>The only action performed for swipe events is to record the event in the log. However, swipe gestures also generate scroll events. The target of the swipe event is the topmost node at the center of the path of the gesture. This target could be different than the target of the scroll events, which is the topmost node at the point where the gesture started. The rectangle and ellipse respond to scroll events that are generated by a swipe gesture when they are the target of the scroll events.</p>
</div>
<!-- class="sect3" -->
<a id="JFXED182" name="JFXED182" class="anchor"></a>
<div class="sect3"><a id="sthref59" name="sthref59" class="anchor"></a>
<h4 class="sect3">Handling Touch Events</h4>
<p>When a touch screen is touched, a <code>TOUCH_MOVED</code>, <code>TOUCH_PRESSED</code>, <code>TOUCH_RELEASED</code>, or <code>TOUCH_STATIONARY</code> event is generated for each touch point. The touch event contains information for every touch point that is part of the touch action. <a href="#BABCACDI">Example 5-6</a> shows the rectangle's handlers for touch pressed and touch released events in the Gesture Events example. The ellipse does not handle touch events.</p>
<div class="example"><a id="BABCACDI" name="BABCACDI" class="anchor"></a><a id="JFXED183" name="JFXED183" class="anchor"></a>
<p class="titleinexample">Example 5-6 Define the Handlers for Touch Events</p>
<pre xml:space="preserve" class="oac_no_warn">rect.setOnTouchPressed(new EventHandler&lt;TouchEvent&gt;() {
        @Override public void handle(TouchEvent event) {
            log("Rectangle: Touch pressed event");
            event.consume();
        }
});

rect.setOnTouchReleased(new EventHandler&lt;TouchEvent&gt;() {
        @Override public void handle(TouchEvent event) {
            log("Rectangle: Touch released event");
            event.consume();
        }
});
 
</pre></div>
<!-- class="example" -->
<p>The only action performed for touch events is to record the event in the log. Touch events can be used to provide lower level tracking for the individual touch points that are part of a touch or gesture. See <a href="touch_events.htm#CHDHBGJA">Working with Touch Events</a> for more information and an example.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHBHED" name="CIHHBHED" class="anchor"></a><a id="JFXED184" name="JFXED184" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Handling Mouse Events</h4>
<p>Mouse events are generated by actions with the mouse and by touches on a touch screen. <a href="#BABDGHIE">Example 5-7</a> shows the ellipse's handlers for <code>MOUSE_PRESSED</code> and <code>MOUSE_RELEASED</code> events in the Gesture Events example.</p>
<div class="example"><a id="BABDGHIE" name="BABDGHIE" class="anchor"></a><a id="JFXED185" name="JFXED185" class="anchor"></a>
<p class="titleinexample">Example 5-7 Define Handlers for Mouse Events</p>
<pre xml:space="preserve" class="oac_no_warn">oval.setOnMousePressed(new EventHandler&lt;MouseEvent&gt;() {
        @Override public void handle(MouseEvent event) {
            if (event.isSynthesized()) {
                log("Ellipse: Mouse pressed event from touch" +
                    ", synthesized: " + event.isSynthesized());
            }
            event.consume();
        }
});     
 
oval.setOnMouseReleased(new EventHandler&lt;MouseEvent&gt;() {
        @Override public void handle(MouseEvent event) {
            if (event.isSynthesized()) {
                log("Ellipse: Mouse released event from touch" +
                    ", synthesized: " + event.isSynthesized());
            }
            event.consume();
        }
});
</pre></div>
<!-- class="example" -->
<p>Mouse pressed and mouse released events are handled by the ellipse only when the events are generated by touches on a touch screen. Handlers for the rectangle record all mouse pressed and mouse released events in the log.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="JFXED186" name="JFXED186" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref60" name="sthref60" class="anchor"></a>
<h3 class="sect2">Managing the Log</h3>
<p>The Gesture Events example shows a log of the events that were handled by the shapes on the screen. An <code>ObservableList</code> object is used to record the events for each shape, and a <code>ListView</code> object is used to display the list of events. The log is limited to 50 entries. The newest entry is added to the top of the list and the oldest entry is removed from the bottom. See <code><a href="gestureeventsjava.htm#CHDHHDGI">GestureEvents.java</a></code> for the code that manages the log.</p>
<p>Work with the shapes in the application and notice what events are generated for each gesture that you perform.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="JFXED188" name="JFXED188" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref61" name="sthref61" class="anchor"></a>
<h2 class="sect1">Additional Resources</h2>
<p>See the <a href="../api/javafx/event/package-summary.html">JavaFX API documentation</a> for more information on gesture events, touch events, and touch points.</p>
</div>
<!-- class="sect1" -->
<a id="JFXED216" name="JFXED216" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref62" name="sthref62" class="anchor"></a>
<h2 class="sect1">Application Files</h2>
<p class="itemizedlisttitle">Source Code&nbsp;</p>
<ul>
<li>
<p><code><a href="gestureeventsjava.htm#CHDHHDGI">GestureEvents.java</a></code></p>
</li>
</ul>
<p class="itemizedlisttitle">NetBeans Projects&nbsp;</p>
<ul>
<li>
<p><a href="../sample-apps/GestureEventsExample.zip">GestureEventsExample.zip</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Handling Events</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">Audience</a></li>
        <li><a href="preface.htm#sthref4">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref6">Related Documents</a></li>
        <li><a href="preface.htm#sthref7">Conventions</a></li>
      </ul>
    </li>
    <li><a href="events.htm#sthref8">Part I Handling Events</a>
    <ul>
    <li><a href="processing.htm#JFXED118">1 Processing Events</a>
      <ul>
        <li><a href="processing.htm#sthref9">Events</a>
          <ul>
          <li><a href="processing.htm#JFXED122">Event Types</a></li>
          <li><a href="processing.htm#sthref12">Event Targets</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref13">Event Delivery Process</a>
          <ul>
          <li><a href="processing.htm#JFXED126">Target Selection</a></li>
          <li><a href="processing.htm#sthref15">Route Construction</a></li>
          <li><a href="processing.htm#sthref17">Event Capturing Phase</a></li>
          <li><a href="processing.htm#sthref18">Event Bubbling Phase</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref19">Event Handling</a>
          <ul>
          <li><a href="processing.htm#JFXED133">Event Filters</a></li>
          <li><a href="processing.htm#sthref20">Event Handlers</a></li>
          <li><a href="processing.htm#sthref21">Consuming of an Event</a></li>
          </ul>
        </li>
        <li><a href="processing.htm#sthref22">Additional Resources</a></li>
      </ul>
    </li>
    <li><a href="convenience_methods.htm#JFXED101">2 Working with Convenience Methods</a>
      <ul>
        <li><a href="convenience_methods.htm#sthref23">Using Convenience Methods</a>
          <ul>
          <li><a href="convenience_methods.htm#sthref25">Examples for Mouse Events</a></li>
          <li><a href="convenience_methods.htm#sthref26">Examples for Keyboard Events</a></li>
          </ul>
        </li>
        <li><a href="convenience_methods.htm#sthref27">Additional Resources</a></li>
      </ul>
    </li>
    <li><a href="filters.htm#JFXED137">3 Working with Event Filters</a>
      <ul>
        <li><a href="filters.htm#sthref28">Registering and Removing an Event Filter</a></li>
        <li><a href="filters.htm#sthref29">Using Event Filters</a>
          <ul>
          <li><a href="filters.htm#sthref30">Draggable Panels Example</a></li>
          <li><a href="filters.htm#sthref33">Filters for the Draggable Panels Example</a></li>
          </ul>
        </li>
        <li><a href="filters.htm#sthref34">Additional Resources</a></li>
        <li><a href="filters.htm#sthref35">Application Files</a></li>
      </ul>
    </li>
    <li><a href="handlers.htm#JFXED149">4 Working with Event Handlers</a>
      <ul>
        <li><a href="handlers.htm#sthref38">Registering and Removing an Event Handler</a></li>
        <li><a href="handlers.htm#sthref39">Using Event Handlers</a>
          <ul>
          <li><a href="handlers.htm#sthref40">Keyboard Example</a></li>
          <li><a href="handlers.htm#sthref43">Handlers for the Keyboard Example</a></li>
          </ul>
        </li>
        <li><a href="handlers.htm#sthref44">Additional Resources</a></li>
        <li><a href="handlers.htm#sthref45">Application Files</a></li>
      </ul>
    </li>
    <li><a class="selected" href="gestures.htm#JFXED166">5 Working with Events from Touch-Enabled Devices</a>
      <ul>
        <li><a href="gestures.htm#sthref48">Gesture and Touch Events</a>
          <ul>
          <li><a href="gestures.htm#sthref50">Targets of Gestures</a></li>
          <li><a href="gestures.htm#sthref51">Other Events Generated</a></li>
          </ul>
        </li>
        <li><a href="gestures.htm#sthref52">Gesture Events Example</a>
          <ul>
          <li><a href="gestures.htm#sthref54">Creating the Shapes</a></li>
          <li><a href="gestures.htm#JFXED173">Handling the Events</a></li>
          <li><a href="gestures.htm#sthref60">Managing the Log</a></li>
          </ul>
        </li>
        <li><a href="gestures.htm#sthref61">Additional Resources</a></li>
        <li><a href="gestures.htm#sthref62">Application Files</a></li>
      </ul>
    </li>
    <li><a href="touch_events.htm#JFXED192">6 Working with Touch Events</a>
      <ul>
        <li><a href="touch_events.htm#sthref65">Overview of Touch Actions</a>
          <ul>
          <li><a href="touch_events.htm#JFXED195">Touch Points</a></li>
          <li><a href="touch_events.htm#JFXED196">Touch Events</a></li>
          <li><a href="touch_events.htm#JFXED197">Event Sets</a></li>
          <li><a href="touch_events.htm#sthref67">Touch Point Targets and Touch Event Targets</a></li>
          <li><a href="touch_events.htm#sthref68">Additional Events Generated from Touches</a></li>
          </ul>
        </li>
        <li><a href="touch_events.htm#JFXED201">Touch Events Example</a>
          <ul>
          <li><a href="touch_events.htm#JFXED203">Handling Concurrent Touch Points Independently</a></li>
          <li><a href="touch_events.htm#JFXED205">Changing the Target of a Touch Point</a></li>
          </ul>
        </li>
        <li><a href="touch_events.htm#sthref70">Additional Resources</a></li>
        <li><a href="touch_events.htm#sthref71">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="drag_drop_feature.htm#sthref74">Part II Drag-and-Drop Feature in JavaFX Applications</a>
    <ul>
    <li><a href="drag-drop.htm#JFXED219">7 Drag-and-Drop Operation</a>
      <ul>
        <li><a href="drag-drop.htm#sthref75">Objects and Data Types for Drag-and-Drop Operation</a>
          <ul>
          <li><a href="drag-drop.htm#sthref76">Transfer Modes</a></li>
          </ul>
        </li>
        <li><a href="drag-drop.htm#JFXED223">Implementing a Basic Drag-and-Drop Gesture</a>
          <ul>
          <li><a href="drag-drop.htm#sthref77">Starting the Drag-and-Drop Gesture on a Source</a></li>
          <li><a href="drag-drop.htm#sthref78">Handling a DRAG_OVER Event on a Target</a></li>
          <li><a href="drag-drop.htm#sthref79">Providing Visual Feedback by a Gesture Target</a></li>
          <li><a href="drag-drop.htm#sthref80">Handling a DRAG_DROPPED Event on a Target</a></li>
          <li><a href="drag-drop.htm#sthref81">Handling a DRAG_DONE Event on a Source</a></li>
          <li><a href="drag-drop.htm#sthref82">Dragging Custom Data</a></li>
          </ul>
        </li>
        <li><a href="drag-drop.htm#sthref83">Application Files</a></li>
      </ul>
    </li>
    <li><a href="paper-doll.htm#JFXED260">8 PaperDoll Drag-and-Drop Application</a>
      <ul>
        <li><a href="paper-doll.htm#sthref86">Layout of the PaperDoll Application</a></li>
        <li><a href="paper-doll.htm#sthref88">Organization of the PaperDoll Application</a></li>
        <li><a href="paper-doll.htm#sthref89">Starting the Drag-And-Drop Operation</a></li>
        <li><a href="paper-doll.htm#sthref90">Handling the Drop of the Data</a></li>
        <li><a href="paper-doll.htm#sthref91">Application Files</a></li>
      </ul>
    </li>
</ul>
</li>
    <li><a href="sample-source-code.htm#sthref94">Part III Source Code for the Handling Events Tutorial</a>
    <ul>
    <li><a href="draggablepanelsexamplejava.htm#JFXED240">A DraggablePanelsExample.java</a></li>
    <li><a href="keyboardexamplejava.htm#JFXED244">B KeyboardExample.java</a></li>
    <li><a href="gestureeventsjava.htm#JFXED248">C GestureEvents.java</a></li>
    <li><a href="toucheventsjava.htm#JFXED252">D TouchEvents.java</a></li>
    <li><a href="hellodraganddropjava.htm#JFXED256">E HelloDragAndDrop.java</a></li>
    <li><a href="paperdolljava.htm#sthref95">F Paper Doll Drag-and-Drop Sample</a>
      <ul>
        <li><a href="paperdolljava.htm#JFXED275">PaperDoll.java</a></li>
        <li><a href="paperdolljava.htm#JFXED278">Cloth.java</a></li>
        <li><a href="paperdolljava.htm#JFXED281">ClothListBuilder.java</a></li>
        <li><a href="paperdolljava.htm#JFXED284">Body.java</a></li>
        <li><a href="paperdolljava.htm#JFXED287">BodyElement.java</a></li>
      </ul>
    </li>
</ul>

</li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="handlers.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a><a class="button" title="Next Page" href="touch_events.htm">Next Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2011, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
