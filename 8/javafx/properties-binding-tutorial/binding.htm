<!DOCTYPE html>
<!--[if lt IE 7]>      <html lang="en" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html lang="en" class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html lang="en" class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html lang="en" class="no-js"> <!--<![endif]-->

<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>1 Using JavaFX Properties and Binding (Release 8)</title>
<meta name="description" content="In this tutorial you learn how to use properties and binding in JavaFX applications.">

<meta name="viewport" content="width=device-width">

<link rel="stylesheet" href="../../assets/css/main.css">
<link rel="stylesheet" href="../../assets/css/main-media-480-tablet.css">
<link rel="stylesheet" href="../../assets/css/main-media-768-laptop.css">
<link rel="stylesheet" href="../../assets/css/main-media-1140-deskp.css">

<link rel="stylesheet" href="../../assets/css/simpletree.css">
<link rel="stylesheet" href="../../assets/css/forms.css">
<link rel="stylesheet" href="../../assets/css/panel.css">
<link rel="stylesheet" href="../../assets/css/altanav.css">
<link rel="stylesheet" href="../../assets/css/docstyles.css">

<link rel="stylesheet" href="../../assets/css/print.css">
<link rel="stylesheet" href="../../assets/css/home.css">
<link rel="stylesheet" href="../../assets/css/normalize.min.css">    

        
<!--[if lt IE 9]>
<link rel="stylesheet" href="../../assets/css/ltIE9.css">
<![endif]-->         
        
<script src="../../assets/js/jquery-1.6.2.js"></script>
<script src="../../assets/js/modernizr-2.6.1-respond-1.1.0.min.js"></script>

<!--toggle search-->
<script src="../../assets/js/toggle.search.js"  type="text/javascript"></script>
<!--navigation main-->
<script src="../../assets/js/altanav.js"  type="text/javascript"></script> 
<!--custom tag element-->
<script src="../../assets/js/customhtmltags.js"  type="text/javascript"></script> 

<!--project specific head data-->
  
<!-- Function for printing -->  
<script>
function PrintPage()
  {window.print();}
</script>

<script>
  $(window).unload(function() {
  });
</script>


<!-- keep select menu's sticking when hit back button-->
<script>
$(window).load(function () {
    $("select").each(function () {
        $(this).val($(this).find('option[selected]').val());
    });
});
</script>

<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>

<body>
<!--[if lt IE 7]>
<div style="border-bottom: 1px solid #A3A481; background-color: #FFFFDC; padding: 10px; font: normal 13px/16px Arial, sans-serif;">
<strong>You are running an older version of Internet Explorer or running Internet Explorer in compatibility mode.</strong>  For a richer experience, please upgrade to the latest <a target="_blank" href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer</a> version, or use <a target="_blank" href="http://www.google.com/chrome/" target="_blank">Chrome</a>, <a target="_blank" href="http://www.mozilla.com/en-US/firefox/" target="_blank">Firefox</a>, or <a target="_blank" href="http://www.apple.com/safari/" target="_blank">Safari</a>.
</div>
<![endif]--> 

<div id="altlogo">Oracle | Hardware and Software, Engineered to Work Together</div>

<span id="top"></span>


<div class="header-container">
<header class="bookwrapper  clearfix">

<div id="brandProdName" >
<div id="logocover"></div>
<div id="productName" >Documentation</div>
</div> 

<div id="signInArea"></div>
<script type="text/javascript">
$(document).ready(function() {
$("#signInArea").load("../../version.html");
});
</script>

<div id="searchheader">
<a href="/javase/search.html" class="button">Search Java SE Documentation</a></div>

<!-- Main Navigation -->
 <br class="clearfloat" />
 <div id="navBar" class="io" >

<!--
<ul>
<li><a class="menu1" title="Home" href="pg-home.php"><span>Home</span></a></li>
<li><a class="menu2" title="What's New"><span>What's New</span><span class="dropdown-arrow"></span></a></li>
<li><a class="menu3" title="All Books" href="pg-allbooks-infotype.php"><span>All Books</span></a></li>
</ul>
-->
</div>
            <br class="clearfloat" />
<!--         
<div id="navcontainer" >
<div class="submenu2 shadow" ><h3>See What's New in <strong>SE</strong> Documentation</h3>
</div>

</div> -->
            <br class="clearfloat" />
<!-- End Main Navigation -->


  </header>
</div><!-- header -->

<div class="main-container" >
<div class="main bookwrapper bookindent clearfix" >

<div id="breadcrumb">
  <a href="../../index.html">Java Platform, Standard Edition (Java SE) 8</a>
</div>
<div class="bookoptions"><a href="mailto:javasedocs_us@oracle.com" title="Send Feedback">Send Feedback</a> | <a href="#" onclick="PrintPage();">Print</a>
 | <a href="../JFXBD.pdf">PDF</a> | <a href="../JFXBD.epub">ePub</a> | <a href="../JFXBD.mobi">Mobi</a>
</div>

<div class="booktitle">JavaFX: Properties and Binding Tutorial</div>

<div class="contentarea clearboth">

<script type="text/javascript">

$(document).ready(function(){

//////////////////////
$(".trig1").click(function(){
        $("#panel1").toggle("fast"); <!--/*makes panel visible*/-->
        $(this).toggleClass("active"); <!--makes trigger expand out-->
        return false;
    });

///////////////////////

$("#X").click(function(){
      // trigger click is needed for css .active to work
	  $( ".trig1" ).trigger( "click" );
   return false;
    });

/*/////////////////////

$("#panel1").mouseleave(function(){
  $( ".trig1" ).trigger( "click" );
   return false;
});

/////////////////////*/
});

</script>


<!-- page navigation -->

<!--div id="tocbutton" ><span class="button"><a href="#mypanel"><img src="../../assets/img-common/3linemenu.png" alt="menu icon" />Menu</a></span></div-->

<div id="pagenav"><a class="button" title="Previous Page" href="preface.htm">Previous Page</a></div>

<article>

<!-- End Header --><a id="JFXBD107" name="JFXBD107" class="anchor"></a> <a id="sthref8" name="sthref8" class="anchor"></a>
<h1 class="chapter"><span class="secnum">1</span> Using JavaFX Properties and Binding</h1>
<a id="JFXBD108" name="JFXBD108" class="anchor"></a>
<p>In this tutorial you learn how to use properties and binding in JavaFX applications.</p>
<p>The tutorial describes relevant APIs and provides working examples that you can compile and run.</p>
<a id="JFXBD109" name="JFXBD109" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref9" name="sthref9" class="anchor"></a>
<h2 class="sect1">Overview</h2>
<p>For many years, the Java programming language has used the JavaBeans component architecture to represent the property of an object. This model consists of both an API and a design pattern; it is widely understood by Java application developers and development tools alike. This release introduces property support into JavaFX, support that is based on the proven JavaBeans model, but expanded and improved.</p>
<p>JavaFX properties are often used in conjunction with binding, a powerful mechanism for expressing direct relationships between variables. When objects participate in bindings, changes made to one object will automatically be reflected in another object. This can be useful in a variety of applications. For example, binding could be used in a bill invoice tracking program, where the total of all bills would automatically be updated whenever an individual bill is changed. Or, binding could be used in a graphical user interface (GUI) that automatically keeps its display synchronized with the application's underlying data.</p>
<p>Bindings are assembled from one or more sources, known as <span class="italic">dependencies</span>. A binding observes its list of dependencies for changes, and then updates itself automatically after a change has been detected.</p>
<p>The binding APIs are divided into two broad categories:</p>
<ol>
<li>
<p>The High-Level API: Provides a simple way to create bindings for the most common use cases. Its syntax is easy to learn and use, especially in environments that provide code completion, such as the NetBeans IDE.</p>
</li>
<li>
<p>The Low-Level API: Provides additional flexibility, and can be used by advanced developers in situations where the High-Level API is insufficient. The Low-Level API was designed for fast execution and small memory footprint.</p>
</li>
</ol>
<p>The remainder of this tutorial describes these APIs, and provides working code examples that you can compile and run.</p>
</div>
<!-- class="sect1" -->
<a id="JFXBD110" name="JFXBD110" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref10" name="sthref10" class="anchor"></a>
<h2 class="sect1">Understanding Properties</h2>
<p>As mentioned in the overview, JavaFX property support is based on the well-known property model established by the JavaBeans component architecture. This section provides a brief overview of what that means, then explains how properties apply to JavaFX.</p>
<p>The Java programming language makes it possible to encapsulate data within an object, but it does not enforce any specific naming conventions for the methods that you define. For example, your code might define a <code>Person</code> class, which encapsulates a first name and a last name. But without naming conventions, different programmers might choose different names for these methods: <code>read_first()</code>, <code>firstName()</code>, <code>getFN()</code>, etc. would all be perfectly valid choices. However, there is no guarantee that these names will be meaningful to other developers.</p>
<p>The JavaBeans component architecture addressed this problem by defining some simple naming conventions that bring consistency across projects. In JavaBeans programming, the full signatures for these methods would be: <code>public void setFirstName(String name)</code>, <code>public String getFirstName()</code>, <code>public void setLastName(String name)</code>, and <code>public String getLastName()</code>. This naming pattern is easily recognizable, both to human programmers and to editing tools, such as the NetBeans IDE. In JavaBeans terminology, the <code>Person</code> object is said to contain <code>firstName</code> and <code>lastName</code> <span class="italic">properties</span>.</p>
<p>The JavaBeans model also provides support for complex property types, plus an event delivery system. It also contains a number of support classes, all available as an API under the <code>java.beans</code> package. Therefore, mastering JavaBeans programming involves learning the required naming conventions and its corresponding API. (For more background reading on JavaBeans in general, see <a href="../../../tutorial/javabeans/">the JavaBeans lesson of the Java Tutorial</a>).</p>
<p>Similarly, understanding JavaFX properties also requires learning a few new APIs and naming conventions. In JavaFX, it is entirely possible that you will only be interested in <span class="italic">using</span> classes that contain properties (as opposed to implementing properties in your own custom classes), but <a href="#CHDEHBAC">Example 1-1</a> will familiarize you with the new method naming conventions that form the JavaFX property pattern. It defines a class named <code>Bill</code>, which implements a single property named <code>amountDue</code>.</p>
<div class="example"><a id="CHDEHBAC" name="CHDEHBAC" class="anchor"></a><a id="JFXBD111" name="JFXBD111" class="anchor"></a>
<p class="titleinexample">Example 1-1 Defining a Property</p>
<pre xml:space="preserve" class="oac_no_warn">package propertydemo;

import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
 
class Bill {
 
    // Define a variable to store the property
    private DoubleProperty amountDue = new SimpleDoubleProperty();
 
    // Define a getter for the property's value
    public final double getAmountDue(){return amountDue.get();}
 
    // Define a setter for the property's value
    public final void setAmountDue(double value){amountDue.set(value);}
 
     // Define a getter for the property itself
    public DoubleProperty amountDueProperty() {return amountDue;}
 
}
</pre></div>
<!-- class="example" -->
<p>The <code>amountDue</code> object &#x2014; an instance of the <code>javafx.beans.property.DoubleProperty</code> class &#x2014; is marked as <code>private</code> to encapsulate it from the outside world. This is standard practice in both Java and JavaBeans application development. Note however that the object's type is not one of the standard Java primitives, but rather, a new wrapper class that encapsulates a Java primitive and adds some extra functionality (the classes under <code>javafx.beans.property</code> all contain built-in support for observability and binding as part of their design).</p>
<p>The property method naming conventions are as follows:</p>
<ul>
<li>
<p>The <code>getAmountDue()</code> method is a standard getter that returns the current value of the <code>amountDue</code> property. By convention, this method is declared as <code>final</code>. Note that the return type for this method is <code>double,</code> not <code>DoubleProperty</code>.</p>
</li>
<li>
<p>The <code>setAmountDue(double)</code> method (also <code>final</code>) is a standard setter that allows a caller to set the property's value. The setter method is optional. Its parameter is also of type <code>double</code>.</p>
</li>
<li>
<p>Finally, the <code>amountDueProperty()</code> method defines the property getter. This is a new convention in which the method name contains the name of the property (<code>amountDue</code>, in this case), followed by the word "Property." The return type is the same as the property itself (<code>DoubleProperty</code>, in this example).</p>
</li>
</ul>
<p>When building GUI applications with JavaFX, you will notice that certain classes in the API already implement properties. For example, the <code>javafx.scene.shape.Rectangle</code> class contains properties for <code>arcHeight</code>, <code>arcWidth</code>, <code>height</code>, <code>width</code>, <code>x</code>, and <code>y</code>. For each of these properties there will be corresponding methods that match the conventions previously described. For example, <code>getArcHeight()</code>, <code>setArcHeight(double)</code>, <code>arcHeightProperty()</code>, which together indicate (to both developers and tools) that the given property exists.</p>
<p>You can also add a change listener to be notified when the property's value has changed, as shown in <a href="#CHDFJDCH">Example 1-2</a>.</p>
<div class="example"><a id="CHDFJDCH" name="CHDFJDCH" class="anchor"></a><a id="JFXBD112" name="JFXBD112" class="anchor"></a>
<p class="titleinexample">Example 1-2 Using a ChangeListener</p>
<pre xml:space="preserve" class="oac_no_warn">package propertydemo;
 
import javafx.beans.value.ObservableValue;
import javafx.beans.value.ChangeListener;
 
public class Main {
 
    public static void main(String[] args) {
 
      Bill electricBill = new Bill();
 
       electricBill.amountDueProperty().addListener(new ChangeListener(){
        @Override public void changed(ObservableValue o,Object oldVal, 
                 Object newVal){
             System.out.println("Electric bill has changed!");
        }
      });
     
      electricBill.setAmountDue(100.00);
     
    }
}
</pre></div>
<!-- class="example" -->
<p>Running this example will print the message "Electric bill has changed" to standard output, proving that the change listener notification is working.</p>
</div>
<!-- class="sect1" -->
<a id="JFXBD113" name="JFXBD113" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref11" name="sthref11" class="anchor"></a>
<h2 class="sect1">Using the High-Level Binding API</h2>
<p>The High-Level API is the quickest and easiest way to begin using bindings in your own applications. It consists of two parts: the Fluent API, and the <code>Bindings</code> class. The Fluent API exposes methods on the various dependency objects, whereas the <code>Bindings</code> class provides static factory methods instead.</p>
<p>To begin using the Fluent API, consider a simple use case in which two integers are bound so that their values are always added together. In <a href="#CHDBCEBA">Example 1-3</a>, there are three variables involved: <code>num1</code> (a dependency), <code>num2</code> (a dependency), and <code>sum</code> (the binding). The dependency types are both <code>IntegerProperty</code>, and the binding itself is <code>NumberBinding</code>.</p>
<div class="example"><a id="CHDBCEBA" name="CHDBCEBA" class="anchor"></a><a id="JFXBD114" name="JFXBD114" class="anchor"></a>
<p class="titleinexample">Example 1-3 Using the Fluent API</p>
<pre xml:space="preserve" class="oac_no_warn">package bindingdemo;
 
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.binding.NumberBinding;
 
public class Main {
 
    public static void main(String[] args) {
        IntegerProperty num1 = new SimpleIntegerProperty(1);
        IntegerProperty num2 = new SimpleIntegerProperty(2);
        NumberBinding sum = num1.add(num2);
        System.out.println(sum.getValue());
        num1.set(2);
        System.out.println(sum.getValue());
    }
}
</pre></div>
<!-- class="example" -->
<p>This code binds the two dependencies, prints their sum, then changes the value of <code>num1</code> and prints the sum again. The results are "3" and "4", which proves that the binding is working.</p>
<p>You could also use the <code>Bindings</code> class to do the same thing, as shown in <a href="#CHDGBJDJ">Example 1-4</a>.</p>
<div class="example"><a id="CHDGBJDJ" name="CHDGBJDJ" class="anchor"></a><a id="JFXBD115" name="JFXBD115" class="anchor"></a>
<p class="titleinexample">Example 1-4 Using the Bindings Class</p>
<pre xml:space="preserve" class="oac_no_warn">package bindingdemo;
 
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.binding.NumberBinding;
import javafx.beans.binding.Bindings;
 
public class Main {
 
    public static void main(String[] args) {
       IntegerProperty num1 = new SimpleIntegerProperty(1);
       IntegerProperty num2 = new SimpleIntegerProperty(2);
       NumberBinding sum = Bindings.add(num1,num2);
       System.out.println(sum.getValue());
       num1.setValue(2);
       System.err.println(sum.getValue());
    }
}
</pre></div>
<!-- class="example" -->
<p><a href="#CHDCDBDD">Example 1-5</a> combines the two approaches:</p>
<div class="example"><a id="CHDCDBDD" name="CHDCDBDD" class="anchor"></a><a id="JFXBD116" name="JFXBD116" class="anchor"></a>
<p class="titleinexample">Example 1-5 Combining Both Approaches</p>
<pre xml:space="preserve" class="oac_no_warn">package bindingdemo;
 
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.binding.NumberBinding;
import javafx.beans.binding.Bindings;
 
public class Main {
 
    public static void main(String[] args) {
       IntegerProperty num1 = new SimpleIntegerProperty(1);
       IntegerProperty num2 = new SimpleIntegerProperty(2);
       IntegerProperty num3 = new SimpleIntegerProperty(3);
       IntegerProperty num4 = new SimpleIntegerProperty(4);
       NumberBinding total =
         Bindings.add(num1.multiply(num2),num3.multiply(num4));
       System.out.println(total.getValue());
       num1.setValue(2);
       System.err.println(total.getValue());
    }
}
</pre></div>
<!-- class="example" -->
<p><a href="#CHDCDBDD">Example 1-5</a> modifies the code to invoke the <code>multiply</code> method from the Fluent API, and <code>add</code> from the <code>Bindings</code> class. You should also know that the High-Level API lets you mix types when defining arithmetic operations. The type of the result is defined by the same rules as the Java programming language:</p>
<ol>
<li>
<p>If one of the operands is a <code>double</code>, the result is a <code>double</code>.</p>
</li>
<li>
<p>If not and one of the operands is a <code>float</code>, the result is a <code>float</code>.</p>
</li>
<li>
<p>If not and one of the operands is a <code>long</code>, the result is a <code>long</code>.</p>
</li>
<li>
<p>The result is an integer otherwise.</p>
</li>
</ol>
<p>The next section explores observability, and demonstrates how invalidation listeners differ from change listeners.</p>
</div>
<!-- class="sect1" -->
<a id="JFXBD117" name="JFXBD117" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref12" name="sthref12" class="anchor"></a>
<h2 class="sect1">Exploring Observable, ObservableValue, InvalidationListener, and ChangeListener</h2>
<p>The binding API defines a set of interfaces that enable objects to be notified when a value change or invalidation takes place. The <code>Observable</code> and <code>ObservableValue</code> interfaces fire the change notifications, and the <code>InvalidationListener</code> and <code>ChangeListener</code> interfaces receive them. The difference between the two is that <code>ObservableValue</code> wraps a value and fires its changes to any registered <code>ChangeListener</code>, whereas <code>Observable</code> (which does <span class="italic">not</span> wrap a value) fires its changes to any registered <code>InvalidationListener</code>.</p>
<p>The JavaFX binding and property implementations all support lazy evaluation, which means that when a change occurs, the value is not immediately recomputed. Recomputation happens later, if and when the value is subsequently requested.</p>
<p>In <a href="#CHDCHHEJ">Example 1-6</a>, the bill total (a binding) will be marked as invalid the first time it detects a change in one of its dependencies. However, the binding object will recalculate itself only if the total is actually requested again.</p>
<div class="example"><a id="CHDCHHEJ" name="CHDCHHEJ" class="anchor"></a><a id="JFXBD118" name="JFXBD118" class="anchor"></a>
<p class="titleinexample">Example 1-6 Using an InvalidationListener</p>
<pre xml:space="preserve" class="oac_no_warn">package bindingdemo;
 
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.binding.NumberBinding;
import javafx.beans.binding.Bindings;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
 
class Bill {
 
    // Define the property
    private DoubleProperty amountDue = new SimpleDoubleProperty();
 
    // Define a getter for the property's value
    public final double getAmountDue(){return amountDue.get();}
 
    // Define a setter for the property's value
    public final void setAmountDue(double value){amountDue.set(value);}
 
     // Define a getter for the property itself
    public DoubleProperty amountDueProperty() {return amountDue;}
 
}
 
public class Main {
 
    public static void main(String[] args) {
 
        Bill bill1 = new Bill();
        Bill bill2 = new Bill();
        Bill bill3 = new Bill();
 
        NumberBinding total =
          Bindings.add(bill1.amountDueProperty().add(bill2.amountDueProperty()),
              bill3.amountDueProperty());
        total.addListener(new InvalidationListener() {
 
        @Override public void invalidated(Observable o) {
                System.out.println("The binding is now invalid.");
            }
        });

        // First call makes the binding invalid
        bill1.setAmountDue(200.00);

        // The binding is now invalid
        bill2.setAmountDue(100.00);
        bill3.setAmountDue(75.00);

        // Make the binding valid...
        System.out.println(total.getValue());

        // Make invalid... 
        bill3.setAmountDue(150.00);

        // Make valid...
        System.out.println(total.getValue());
    }
}
</pre></div>
<!-- class="example" -->
<p>By changing the value of a single bill, the binding becomes invalid, and the invalidation listener will fire. But if the binding is already invalid, the invalidation listener will not fire again, even if another bill changes. (In <a href="#CHDCHHEJ">Example 1-6</a>, invoking <code>total.getValue()</code> moves the binding from invalid to valid.) We know this because a subsequent change to any bill in the dependency list will cause the invalidation listener to fire again. This would not happen if the binding was still invalid.</p>
<p>Note that registering a <code>ChangeListener</code> will enforce eager computation, even if the implementation of the <code>ObservableValue</code> supports lazy evaluation. For a lazily evaluated value, it is not possible to know if an invalid value really has changed until it is recomputed. For this reason, generating change events requires eager evaluation, while invalidation events can be generated for both eager and lazy implementations.</p>
</div>
<!-- class="sect1" -->
<a id="JFXBD119" name="JFXBD119" class="anchor"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref13" name="sthref13" class="anchor"></a>
<h2 class="sect1">Using the Low-Level Binding API</h2>
<p>If the High-Level API is not enough to satisfy your requirements, you can always use the Low-Level API instead. The Low-Level API is for developers who require more flexibility (or better performance) than that offered by the High-Level API.</p>
<p><a href="#CHDHDIDF">Example 1-7</a> shows a basic example of using the Low-Level API.</p>
<div class="example"><a id="CHDHDIDF" name="CHDHDIDF" class="anchor"></a><a id="JFXBD120" name="JFXBD120" class="anchor"></a>
<p class="titleinexample">Example 1-7 Using the Low-Level API</p>
<pre xml:space="preserve" class="oac_no_warn">package bindingdemo;
 
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.binding.DoubleBinding;
 
public class Main {
 
    public static void main(String[] args) {
 
        final DoubleProperty a = new SimpleDoubleProperty(1);
        final DoubleProperty b = new SimpleDoubleProperty(2);
        final DoubleProperty c = new SimpleDoubleProperty(3);
        final DoubleProperty d = new SimpleDoubleProperty(4);
 
        DoubleBinding db = new DoubleBinding() {
 
            {
                super.bind(a, b, c, d);
            }
 
            @Override
            protected double computeValue() {
                return (a.get() * b.get()) + (c.get() * d.get());
            }
        };
 
        System.out.println(db.get());
        b.set(3);
        System.out.println(db.get());
    }
}
</pre></div>
<!-- class="example" -->
<p>Using the Low-Level API involves extending one of the binding classes and overriding its <code>computeValue()</code> method to return the current value of the binding. <a href="#CHDHDIDF">Example 1-7</a> does this with a custom subclass of <code>DoubleBinding</code>. The invocation of <code>super.bind()</code> passes the dependencies up to <code>DoubleBinding</code> so that the default invalidation behavior is retained. It is generally not necessary for you to check if the binding is invalid; this behavior is provided for you by the base class.</p>
<p>You now know enough information to begin using the Low-Level API.</p>
</div>
<!-- class="sect1" -->

</article>

<div id=rightslider>


<!--/*///////////////////////////////////////////////////////////////////////
PANEL 1 /* table of contents */
///////////////////////////////////////////////////////////////////////*/-->

<div id="panel1" class="panel shadow">
<div class="panellists">
<div style="float:right;"><a href="#" id="X"><img src="../../assets/img-common/X.png"   alt="Close Window" title="Close Table of Contents Window" /></a></div>
	<h3>Table of Contents</h3>
		<script type="text/javascript" src="../../assets/js/tree.menu.js" >

/***********************************************
* Simple Tree Menu - (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

/*http://www.dynamicdrive.com/dynamicindex1/navigate1.htm*/
</script>

<h2>JavaFX: Properties and Binding Tutorial</h2>

<a href="javascript:ddtreemenu.flatten('treemenu1', 'expand')">Expand</a> | <a href="javascript:ddtreemenu.flatten('treemenu1', 'contact')">Collapse</a>

<ul id="treemenu1" class="treeview">
    <li><a href="title.htm#top">Title and Copyright Information</a></li>
    <li><a href="preface.htm#sthref2">Preface</a>
      <ul>
        <li><a href="preface.htm#sthref3">Audience</a></li>
        <li><a href="preface.htm#sthref4">Documentation Accessibility</a></li>
        <li><a href="preface.htm#sthref6">Related Documents</a></li>
        <li><a href="preface.htm#sthref7">Conventions</a></li>
      </ul>
    </li>
    <li><a class="selected" href="binding.htm#sthref8">1 Using JavaFX Properties and Binding</a>
      <ul>
        <li><a href="binding.htm#sthref9">Overview</a></li>
        <li><a href="binding.htm#sthref10">Understanding Properties</a></li>
        <li><a href="binding.htm#sthref11">Using the High-Level Binding API</a></li>
        <li><a href="binding.htm#sthref12">Exploring Observable, ObservableValue, InvalidationListener, and ChangeListener</a></li>
        <li><a href="binding.htm#sthref13">Using the Low-Level Binding API</a></li>
      </ul>
    </li>
</ul>


<script type="text/javascript">

//ddtreemenu.createTree(treeid, enablepersist, opt_persist_in_days (default is 1))

ddtreemenu.createTree("treemenu1", true)
//ddtreemenu.createTree("treemenu2", false)

</script>
</div>
<div style="clear:both;"></div>
</div>


<!--/*///////////////////////////////////////////////////////////////////////
TABS 
///////////////////////////////////////////////////////////////////////*/-->

<a class="trig1 trigger shadow" alt="Table of Contents" title="Contents" href="#"></a>

</div>

<div id="pagenav2"><a class="button" title="Previous Page" href="preface.htm">Previous Page</a><a href="#top"  class="button" title="Top of Page" target="_self">Top of Page</a></div>

<br class="clearfloat" />
<span class="clearfloat"></span>
</div> <!-- .contentarea -->
</div> <!-- .main -->
</div> <!-- #main-container --><!-- content -->

<div class="main wrapper">

<div class="socialicons">

<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a>


<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a>


<a href="" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>


<!--
<a target="_blank" href="https://www.facebook.com/ilovejava" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Facebook" class="socialIcon facebook" /></a> 

<a target="_blank" href="https://www.twitter.com/java" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="Twitter" class="socialIcon twitter" /></a> 

<a target="_blank" href="http://blogs.oracle.com/thejavatutorials/feed/entries/rss" target="_blank"><img src="../../assets/img-common/f_spacer.gif" alt="RSS Feeds" class="socialIcon rss" /></a>
-->
</div>
<div class="SocialBar">


<div id="tw-like">
<!-- from:twitter:https://twitter.com/about/resources/buttons#tweet -->
<a target="_blank" href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>



<div id="go-like">
<!-- https://developers.google.com/+/web/+1button/ -->

<!-- Place this tag where you want the +1 button to render. -->
<div class="g-plusone" data-size="medium" data-annotation="none"></div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</div>




<!--<div id="fb-like">

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like" data-href="https://www.facebook.com/OracleCloudComputing" data-width="450" data-layout="button_count" data-show-faces="false" data-send="true"></div>
</div>-->


</div>
</div>


<div class="footer-containerbook ">
 <footer>
	<span style="display:block;">Copyright &copy; 2011, 2014, Oracle and/or its affiliates. All rights reserved. <a href="../../assets/cpyr.htm">Legal Notices</a></span>
 </footer>
</div>
        
        <br />
        
        <!--<script src="../../assets/js/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/jquery-1.8.0.min.js"><\/script>')</script>-->

<!-- Start SiteCatalyst code -->
<script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
<!-- End SiteCatalyst code -->


</body>
</html>
